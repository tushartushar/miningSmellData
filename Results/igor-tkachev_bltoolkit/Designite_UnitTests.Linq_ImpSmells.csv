Implementation smell,Namespace,Class,File,Method,Description
Long Method,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin9,The method has 105 lines of code.
Long Method,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The method has 108 lines of code.
Long Identifier,Data.Linq.ProviderSpecific,LongFieldName,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,,The length of the parameter VeryVeryVeryVeryLongFieldName1 is 30.
Long Identifier,Data.Linq.ProviderSpecific,LongFieldName,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,,The length of the parameter VeryVeryVeryVeryLongFieldName2 is 30.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapWhere1,The length of the statement  "					var result = db.GetTable<TestTable1>().Where(r => r.Id == RID && r.TestField == TestEnum1.Value2).Select(r => r.TestField).FirstOrDefault(); " is 140.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapWhere2,The length of the statement  "					var result = db.GetTable<TestTable2>().Where(r => r.Id == RID && r.TestField == TestEnum2.Value2).Select(r => r.TestField).FirstOrDefault(); " is 140.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet1,The length of the statement  "					var result = db.GetTable<RawTable>().Where(r => r.Id == RID && r.TestField == VAL2).Select(r => r.TestField).FirstOrDefault(); " is 126.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet2,The length of the statement  "					var result = db.GetTable<RawTable>().Where(r => r.Id == RID && r.TestField == VAL2).Select(r => r.TestField).FirstOrDefault(); " is 126.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet4,The length of the statement  "					var result = db.GetTable<RawTable>().Where(r => r.Id == RID && r.TestField == VAL2).Select(r => r.TestField).FirstOrDefault(); " is 126.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet5,The length of the statement  "					var result = db.GetTable<RawTable>().Where(r => r.Id == RID && r.TestField == VAL2).Select(r => r.TestField).FirstOrDefault(); " is 126.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapContains2,The length of the statement  "					Assert.That(db.GetTable<TestTable2>().Where(r => r.Id == RID && new[] { TestEnum2.Value2 }.Contains(r.TestField)).Count()' Is.EqualTo(1)); " is 138.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapCustomPredicate1,The length of the statement  "					var filterExpression = Expression.Equal(Expression.Field(entityParameter' "TestField")' Expression.Constant(TestEnum1.Value2)); " is 127.
Long Statement,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapCustomPredicate2,The length of the statement  "					var filterExpression = Expression.Equal(Expression.Field(entityParameter' "TestField")' Expression.Constant(TestEnum2.Value2)); " is 127.
Long Statement,Data.Linq,TestAK107,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestAK107.cs,ContractLinqManyInsert,The length of the statement  "				db.GetTable<User>().Insert(db.GetTable<Contract>()' x => new Contract { UserId = x.Id' ContractNo = 1' Name = "contract" }); " is 124.
Long Statement,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,Condition1,The length of the statement  "				from p in    Person select new { Name = !string.IsNullOrEmpty(p.FirstName) ? p.FirstName : !string.IsNullOrEmpty(p.MiddleName) ? p.MiddleName : p.LastName }' " is 157.
Long Statement,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,Condition1,The length of the statement  "				from p in db.Person select new { Name = !string.IsNullOrEmpty(p.FirstName) ? p.FirstName : !string.IsNullOrEmpty(p.MiddleName) ? p.MiddleName : p.LastName })); " is 159.
Long Statement,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,Condition2,The length of the statement  "				from p in    Person select new { Name = !p.FirstName.IsNullOrEmpty() ? p.FirstName : !p.MiddleName.IsNullOrEmpty() ? p.MiddleName : p.LastName }' " is 145.
Long Statement,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,Condition2,The length of the statement  "				from p in db.Person select new { Name = !p.FirstName.IsNullOrEmpty() ? p.FirstName : !p.MiddleName.IsNullOrEmpty() ? p.MiddleName : p.LastName })); " is 147.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDateTime,The length of the statement  "				from p in from t in db.Types select DateTime.Parse(t.DateTimeValue.Year + "-01-01 00:00:00") where p.Day > 0 select p)); " is 120.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ConvertToDateTime,The length of the statement  "				from p in from t in    Types select Convert.ToDateTime(t.DateTimeValue.Year + "-01-01 00:00:00") where p.Day > 0 select p' " is 122.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ConvertToDateTime,The length of the statement  "				from p in from t in db.Types select Convert.ToDateTime(t.DateTimeValue.Year + "-01-01 00:00:00") where p.Day > 0 select p)); " is 124.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultChar,The length of the statement  "			ForEachProvider(new[] { "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.Firebird' ProviderName.PostgreSQL }' db => AreEqual( " is 143.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultVarChar,The length of the statement  "			ForEachProvider(new[] { "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.Firebird' ProviderName.PostgreSQL }' db => AreEqual( " is 143.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultNChar,The length of the statement  "			ForEachProvider(new[] { "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.Firebird' ProviderName.PostgreSQL }' db => AreEqual( " is 143.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultNVarChar,The length of the statement  "			ForEachProvider(new[] { "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.Firebird' ProviderName.PostgreSQL }' db => AreEqual( " is 143.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,DecimalToString,The length of the statement  "				from p in from t in    Types select Convert.ToString(t.MoneyValue) where p.Length > 0 select p.InvariantDecimal().TrimEnd('0'' '.')' " is 132.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,DecimalToString,The length of the statement  "				from p in from t in db.Types select Convert.ToString(t.MoneyValue) where p.Length > 0 select p.InvariantDecimal().TrimEnd('0'' '.'))); " is 134.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,GuidToString,The length of the statement  "				from t in    Types where Sql.ConvertTo<string>.From(t.GuidValue) == "febe3eca-cb5f-40b2-ad39-2979d312afca" select t.GuidValue' " is 126.
Long Statement,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,GuidToString,The length of the statement  "				from t in db.Types where Sql.ConvertTo<string>.From(t.GuidValue) == "febe3eca-cb5f-40b2-ad39-2979d312afca" select t.GuidValue)); " is 128.
Long Statement,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,EqualsNull3,The length of the statement  "					from employee in    Employee where employee.ReportsToEmployee != null select new { employee.ReportsToEmployee' employee }' " is 122.
Long Statement,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,EqualsNull3,The length of the statement  "					from employee in db.Employee where employee.ReportsToEmployee != null select new { employee.ReportsToEmployee' employee }); " is 123.
Long Statement,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat90,The length of the statement  "				var fullJoinSql = fullJoin.ToString(); // BLToolkit.Data.Linq.LinqException : Types in Concat are constructed incompatibly. " is 123.
Long Statement,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The length of the statement  "                        var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2)); " is 147.
Long Statement,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The length of the statement  "                        var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2)); " is 133.
Long Statement,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy23,The length of the statement  "			ForEachProvider(new[] { ProviderName.SqlCe' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' "Sql2000"' ProviderName.Sybase' ProviderName.Access }' db => AreEqual( " is 168.
Long Statement,Data.Linq,ParentEx,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.cs,Test,The length of the statement  "					inheritance.Parent.Select(p => new ParentEx { Field1 = true' ParentID = p.ParentID' Value1 = p.Value1 }).Cast<Parent>()' " is 120.
Long Statement,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MapMember3,The length of the statement  "			ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(Parent.Select(p => Count3(p' n))' db.Parent.Select(p => Count3(p' n)))); " is 133.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The length of the statement  "				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t)); " is 120.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The length of the statement  "				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t)); " is 120.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round6,The length of the statement  "				from t in from p in    Types select Math.Round((double)p.MoneyValue' MidpointRounding.AwayFromZero) where t != 0 select t' " is 122.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round6,The length of the statement  "				from t in from p in db.Types select Math.Round((double)p.MoneyValue' MidpointRounding.AwayFromZero) where t != 0 select t)); " is 124.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round10,The length of the statement  "				from t in from p in    Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t' " is 121.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round10,The length of the statement  "				from t in from p in db.Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t)); " is 123.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round11,The length of the statement  "				from t in from p in    Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5)' " is 134.
Long Statement,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round11,The length of the statement  "				from t in from p in db.Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5))); " is 136.
Long Statement,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any12,The length of the statement  "				from p in             Parent    where             Child.   Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p' " is 120.
Long Statement,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any12,The length of the statement  "				from p in db.GetTable<Parent>() where db.GetTable<Child>().Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p)); " is 122.
Long Statement,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,AllNestedTest,The length of the statement  "					where    Order.Where(o => o.Customer == c).All(o =>    Employee.Where(e => o.Employee == e).Any(e => e.FirstName.StartsWith("A"))) " is 130.
Long Statement,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,AllNestedTest,The length of the statement  "					where db.Order.Where(o => o.Customer == c).All(o => db.Employee.Where(e => o.Employee == e).Any(e => e.FirstName.StartsWith("A"))) " is 130.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The length of the statement  "				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()' " is 132.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The length of the statement  "				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault())); " is 137.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The length of the statement  "				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()' " is 131.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The length of the statement  "				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault())); " is 136.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,SubSub2,The length of the statement  "				new[] { ProviderName.Access' ProviderName.DB2' "Oracle"' ProviderName.OracleManaged' "DevartOracle"' "Sql2000"' ProviderName.MySql' ProviderName.Sybase' ProviderName.Informix }' " is 177.
Long Statement,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,SubSub201,The length of the statement  "				//new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.DB2' "Oracle"' ProviderName.MySql' ProviderName.Sybase }' " is 121.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The length of the statement  "				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' " is 140.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,InsertBinary1,The length of the statement  "				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' " is 140.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTime22,The length of the statement  "					ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.Sybase " is 141.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTime23,The length of the statement  "					ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.Sybase " is 141.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTime24,The length of the statement  "					ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.Sybase " is 141.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The length of the statement  "					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t' " is 123.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The length of the statement  "					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t)); " is 125.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,CompareNullableBoolean3,The length of the statement  "				from t in    Types where (param1 == null || t.SmallIntValue == param1) && (param2 == null || t.BoolValue == param2) select t' " is 125.
Long Statement,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,CompareNullableBoolean3,The length of the statement  "				from t in db.Types where (param1 == null || t.SmallIntValue == param1) && (param2 == null || t.BoolValue == param2) select t)); " is 127.
Long Statement,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,NewGuid1,The length of the statement  "			ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db => AreEqual( " is 149.
Long Statement,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,NewGuid2,The length of the statement  "			ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db => " is 139.
Long Statement,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,CustomFunc,The length of the statement  "			Expressions.MapMember<Person>(p => p.FullName()' (Expression<Func<Person'string>>)(p => p.LastName + "' " + p.FirstName)); " is 122.
Long Statement,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The length of the statement  "			ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3))); " is 122.
Long Statement,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip3,The length of the statement  "			ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Skip(3))); " is 126.
Long Statement,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip5,The length of the statement  "			ForEachProvider(db => AreEqual(expected' db.Child.OrderByDescending(c => c.ChildID).ThenBy(c => c.ParentID + 1).Skip(3))); " is 122.
Long Statement,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipCount,The length of the statement  "			ForEachProvider(new[] { "Sql2000"' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual( " is 122.
Long Statement,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTakeCount,The length of the statement  "			ForEachProvider(new[] { "Sql2000"' ProviderName.SqlCe' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual( " is 142.
Long Statement,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin3,The length of the statement  "						from p2 in db.Person join p3 in db.Person on new { p2.ID' p2.LastName } equals new { p3.ID' p3.LastName } select new { p2' p3 } " is 127.
Long Statement,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,LeftJoinTest,The length of the statement  "						from p2 in g.DefaultIfEmpty() // yes I know the join will always succeed and it'll never be null' but just for test's sake :) " is 125.
Long Statement,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,LeftJoinTest2,The length of the statement  "						from p2 in g.DefaultIfEmpty() // yes I know the join will always succeed and it'll never be null' but just for test's sake :) " is 125.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,Parse1,The length of the statement  "				from d in from t in    Types select DateTime.Parse(Sql.ConvertTo<string>.From(t.DateTimeValue)) where d.Day > 0 select d.Date' " is 126.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,Parse1,The length of the statement  "				from d in from t in db.Types select DateTime.Parse(Sql.ConvertTo<string>.From(t.DateTimeValue)) where d.Day > 0 select d.Date)); " is 128.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,Parse2,The length of the statement  "				from d in from t in    Types select           DateTime.Parse(t.DateTimeValue.Year + "-02-24 00:00:00")  where d.Day > 0 select d' " is 129.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,Parse2,The length of the statement  "				from d in from t in db.Types select Sql.AsSql(DateTime.Parse(t.DateTimeValue.Year + "-02-24 00:00:00")) where d.Day > 0 select d)); " is 131.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateDay,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffDay,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateHour,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffHour,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffHour,The length of the statement  "					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Hour' t.DateTimeValue' t.DateTimeValue.AddHours(100))))); " is 120.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateMinute,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMinute,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMinute,The length of the statement  "					from t in    Types select           Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))' " is 121.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMinute,The length of the statement  "					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))))); " is 124.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateSecond,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffSecond,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffSecond,The length of the statement  "					from t in    Types select           Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))' " is 121.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffSecond,The length of the statement  "					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))))); " is 124.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateMillisecond,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMillisecond,The length of the statement  "				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' " is 173.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMillisecond,The length of the statement  "					from t in    Types select           Sql.DateDiff(Sql.DateParts.Millisecond' t.DateTimeValue' t.DateTimeValue.AddSeconds(1))' " is 124.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMillisecond,The length of the statement  "					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Millisecond' t.DateTimeValue' t.DateTimeValue.AddSeconds(1))))); " is 127.
Long Statement,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The length of the statement  "				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t)); " is 121.
Long Statement,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Basic61,The length of the statement  "				db.Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3))); " is 122.
Long Statement,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,NewWithExpr,The length of the statement  "			TestPerson(1' "John1"' db => from p in db.Person select new Person(p.ID) { FirstName = (p.FirstName + "1\r\r\r").TrimEnd('\r') }); " is 130.
Long Statement,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MutiplySelect12,The length of the statement  "				var selectCount = db.LastQuery.Split(' '' '\t'' '\n'' '\r').Count(s => s.Equals("select"' StringComparison.InvariantCultureIgnoreCase)); " is 136.
Long Statement,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Coalesce4,The length of the statement  "				select Sql.AsSql((from ch in    Child where ch.ChildID == c.ChildID select ch.Parent.Value1).FirstOrDefault() ?? c.ChildID)' " is 124.
Long Statement,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Coalesce4,The length of the statement  "				select Sql.AsSql((from ch in db.Child where ch.ChildID == c.ChildID select ch.Parent.Value1).FirstOrDefault() ?? c.ChildID))); " is 126.
Long Statement,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,ProjectionTest1,The length of the statement  "				from c in db.Child select new { c.ChildID' ID = 0' ID1 = c.ParentID2.ParentID2' c.ParentID2.Value' ID2 = c.ParentID })); " is 120.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce2,The length of the statement  "			ForEachProvider(db => Assert.AreEqual(1' (from p in db.Parent where p.ParentID == 1 ? true : false select p).ToList().Count)); " is 126.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce3,The length of the statement  "			ForEachProvider(db => Assert.AreEqual(1' (from p in db.Parent where p.ParentID != 1 ? false: true select p).ToList().Count)); " is 125.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareNullable2,The length of the statement  "			ForEachProvider(db => Assert.AreEqual(1' (from p in db.Parent where p.ParentID == p.Value1 && p.Value1 == 1 select p).ToList().Count)); " is 135.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareNullable3,The length of the statement  "			ForEachProvider(db => Assert.AreEqual(1' (from p in db.Parent where p.Value1 == p.ParentID && p.Value1 == 1 select p).ToList().Count)); " is 135.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition2,The length of the statement  "				where p.ParentID == p1 && p.Value1 == p1 || p.ParentID == p2 && (p.ParentID != p3 || p.ParentID == p4) && p.Value1.HasValue " is 123.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition2,The length of the statement  "				where p.ParentID == p1 && p.Value1 == p1 || p.ParentID == p2 && (p.ParentID != p3 || p.ParentID == p4) && p.Value1.HasValue " is 123.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The length of the statement  "				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }); " is 209.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The length of the statement  "				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }); " is 220.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The length of the statement  "				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null }); " is 199.
Long Statement,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The length of the statement  "				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second }); " is 172.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The length of the statement  "					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 })); " is 120.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The length of the statement  "					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 })); " is 126.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update3,The length of the statement  "					Assert.AreEqual(1' db.Child.Where(c => c.ChildID == id && c.Parent.Value1 == 1).Update(c => new Child { ChildID = c.ChildID + 1 })); " is 132.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update9,The length of the statement  "			ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db => " is 256.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update10,The length of the statement  "			ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db => " is 256.
Long Statement,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update12,The length of the statement  "					Assert.AreEqual(1' parent3.Where(_ => _.ParentID2 == id).Set(_ => _.ParentID2' id+1).Set(_ => _.Value' _ => _.ParentID2).Update()); " is 131.
Long Statement,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The length of the statement  "					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete()); " is 137.
Long Statement,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The length of the statement  "				res.ForEach(_=> { Assert.AreEqual(_.ID' _.MoneyValue); Assert.AreEqual(tomorrow' _.DateTimeValue); Assert.AreEqual(121' _.SmallIntValue);}); " is 140.
Long Statement,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The length of the statement  "				res.ForEach(_=> { Assert.AreEqual(_.ID+1' _.MoneyValue); Assert.AreEqual(tomorrow' _.DateTimeValue); Assert.AreEqual(131' _.SmallIntValue);}); " is 142.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The length of the statement  "			ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db => " is 139.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The length of the statement  "			ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db => " is 139.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The length of the statement  "							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union( " is 120.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The length of the statement  "							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) })); " is 128.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The length of the statement  "						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }' " is 201.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The length of the statement  "						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }' " is 204.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }' " is 201.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }' " is 204.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The length of the statement  "					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }' " is 193.
Long Statement,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The length of the statement  "					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }' " is 204.
Long Statement,Data.Linq.Exceptions,DataExceptionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\DataExceptionTest.cs,ParameterPrefixTest,The length of the statement  "				using (var db = new DbManager(new MySqlDataProvider()' "Server=DBHost;Port=3306;Database=nodatabase;Uid=bltoolkit;Pwd=TestPassword;")) " is 134.
Long Statement,Data.Exceptions,DmlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\DmlTest.cs,InsertOrUpdate2,The length of the statement  "				Assert.IsTrue(ex.Message.StartsWith("InsertOrUpdate method requires the 'Patient.PersonID' field to be included in the insert setter.")); " is 137.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The length of the statement  "				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }' " is 149.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The length of the statement  "				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }' " is 149.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }' " is 200.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }' " is 203.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }' " is 200.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The length of the statement  "					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }' " is 203.
Long Statement,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,CanInsertProductWithAccessorTest,The length of the statement  "				var id = productEntityAccesor.Insert(new Product { Name = "product name test"' Description = "product description test" }); " is 123.
Long Statement,Data.Linq.ProviderSpecific,MsSql2008,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\MsSql2008s.cs,SqlTypeTest,The length of the statement  "				db.SetCommand(@"UPDATE LinqDataTypes SET SmallIntValue = @value WHERE ID = 1"' db.Parameter("value"' (ushort)value)).ExecuteNonQuery(); " is 135.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Long Statement,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The length of the statement  "					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }' " is 297.
Empty Catch Block,Data.Linq,Cleaner,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,Dispose,The method has an empty catch block.
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet3,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable  					{  						Id = RID'  						Int32Field = 3  					});    					db.GetTable<TestTable2>()  						.Where(r => r.Id == RID && r.Int32Field == TestEnum3.Value1)  						.Set(r => r.Int32Field' () => TestEnum3.Value2).Update();  					Assert.True(1 == db.GetTable<RawTable>().Where(r => r.Id == RID && r.Int32Field == 4).Count());  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet3,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable  					{  						Id = RID'  						Int32Field = 3  					});    					db.GetTable<TestTable2>()  						.Where(r => r.Id == RID && r.Int32Field == TestEnum3.Value1)  						.Set(r => r.Int32Field' () => TestEnum3.Value2).Update();  					Assert.True(1 == db.GetTable<RawTable>().Where(r => r.Id == RID && r.Int32Field == 4).Count());  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet6,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable  					{  						Id = RID'  						Int32Field = 3  					});    					db.GetTable<NullableTestTable2>()  						.Where(r => r.Id == RID && r.Int32Field == TestEnum3.Value1)  						.Set(r => r.Int32Field' () => TestEnum3.Value2).Update();  					Assert.True(1 == db.GetTable<RawTable>().Where(r => r.Id == RID && r.Int32Field == 4).Count());  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,EnumMapSet6,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable  					{  						Id = RID'  						Int32Field = 3  					});    					db.GetTable<NullableTestTable2>()  						.Where(r => r.Id == RID && r.Int32Field == TestEnum3.Value1)  						.Set(r => r.Int32Field' () => TestEnum3.Value2).Update();  					Assert.True(1 == db.GetTable<RawTable>().Where(r => r.Id == RID && r.Int32Field == 4).Count());  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,Test_4_1_18_Regression1,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable()  					{  						Id = RID'  						TestField = VAL2'  						Int32Field = 10  					});    					var result = db.GetTable<TestTable3>().Where(r => r.ID == RID).Select(_ => new  					{  						Target = _.TargetType != null && _.TargetID != null  						  ? new ObjectReference(_.TargetType.Value' _.TargetID.Value)  						  : default(ObjectReference?)  					})  					.ToArray();    					Assert.AreEqual(1' result.Length);  					Assert.NotNull(result[0].Target);  					Assert.AreEqual(10' result[0].Target.Value.TargetID);  					Assert.AreEqual(TestEnum1.Value2' result[0].Target.Value.TargetType);  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,Test_4_1_18_Regression1,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable()  					{  						Id = RID'  						TestField = VAL2'  						Int32Field = 10  					});    					var result = db.GetTable<TestTable3>().Where(r => r.ID == RID).Select(_ => new  					{  						Target = _.TargetType != null && _.TargetID != null  						  ? new ObjectReference(_.TargetType.Value' _.TargetID.Value)  						  : default(ObjectReference?)  					})  					.ToArray();    					Assert.AreEqual(1' result.Length);  					Assert.NotNull(result[0].Target);  					Assert.AreEqual(10' result[0].Target.Value.TargetID);  					Assert.AreEqual(TestEnum1.Value2' result[0].Target.Value.TargetType);  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,Test_4_1_18_Regression2,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable()  					{  						Id = RID'  						TestField = (long)TestEnum2.Value2'  						Int32Field = 10  					});    					var result = db.GetTable<TestTable4>().Where(r => r.ID == RID).Select(_ => new  					{  						Target = _.TargetType != null && _.TargetID != null  						  ? new ObjectReference2(_.TargetType.Value' _.TargetID.Value)  						  : default(ObjectReference2?)  					})  					.ToArray();    					Assert.AreEqual(1' result.Length);  					Assert.NotNull(result[0].Target);  					Assert.AreEqual(10' result[0].Target.Value.TargetID);  					Assert.AreEqual(TestEnum2.Value2' result[0].Target.Value.TargetType);  				}  			});
Magic Number,Data.Linq,EnumMapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\EnumMapping.cs,Test_4_1_18_Regression2,The following statement contains a magic number: ForEachProvider(db =>  			{  				using (new Cleaner(db))  				{  					db.GetTable<RawTable>().Insert(() => new RawTable()  					{  						Id = RID'  						TestField = (long)TestEnum2.Value2'  						Int32Field = 10  					});    					var result = db.GetTable<TestTable4>().Where(r => r.ID == RID).Select(_ => new  					{  						Target = _.TargetType != null && _.TargetID != null  						  ? new ObjectReference2(_.TargetType.Value' _.TargetID.Value)  						  : default(ObjectReference2?)  					})  					.ToArray();    					Assert.AreEqual(1' result.Length);  					Assert.NotNull(result[0].Target);  					Assert.AreEqual(10' result[0].Target.Value.TargetID);  					Assert.AreEqual(TestEnum2.Value2' result[0].Target.Value.TargetType);  				}  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,NewCondition,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select new { Value = p.Value1 != null ? p.Value1 : 100 }'  				from p in db.Parent select new { Value = p.Value1 != null ? p.Value1 : 100 }));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,NewCondition,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select new { Value = p.Value1 != null ? p.Value1 : 100 }'  				from p in db.Parent select new { Value = p.Value1 != null ? p.Value1 : 100 }));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,NewCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select new { Value = p.Value1 ?? 100 }'  				from p in db.Parent select new { Value = p.Value1 ?? 100 }));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,NewCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select new { Value = p.Value1 ?? 100 }'  				from p in db.Parent select new { Value = p.Value1 ?? 100 }));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ScalarCondition,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select p.Value1 != null ? p.Value1 : 100'  				from p in db.Parent select p.Value1 != null ? p.Value1 : 100));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ScalarCondition,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select p.Value1 != null ? p.Value1 : 100'  				from p in db.Parent select p.Value1 != null ? p.Value1 : 100));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ScalarCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select p.Value1 ?? 100'  				from p in db.Parent select p.Value1 ?? 100));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ScalarCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select p.Value1 ?? 100'  				from p in db.Parent select p.Value1 ?? 100));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ExprCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select (p.Value1 ?? 100) + 50'  				from p in db.Parent select (p.Value1 ?? 100) + 50));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ExprCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select (p.Value1 ?? 100) + 50'  				from p in db.Parent select (p.Value1 ?? 100) + 50));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ExprCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select (p.Value1 ?? 100) + 50'  				from p in db.Parent select (p.Value1 ?? 100) + 50));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ExprCoalesce,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent select (p.Value1 ?? 100) + 50'  				from p in db.Parent select (p.Value1 ?? 100) + 50));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GetDefault1,The following statement contains a magic number: return 100;
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in (  					from c in Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  				'  				from t in (  					from c in db.Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in db.GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  			));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in (  					from c in Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  				'  				from t in (  					from c in db.Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in db.GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  			));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in (  					from c in Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  				'  				from t in (  					from c in db.Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in db.GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  			));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in (  					from c in Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  				'  				from t in (  					from c in db.Child  					where c.ParentID < 4  					select new { c.ParentID' ID = c.ChildID })  				.Concat(  					from g in db.GrandChild  					where g.ParentID >= 4  					select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  				group t by t.ParentID into gr  				select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  				where tt.Sum != 0  				select tt  			));
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var qe1 =  					from t in (  						from c in Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qe2 =  					from p in Parent  						join tt in qe1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				var qr1 =  					from t in (  						from c in db.Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in db.GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qr2 =  					from p in db.Parent  						join tt in qr1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				AreEqual(qe2' qr2);  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var qe1 =  					from t in (  						from c in Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qe2 =  					from p in Parent  						join tt in qe1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				var qr1 =  					from t in (  						from c in db.Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in db.GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qr2 =  					from p in db.Parent  						join tt in qr1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				AreEqual(qe2' qr2);  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var qe1 =  					from t in (  						from c in Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qe2 =  					from p in Parent  						join tt in qe1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				var qr1 =  					from t in (  						from c in db.Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in db.GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qr2 =  					from p in db.Parent  						join tt in qr1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				AreEqual(qe2' qr2);  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GroupByUnion2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var qe1 =  					from t in (  						from c in Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qe2 =  					from p in Parent  						join tt in qe1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				var qr1 =  					from t in (  						from c in db.Child  						where c.ParentID < 4  						select new { c.ParentID' ID = c.ChildID })  					.Concat(  						from g in db.GrandChild  						where g.ParentID >= 4  						select new { ParentID = g.ParentID ?? 0' ID = g.GrandChildID ?? 0 })  					group t by t.ParentID into gr  					select new { ParentID = gr.Key' Sum = gr.Sum(i => i.ID) } into tt  					where tt.Sum != 0  					select tt;    				var qr2 =  					from p in db.Parent  						join tt in qr1 on p.ParentID equals tt.ParentID into gr  						from tt in gr.DefaultIfEmpty()  					select new { p.ParentID };    				AreEqual(qe2' qr2);  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,ParameterTest1,The following statement contains a magic number: ForEachProvider(db =>  			{  				ProcessItem(db' 1);  				ProcessItem(db' 2);  			});
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,GetCustKey,The following statement contains a magic number: return ++_i % 2 == 0 ? "John" : null;
Magic Number,Data.Linq,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Common.cs,Issue288Test,The following statement contains a magic number: Assert.That(_i' Is.EqualTo(2));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,Test1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SQLite }'  				db => Assert.AreEqual(1' (from t in db.Types where t.MoneyValue * t.ID == 1.11m  select t).Single().ID));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultDecimal,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.DefaultDecimal' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.DefaultDecimal' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDefaultDecimal,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.DefaultDecimal' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.DefaultDecimal' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10)' t.MoneyValue * 1000)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToDecimal2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)'  				from t in db.Types select Sql.Convert(Sql.Decimal(10'4)' t.MoneyValue)));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in Types    select Sql.Convert(Sql.Char(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.Char(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in Types    select Sql.Convert(Sql.Char(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.Char(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToVarChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.VarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.VarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToVarChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.VarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.VarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToNChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.NChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.NChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToNChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.NChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.NChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToNVarChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.NVarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.NVarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToNVarChar,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select Sql.Convert(Sql.NVarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')'  				from t in db.Types select Sql.Convert(Sql.NVarChar(20)' t.MoneyValue).InvariantDecimal().Trim(' '' '0'' '.')));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToBit2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from t in    Types where !Sql.Convert(Sql.Bit' t.MoneyValue - 4.5m) select t select t'  				from t in from t in db.Types where !Sql.Convert(Sql.Bit' t.MoneyValue - 4.5m) select t select t));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ToBit2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from t in    Types where !Sql.Convert(Sql.Bit' t.MoneyValue - 4.5m) select t select t'  				from t in from t in db.Types where !Sql.Convert(Sql.Bit' t.MoneyValue - 4.5m) select t select t));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ConvertToBoolean2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in from t in    Types select Convert.ToBoolean(t.MoneyValue - 4.5m) where !p select p'  				from p in from t in db.Types select Convert.ToBoolean(t.MoneyValue - 4.5m) where !p select p));
Magic Number,Data.Linq,ConvertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertTest.cs,ConvertToBoolean2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in from t in    Types select Convert.ToBoolean(t.MoneyValue - 4.5m) where !p select p'  				from p in from t in db.Types select Convert.ToBoolean(t.MoneyValue - 4.5m) where !p select p));
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest1,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual("11"' query(db' "1"' 1));  				Assert.AreEqual("22"' query(db' "2"' 2));  			});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest2,The following statement contains a magic number: Assert.AreEqual(2' query(db' 2).ToList().Count());
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest2,The following statement contains a magic number: Assert.AreEqual(2' query(db' 2).ToList().Count());
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest3,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual(1' query(db' 1).ToList().Count());  				Assert.AreEqual(2' query(db' 2).ToList().Count());  			});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest3,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual(1' query(db' 1).ToList().Count());  				Assert.AreEqual(2' query(db' 2).ToList().Count());  			});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest4,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' query(db' new[] { 1' 2 }).ToList().Count()));
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest4,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' query(db' new[] { 1' 2 }).ToList().Count()));
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,CompiledTest5,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual(1' query(db' new object[] { 1' 1    }).ToList().Count());  				Assert.AreEqual(1' query(db' new object[] { 2' null }).ToList().Count());  			});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest1,The following statement contains a magic number: const int count = 100;
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest1,The following statement contains a magic number: var results = new int   [count' 2];
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest1,The following statement contains a magic number: threads[i] = new Thread(() =>  				{  					using (var db = new TestDbManager())  					{  						var id = (n % 6) + 1;  						results[n'0] = id;  						results[n'1] = query(db' id);  					}  				});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: var threads = new Thread[100];
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: var results = new int   [100'2];
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: var results = new int   [100'2];
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: threads[i] = new Thread(() =>  				{  					using (var db = new TestDbManager())  					{  						var id = (n % 6) + 1;  						results[n'0] = id;  						results[n'1] = db.Parent.Where(p => p.ParentID == id).First().ParentID;  					}  				});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: i < 100
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: i < 100
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: i < 100
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ConcurentTest2,The following statement contains a magic number: i < 100
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ParamTest1,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' query(db' 2).ToList().Count()));
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ParamTest1,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' query(db' 2).ToList().Count()));
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ElementTest1,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual(1' query(db' 1).ParentID);  				Assert.AreEqual(2' query(db' 2).ParentID);  			});
Magic Number,Data.Linq,CompileTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CompileTest.cs,ElementTest1,The following statement contains a magic number: ForEachProvider(db =>  			{  				Assert.AreEqual(1' query(db' 1).ParentID);  				Assert.AreEqual(2' query(db' 2).ParentID);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains1,The following statement contains a magic number: var expected =  				from ch in Child  					join p   in Parent on ch.ParentID equals p.ParentID  					join gc2 in q1     on p.ParentID  equals gc2.ParentID into g  					from gc3 in g.DefaultIfEmpty()  				where gc3 == null || !new[] { 111' 222 }.Contains(gc3.GrandChildID.Value)  				select new { p.ParentID' gc3 };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains1,The following statement contains a magic number: var expected =  				from ch in Child  					join p   in Parent on ch.ParentID equals p.ParentID  					join gc2 in q1     on p.ParentID  equals gc2.ParentID into g  					from gc3 in g.DefaultIfEmpty()  				where gc3 == null || !new[] { 111' 222 }.Contains(gc3.GrandChildID.Value)  				select new { p.ParentID' gc3 };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains1,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.Firebird' ProviderName.Access }' db =>  			{  				var q2 =  					from gc1 in db.GrandChild  						join max in  							from gch in db.GrandChild  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc1.GrandChildID equals max  					select gc1;    				var result =  					from ch in db.Child  						join p   in db.Parent on ch.ParentID equals p.ParentID  						join gc2 in q2        on p.ParentID  equals gc2.ParentID into g  						from gc3 in g.DefaultIfEmpty()  				where gc3 == null || !new[] { 111' 222 }.Contains(gc3.GrandChildID.Value)  				select new { p.ParentID' gc3 };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains1,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.Firebird' ProviderName.Access }' db =>  			{  				var q2 =  					from gc1 in db.GrandChild  						join max in  							from gch in db.GrandChild  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc1.GrandChildID equals max  					select gc1;    				var result =  					from ch in db.Child  						join p   in db.Parent on ch.ParentID equals p.ParentID  						join gc2 in q2        on p.ParentID  equals gc2.ParentID into g  						from gc3 in g.DefaultIfEmpty()  				where gc3 == null || !new[] { 111' 222 }.Contains(gc3.GrandChildID.Value)  				select new { p.ParentID' gc3 };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains2,The following statement contains a magic number: var expected =  				from ch in Child  					join p  in Parent on ch.ParentID equals p.ParentID  					join gc in q1     on p.ParentID  equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || gc.GrandChildID != 111 && gc.GrandChildID != 222  				select new  				{  					Parent       = p'  					GrandChildID = gc'  					Value        = GetValue(gc != null ? gc.ChildID : int.MaxValue)  				};
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains2,The following statement contains a magic number: var expected =  				from ch in Child  					join p  in Parent on ch.ParentID equals p.ParentID  					join gc in q1     on p.ParentID  equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || gc.GrandChildID != 111 && gc.GrandChildID != 222  				select new  				{  					Parent       = p'  					GrandChildID = gc'  					Value        = GetValue(gc != null ? gc.ChildID : int.MaxValue)  				};
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains2,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.Firebird' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild  						join max in  							from gch in db.GrandChild  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join p  in db.Parent on ch.ParentID equals p.ParentID  						join gc in q2        on p.ParentID  equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  				where gc == null || gc.GrandChildID != 111 && gc.GrandChildID != 222  				select new  				{  					Parent       = p'  					GrandChildID = gc'  					Value        = GetValue(gc != null ? gc.ChildID : int.MaxValue)  				};    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains2,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.Firebird' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild  						join max in  							from gch in db.GrandChild  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join p  in db.Parent on ch.ParentID equals p.ParentID  						join gc in q2        on p.ParentID  equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  				where gc == null || gc.GrandChildID != 111 && gc.GrandChildID != 222  				select new  				{  					Parent       = p'  					GrandChildID = gc'  					Value        = GetValue(gc != null ? gc.ChildID : int.MaxValue)  				};    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,GetValue,The following statement contains a magic number: return value ?? 777;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains3,The following statement contains a magic number: var expected =  				from ch in Child  					join p  in Parent on ch.ParentID equals p.ParentID  					join gc in q1     on p.ParentID  equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { p.ParentID' gc };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains3,The following statement contains a magic number: var expected =  				from ch in Child  					join p  in Parent on ch.ParentID equals p.ParentID  					join gc in q1     on p.ParentID  equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { p.ParentID' gc };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains3,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.SQLite' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild1  						join max in  							from gch in db.GrandChild1  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join p  in db.Parent on ch.ParentID equals p.ParentID  						join gc in q2     on p.ParentID  equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  					where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  					select new { p.ParentID' gc };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains3,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.SQLite' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild1  						join max in  							from gch in db.GrandChild1  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join p  in db.Parent on ch.ParentID equals p.ParentID  						join gc in q2     on p.ParentID  equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  					where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  					select new { p.ParentID' gc };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains4,The following statement contains a magic number: var expected =  				from ch in Child  					join gc in q1 on ch.Parent.ParentID equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { ch.Parent' gc };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains4,The following statement contains a magic number: var expected =  				from ch in Child  					join gc in q1 on ch.Parent.ParentID equals gc.ParentID into g  					from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { ch.Parent' gc };
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.SQLite' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild1  						join max in  							from gch in db.GrandChild1  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join gc in q2 on ch.Parent.ParentID equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { ch.Parent' gc };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(new [] { ProviderName.SQLite' ProviderName.Access }' db =>  			{  				var q2 =  					from gc in db.GrandChild1  						join max in  							from gch in db.GrandChild1  							group gch by gch.ChildID into g  							select g.Max(c => c.GrandChildID)  						on gc.GrandChildID equals max  					select gc;    				var result =  					from ch in db.Child  						join gc in q2 on ch.Parent.ParentID equals gc.ParentID into g  						from gc in g.DefaultIfEmpty()  				where gc == null || !new[] { 111' 222 }.Contains(gc.GrandChildID.Value)  				select new { ch.Parent' gc };    				AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: var expected =  				from x in q1  				where  				(  					(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  				) || (  					x.g.ParentID == 3 && x.g.ChildID == 32  				) || (  					x.g.ChildID == 11  				)  				select x;
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,ComplexTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ComplexTest.cs,Join1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join c in db.Child      on p.ParentID equals c.ParentID  						join g in db.GrandChild on p.ParentID equals g.ParentID  					select new { p' c' g };    				var result =  					from x in q2  					where  					(  						(x.c.ParentID == 2 || x.c.ParentID == 3) && x.g.ChildID != 21 && x.g.ChildID != 33  					) || (  						x.g.ParentID == 3 && x.g.ChildID == 32  					) || (  						x.g.ChildID == 11  					)  					select x;    					AreEqual(expected' result);  			});
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test2,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test2,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test3,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test3,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test4,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test4,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children  				where p.ParentID < 4 || p.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test5,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children2  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test5,The following statement contains a magic number: var expected =  				from p  in Parent  				from ch in p.Children2  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test5,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children2  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Test5,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p  in db.Parent  				from ch in p.Children2  				where ch.ParentID < 4 || ch.ParentID >= 4  				select new { p.ParentID' ch.ChildID }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,SelectMany3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent))'  				db.Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent))));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,SelectMany3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent))'  				db.Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent))));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,SelectMany4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent.ParentID))'  				db.Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent.ParentID))));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,SelectMany4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent.ParentID))'  				db.Child  					.GroupBy(ch => ch.Parent)  					.Where(g => g.Count() > 2)  					.SelectMany(g => g.Select(ch => ch.Parent.ParentID))));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,LeftJoin1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { p' c }'  				from p in db.Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { p' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,LeftJoin1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { p' c }'  				from p in db.Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { p' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,LeftJoin2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { c' p }'  				from p in db.Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { c' p }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,LeftJoin2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { c' p }'  				from p in db.Parent from c in p.Children.DefaultIfEmpty() where p.ParentID >= 4 select new { c' p }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Projection1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in  					from c in Child  					where c.Parent.ParentID == 2  					select c  				join g in GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }'  				from c in  					from c in db.Child  					where c.Parent.ParentID == 2  					select c  				join g in db.GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Projection1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in  					from c in Child  					where c.Parent.ParentID == 2  					select c  				join g in GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }'  				from c in  					from c in db.Child  					where c.Parent.ParentID == 2  					select c  				join g in db.GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Projection1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in  					from c in Child  					where c.Parent.ParentID == 2  					select c  				join g in GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }'  				from c in  					from c in db.Child  					where c.Parent.ParentID == 2  					select c  				join g in db.GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,Projection1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in  					from c in Child  					where c.Parent.ParentID == 2  					select c  				join g in GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }'  				from c in  					from c in db.Child  					where c.Parent.ParentID == 2  					select c  				join g in db.GrandChild on c.ParentID equals g.ParentID  				where g.ChildID == 22  				select new { c.Parent' c }));
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,TestTernary1,The following statement contains a magic number: var ids = new[] { 1' 5 };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,TestTernary2,The following statement contains a magic number: var ids = new[] { 1' 5 };
Magic Number,Data.Linq,AssociationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\AssociationTest.cs,TestTernary3,The following statement contains a magic number: var ids = new[] { 1' 5 };
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				Parent  					.Select(p => new { children1 = p.Children. Where(c => c.ParentID > 1)  })  					.Select(t => new { children2 = t.children1.Where(c => c.ParentID < 10) })  					.Select(t => t.children2.Sum(c => c.ChildID))'  				db.Parent  					.Select(p => new { children1 = p.Children. Where(c => c.ParentID > 1)  })  					.Select(t => new { children2 = t.children1.Where(c => c.ParentID < 10) })  					.Select(t => t.children2.Sum(c => c.ChildID))));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				Parent  					.Select(p => new { children1 = p.Children. Where(c => c.ParentID > 1)  })  					.Select(t => new { children2 = t.children1.Where(c => c.ParentID < 10) })  					.Select(t => t.children2.Sum(c => c.ChildID))'  				db.Parent  					.Select(p => new { children1 = p.Children. Where(c => c.ParentID > 1)  })  					.Select(t => new { children2 = t.children1.Where(c => c.ParentID < 10) })  					.Select(t => t.children2.Sum(c => c.ChildID))));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				Parent  					.Select(p => p.Children. Where(c => c.ParentID > 1))  					.Select(t => t.Where(c => c.ParentID < 10))  					.Select(t => t.Sum(c => c.ChildID))'  				db.Parent  					.Select(p => p.Children. Where(c => c.ParentID > 1))  					.Select(t => t.Where(c => c.ParentID < 10))  					.Select(t => t.Sum(c => c.ChildID))));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Select4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				Parent  					.Select(p => p.Children. Where(c => c.ParentID > 1))  					.Select(t => t.Where(c => c.ParentID < 10))  					.Select(t => t.Sum(c => c.ChildID))'  				db.Parent  					.Select(p => p.Children. Where(c => c.ParentID > 1))  					.Select(t => t.Where(c => c.ParentID < 10))  					.Select(t => t.Sum(c => c.ChildID))));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children1.Any()  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children1.Any()  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children1.Any()  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children1.Any()  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				where children1.Any()  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				where children1.Any()  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				where children1.Any()  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				where children1.Any()  				let children2 = children1.Where(c => c.ParentID < 10)  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children2.Any()  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children2.Any()  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,Where3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children2.Any()  				select children2.Sum(c => c.ChildID)'  				from p in db.Parent  				let children1 = p.Children.Where(c => c.ParentID > 1)  				let children2 = children1.Where(c => c.ParentID < 10)  				where children2.Any()  				select children2.Sum(c => c.ChildID)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0)' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0)' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0)' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0)' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					select new 					{ 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest6,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0) 					' 					(  						from p in db.Parent  						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID)  						let ch2 = ch1.Where(c => c.ChildID > -100)  						select new  						{  							p.ParentID'  							Any    = ch2.Any()'  							Count  = ch2.Count()'  							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID'  							First2 = ch2.FirstOrDefault()  						}  					).Where(t => t.ParentID > 0)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest6,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0) 					' 					(  						from p in db.Parent  						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID)  						let ch2 = ch1.Where(c => c.ChildID > -100)  						select new  						{  							p.ParentID'  							Any    = ch2.Any()'  							Count  = ch2.Count()'  							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID'  							First2 = ch2.FirstOrDefault()  						}  					).Where(t => t.ParentID > 0)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest7,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest7,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest7,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest7,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.Sybase }'  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0) == null ? 0 : ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						let ch2 = ch1.Where(c => c.ChildID > -100) 						select new 						{ 							p.ParentID' 							Any    = ch2.Any()' 							Count  = ch2.Count()' 							First1 = ch2.FirstOrDefault(c => c.ParentID > 0).ParentID' 							First2 = ch2.FirstOrDefault() 						} 					).Where(t => t.ParentID > 0).Take(5000)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest8,The following statement contains a magic number: ForEachProvider(  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					let ch3	= ch2.FirstOrDefault(c => c.ParentID > 0) 					select new 					{ 						First1 = ch3 == null ? 0 : ch3.ParentID' 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					let ch3	= ch2.FirstOrDefault(c => c.ParentID > 0) 					select new 					{ 						First1 = ch3 == null ? 0 : ch3.ParentID' 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest8,The following statement contains a magic number: ForEachProvider(  				db => AreEqual( 					from p in Parent 					let ch1 = Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					let ch3	= ch2.FirstOrDefault(c => c.ParentID > 0) 					select new 					{ 						First1 = ch3 == null ? 0 : ch3.ParentID' 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 					let ch2 = ch1.Where(c => c.ChildID > -100) 					let ch3	= ch2.FirstOrDefault(c => c.ParentID > 0) 					select new 					{ 						First1 = ch3 == null ? 0 : ch3.ParentID' 						Any    = ch2.Any()' 						Count  = ch2.Count()' 						First2 = ch2.FirstOrDefault() 					}));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest9,The following statement contains a magic number: ForEachProvider(  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						select new 						{ 							First = ch1.FirstOrDefault() 						} 					).Take(10) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						select new 						{ 							First = ch1.FirstOrDefault() 						} 					).Take(10)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest9,The following statement contains a magic number: ForEachProvider(  				db => AreEqual( 					( 						from p in Parent 						let ch1 = Child.Where(c => c.ParentID == p.ParentID) 						select new 						{ 							First = ch1.FirstOrDefault() 						} 					).Take(10) 					' 					( 						from p in db.Parent 						let ch1 = db.Child.Where(c => c.ParentID == p.ParentID) 						select new 						{ 							First = ch1.FirstOrDefault() 						} 					).Take(10)));
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest11,The following statement contains a magic number: AreEqual( 					from p in Parent 					let ch1 = Child.FirstOrDefault(c => c.ParentID > 0) 					let ch2 = Child.Where(c => c.ChildID > -100) 					select new 					{ 						First1 = ch1 == null ? 0 : ch1.ParentID' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.FirstOrDefault(c => c.ParentID > 0) 					let ch2 = Child.Where(c => c.ChildID > -100) 					select new 					{ 						First1 = ch1 == null ? 0 : ch1.ParentID' 						First2 = ch2.FirstOrDefault() 					});
Magic Number,Data.Linq,ConvertExpression,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConvertExpression.cs,LetTest11,The following statement contains a magic number: AreEqual( 					from p in Parent 					let ch1 = Child.FirstOrDefault(c => c.ParentID > 0) 					let ch2 = Child.Where(c => c.ChildID > -100) 					select new 					{ 						First1 = ch1 == null ? 0 : ch1.ParentID' 						First2 = ch2.FirstOrDefault() 					} 					' 					from p in db.Parent 					let ch1 = db.Child.FirstOrDefault(c => c.ParentID > 0) 					let ch2 = Child.Where(c => c.ChildID > -100) 					select new 					{ 						First1 = ch1 == null ? 0 : ch1.ParentID' 						First2 = ch2.FirstOrDefault() 					});
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat1,The following statement contains a magic number: var expected =  				(from p in Parent where p.ParentID == 1 select p).Concat(  				(from p in Parent where p.ParentID == 2 select p));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from p in db.Parent where p.ParentID == 1 select p).Concat(  				(from p in db.Parent where p.ParentID == 2 select p))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat11,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from ch in    Child where ch.ParentID == 1 select ch.Parent).Concat(  				(from ch in    Child where ch.ParentID == 2 select ch.Parent))'  				(from ch in db.Child where ch.ParentID == 1 select ch.Parent).Concat(  				(from ch in db.Child where ch.ParentID == 2 select ch.Parent))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat11,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from ch in    Child where ch.ParentID == 1 select ch.Parent).Concat(  				(from ch in    Child where ch.ParentID == 2 select ch.Parent))'  				(from ch in db.Child where ch.ParentID == 1 select ch.Parent).Concat(  				(from ch in db.Child where ch.ParentID == 2 select ch.Parent))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat12,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p  in    Parent where p.ParentID  == 1 select p).Concat(  				(from ch in    Child  where ch.ParentID == 2 select ch.Parent))'  				(from p  in db.Parent where p.ParentID  == 1 select p).Concat(  				(from ch in db.Child  where ch.ParentID == 2 select ch.Parent))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat12,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p  in    Parent where p.ParentID  == 1 select p).Concat(  				(from ch in    Child  where ch.ParentID == 2 select ch.Parent))'  				(from p  in db.Parent where p.ParentID  == 1 select p).Concat(  				(from ch in db.Child  where ch.ParentID == 2 select ch.Parent))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat2,The following statement contains a magic number: var expected =  				(from p in Parent where p.ParentID == 1 select p).Concat(  				(from p in Parent where p.ParentID == 2 select p)).Concat(  				(from p in Parent where p.ParentID == 4 select p));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat2,The following statement contains a magic number: var expected =  				(from p in Parent where p.ParentID == 1 select p).Concat(  				(from p in Parent where p.ParentID == 2 select p)).Concat(  				(from p in Parent where p.ParentID == 4 select p));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from p in db.Parent where p.ParentID == 1 select p).Concat(  				(from p in db.Parent where p.ParentID == 2 select p)).Concat(  				(from p in db.Parent where p.ParentID == 4 select p))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from p in db.Parent where p.ParentID == 1 select p).Concat(  				(from p in db.Parent where p.ParentID == 2 select p)).Concat(  				(from p in db.Parent where p.ParentID == 4 select p))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat3,The following statement contains a magic number: var expected =  				(from p in Parent where p.ParentID == 1 select p).Concat(  				(from p in Parent where p.ParentID == 2 select p).Concat(  				(from p in Parent where p.ParentID == 4 select p)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat3,The following statement contains a magic number: var expected =  				(from p in Parent where p.ParentID == 1 select p).Concat(  				(from p in Parent where p.ParentID == 2 select p).Concat(  				(from p in Parent where p.ParentID == 4 select p)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from p in db.Parent where p.ParentID == 1 select p).Concat(  				(from p in db.Parent where p.ParentID == 2 select p).Concat(  				(from p in db.Parent where p.ParentID == 4 select p)))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from p in db.Parent where p.ParentID == 1 select p).Concat(  				(from p in db.Parent where p.ParentID == 2 select p).Concat(  				(from p in db.Parent where p.ParentID == 4 select p)))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat4,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ParentID = c.ParentID' ChildID = c.ChildID + 1000 })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: var expected =  				(from c in Child where c.ParentID == 1 select c).Concat(  				(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID }).  				Where(c => c.ChildID != 1032));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat401,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'   				(from c in db.Child where c.ParentID == 1 select c).Concat(  				(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000' ParentID = c.ParentID })).  				Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat5,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in Child where c.ParentID == 1 select c).Concat(  					(from c in Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 }).  					Where(c => c.ChildID != 1032))'   					(from c in db.Child where c.ParentID == 1 select c).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID = c.ChildID + 1000 })).  					Where(c => c.ChildID != 1032)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat501,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in    Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 }).  					Where(c => c.ParentID == 1))'  					(from c in db.Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 })).  					Where(c => c.ParentID == 1)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat501,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in    Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 }).  					Where(c => c.ParentID == 1))'  					(from c in db.Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 })).  					Where(c => c.ParentID == 1)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat501,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in    Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 }).  					Where(c => c.ParentID == 1))'  					(from c in db.Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 })).  					Where(c => c.ParentID == 1)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat501,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in    Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 }).  					Where(c => c.ParentID == 1))'  					(from c in db.Child where c.ParentID == 1 select new Child { ParentID = c.ParentID }).Concat(  					(from c in db.Child where c.ParentID == 3 select new Child { ChildID  = c.ChildID + 1000 })).  					Where(c => c.ParentID == 1)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat502,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in    Child where c.ParentID == 3 select c.Parent).  					Where(p => p.Value1.Value != 2))'  					(from c in db.Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in db.Child where c.ParentID == 3 select c.Parent)).  					Where(p => p.Value1.Value != 2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat502,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in    Child where c.ParentID == 3 select c.Parent).  					Where(p => p.Value1.Value != 2))'  					(from c in db.Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in db.Child where c.ParentID == 3 select c.Parent)).  					Where(p => p.Value1.Value != 2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat502,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in    Child where c.ParentID == 3 select c.Parent).  					Where(p => p.Value1.Value != 2))'  					(from c in db.Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in db.Child where c.ParentID == 3 select c.Parent)).  					Where(p => p.Value1.Value != 2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat502,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix }'  				db => AreEqual(  					(from c in    Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in    Child where c.ParentID == 3 select c.Parent).  					Where(p => p.Value1.Value != 2))'  					(from c in db.Child where c.ParentID == 1 select c.Parent).Concat(  					(from c in db.Child where c.ParentID == 3 select c.Parent)).  					Where(p => p.Value1.Value != 2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }'  				db => AreEqual(  					   Child.Where(c => c.GrandChildren.Count == 2).Concat(   Child.Where(c => c.GrandChildren.Count() == 3))'  					db.Child.Where(c => c.GrandChildren.Count == 2).Concat(db.Child.Where(c => c.GrandChildren.Count() == 3))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }'  				db => AreEqual(  					   Child.Where(c => c.GrandChildren.Count == 2).Concat(   Child.Where(c => c.GrandChildren.Count() == 3))'  					db.Child.Where(c => c.GrandChildren.Count == 2).Concat(db.Child.Where(c => c.GrandChildren.Count() == 3))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }'  				db => AreEqual(  					   Child.Where(c => c.GrandChildren.Count == 2).Concat(   Child.Where(c => c.GrandChildren.Count() == 3))'  					db.Child.Where(c => c.GrandChildren.Count == 2).Concat(db.Child.Where(c => c.GrandChildren.Count() == 3))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,Concat6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }'  				db => AreEqual(  					   Child.Where(c => c.GrandChildren.Count == 2).Concat(   Child.Where(c => c.GrandChildren.Count() == 3))'  					db.Child.Where(c => c.GrandChildren.Count == 2).Concat(db.Child.Where(c => c.GrandChildren.Count() == 3))));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion1,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select p2))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select p2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion1,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select p2))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select p2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion1,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select p2))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select p2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion1,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select p2))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select p2)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion2,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select (Parent)null))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select (Parent)null)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion2,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select (Parent)null))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select (Parent)null)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion2,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select (Parent)null))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select (Parent)null)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion2,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select (Parent)null))'  					(from p1 in db.Parent where p1.ParentID >  3 select p1).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select (Parent)null)));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion3,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = p2 }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = p2 })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion3,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = p2 }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = p2 })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion3,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = p2 }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = p2 })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion3,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = p2 }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = p1 }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = p2 })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion4,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion4,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion4,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion4,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' p1.ParentID } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' p2.ParentID } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion5,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion5,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion5,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion5,The following statement contains a magic number: AreEqual(  					(from p1 in    Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in    Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } }))'  					(from p1 in db.Parent where p1.ParentID >  3 select new { p = new { p = p1' ParentID = p1.ParentID + 1 } }).Union(  					(from p2 in db.Parent where p2.ParentID <= 3 select new { p = new { p = p2' ParentID = p2.ParentID + 1 } })));
Magic Number,Data.Linq,ConcatUnionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ConcatUnionTest.cs,ObjectUnion,The following statement contains a magic number: var q = q1.Union(q2).Take(5);
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestForGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          /* no error in first call */                          getData(db' new List<int?> { 2 }' new List<int?> { 211' 212' 221' 222 });                            /* error in second and more calls */                          /*                       * GROUP BY select clause is correct                          SELECT x.ChildID FROM GrandChild x WHERE x.ParentID IN (3) GROUP BY x.ChildID                         * But next SELECT clause contains "x.ParentID IN (2)" instead "x.ParentID IN (3)"                          -- DECLARE ?p1 Int32                          -- SET ?p1 = 31                          SELECT x.GrandChildID FROM GrandChild x WHERE x.ParentID IN (2) AND x.ChildID = ?p1                       */                          getData(db' new List<int?> { 3 }' new List<int?> { 311' 312' 313' 321' 333 });                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestDistinctWithGroupBy,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          const int parentId = 10000;                          db.Parent.Insert(() => new Parent { ParentID = parentId' Value1 = 1 });                          db.Parent.Insert(() => new Parent { ParentID = parentId' Value1 = 1 });                            try                          {                              var source = db.Parent.ToList();                                // Success when query is executed in memory                              TestDistinctWithGroupBy(source.AsQueryable());                                // Failed when query is executed on sql server                              TestDistinctWithGroupBy(db.Parent);                          }                          finally                          {                              db.Parent.Delete(x => x.ParentID == parentId);                          }                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestDistinctWithGroupBy,The following statement contains a magic number: const int score = 4;
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestQueryWithInterface,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var persons =                              from x in db.Person                              select new PersonWithObjectId                                  {                                      Id = new ObjectId { Value = x.ID }'                                      FistName = x.FirstName'                                  };                            // this works                          var r1 = FilterSourceByIdDefinedInBaseClass(persons' 5).ToArray();                          Assert.That(r1' Is.Not.Null);                            // and this works                          var r2 = FilterSourceByIdDefinedInInterface1(persons' 5).ToArray();                          Assert.That(r2' Is.Not.Null);                            // but this fails                          var r3 = FilterSourceByIdDefinedInInterface2(persons' 5).ToArray();                          Assert.That(r3' Is.Not.Null);                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestQueryWithInterface,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var persons =                              from x in db.Person                              select new PersonWithObjectId                                  {                                      Id = new ObjectId { Value = x.ID }'                                      FistName = x.FirstName'                                  };                            // this works                          var r1 = FilterSourceByIdDefinedInBaseClass(persons' 5).ToArray();                          Assert.That(r1' Is.Not.Null);                            // and this works                          var r2 = FilterSourceByIdDefinedInInterface1(persons' 5).ToArray();                          Assert.That(r2' Is.Not.Null);                            // but this fails                          var r3 = FilterSourceByIdDefinedInInterface2(persons' 5).ToArray();                          Assert.That(r3' Is.Not.Null);                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestQueryWithInterface,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var persons =                              from x in db.Person                              select new PersonWithObjectId                                  {                                      Id = new ObjectId { Value = x.ID }'                                      FistName = x.FirstName'                                  };                            // this works                          var r1 = FilterSourceByIdDefinedInBaseClass(persons' 5).ToArray();                          Assert.That(r1' Is.Not.Null);                            // and this works                          var r2 = FilterSourceByIdDefinedInInterface1(persons' 5).ToArray();                          Assert.That(r2' Is.Not.Null);                            // but this fails                          var r3 = FilterSourceByIdDefinedInInterface2(persons' 5).ToArray();                          Assert.That(r3' Is.Not.Null);                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestUpdateByAssociationProperty,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          const int childId = 10000;                          const int parentId = 20000;                            try                          {                              db.Parent.Insert(() => new Parent { ParentID = parentId });                              db.Child.Insert(() => new Child { ChildID = childId' ParentID = parentId });                                var parents = from child in db.Child                                            where child.ChildID == childId                                            select child.Parent;                                if (useUpdateWithTarget)                              {                                  // this failed for MySql and SQLite but works with MS SQL                                  Assert.DoesNotThrow(() => parents.Update(db.Parent' x => new Parent { Value1 = 5 }));                              }                              else                              {                                  // this works with MySql but failed for SQLite and MS SQL                                  Assert.DoesNotThrow(() => parents.Set(x => x.Value1' 5).Update());                              }                          }                          finally                          {                              db.Child.Delete(x => x.ChildID == childId);                              db.Parent.Delete(x => x.ParentID == parentId);                          }                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestUpdateByAssociationProperty,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          const int childId = 10000;                          const int parentId = 20000;                            try                          {                              db.Parent.Insert(() => new Parent { ParentID = parentId });                              db.Child.Insert(() => new Child { ChildID = childId' ParentID = parentId });                                var parents = from child in db.Child                                            where child.ChildID == childId                                            select child.Parent;                                if (useUpdateWithTarget)                              {                                  // this failed for MySql and SQLite but works with MS SQL                                  Assert.DoesNotThrow(() => parents.Update(db.Parent' x => new Parent { Value1 = 5 }));                              }                              else                              {                                  // this works with MySql but failed for SQLite and MS SQL                                  Assert.DoesNotThrow(() => parents.Set(x => x.Value1' 5).Update());                              }                          }                          finally                          {                              db.Child.Delete(x => x.ChildID == childId);                              db.Parent.Delete(x => x.ParentID == parentId);                          }                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestUpdateByAssociationProperty,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          const int childId = 10000;                          const int parentId = 20000;                            try                          {                              db.Parent.Insert(() => new Parent { ParentID = parentId });                              db.Child.Insert(() => new Child { ChildID = childId' ParentID = parentId });                                var parents = from child in db.Child                                            where child.ChildID == childId                                            select child.Parent;                                if (useUpdateWithTarget)                              {                                  // this failed for MySql and SQLite but works with MS SQL                                  Assert.DoesNotThrow(() => parents.Update(db.Parent' x => new Parent { Value1 = 5 }));                              }                              else                              {                                  // this works with MySql but failed for SQLite and MS SQL                                  Assert.DoesNotThrow(() => parents.Set(x => x.Value1' 5).Update());                              }                          }                          finally                          {                              db.Child.Delete(x => x.ChildID == childId);                              db.Parent.Delete(x => x.ParentID == parentId);                          }                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestUpdateByAssociationProperty,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          const int childId = 10000;                          const int parentId = 20000;                            try                          {                              db.Parent.Insert(() => new Parent { ParentID = parentId });                              db.Child.Insert(() => new Child { ChildID = childId' ParentID = parentId });                                var parents = from child in db.Child                                            where child.ChildID == childId                                            select child.Parent;                                if (useUpdateWithTarget)                              {                                  // this failed for MySql and SQLite but works with MS SQL                                  Assert.DoesNotThrow(() => parents.Update(db.Parent' x => new Parent { Value1 = 5 }));                              }                              else                              {                                  // this works with MySql but failed for SQLite and MS SQL                                  Assert.DoesNotThrow(() => parents.Set(x => x.Value1' 5).Update());                              }                          }                          finally                          {                              db.Child.Delete(x => x.ChildID == childId);                              db.Parent.Delete(x => x.ParentID == parentId);                          }                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,ConcatOrderByTest,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var q = from p in db.Person                                  where p.ID < 0                                  select new { Rank = 0' FirstName = (string)null' LastName = (string)null };                          var q2 =                              q.Concat(                                  from p in db.Person                                  select new { Rank = p.ID' p.FirstName' p.LastName });                            var resultquery = (from x in q2 orderby x.Rank' x.FirstName' x.LastName select x).ToString();                            var rqr = resultquery.LastIndexOf(                              "ORDER BY"' System.StringComparison.InvariantCultureIgnoreCase);                          var rqp =                              (resultquery.Substring(rqr + "ORDER BY".Length).Split(''')).Select(p => p.Trim()).ToArray();                            Assert.That(rqp.Count()' Is.EqualTo(3));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues1,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          var date  = new DateTime(2009'  9'  24'  9' 19' 29'  90);                          var dates = new DateTime?[] { null' date };                            // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => dates.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => dates.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,IdlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.mono.cs,TestContainsForNullableDateTimeWithNullAndNotNullValues2,The following statement contains a magic number: ForProvider(                  providerName'                  db =>                      {                          // Ensures that  the query works properly in memory                          // ReSharper disable RemoveToList.2                          var resultCount = db.Types2.ToList().Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          // ReSharper restore RemoveToList.2                          Assert.That(resultCount' Is.GreaterThan(0));                            var result = db.Types2.Count(x => new DateTime?[] { null' new DateTime(2009'  9'  24'  9' 19' 29'  90) }.Contains(x.DateTimeValue2));                          Assert.That(result' Is.EqualTo(resultCount));                      });
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count2,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Parent.Count(p => p.ParentID > 2)'  				db.Parent.Count(p => p.ParentID > 2)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count2,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Parent.Count(p => p.ParentID > 2)'  				db.Parent.Count(p => p.ParentID > 2)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count6,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				(from ch in    Child group ch by ch.ParentID).Count(g => g.Key > 2)'  				(from ch in db.Child group ch by ch.ParentID).Count(g => g.Key > 2)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count6,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				(from ch in    Child group ch by ch.ParentID).Count(g => g.Key > 2)'  				(from ch in db.Child group ch by ch.ParentID).Count(g => g.Key > 2)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count7,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from p in    Parent where p.Children.Count > 2 select p'  				from p in db.Parent where p.Children.Count > 2 select p));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,Count7,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from p in    Parent where p.Children.Count > 2 select p'  				from p in db.Parent where p.Children.Count > 2 select p));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy1,The following statement contains a magic number: var expected =  				from ch in Child  				group ch by ch.ParentID into g  				select g.Count(ch => ch.ChildID > 20);
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in db.Child  				group ch by ch.ParentID into g  				select g.Count(ch => ch.ChildID > 20)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy102,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy103,The following statement contains a magic number: var expected =  				from ch in Child  				group ch by new { Parent = ch.ParentID' ch.ChildID } into g  				select g.Count(ch => ch.ChildID > 20);
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy103,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in db.Child  				group ch by new { Parent = ch.ParentID' ch.ChildID } into g  				select g.Count(ch => ch.ChildID > 20)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy21,The following statement contains a magic number: AreEqual(  					from ch in  						from ch in Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  					where ch.ParentID + 1 > n  					group ch by ch into g  					select g.Count(p => p.ParentID < 3)'  					from ch in  						from ch in db.Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  					where ch.ParentID + 1 > n  					group ch by ch into g  					select g.Count(p => p.ParentID < 3));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy21,The following statement contains a magic number: AreEqual(  					from ch in  						from ch in Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  					where ch.ParentID + 1 > n  					group ch by ch into g  					select g.Count(p => p.ParentID < 3)'  					from ch in  						from ch in db.Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  					where ch.ParentID + 1 > n  					group ch by ch into g  					select g.Count(p => p.ParentID < 3));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy22,The following statement contains a magic number: var expected =  				from ch in  					from ch in Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID + 1 > n  				group ch by new { ch.ParentID } into g  				select g.Count(p => p.ParentID < 3);
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy22,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in  					from ch in db.Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID + 1 > n  				group ch by new { ch.ParentID } into g  				select g.Count(p => p.ParentID < 3)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy23,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' "Sql2000"' ProviderName.Sybase' ProviderName.Access }' db => AreEqual(  				from p in  					from p in Parent select new { ParentID = p.ParentID + 1' p.Value1 }  				where p.ParentID + 1 > 1  				group p by new { p.Value1 } into g  				select g.Count(p => p.ParentID < 3)'  				from p in  					from p in db.Parent select new { ParentID = p.ParentID + 1' p.Value1 }  				where p.ParentID + 1 > 1  				group p by new { p.Value1 } into g  				select g.Count(p => p.ParentID < 3)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy23,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' "Sql2000"' ProviderName.Sybase' ProviderName.Access }' db => AreEqual(  				from p in  					from p in Parent select new { ParentID = p.ParentID + 1' p.Value1 }  				where p.ParentID + 1 > 1  				group p by new { p.Value1 } into g  				select g.Count(p => p.ParentID < 3)'  				from p in  					from p in db.Parent select new { ParentID = p.ParentID + 1' p.Value1 }  				where p.ParentID + 1 > 1  				group p by new { p.Value1 } into g  				select g.Count(p => p.ParentID < 3)));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy3,The following statement contains a magic number: var expected =  				from ch in  					from ch in Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID - 1 > 0  				group ch by new { ch.ParentID } into g  				select new  				{  					g.Key.ParentID'  					ChildMin   = g.Min(p => p.ChildID)'  					ChildCount = g.Count(p => p.ChildID > 25)  				};
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in  					from ch in db.Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID - 1 > 0  				group ch by new { ch.ParentID } into g  				select new  				{  					g.Key.ParentID'  					ChildMin   = g.Min(p => p.ChildID)'  					ChildCount = g.Count(p => p.ChildID > 25)  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupBy5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}'  				from ch in db.Child  				group ch by ch.ParentID into g  				select new  				{  					ID1 = g.Max  (ch => ch.ChildID)'  					ID2 = g.Count(ch => ch.ChildID > 20) + 1'  					ID3 = g.Count(ch => ch.ChildID > 20)'  					ID4 = g.Count(ch => ch.ChildID > 10)'  				}));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere,The following statement contains a magic number: var expected = Child.Count(ch => ch.ChildID > 20);
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.Count(ch => ch.ChildID > 20);  				Assert.AreEqual(expected' result);  			});
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere201,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere201,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere201,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere201,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere202,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Count(ch => ch.ChildID == 20) > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere203,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count(ch => ch.ChildID > 20) > 2 || g.Key > 2  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 2 && g.Key < 5  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere301,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 3 || g.Key == 1  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 3 || g.Key == 1  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere301,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				group ch by ch.ParentID into g  				where g.Count() > 3 || g.Key == 1  				select g.Key'  				from ch in db.Child  				group ch by ch.ParentID into g  				where g.Count() > 3 || g.Key == 1  				select g.Key));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.ParentID  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.ParentID));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,GroupByWhere4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.ParentID  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.ParentID));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { p.ParentID' Count = p.Children.Where(c => c.ParentID == p.ParentID && c.ChildID != 0m).Count() }'  				from p in db.Parent  				where p.ParentID != 5  				select new { p.ParentID' Count = p.Children.Where(c => c.ParentID == p.ParentID && c.ChildID != 0m).Count() }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { p.ParentID' Count = p.Children.Where(c => c.ParentID == p.ParentID && c.ChildID != 0m).Count() }'  				from p in db.Parent  				where p.ParentID != 5  				select new { p.ParentID' Count = p.Children.Where(c => c.ParentID == p.ParentID && c.ChildID != 0m).Count() }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count : p.Children.Count(c => c.ParentID == p.ParentID) }'  				from p in db.Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count : p.Children.Count(c => c.ParentID == p.ParentID) }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count : p.Children.Count(c => c.ParentID == p.ParentID) }'  				from p in db.Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count : p.Children.Count(c => c.ParentID == p.ParentID) }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count() : p.Children.Count(c => c.ParentID == p.ParentID) }'  				from p in db.Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count() : p.Children.Count(c => c.ParentID == p.ParentID) }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count() : p.Children.Count(c => c.ParentID == p.ParentID) }'  				from p in db.Parent  				where p.ParentID != 5  				select new { Count = p.Value1 == null ? p.Children.Count() : p.Children.Count(c => c.ParentID == p.ParentID) }));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe' ProviderName.SQLite' ProviderName.Sybase }' db => AreEqual(  				   Parent.Take(5).OrderByDescending(p => p.ParentID).Select(p => p.Children.Count())'  				db.Parent.Take(5).OrderByDescending(p => p.ParentID).Select(p => p.Children.Count())));
Magic Number,Data.Linq,CountTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CountTest.cs,SubQuery6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe' ProviderName.SQLite' ProviderName.Sybase }' db => AreEqual(  				   Parent.Take(5).OrderByDescending(p => p.ParentID).Select(p => p.Children.Count())'  				db.Parent.Take(5).OrderByDescending(p => p.ParentID).Select(p => p.Children.Count())));
Magic Number,Data.Linq,PersonWithId,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (LastName != null ? LastName.GetHashCode() : 0);
Magic Number,Data.Linq,PersonWithId,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (MiddleName != null ? MiddleName.GetHashCode() : 0);
Magic Number,Data.Linq,PersonWithId,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ Gender.GetHashCode();
Magic Number,Data.Linq,PersonWithId,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\IdlTest.cs,GetHashCode,The following statement contains a magic number: result = (result * 397) ^ (FirstName != null ? FirstName.GetHashCode() : 0);
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,ConvertToIndexJoin1,The following statement contains a magic number: Assert.AreEqual(new[] { 0' 1' 2 }' idx.Select(_ => _.Index).ToArray());
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,ConvertToIndexJoin2,The following statement contains a magic number: Assert.AreEqual(new[] { 0' 1' 2 }' idx.Select(_ => _.Index).ToArray());
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,ConvertToIndexJoin2,The following statement contains a magic number: Assert.AreEqual(new[] { 0' 1' 2 }' idx.Select(_ => _.Index).ToArray());
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,Join1,The following statement contains a magic number: var q =  					from t in  						from ch in db.Child  							join p in db.Parent on ch.ParentID equals p.ParentID  						select ch.ParentID + p.ParentID  					where t > 2  					select t;
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,Join2,The following statement contains a magic number: var q =  					from t in  						from ch in db.Child  							join p in db.Parent on ch.ParentID equals p.ParentID  						select new { ID = ch.ParentID + p.ParentID }  					where t.ID > 2  					select t;
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,Join2,The following statement contains a magic number: Assert.AreEqual(2' ctx.SqlQuery.Select.Columns.Count);
Magic Number,Data.Linq,ParserTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,Join3,The following statement contains a magic number: Assert.AreEqual(2' ctx.SqlQuery.Select.Columns.Count);
Magic Number,Data.Linq,TableFunctionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TableFunctionTest.cs,Func2,The following statement contains a magic number: var q =  					from c in db.Child  					from p in db.GetParentByID(2)  					select p;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db => AreEqual(  					from t in Types  					where !t.BoolValue && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || (t.SmallIntValue | 2) == 10)  					select t'  					VisualBasicCommon.SearchCondition1(db)));
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db => AreEqual(  					from t in Types  					where !t.BoolValue && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || (t.SmallIntValue | 2) == 10)  					select t'  					VisualBasicCommon.SearchCondition1(db)));
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db => AreEqual(  					from t in Types  					where !t.BoolValue && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || (t.SmallIntValue | 2) == 10)  					select t'  					VisualBasicCommon.SearchCondition1(db)));
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db => AreEqual(  					from t in Types  					where !t.BoolValue && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || (t.SmallIntValue | 2) == 10)  					select t'  					VisualBasicCommon.SearchCondition1(db)));
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition3,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition3,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition3,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition4,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition4,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,VisualBasicTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\VisualBasicTest.cs,SearchCondition4,The following statement contains a magic number: var cQuery = from order in db.Order  								where order.OrderDate == new DateTime(1997' 11' 14)  					select order.OrderID;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,Count3,The following statement contains a magic number: return p.Children.Count(c => c.ChildID > id) + 2;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MapMember3,The following statement contains a magic number: Expressions.MapMember<Parent'int'int>((p'id) => Count3(p' id)' (p' id) => p.Children.Count(c => c.ChildID > id) + 2);
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MapMember3,The following statement contains a magic number: var n = 2;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression4,The following statement contains a magic number: var n = 3;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Select(p => Count4(p' n' 4))'  				db.Parent.Select(p => Count4(p' n' 4))));
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Select(p => Count4(p' n' 4))'  				db.Parent.Select(p => Count4(p' n' 4))));
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression5,The following statement contains a magic number: var n = 2;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression7,The following statement contains a magic number: var n = 2;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,Expression8,The following statement contains a magic number: return (db'ch) =>  				from p in db.Parent  				where p.ParentID == (int)Math.Floor(ch.ChildID / 10.0)  				select p;
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression8,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in Child  				from p  in  					from p in Parent  					where p.ParentID == ch.ChildID / 10  					select p  				where ch.ParentID == p.ParentID  				select ch  				'  				from ch in db.Child  				from p  in GetParent(db' ch)  				where ch.ParentID == p.ParentID  				select ch));
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression9,The following statement contains a magic number: AreEqual(  					from ch in Child  					from p  in  						from p in Parent  						where p.ParentID == ch.ChildID / 10  						select p  					where ch.ParentID == p.ParentID  					select ch  					'  					from ch in db.Child  					from p  in TestDbManager.GetParent9(db' ch)  					where ch.ParentID == p.ParentID  					select ch);
Magic Number,Data.Linq,ExpressionsTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ExpressionsTest.cs,MethodExpression10,The following statement contains a magic number: AreEqual(  					from ch in Child  					from p  in  						from p in Parent  						where p.ParentID == ch.ChildID / 10  						select p  					where ch.ParentID == p.ParentID  					select ch  					'  					from ch in db.Child  					from p  in db.GetParent10(ch)  					where ch.ParentID == p.ParentID  					select ch);
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Acos,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Acos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Asin,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Asin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Atan2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Atan2((double)p.MoneyValue / 15' 0) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cos,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cos((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cosh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Cosh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Cot,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Sql.Cot((double)p.MoneyValue / 15).Value * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Degrees(p.MoneyValue).Value) where t != 0.1m select t'  				from t in from p in db.Types select Math.Floor(Sql.Degrees(p.MoneyValue).Value) where t != 0.1m select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Sql.Degrees(p.MoneyValue).Value) where t != 0.1m select t'  				from t in from p in db.Types select Math.Floor(Sql.Degrees(p.MoneyValue).Value) where t != 0.1m select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.Degrees((double)p.MoneyValue).Value where t != 0.1 select Math.Floor(t)'  				from t in from p in db.Types select Sql.Degrees((double)p.MoneyValue).Value where t != 0.1 select Math.Floor(t)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.Degrees((double)p.MoneyValue).Value where t != 0.1 select Math.Floor(t)'  				from t in from p in db.Types select Sql.Degrees((double)p.MoneyValue).Value where t != 0.1 select Math.Floor(t)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.Degrees((int)p.MoneyValue).Value where t != 0.1 select t'  				from t in from p in db.Types select Sql.Degrees((int)p.MoneyValue).Value where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Deegrees3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.Degrees((int)p.MoneyValue).Value where t != 0.1 select t'  				from t in from p in db.Types select Sql.Degrees((int)p.MoneyValue).Value where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Exp,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Exp((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Exp((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Exp,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Exp((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Exp((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log((double)p.MoneyValue' 2)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log10,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log10((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log10((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Log10,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Log10((double)p.MoneyValue)) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Log10((double)p.MoneyValue)) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Max,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Max(p.MoneyValue' 5) where t != 0 select t'  				from t in from p in db.Types select Math.Max(p.MoneyValue' 5) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Max,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Max(p.MoneyValue' 5) where t != 0 select t'  				from t in from p in db.Types select Math.Max(p.MoneyValue' 5) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Min,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Min(p.MoneyValue' 5) where t != 0 select t'  				from t in from p in db.Types select Math.Min(p.MoneyValue' 5) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Min,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Min(p.MoneyValue' 5) where t != 0 select t'  				from t in from p in db.Types select Math.Min(p.MoneyValue' 5) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Pow,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Pow((double)p.MoneyValue' 3)) where t != 0 select t'  				from t in from p in db.Types select Math.Floor(Math.Pow((double)p.MoneyValue' 3)) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Pow,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Pow((double)p.MoneyValue' 3)) where t != 0 select t'  				from t in from p in db.Types select Math.Floor(Math.Pow((double)p.MoneyValue' 3)) where t != 0 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round((double)p.MoneyValue' 1) where t != 0 select Math.Round(t' 5)'  				from t in from p in db.Types select Math.Round((double)p.MoneyValue' 1) where t != 0 select Math.Round(t' 5)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round((double)p.MoneyValue' 1) where t != 0 select Math.Round(t' 5)'  				from t in from p in db.Types select Math.Round((double)p.MoneyValue' 1) where t != 0 select Math.Round(t' 5)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round10,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round10,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round11,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5)'  				from t in from p in db.Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round11,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5)'  				from t in from p in db.Types select Math.Round((double)p.MoneyValue' 1' MidpointRounding.ToEven) where t != 0 select Math.Round(t' 5)));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round12,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SQLite }' db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1' mp) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1' mp) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Round12,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SQLite }' db => AreEqual(  				from t in from p in    Types select Math.Round(p.MoneyValue' 1' mp) where t != 0 && t != 7 select t'  				from t in from p in db.Types select Math.Round(p.MoneyValue' 1' mp) where t != 0 && t != 7 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sin,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sin((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sinh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sinh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Sqrt,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Sqrt((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tan,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tan((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Tanh,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t'  				from t in from p in db.Types select Math.Floor(Math.Tanh((double)p.MoneyValue / 15) * 15) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Truncate1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Truncate(p.MoneyValue) where t != 0.1m select t'  				from t in from p in db.Types select Math.Truncate(p.MoneyValue) where t != 0.1m select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Truncate1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Truncate(p.MoneyValue) where t != 0.1m select t'  				from t in from p in db.Types select Math.Truncate(p.MoneyValue) where t != 0.1m select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Truncate2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Truncate((double)-p.MoneyValue) where t != 0.1 select t'  				from t in from p in db.Types select Math.Truncate((double)-p.MoneyValue) where t != 0.1 select t));
Magic Number,Data.Linq,MathFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\MathFunctions.cs,Truncate2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Math.Truncate((double)-p.MoneyValue) where t != 0.1 select t'  				from t in from p in db.Types select Math.Truncate((double)-p.MoneyValue) where t != 0.1 select t));
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test9,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					   ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()'  					db.ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()));
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test9,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					   ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()'  					db.ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()));
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test9,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					   ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()'  					db.ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()));
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test9,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					   ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()'  					db.ParentInheritance  						.Where(p => p.ParentID == 1 || p.ParentID == 2 || p.ParentID == 4)  						.OfType<ParentInheritanceNull>()));
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,ReferenceNavigation,The following statement contains a magic number: Assert.AreEqual(330' list.Count);
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test14,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = db.GetTable<ChildTest14>().Select(c => new ChildTest14() { ChildID = c.ChildID });  				FindById(q' 10);  			});
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test18,The following statement contains a magic number: ForEachProvider(db =>  			{  				var ids = Enumerable.Range(0' 10).ToList();  				var q   =  					from p1 in db.GetTable<Test18Person>()  					where ids.Contains(p1.PersonID)  					join p2 in db.GetTable<Test18Person>() on p1.PersonID equals p2.PersonID  					select p1;    				var list = q.Distinct().OfType<Test18Female>().ToList();  			});
Magic Number,Data.Linq,Inheritance,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Inheritance.cs,Test19,The following statement contains a magic number: ForEachProvider(db =>  			{  				var ids = Enumerable.Range(0' 10).ToList();  				var q   =  					from p1 in db.GetTable<Test18Person>()  					where ids.Contains(p1.PersonID)  					join p2 in db.GetTable<Test18Person>() on p1.PersonID equals p2.PersonID  					select p1;    				IQueryable iq   = q.Distinct();  				var        list = iq.OfType<Test18Female>().ToList();  			});
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Except1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Child.Except(   Child.Where(p => p.ParentID == 3))'  				db.Child.Except(db.Child.Where(p => p.ParentID == 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Except1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Child.Except(   Child.Where(p => p.ParentID == 3))'  				db.Child.Except(db.Child.Where(p => p.ParentID == 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Except2,The following statement contains a magic number: var ids = new[] { 1' 2 };
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Intersect,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Child.Intersect(   Child.Where(p => p.ParentID == 3))'  				db.Child.Intersect(db.Child.Where(p => p.ParentID == 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Intersect,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Child.Intersect(   Child.Where(p => p.ParentID == 3))'  				db.Child.Intersect(db.Child.Where(p => p.ParentID == 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p =>    Child.Where(c => c.ParentID == p.ParentID).Any(c => c.ParentID > 3))'  				db.Parent.Where(p => db.Child.Where(c => c.ParentID == p.ParentID).Any(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p =>    Child.Where(c => c.ParentID == p.ParentID).Any(c => c.ParentID > 3))'  				db.Parent.Where(p => db.Child.Where(c => c.ParentID == p.ParentID).Any(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.Any(c => c.ParentID > 3))'  				db.Parent.Where(p => p.Children.Any(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.Any(c => c.ParentID > 3))'  				db.Parent.Where(p => p.Children.Any(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any31,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.ParentID > 0 && p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3))'  				db.Parent.Where(p => p.ParentID > 0 && p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any31,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.ParentID > 0 && p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3))'  				db.Parent.Where(p => p.ParentID > 0 && p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,SelectAny,The following statement contains a magic number: return p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3);
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,SelectAnyExpression,The following statement contains a magic number: return p => p.Children.Any(c => c.ParentID > 0 && c.ParentID > 3);
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.Any(c => c.GrandChildren.Any(g => g.ParentID > 3)))'  				db.Parent.Where(p => p.Children.Any(c => c.GrandChildren.Any(g => g.ParentID > 3)))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.Any(c => c.GrandChildren.Any(g => g.ParentID > 3)))'  				db.Parent.Where(p => p.Children.Any(c => c.GrandChildren.Any(g => g.ParentID > 3)))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any6,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Any(c => c.ParentID > 3)'  				db.Child.Any(c => c.ParentID > 3)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any6,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Any(c => c.ParentID > 3)'  				db.Child.Any(c => c.ParentID > 3)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any61,The following statement contains a magic number: Assert.AreEqual(  					            Child.   Any(c => c.ParentID > 3)'  					db.GetTable<Child>().Any(c => c.ParentID > 3));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any61,The following statement contains a magic number: Assert.AreEqual(  					            Child.   Any(c => c.ParentID > 3)'  					db.GetTable<Child>().Any(c => c.ParentID > 3));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any12,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in             Parent    where             Child.   Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p'  				from p in db.GetTable<Parent>() where db.GetTable<Child>().Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Any12,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in             Parent    where             Child.   Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p'  				from p in db.GetTable<Parent>() where db.GetTable<Child>().Any(c => p.ParentID == c.ParentID && c.ChildID > 3) select p));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p =>    Child.Where(c => c.ParentID == p.ParentID).All(c => c.ParentID > 3))'  				db.Parent.Where(p => db.Child.Where(c => c.ParentID == p.ParentID).All(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p =>    Child.Where(c => c.ParentID == p.ParentID).All(c => c.ParentID > 3))'  				db.Parent.Where(p => db.Child.Where(c => c.ParentID == p.ParentID).All(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.All(c => c.ParentID > 3))'  				db.Parent.Where(p => p.Children.All(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.All(c => c.ParentID > 3))'  				db.Parent.Where(p => p.Children.All(c => c.ParentID > 3))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.All(c => c.GrandChildren.All(g => g.ParentID > 3)))'  				db.Parent.Where(p => p.Children.All(c => c.GrandChildren.All(g => g.ParentID > 3)))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p => p.Children.All(c => c.GrandChildren.All(g => g.ParentID > 3)))'  				db.Parent.Where(p => p.Children.All(c => c.GrandChildren.All(g => g.ParentID > 3)))));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All4,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.All(c => c.ParentID > 3)'  				db.Child.All(c => c.ParentID > 3)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All4,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.All(c => c.ParentID > 3)'  				db.Child.All(c => c.ParentID > 3)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,All5,The following statement contains a magic number: int n = 3;
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,SubQueryAllAny,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in    Parent  				where    Child.Where(o => o.Parent == c).All(o =>    Child.Where(e => o == e).Any(e => e.ChildID > 10))  				select c'  				from c in db.Parent  				where db.Child.Where(o => o.Parent == c).All(o => db.Child.Where(e => o == e).Any(e => e.ChildID > 10))  				select c));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,SubQueryAllAny,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from c in    Parent  				where    Child.Where(o => o.Parent == c).All(o =>    Child.Where(e => o == e).Any(e => e.ChildID > 10))  				select c'  				from c in db.Parent  				where db.Child.Where(o => o.Parent == c).All(o => db.Child.Where(e => o == e).Any(e => e.ChildID > 10))  				select c));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains7,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.ParentID).Contains(11)'  				db.Child.Select(c => c.ParentID).Contains(11)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains7,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.ParentID).Contains(11)'  				db.Child.Select(c => c.ParentID).Contains(11)));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains701,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})'  				db.Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains701,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})'  				db.Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains701,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})'  				db.Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains701,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})'  				db.Child.Select(c => c.Parent).Contains(new Parent { ParentID = 11' Value1 = 11})));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains801,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				join ch in Child      on p.ParentID equals ch.ParentID  				join gc in GrandChild on ch.ChildID equals gc.ChildID  				select new GrandChild { ParentID = 2' ChildID = ch.ChildID' GrandChildID = gc.GrandChildID } into gc  				where arr.Contains(gc)  				select gc'  				from p in db.Parent  				join ch in db.Child      on p.ParentID equals ch.ParentID  				join gc in db.GrandChild on ch.ChildID equals gc.ChildID  				select new GrandChild { ParentID = 2' ChildID = ch.ChildID' GrandChildID = gc.GrandChildID } into gc  				where arr.Contains(gc)  				select gc));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains801,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				join ch in Child      on p.ParentID equals ch.ParentID  				join gc in GrandChild on ch.ChildID equals gc.ChildID  				select new GrandChild { ParentID = 2' ChildID = ch.ChildID' GrandChildID = gc.GrandChildID } into gc  				where arr.Contains(gc)  				select gc'  				from p in db.Parent  				join ch in db.Child      on p.ParentID equals ch.ParentID  				join gc in db.GrandChild on ch.ChildID equals gc.ChildID  				select new GrandChild { ParentID = 2' ChildID = ch.ChildID' GrandChildID = gc.GrandChildID } into gc  				where arr.Contains(gc)  				select gc));
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains9,The following statement contains a magic number: var arr = Parent1.Take(2).ToArray();
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains10,The following statement contains a magic number: var arr = new[]  				{  					new Northwind.Order { OrderID = 11000 }'  					new Northwind.Order { OrderID = 11001 }'  					new Northwind.Order { OrderID = 11002 }  				};
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains10,The following statement contains a magic number: var arr = new[]  				{  					new Northwind.Order { OrderID = 11000 }'  					new Northwind.Order { OrderID = 11001 }'  					new Northwind.Order { OrderID = 11002 }  				};
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains10,The following statement contains a magic number: var arr = new[]  				{  					new Northwind.Order { OrderID = 11000 }'  					new Northwind.Order { OrderID = 11001 }'  					new Northwind.Order { OrderID = 11002 }  				};
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains12,The following statement contains a magic number: var q =  					from e in db.EmployeeTerritory  					group e by e.Employee into g  					where g.Key.EmployeeTerritories.Count() > 1 && g.Count() > 2  					select new  					{  						g.Key.LastName'  						//cnt = g.Where(t => t.Employee.FirstName.Contains("an")).Count()'  					};
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,Contains14,The following statement contains a magic number: var ps = Parent1.OrderBy(p => p.ParentID).Take(2).ToArray();
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,TestForGroupBy,The following statement contains a magic number: ForEachProvider(db =>  			{  				GetData(db' new List<int?> { 2 });  				GetData(db' new List<int?> { 3 });  			});
Magic Number,Data.Linq,SetTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SetTest.cs,TestForGroupBy,The following statement contains a magic number: ForEachProvider(db =>  			{  				GetData(db' new List<int?> { 2 });  				GetData(db' new List<int?> { 3 });  			});
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID select ch.ChildID).Max()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID select ch.ChildID).Max()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID select ch.ChildID).Max()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID select ch.ChildID).Max()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID > 1 select ch.ChildID).Max()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID > 1 select ch.ChildID).Max()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID > 1 select ch.ChildID).Max()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID > 1 select ch.ChildID).Max()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).SingleOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID != 5  				select (from ch in Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()'  				from p in db.Parent  				where p.ParentID != 5  				select (from ch in db.Child where ch.ParentID == p.ParentID && ch.ChildID == ch.ParentID * 10 + 1 select ch.ChildID).FirstOrDefault()));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test5,The following statement contains a magic number: IEnumerable<int> ids = new[] { 1' 2 };
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test6,The following statement contains a magic number: var id = 2;
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Test8,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent  =  					from p in db.Parent  					where p.ParentID == 1  					select p.ParentID;    				var chilren =  					from c in db.Child  					where parent.Contains(c.ParentID)  					select c;    				var chs1 = chilren.ToList();    				parent  =  					from p in db.Parent  					where p.ParentID == 2  					select p.ParentID;    				chilren =  					from c in db.Child  					where parent.Contains(c.ParentID)  					select c;    				var chs2 = chilren.ToList();    				Assert.AreEqual(chs2.Count' chs2.Except(chs1).Count());  			});
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Contains1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Sybase }'  				db => AreEqual(  					from p in Parent  					where (from p1 in    Parent where p1.Value1 == p.Value1 select p.ParentID).Take(3).Contains(p.ParentID)  					select p'  					from p in db.Parent  					where (from p1 in db.Parent where p1.Value1 == p.Value1 select p.ParentID).Take(3).Contains(p.ParentID)  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Contains1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Sybase }'  				db => AreEqual(  					from p in Parent  					where (from p1 in    Parent where p1.Value1 == p.Value1 select p.ParentID).Take(3).Contains(p.ParentID)  					select p'  					from p in db.Parent  					where (from p1 in db.Parent where p1.Value1 == p.Value1 select p.ParentID).Take(3).Contains(p.ParentID)  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Contains2,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Sybase }'  				db => AreEqual(  					from p in Parent  					where (from p1 in    Parent where p1.Value1 == p.Value1 select p1.ParentID).Take(3).Contains(p.ParentID)  					select p'  					from p in db.Parent  					where (from p1 in db.Parent where p1.Value1 == p.Value1 select p1.ParentID).Take(3).Contains(p.ParentID)  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Contains2,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Sybase }'  				db => AreEqual(  					from p in Parent  					where (from p1 in    Parent where p1.Value1 == p.Value1 select p1.ParentID).Take(3).Contains(p.ParentID)  					select p'  					from p in db.Parent  					where (from p1 in db.Parent where p1.Value1 == p.Value1 select p1.ParentID).Take(3).Contains(p.ParentID)  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p'  					from p in  						from p in db.Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p'  					from p in  						from p in db.Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count2,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new Parent  						{  							ParentID = p.ParentID'  							Value1   = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Value1 > 1  					select p'  					from p in  						from p in db.Parent  						select new Parent  						{  							ParentID = p.ParentID'  							Value1   = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Value1 > 1  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count2,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new Parent  						{  							ParentID = p.ParentID'  							Value1   = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Value1 > 1  					select p'  					from p in  						from p in db.Parent  						select new Parent  						{  							ParentID = p.ParentID'  							Value1   = p.Children.Where(t => t.ParentID > 0).Sum(t => t.ParentID) / 2'  						}  					where p.Value1 > 1  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p'  					from p in  						from p in db.Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p));
Magic Number,Data.Linq,SubQuery,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SubQuery.cs,Count3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from p in  						from p in Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p'  					from p in  						from p in db.Parent  						select new  						{  							p.ParentID'  							Sum = p.Children.Sum(t => t.ParentID) / 2'  						}  					where p.Sum > 1  					select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID > 2 && value && true && !false select p'  				from p in db.Parent where p.ParentID > 2 && value && true && !false select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID > 2 && value && true && !false select p'  				from p in db.Parent where p.ParentID > 2 && value && true && !false select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID > 2 && value || true && !false select p'  				from p in db.Parent where p.ParentID > 2 && value || true && !false select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID > 2 && value || true && !false select p'  				from p in db.Parent where p.ParentID > 2 && value || true && !false select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where values.Contains(p.ParentID) && !false || p.ParentID > 2 select p'  				from p in db.Parent where values.Contains(p.ParentID) && !false || p.ParentID > 2 select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Bool3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where values.Contains(p.ParentID) && !false || p.ParentID > 2 select p'  				from p in db.Parent where values.Contains(p.ParentID) && !false || p.ParentID > 2 select p));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,NewGuid,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID            = 1001'  						MoneyValue    = 1001'  						DateTimeValue = Sql.CurrentTimestamp'  						BoolValue     = true'  						GuidValue     = Sql.NewGuid()'  						BinaryValue   = new Binary(new byte[] { 1 })'  						SmallIntValue = 1001  					});    					var guid = db.Types.Single(_ => _.ID == 1001).GuidValue;    					Assert.AreEqual(1001' db.Types.Single(_ => _.GuidValue == guid).ID);    					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,BinaryLength,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db =>  				{  					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  						.Update();    					Assert.That(  						(from t in db.Types where t.ID == 1 select t.BinaryValue.Length).First()'  						Is.EqualTo(5));    					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' (Binary)null)  						.Update();  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,BinaryLength,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db =>  				{  					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  						.Update();    					Assert.That(  						(from t in db.Types where t.ID == 1 select t.BinaryValue.Length).First()'  						Is.EqualTo(5));    					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' (Binary)null)  						.Update();  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,BinaryLength,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db =>  				{  					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  						.Update();    					Assert.That(  						(from t in db.Types where t.ID == 1 select t.BinaryValue.Length).First()'  						Is.EqualTo(5));    					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' (Binary)null)  						.Update();  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,BinaryLength,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db =>  				{  					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  						.Update();    					Assert.That(  						(from t in db.Types where t.ID == 1 select t.BinaryValue.Length).First()'  						Is.EqualTo(5));    					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' (Binary)null)  						.Update();  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,BinaryLength,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Access }'  				db =>  				{  					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  						.Update();    					Assert.That(  						(from t in db.Types where t.ID == 1 select t.BinaryValue.Length).First()'  						Is.EqualTo(5));    					db.Types  						.Where(t => t.ID == 1)  						.Set(t => t.BinaryValue' (Binary)null)  						.Update();  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,InsertBinary1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					Binary data = null;    					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID          = 1001'  						BinaryValue = data'  						BoolValue   = true'  					});  					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,InsertBinary1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					Binary data = null;    					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID          = 1001'  						BinaryValue = data'  						BoolValue   = true'  					});  					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,InsertBinary1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.Firebird' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }'  				db =>  				{  					Binary data = null;    					db.Types.Delete(_ => _.ID > 1000);  					db.Types.Insert(() => new LinqDataTypes  					{  						ID          = 1001'  						BinaryValue = data'  						BoolValue   = true'  					});  					db.Types.Delete(_ => _.ID > 1000);  				});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary1,The following statement contains a magic number: ForEachProvider(db =>  			{  				db.Types  					.Where(t => t.ID == 1)  					.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  					.Update();    				var g = from t in db.Types where t.ID == 1 select t.BinaryValue;    				foreach (var binary in g)  				{  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary1,The following statement contains a magic number: ForEachProvider(db =>  			{  				db.Types  					.Where(t => t.ID == 1)  					.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  					.Update();    				var g = from t in db.Types where t.ID == 1 select t.BinaryValue;    				foreach (var binary in g)  				{  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary1,The following statement contains a magic number: ForEachProvider(db =>  			{  				db.Types  					.Where(t => t.ID == 1)  					.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  					.Update();    				var g = from t in db.Types where t.ID == 1 select t.BinaryValue;    				foreach (var binary in g)  				{  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary1,The following statement contains a magic number: ForEachProvider(db =>  			{  				db.Types  					.Where(t => t.ID == 1)  					.Set(t => t.BinaryValue' new Binary(new byte[] { 1' 2' 3' 4' 5 }))  					.Update();    				var g = from t in db.Types where t.ID == 1 select t.BinaryValue;    				foreach (var binary in g)  				{  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,UpdateBinary2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db =>  			{  				var ints     = new[] { 1' 2 };  				var binaries = new[] { new byte[] { 1' 2' 3' 4' 5 }' new byte[] { 5' 4' 3' 2' 1 } };    				for (var i = 1; i <= 2; i++)  				{  					db.Types  						.Where(t => t.ID == ints[i - 1])  						.Set(t => t.BinaryValue' binaries[i - 1])  						.Update();  				}    				var g = from t in db.Types where new[] { 1' 2 }.Contains(t.ID) select t;    				foreach (var binary in g)  					Assert.AreEqual(binaries[binary.ID - 1]' binary.BinaryValue.ToArray());  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTime1,The following statement contains a magic number: var dt = Types2[3].DateTimeValue;
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray1,The following statement contains a magic number: ForEachProvider(db =>  				AreEqual(  					from t in    Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t'  					from t in db.Types2 where new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100) }.Contains(t.DateTimeValue) select t));
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray2,The following statement contains a magic number: var arr = new DateTime?[] { new DateTime(2001' 1' 11' 1' 11' 21' 100)' new DateTime(2012' 11' 7' 19' 19' 29' 90) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray3,The following statement contains a magic number: var arr = new List<DateTime?> { new DateTime(2001' 1' 11' 1' 11' 21' 100) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray3,The following statement contains a magic number: var arr = new List<DateTime?> { new DateTime(2001' 1' 11' 1' 11' 21' 100) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray3,The following statement contains a magic number: var arr = new List<DateTime?> { new DateTime(2001' 1' 11' 1' 11' 21' 100) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray3,The following statement contains a magic number: var arr = new List<DateTime?> { new DateTime(2001' 1' 11' 1' 11' 21' 100) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeArray3,The following statement contains a magic number: var arr = new List<DateTime?> { new DateTime(2001' 1' 11' 1' 11' 21' 100) };
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,DateTimeParams,The following statement contains a magic number: var arr = new List<DateTime?>  			{  				new DateTime(1992' 1' 11' 1' 11' 21' 100)'  				new DateTime(1993' 1' 11' 1' 11' 21' 100)  			};
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Unicode,The following statement contains a magic number: ForEachProvider(new[] { "DevartOracle"'  ProviderName.Informix' ProviderName.Firebird' ProviderName.Sybase }' db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id =  						db.Person  							.InsertWithIdentity(() => new Person  							{  								FirstName = "擊敗奴隸"'  								LastName  = "Юникодкин"'  								Gender    = Gender.Male  							});    					Assert.NotNull(id);    					var person = db.Person.Single(p => p.FirstName == "擊敗奴隸" && p.LastName == "Юникодкин");    					Assert.NotNull (person);  					Assert.AreEqual(id' person.ID);  					Assert.AreEqual("擊敗奴隸"' person.FirstName);  					Assert.AreEqual("Юникодкин"' person.LastName);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,Unicode,The following statement contains a magic number: ForEachProvider(new[] { "DevartOracle"'  ProviderName.Informix' ProviderName.Firebird' ProviderName.Sybase }' db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id =  						db.Person  							.InsertWithIdentity(() => new Person  							{  								FirstName = "擊敗奴隸"'  								LastName  = "Юникодкин"'  								Gender    = Gender.Male  							});    					Assert.NotNull(id);    					var person = db.Person.Single(p => p.FirstName == "擊敗奴隸" && p.LastName == "Юникодкин");    					Assert.NotNull (person);  					Assert.AreEqual(id' person.ID);  					Assert.AreEqual("擊敗奴隸"' person.FirstName);  					Assert.AreEqual("Юникодкин"' person.LastName);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,TestCultureInfo,The following statement contains a magic number: AreEqual(  					from t in    Types where t.MoneyValue > 0.5m select t'  					from t in db.Types where t.MoneyValue > 0.5m select t);
Magic Number,Data.Linq,Types,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Types.cs,TestCultureInfo,The following statement contains a magic number: AreEqual(  					from t in    Types where t.MoneyValue > 0.5m select t'  					from t in db.Types where t.MoneyValue > 0.5m select t);
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where new[] { 1' 2 }.Contains(p.ParentID) select p'  				from p in db.Parent where new[] { 1' 2 }.Contains(p.ParentID) select p));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where new[] { 1' 2 }.Contains(p.ParentID) select p'  				from p in db.Parent where new[] { 1' 2 }.Contains(p.ParentID) select p));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains2,The following statement contains a magic number: var arr = new[] { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains3,The following statement contains a magic number: var n = 2;
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains4,The following statement contains a magic number: var arr = new[] { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains5,The following statement contains a magic number: var arr1 = new[] { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains5,The following statement contains a magic number: var arr2 = new[] { 1' 2' 4 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains5,The following statement contains a magic number: var arr2 = new[] { 1' 2' 4 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains6,The following statement contains a magic number: var arr = new List<int> { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Contains7,The following statement contains a magic number: IEnumerable<int> arr = new[] { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsKey1,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsKey1,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsKey2,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsKey2,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsValue1,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsValue1,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsValue2,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsValue2,The following statement contains a magic number: var arr = new Dictionary<int'int>  			{  				{ 1' 1 }'  				{ 2' 2 }'  			};
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ContainsHashSet1,The following statement contains a magic number: var arr = new HashSet<int> { 1' 2 };
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,EmptyContains1,The following statement contains a magic number: var expected =  				from p in Parent  				where new int[0].Contains(p.ParentID) || p.ParentID == 2  				select p;
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,EmptyContains1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p in db.Parent  				where new int[0].Contains(p.ParentID) || p.ParentID == 2  				select p));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Equals1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID.Equals(2) select p'  				from p in db.Parent where p.ParentID.Equals(2) select p));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Equals1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where p.ParentID.Equals(2) select p'  				from p in db.Parent where p.ParentID.Equals(2) select p));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Equals2,The following statement contains a magic number: var child    = (from ch in Child where ch.ParentID == 2 select ch).First();
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,ChildCountExpression,The following statement contains a magic number: return  				(Expression<Func<Parent' int>>)  				(p => p.Children.Where(c => c.ParentID > 2).Sum(c => c.ParentID * c.ChildID));
Magic Number,Data.Linq,Functions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Functions.cs,Sum2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Select(p => p.Children.Where(c => c.ParentID > 2).Sum(c => c.ParentID * c.ChildID))'  				db.Parent.Select(p => ChildCount(p))));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select p.Value1 ?? p.ParentID % 2).Distinct()'  				(from p in db.Parent select p.Value1 ?? p.ParentID % 2).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select p.Value1 ?? p.ParentID % 2).Distinct()'  				(from p in db.Parent select p.Value1 ?? p.ParentID % 2).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new { Value = p.Value1 ?? p.ParentID % 2' p.Value1 }).Distinct()'  				(from p in db.Parent select new { Value = p.Value1 ?? p.ParentID % 2' p.Value1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new { Value = p.Value1 ?? p.ParentID % 2' p.Value1 }).Distinct()'  				(from p in db.Parent select new { Value = p.Value1 ?? p.ParentID % 2' p.Value1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = p.Value1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = p.Value1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = p.Value1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = p.Value1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct5,The following statement contains a magic number: var id = 2;
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = id + 1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = id + 1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = id + 1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID % 2' Value1 = id + 1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct6,The following statement contains a magic number: var id = 2;
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID + id % 2' Value1 = id + 1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID + id % 2' Value1 = id + 1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,Distinct6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db => AreEqual(  				(from p in    Parent select new Parent { ParentID = p.Value1 ?? p.ParentID + id % 2' Value1 = id + 1 }).Distinct()'  				(from p in db.Parent select new Parent { ParentID = p.Value1 ?? p.ParentID + id % 2' Value1 = id + 1 }).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,DistinctCount,The following statement contains a magic number: var expected =  				from p in Parent  					join c in Child on p.ParentID equals c.ParentID  				where c.ChildID > 20  				select p;
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,DistinctCount,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Distinct().Count()' result.Distinct().Count());  			});
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,DistinctMax,The following statement contains a magic number: var expected =  				from p in Parent  					join c in Child on p.ParentID equals c.ParentID  				where c.ChildID > 20  				select p;
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,DistinctMax,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Distinct().Max(p => p.ParentID)' result.Distinct().Max(p => p.ParentID));  			});
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,TakeDistinct,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase' ProviderName.SQLite }'  				db => AreEqual(  					(from ch in    Child orderby ch.ParentID select ch.ParentID).Take(4).Distinct()'  					(from ch in db.Child orderby ch.ParentID select ch.ParentID).Take(4).Distinct()));
Magic Number,Data.Linq,DistinctTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Distinct.cs,TakeDistinct,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase' ProviderName.SQLite }'  				db => AreEqual(  					(from ch in    Child orderby ch.ParentID select ch.ParentID).Take(4).Distinct()'  					(from ch in db.Child orderby ch.ParentID select ch.ParentID).Take(4).Distinct()));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,FirstWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.First(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,FirstWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.First(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,FirstOrDefault,The following statement contains a magic number: ForEachProvider(db => Assert.IsNull((from p in db.Parent where p.ParentID == 100 select p).FirstOrDefault()));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,FirstOrDefaultWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.FirstOrDefault(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,FirstOrDefaultWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.FirstOrDefault(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,SingleWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.Single(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,SingleWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.Single(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,SingleOrDefault,The following statement contains a magic number: ForEachProvider(db => Assert.IsNull((from p in db.Parent where p.ParentID == 100 select p).SingleOrDefault()));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,SingleOrDefaultWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.SingleOrDefault(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ElementOperationTest.cs,SingleOrDefaultWhere,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' db.Parent.SingleOrDefault(p => p.ParentID == 2).ParentID));
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MemberMapperTest1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from p in db.GetTable<ParentObject2>()  					where p.ParentID == 1  					select p;    				Assert.AreEqual(new DateTime(2010' 1' 1)' q.First().Value1);  			});
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MemberMapperTest2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from p in db.GetTable<ParentObject2>()  					where p.ParentID == 1  					select p.Value1;    				Assert.AreEqual(new DateTime(2010' 1' 1)' q.First());  			});
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MyType3,The following statement contains a magic number: db.Insert(new MyParent { ParentID = new MyInt { MyValue = 1001 }' Value1 = 1001 });
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MyType3,The following statement contains a magic number: db.Insert(new MyParent { ParentID = new MyInt { MyValue = 1001 }' Value1 = 1001 });
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MyType3,The following statement contains a magic number: db.Parent.Delete(p => p.ParentID >= 1000);
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,MapIgnore3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				              Parent    .Select(p => new { p.ParentID' Value = 2            })'  				db.GetTable<MyParent1>().Select(p => new { p.ParentID' Value = p.GetValue() })));
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,Test4,The following statement contains a magic number: db.Child. Delete(p => p.ParentID == 1001);
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,Test4,The following statement contains a magic number: db.Parent.Delete(p => p.ParentID == 1001);
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,Test4,The following statement contains a magic number: parent.ParentID = 1001;
Magic Number,Data.Linq,Mapping,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,Test4,The following statement contains a magic number: child.ChildID = 1001;
Magic Number,Data.Linq,IntToDateMemberMapper,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,SetValue,The following statement contains a magic number: ((ParentObject2)o).Value1 = new DateTime(2010' 1' Convert.ToInt32(value));
Magic Number,Data.Linq,MyParent1,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Mapping.cs,GetValue,The following statement contains a magic number: return 2;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take1,The following statement contains a magic number: ForEachProvider(db =>  			{  				for (var i = 2; i <= 3; i++)  					Assert.AreEqual(i' (from ch in db.Child select ch).Take(i).ToList().Count);  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take1,The following statement contains a magic number: ForEachProvider(db =>  			{  				for (var i = 2; i <= 3; i++)  					Assert.AreEqual(i' (from ch in db.Child select ch).Take(i).ToList().Count);  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take3,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take3,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take3,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take3,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take4,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take4,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take4,The following statement contains a magic number: ForEachProvider(db =>  				Assert.AreEqual(3' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(3' db.Child.Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(3' db.Child.Take(3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take6,The following statement contains a magic number: var expected = Child.OrderBy(c => c.ChildID).Take(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take6,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderBy(c => c.ChildID).Take(3);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take7,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(3' db.Child.Take(() => 3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take7,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(3' db.Child.Take(() => 3).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take8,The following statement contains a magic number: var n = 3;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Take8,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(3' db.Child.Take(() => n).ToList().Count));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,TakeCount,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Child.Take(5).Count()'  				db.Child.Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,TakeCount,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Child.Take(5).Count()'  				db.Child.Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip1,The following statement contains a magic number: ForEachProvider(db => AreEqual(Child.Skip(3)' db.Child.Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip1,The following statement contains a magic number: ForEachProvider(db => AreEqual(Child.Skip(3)' db.Child.Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: var expected = (from ch in Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: var expected = (from ch in Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: var expected = (from ch in Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID > 3 || ch.ChildID < 4 select ch).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip3,The following statement contains a magic number: var expected = (from ch in Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip3,The following statement contains a magic number: var expected = (from ch in Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' (from ch in db.Child where ch.ChildID >= 0 && ch.ChildID <= 100 select ch).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip4,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Skip(3);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip5,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).ThenBy(c => c.ParentID + 1).Skip(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip5,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected' db.Child.OrderByDescending(c => c.ChildID).ThenBy(c => c.ParentID + 1).Skip(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip6,The following statement contains a magic number: ForEachProvider(db => AreEqual(Child.Skip(3)' db.Child.Skip(() => 3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip6,The following statement contains a magic number: ForEachProvider(db => AreEqual(Child.Skip(3)' db.Child.Skip(() => 3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,Skip7,The following statement contains a magic number: var n = 3;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Count()'  				db.Child.Skip(2).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Count()'  				db.Child.Skip(2).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake1,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Skip(2).Take(5);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake1,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Skip(2).Take(5);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Skip(2).Take(5);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Skip(2).Take(5);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake2,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Take(7).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake2,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Take(7).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Take(7).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Take(7).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake3,The following statement contains a magic number: var expected = Child.OrderBy(c => c.ChildID).Skip(1).Take(7).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake3,The following statement contains a magic number: var expected = Child.OrderBy(c => c.ChildID).Skip(1).Take(7).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderBy(c => c.ChildID).Skip(1).Take(7).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result = db.Child.OrderBy(c => c.ChildID).Skip(1).Take(7).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake4,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Skip(1).Take(7).OrderBy(c => c.ChildID).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake4,The following statement contains a magic number: var expected = Child.OrderByDescending(c => c.ChildID).Skip(1).Take(7).OrderBy(c => c.ChildID).Skip(2);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake4,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SQLite' ProviderName.Sybase' ProviderName.Access }' db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Skip(1).Take(7).OrderBy(c => c.ChildID).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake4,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SQLite' ProviderName.Sybase' ProviderName.Access }' db =>  			{  				var result = db.Child.OrderByDescending(c => c.ChildID).Skip(1).Take(7).OrderBy(c => c.ChildID).Skip(2);  				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var list = db.Child.Skip(2).Take(5).ToList();  				Assert.AreEqual(5' list.Count);  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var list = db.Child.Skip(2).Take(5).ToList();  				Assert.AreEqual(5' list.Count);  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var list = db.Child.Skip(2).Take(5).ToList();  				Assert.AreEqual(5' list.Count);  			});
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake6,The following statement contains a magic number: q1 = q1.Skip(12);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake6,The following statement contains a magic number: q1 = q1.Take(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake6,The following statement contains a magic number: q3 = q3.Skip(12);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTake6,The following statement contains a magic number: q3 = q3.Take(3);
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTakeCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SqlCe' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Take(5).Count()'  				db.Child.Skip(2).Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTakeCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SqlCe' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Take(5).Count()'  				db.Child.Skip(2).Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTakeCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SqlCe' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Take(5).Count()'  				db.Child.Skip(2).Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,SkipTakeCount,The following statement contains a magic number: ForEachProvider(new[] { "Sql2000"' ProviderName.SqlCe' ProviderName.Sybase' ProviderName.SQLite' ProviderName.Access }' db => Assert.AreEqual(  				   Child.Skip(2).Take(5).Count()'  				db.Child.Skip(2).Take(5).Count()));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAt1,The following statement contains a magic number: Assert.AreEqual(  					(from p in    Parent where p.ParentID > 1 select p).ElementAt(3)'  					(from p in db.Parent where p.ParentID > 1 select p).ElementAt(3));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAt1,The following statement contains a magic number: Assert.AreEqual(  					(from p in    Parent where p.ParentID > 1 select p).ElementAt(3)'  					(from p in db.Parent where p.ParentID > 1 select p).ElementAt(3));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAt2,The following statement contains a magic number: var n = 3;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault1,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				(from p in    Parent where p.ParentID > 1 select p).ElementAtOrDefault(3)'  				(from p in db.Parent where p.ParentID > 1 select p).ElementAtOrDefault(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault1,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				(from p in    Parent where p.ParentID > 1 select p).ElementAtOrDefault(3)'  				(from p in db.Parent where p.ParentID > 1 select p).ElementAtOrDefault(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault2,The following statement contains a magic number: ForEachProvider(db => Assert.IsNull((from p in db.Parent where p.ParentID > 1 select p).ElementAtOrDefault(300000)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault3,The following statement contains a magic number: var n = 3;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault4,The following statement contains a magic number: var n = 300000;
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Person.ElementAtOrDefault(3)'  				db.Person.ElementAtOrDefault(3)));
Magic Number,Data.Linq,TakeSkipTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TakeSkipTest.cs,ElementAtDefault5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Person.ElementAtOrDefault(3)'  				db.Person.ElementAtOrDefault(3)));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,OrderBy5,The following statement contains a magic number: var expected =  				from ch in Child  				orderby ch.ChildID % 2' ch.ChildID  				select ch;
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,OrderBy5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from ch in db.Child  					orderby ch.ChildID % 2' ch.ChildID  					select ch;    				Assert.IsTrue(result.ToList().SequenceEqual(expected));  			});
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Count2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.ParentID).Take(3).Count()'  				db.Parent.OrderBy(p => p.ParentID).Take(3).Count()));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Count2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.ParentID).Take(3).Count()'  				db.Parent.OrderBy(p => p.ParentID).Take(3).Count()));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Min2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.ParentID).Take(3).Min(p => p.ParentID)'  				db.Parent.OrderBy(p => p.ParentID).Take(3).Min(p => p.ParentID)));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Min2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.ParentID).Take(3).Min(p => p.ParentID)'  				db.Parent.OrderBy(p => p.ParentID).Take(3).Min(p => p.ParentID)));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Min3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase' ProviderName.Informix }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.Value1).Take(3).Min(p => p.ParentID)'  				db.Parent.OrderBy(p => p.Value1).Take(3).Min(p => p.ParentID)));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Min3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Sybase' ProviderName.Informix }' db => Assert.AreEqual(  				   Parent.OrderBy(p => p.Value1).Take(3).Min(p => p.ParentID)'  				db.Parent.OrderBy(p => p.Value1).Take(3).Min(p => p.ParentID)));
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Take,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					(from p in db.Parent  					 join c in db.Child on p.ParentID equals c.ParentID  					 join g in db.GrandChild on c.ChildID equals g.ChildID  					 select p).Take(3).OrderBy(p => p.ParentID);    				Assert.AreEqual(3' q.AsEnumerable().Count());  			});
Magic Number,Data.Linq,OrderByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\OrderByTest.cs,Take,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					(from p in db.Parent  					 join c in db.Child on p.ParentID equals c.ParentID  					 join g in db.GrandChild on c.ChildID equals g.ChildID  					 select p).Take(3).OrderBy(p => p.ParentID);    				Assert.AreEqual(3' q.AsEnumerable().Count());  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID;    				var list = q.ToList().Where(n => n.Key < 6).OrderBy(n => n.Key).ToList();    				Assert.AreEqual(4' list.Count);    				for (var i = 0; i < list.Count; i++)  				{  					var values = list[i].OrderBy(c => c.ChildID).ToList();    					Assert.AreEqual(i + 1' list[i].Key);  					Assert.AreEqual(i + 1' values.Count);    					for (var j = 0; j < values.Count; j++)  						Assert.AreEqual((i + 1) * 10 + j + 1' values[j].ChildID);  				}  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID;    				var list = q.ToList().Where(n => n.Key < 6).OrderBy(n => n.Key).ToList();    				Assert.AreEqual(4' list.Count);    				for (var i = 0; i < list.Count; i++)  				{  					var values = list[i].OrderBy(c => c.ChildID).ToList();    					Assert.AreEqual(i + 1' list[i].Key);  					Assert.AreEqual(i + 1' values.Count);    					for (var j = 0; j < values.Count; j++)  						Assert.AreEqual((i + 1) * 10 + j + 1' values[j].ChildID);  				}  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID;    				var list = q.ToList().Where(n => n.Key < 6).OrderBy(n => n.Key).ToList();    				Assert.AreEqual(4' list.Count);    				for (var i = 0; i < list.Count; i++)  				{  					var values = list[i].OrderBy(c => c.ChildID).ToList();    					Assert.AreEqual(i + 1' list[i].Key);  					Assert.AreEqual(i + 1' values.Count);    					for (var j = 0; j < values.Count; j++)  						Assert.AreEqual((i + 1) * 10 + j + 1' values[j].ChildID);  				}  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.GrandChild  					group ch by new { ch.ParentID' ch.ChildID };    				var list = q.ToList();    				Assert.AreEqual   (8' list.Count);  				Assert.AreNotEqual(0' list.OrderBy(c => c.Key.ParentID).First().ToList().Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID into g  					select g.Key;    				var list = q.ToList().Where(n => n < 6).OrderBy(n => n).ToList();    				Assert.AreEqual(4' list.Count);  				for (var i = 0; i < list.Count; i++) Assert.AreEqual(i + 1' list[i]);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID into g  					select g.Key;    				var list = q.ToList().Where(n => n < 6).OrderBy(n => n).ToList();    				Assert.AreEqual(4' list.Count);  				for (var i = 0; i < list.Count; i++) Assert.AreEqual(i + 1' list[i]);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID into g  					orderby g.Key  					select g.Key;    				var list = q.ToList().Where(n => n < 6).ToList();    				Assert.AreEqual(4' list.Count);  				for (var i = 0; i < list.Count; i++) Assert.AreEqual(i + 1' list[i]);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from ch in db.Child  					group ch by ch.ParentID into g  					orderby g.Key  					select g.Key;    				var list = q.ToList().Where(n => n < 6).ToList();    				Assert.AreEqual(4' list.Count);  				for (var i = 0; i < list.Count; i++) Assert.AreEqual(i + 1' list[i]);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple6,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q    = db.GrandChild.GroupBy(ch => new { ch.ParentID' ch.ChildID }' ch => ch.GrandChildID);  				var list = q.ToList();    				Assert.AreNotEqual(0' list[0].Count());  				Assert.AreEqual   (8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple7,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = db.GrandChild  					.GroupBy(ch => new { ch.ParentID' ch.ChildID }' ch => ch.GrandChildID)  					.Select (gr => new { gr.Key.ParentID' gr.Key.ChildID });    				var list = q.ToList();  				Assert.AreEqual(8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple8,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = db.GrandChild.GroupBy(ch => new { ch.ParentID' ch.ChildID }' (g'ch) => g.ChildID);    				var list = q.ToList();  				Assert.AreEqual(8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple9,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q    = db.GrandChild.GroupBy(ch => new { ch.ParentID' ch.ChildID }' ch => ch.GrandChildID'  (g'ch) => g.ChildID);  				var list = q.ToList();    				Assert.AreEqual(8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple12,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = db.GrandChild  					.GroupBy(ch => new { ParentID = ch.ParentID + 1' ch.ChildID }' (g'ch) => g.ChildID);    				var list = q.ToList();  				Assert.AreEqual(8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Simple13,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = db.GrandChild  					.GroupBy(ch => new { ParentID = ch.ParentID + 1' ch.ChildID }' ch => ch.ChildID' (g'ch) => g.ChildID);    				var list = q.ToList();  				Assert.AreEqual(8' list.Count);  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated1,The following statement contains a magic number: var expected =   				(  					from ch in Child  					group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  					into g select g  				).ToList().OrderBy(p => p.Key).ToList();
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated1,The following statement contains a magic number: var expected =   				(  					from ch in Child  					group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  					into g select g  				).ToList().OrderBy(p => p.Key).ToList();
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					(  						from ch in db.Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					).ToList().OrderBy(p => p.Key).ToList();    				AreEqual(expected[0]' result[0]);  				AreEqual(expected.Select(p => p.Key)' result.Select(p => p.Key));  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					(  						from ch in db.Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					).ToList().OrderBy(p => p.Key).ToList();    				AreEqual(expected[0]' result[0]);  				AreEqual(expected.Select(p => p.Key)' result.Select(p => p.Key));  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated2,The following statement contains a magic number: var expected =  				from p in  					from ch in  						from ch in Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					select ch.Key + "2"  				where p == "22"  				select p;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated2,The following statement contains a magic number: var expected =  				from p in  					from ch in  						from ch in Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					select ch.Key + "2"  				where p == "22"  				select p;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p in  					from ch in  						from ch in db.Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					select ch.Key + "2"  				where p == "22"  				select p));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Calculated2,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p in  					from ch in  						from ch in db.Child  						group ch by ch.ParentID > 2 ? ch.ParentID > 3 ? "1" : "2" : "3"  						into g select g  					select ch.Key + "2"  				where p == "22"  				select p));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,SumSubQuery1,The following statement contains a magic number: var expected =  				from ch in  					from ch in Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID + 1 > n group ch by ch into g  				select g.Sum(p => p.ParentID - 3);
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,SumSubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in  					from ch in db.Child select new { ParentID = ch.ParentID + 1' ch.ChildID }  				where ch.ParentID + 1 > n group ch by ch into g  				select g.Sum(p => p.ParentID - 3)));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates3,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}'  					from  ch in db.Child  					where ch.ChildID > 30  					group ch by ch.ParentID into g  					select new  					{  						Sum =      g.Select(c => c.ChildID).Where(_ => _ > 30).Sum()'  						Min =      g.Select(c => c.ChildID).Where(_ => _ > 30).Min()'  						Max =      g.Select(c => c.ChildID).Where(_ => _ > 30).Max()'  						Avg = (int)g.Select(c => c.ChildID).Where(_ => _ > 30).Average()'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}'  					from  ch in db.Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}'  					from  ch in db.Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}'  					from  ch in db.Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Aggregates4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe }'  				db => AreEqual(  					from  ch in Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}'  					from  ch in db.Child  					group ch by ch.ParentID into g  					select new  					{  						Count = g.Count(_ => _.ChildID > 30)'  						Sum   = g.Where(_ => _.ChildID > 30).Sum(c => c.ChildID)'  					}));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max11,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Max(c => c.ChildID > 20)'  				db.Child.Max(c => c.ChildID > 20)));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max11,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Max(c => c.ChildID > 20)'  				db.Child.Max(c => c.ChildID > 20)));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max12,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Max(c => (bool?)(c.ChildID > 20))'  				db.Child.Max(c => (bool?)(c.ChildID > 20))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max12,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(  				   Child.Max(c => (bool?)(c.ChildID > 20))'  				db.Child.Max(c => (bool?)(c.ChildID > 20))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max2,The following statement contains a magic number: var expected =  				from p in Parent  					join c in Child on p.ParentID equals c.ParentID  				where c.ChildID > 20  				select p;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Max2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Max(p => p.ParentID)' result.Max(p => p.ParentID));  			});
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation101,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Max(_ => _.ParentID) > 2  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Max(_ => _.ParentID) > 2  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation101,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Max(_ => _.ParentID) > 2  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Max(_ => _.ParentID) > 2  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation102,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix }'  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation102,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix }'  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation102,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix }'  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation102,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix }'  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1022,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  					db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where g.Count(_ => _.ChildID >= 20) > 2 && g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1023,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation1024,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }' // Can be fixed.  				db => AreEqual(  					from ch in GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1  					'  					from ch in db.GrandChild1  					group ch by ch.Parent into g  					where  						g.Count(_ => _.ChildID >= 20) > 2 &&  						g.Where(_ => _.ChildID >= 19).Sum(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 19).Max(p => p.ParentID) > 0 &&  						g.Where(_ => _.ChildID >= 18).Max(p => p.ParentID) > 0  					select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2 && g.Key.ParentID != 1  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2 && g.Key.ParentID != 1  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from ch in GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2 && g.Key.ParentID != 1  				select g.Key.Value1  				'  				from ch in db.GrandChild1  				group ch by ch.Parent into g  				where g.Count() > 2 && g.Key.ParentID != 1  				select g.Key.Value1));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation3,The following statement contains a magic number: var result =   					from p in db.Product  					group p by p.Category into g  					where g.Count() == 12  					select g.Key.CategoryName;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation3,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation4,The following statement contains a magic number: var result =   					from p in db.Product  					group p by p.Category into g  					where g.Count() == 12  					select g.Key.CategoryID;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GrooupByAssociation4,The following statement contains a magic number: Assert.AreEqual(3' list.Count);
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate1,The following statement contains a magic number: var expected =  				from p in Parent  				group p by p.Children.Count > 0 && p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(expected'  				from p in db.Parent  				group p by p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate11,The following statement contains a magic number: var expected =  				from p in Parent  				where p.Children.Count > 0  				group p by p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate11,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(expected'  				from p in db.Parent  				where p.Children.Count > 0  				group p by p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate12,The following statement contains a magic number: var expected =  				from p in Parent  				group p by p.Children.Count > 0 && p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key;
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate12,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(expected'  				from p in db.Parent  				group p by p.Children.Count > 0 && p.Children.Average(c => c.ParentID) > 3 into g  				select g.Key));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate2,The following statement contains a magic number: AreEqual(  					(  						from c in Customer  						group c by c.Orders.Count > 0 && c.Orders.Average(o => o.Freight) >= 80  					).ToList().Select(k => k.Key)'  					(  						from c in db.Customer  						group c by c.Orders.Average(o => o.Freight) >= 80  					).ToList().Select(k => k.Key));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate2,The following statement contains a magic number: AreEqual(  					(  						from c in Customer  						group c by c.Orders.Count > 0 && c.Orders.Average(o => o.Freight) >= 80  					).ToList().Select(k => k.Key)'  					(  						from c in db.Customer  						group c by c.Orders.Average(o => o.Freight) >= 80  					).ToList().Select(k => k.Key));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate3,The following statement contains a magic number: var expected =  				(  					from p in Parent  					group p by p.Children.Count > 0 && p.Children.Average(c => c.ParentID) > 3  				).ToList().First(g => !g.Key);
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GroupByAggregate3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(expected'  				(  					from p in db.Parent  					group p by p.Children.Average(c => c.ParentID) > 3  				).ToList().First(g => !g.Key)));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar4,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					where g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar41,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar41,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar41,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar41,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.SqlCe' ProviderName.Access' ProviderName.Informix }'  				db => AreEqual(  					from ch in Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()  					'  					from ch in db.Child  					group ch by ch.ParentID into g  					select new { g } into g  					where g.g.Where(ch => ch.ParentID > 2).Select(ch => (int?)ch.ChildID).Min() != null  					select g.g.Where(ch => ch.ParentID > 2).Select(ch => ch.ChildID).Min()));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))'  				(from ch in db.Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))'  				(from ch in db.Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))'  				(from ch in db.Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))'  				(from ch in db.Child  				 where ch.ParentID < 3  				 group ch by ch.ParentID into g  				 select g.Where(ch => ch.ParentID < 3).Max(ch => ch.ChildID))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count())'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count())));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count())'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count())));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))));
Magic Number,Data.Linq,GroupByTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,Scalar10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.SqlCe }' db => AreEqual(  				(from ch in Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))'  				(from ch in db.Child  				 group ch by ch.ParentID into g  				 select g.Select(ch => ch.ChildID).Where(id => id < 30).Count(id => id >= 20))));
Magic Number,Data.Linq,GroupByInfo,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\GroupByTest.cs,GetHashCode,The following statement contains a magic number: return ((Prev != null ? Prev.GetHashCode() : 0) * 397) ^ (Field != null ? Field.GetHashCode() : 0);
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin7,The following statement contains a magic number: var expected =  				from t in  					from ch in Child  						join p in Parent on ch.ParentID equals p.ParentID  					select ch.ParentID + p.ParentID  				where t > 2  				select t;
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin7,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from t in  					from ch in db.Child  						join p in db.Parent on ch.ParentID equals p.ParentID  					select ch.ParentID + p.ParentID  				where t > 2  				select t));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin8,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in  					from ch in Child  						join p in Parent on ch.ParentID equals p.ParentID  					select new { ID = ch.ParentID + p.ParentID }  				where t.ID > 2  				select t'  				from t in  					from ch in db.Child  						join p in db.Parent on ch.ParentID equals p.ParentID  					select new { ID = ch.ParentID + p.ParentID }  				where t.ID > 2  				select t));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin8,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in  					from ch in Child  						join p in Parent on ch.ParentID equals p.ParentID  					select new { ID = ch.ParentID + p.ParentID }  				where t.ID > 2  				select t'  				from t in  					from ch in db.Child  						join p in db.Parent on ch.ParentID equals p.ParentID  					select new { ID = ch.ParentID + p.ParentID }  				where t.ID > 2  				select t));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from g in GrandChild  				join p in Parent4 on g.Child.ParentID equals p.ParentID  				where g.ParentID < 10 && p.Value1 == TypeValue.Value3  				select g'  				from g in db.GrandChild  				join p in db.Parent4 on g.Child.ParentID equals p.ParentID  				where g.ParentID < 10 && p.Value1 == TypeValue.Value3  				select g));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,InnerJoin9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db => AreEqual(  				from g in GrandChild  				join p in Parent4 on g.Child.ParentID equals p.ParentID  				where g.ParentID < 10 && p.Value1 == TypeValue.Value3  				select g'  				from g in db.GrandChild  				join p in db.Parent4 on g.Child.ParentID equals p.ParentID  				where g.ParentID < 10 && p.Value1 == TypeValue.Value3  				select g));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =   					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID into lj  					where p.ParentID == 1  					select new { p' lj };    				var list = q.ToList();    				Assert.AreEqual(1' list.Count);  				Assert.AreEqual(1' list[0].p.ParentID);  				Assert.AreEqual(1' list[0].lj.Count());    				var ch = list[0].lj.ToList();    				Assert.AreEqual( 1' ch[0].ParentID);  				Assert.AreEqual(11' ch[0].ChildID);  			});
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin3,The following statement contains a magic number: var q1 = Parent  				.GroupJoin(  					Child'  					p  => p.ParentID'  					ch => ch.ParentID'  					(p' lj1) => new { p' lj1 = new { lj1 } }  				)  				.Where (t => t.p.ParentID == 2)  				.Select(t => new { t.p' t.lj1 });
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 = db.Parent  					.GroupJoin(  						db.Child'  						p  => p.ParentID'  						ch => ch.ParentID'  						(p' lj1) => new { p' lj1 = new { lj1 } }  					)  					.Where (t => t.p.ParentID == 2)  					.Select(t => new { t.p' t.lj1 });    				var list2 = q2.ToList();    				Assert.AreEqual(list1.Count'              list2.Count);  				Assert.AreEqual(list1[0].p.ParentID'      list2[0].p.ParentID);  				Assert.AreEqual(list1[0].lj1.lj1.Count()' list2[0].lj1.lj1.Count());  			});
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin4,The following statement contains a magic number: var q1 =  				from p in Parent  					join ch in  						from c in Child select new { c.ParentID' c.ChildID }  					on p.ParentID equals ch.ParentID into lj1  				where p.ParentID == 3  				select new { p' lj1 };
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,GroupJoin4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q2 =  					from p in db.Parent  						join ch in  							from c in db.Child select new { c.ParentID' c.ChildID }  						on p.ParentID equals ch.ParentID into lj1  					where p.ParentID == 3  					select new { p' lj1 };    				var list2 = q2.ToList();    				Assert.AreEqual(list1.Count'          list2.Count);  				Assert.AreEqual(list1[0].p.ParentID'  list2[0].p.ParentID);  				Assert.AreEqual(list1[0].lj1.Count()' list2[0].lj1.Count());  			});
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,LeftJoin1,The following statement contains a magic number: var expected =  				from p in Parent  					join ch in Child on p.ParentID equals ch.ParentID into lj1  					from ch in lj1.DefaultIfEmpty()  				where p.ParentID >= 4  				select new { p' ch };
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,LeftJoin1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p in db.Parent  					join ch in db.Child on p.ParentID equals ch.ParentID into lj1  					from ch in lj1.DefaultIfEmpty()  				where p.ParentID >= 4  				select new { p' ch }));
Magic Number,Data.Linq,JoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\JoinTest.cs,StackOverflow,The following statement contains a magic number: i < 100
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddMonth,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Month' 2' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Month' 2' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddMonth,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Month' 2' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Month' 2' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddDayOfYear,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.DayOfYear' 3' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.DayOfYear' 3' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddDayOfYear,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.DayOfYear' 3' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.DayOfYear' 3' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddDay,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Day' 5' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Day' 5' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddDay,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Day' 5' t.DateTimeValue). Value.Date'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Day' 5' t.DateTimeValue)).Value.Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddMinute,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Minute' 5' t.DateTimeValue). Value.Minute'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Minute' 5' t.DateTimeValue)).Value.Minute));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddMinute,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Minute' 5' t.DateTimeValue). Value.Minute'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Minute' 5' t.DateTimeValue)).Value.Minute));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddSecond,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Second' 41' t.DateTimeValue). Value.Second'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Second' 41' t.DateTimeValue)).Value.Second));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddSecond,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           Sql.DateAdd(Sql.DateParts.Second' 41' t.DateTimeValue). Value.Second'  				from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Second' 41' t.DateTimeValue)).Value.Second));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateAddMillisecond,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Access }'  				db => (from t in db.Types select Sql.AsSql(Sql.DateAdd(Sql.DateParts.Millisecond' 41' t.DateTimeValue))).ToList());
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddMonths,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddMonths(-2). Date'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddMonths(-2)).Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddMonths,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddMonths(-2). Date'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddMonths(-2)).Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddDays,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddDays(5). Date'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddDays(5)).Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddDays,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddDays(5). Date'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddDays(5)).Date));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddHours,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddHours(22). Hour'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddHours(22)).Hour));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddHours,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddHours(22). Hour'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddHours(22)).Hour));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddMinutes,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddMinutes(-8). Minute'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddMinutes(-8)).Minute));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddMinutes,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddMinutes(-8). Minute'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddMinutes(-8)).Minute));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddSeconds,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddSeconds(-35). Second'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddSeconds(-35)).Second));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddSeconds,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types select           t.DateTimeValue.AddSeconds(-35). Second'  				from t in db.Types select Sql.AsSql(t.DateTimeValue.AddSeconds(-35)).Second));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,AddMilliseconds,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.MySql' ProviderName.Access }'  				db => (from t in db.Types select Sql.AsSql(t.DateTimeValue.AddMilliseconds(221))).ToList());
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateDay,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalDays'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalDays)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateDay,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalDays'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalDays)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffDay,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Day' t.DateTimeValue' t.DateTimeValue.AddHours(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Day' t.DateTimeValue' t.DateTimeValue.AddHours(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffDay,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Day' t.DateTimeValue' t.DateTimeValue.AddHours(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Day' t.DateTimeValue' t.DateTimeValue.AddHours(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateHour,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalHours'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalHours)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateHour,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalHours'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddHours(100) - t.DateTimeValue).TotalHours)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffHour,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Hour' t.DateTimeValue' t.DateTimeValue.AddHours(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Hour' t.DateTimeValue' t.DateTimeValue.AddHours(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffHour,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Hour' t.DateTimeValue' t.DateTimeValue.AddHours(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Hour' t.DateTimeValue' t.DateTimeValue.AddHours(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateMinute,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalMinutes'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalMinutes)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateMinute,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalMinutes'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalMinutes)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMinute,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffMinute,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Minute' t.DateTimeValue' t.DateTimeValue.AddMinutes(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateSecond,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalSeconds'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalSeconds)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,SubDateSecond,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           (int)(t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalSeconds'  					from t in db.Types select (int)Sql.AsSql((t.DateTimeValue.AddMinutes(100) - t.DateTimeValue).TotalSeconds)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffSecond,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,DateDiffSecond,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.Informix' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }'  				db => AreEqual(  					from t in    Types select           Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100))'  					from t in db.Types select Sql.AsSql(Sql.DateDiff(Sql.DateParts.Second' t.DateTimeValue' t.DateTimeValue.AddMinutes(100)))));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,MakeDateTime2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t'  				from t in from p in db.Types select Sql.MakeDateTime(2010' p.ID' 1' 20' 35' 44) where t.Value.Year == 2010 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)'  				from p in db.Types select new DateTime(p.DateTimeValue.Year' 10' 1' 20' 35' 44)));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,NewDateTime5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in from p in    Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t'  				from t in from p in db.Types select new DateTime(p.DateTimeValue.Year + 1' 10' 1) where t.Month == 10 select t));
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,GetDateTest1,The following statement contains a magic number: ForEachProvider(  				new[] { ProviderName.PostgreSQL }'  				db =>  				{  					var dates =  						from v in db.Parent  							join s in db.Child on v.ParentID equals s.ParentID  						where v.Value1 > 0  						select Sql.GetDate().Date;    					var countByDates =  						from v in dates  						group v by v into g  						select new { g.Key' Count = g.Count() };    					countByDates.Take(5).ToList();  				});
Magic Number,Data.Linq,DateTimeFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DateTimeFunctions.cs,GetDateTest2,The following statement contains a magic number: ForEachProvider(  				//new[] { ProviderName.PostgreSQL }'  				db =>  				{  					var dates =  						from v in db.Parent  							join s in db.Child on v.ParentID equals s.ParentID  						where v.Value1 > 0  						select Sql.CurrentTimestamp.Date;    					var countByDates =  						from v in dates  						group v by v into g  						select new { g.Key' Count = g.Count() };    					countByDates.Take(5).ToList();  				});
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Basic61,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)'  				db.Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)));
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Basic61,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)'  				db.Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)));
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Basic61,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)'  				db.Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)));
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Basic61,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)'  				db.Parent.SelectMany(p => p.Children.Select(_ => _.ParentID + 1).Where(_ => _ > 1 || _ > 2)).Where(_ => _ > 0 || _ > 3)));
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Test31,The following statement contains a magic number: TestJohn(db =>  				from p in  					from p in  						from p in db.Person  						where p.ID == 1  						select new { p' ID = p.ID + 1 }  					where p.ID == 2  					select new { p' ID = p.ID + 1 }  				where p.ID == 3  				select p.p.p);
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Test31,The following statement contains a magic number: TestJohn(db =>  				from p in  					from p in  						from p in db.Person  						where p.ID == 1  						select new { p' ID = p.ID + 1 }  					where p.ID == 2  					select new { p' ID = p.ID + 1 }  				where p.ID == 3  				select p.p.p);
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Test32,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from p in  						from p in  							from p in db.Person  							where p.ID == 1  							select new { p' ID = p.ID + 1 }  						where p.ID == 2  						select new { p' ID = p.ID + 1 }  					where p.ID == 3  					select new { p.p.p };    				var list = q.ToList();    				Assert.AreEqual(1' list.Count);    				var person = list[0].p;    				Assert.AreEqual(1'      person.ID);  				Assert.AreEqual("John"' person.FirstName);  			});
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Test32,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					from p in  						from p in  							from p in db.Person  							where p.ID == 1  							select new { p' ID = p.ID + 1 }  						where p.ID == 2  						select new { p' ID = p.ID + 1 }  					where p.ID == 3  					select new { p.p.p };    				var list = q.ToList();    				Assert.AreEqual(1' list.Count);    				var person = list[0].p;    				Assert.AreEqual(1'      person.ID);  				Assert.AreEqual("John"' person.FirstName);  			});
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,SubQuery2,The following statement contains a magic number: var q1 = from p in db.Person where p.ID == 1 || p.ID == 2 select p;
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,SubQuery2,The following statement contains a magic number: var q2 = from p in db.Person where !(p.ID == 2) select p;
Magic Number,Data.Linq,SelectManyTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectManyTest.cs,Test9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Access }' db =>  			{  				var q1 = db.Types.Where(_ => _.ID > 1).Where(_ => _.ID > 2);    				var q2 =  					from p in db.Parent  					join c in db.GrandChild on p.ParentID equals c.ParentID  					join t in q1            on c.ParentID equals t.ID  					where p.ParentID == 1  					select p;    				q2 = q2.Distinct().OrderBy(_ => _.ParentID);    				var q3 =  					from p in q2  					from g in p.GrandChildren  					from c in db.Parent2  					let r = g.Child  					where  						p.ParentID == g.ParentID && g.ParentID == c.ParentID  					select r;    				q3 = q3.Where(_ => _.ChildID == 1);    				q3.ToList();  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where p.LastName.IndexOf("e"' 2) == 4 && p.ID == 2 select p;  				Assert.AreEqual(2' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where p.LastName.IndexOf("e"' 2) == 4 && p.ID == 2 select p;  				Assert.AreEqual(2' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where p.LastName.IndexOf("e"' 2) == 4 && p.ID == 2 select p;  				Assert.AreEqual(2' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where p.LastName.IndexOf("e"' 2) == 4 && p.ID == 2 select p;  				Assert.AreEqual(2' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf3,The following statement contains a magic number: var n1 = 2;
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf3,The following statement contains a magic number: var n2 = 5;
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf3,The following statement contains a magic number: var q = from p in db.Person where p.LastName.IndexOf(s' n1' n2) == 1 && p.ID == 2 select p;
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,IndexOf3,The following statement contains a magic number: Assert.AreEqual(2' q.ToList().First().ID);
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf1,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>  			{  				var q = from p in db.Person where p.LastName.LastIndexOf("p") == 2 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf2,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>   			{  				var q = from p in db.Person where p.ID == 1 select new { p.ID' FirstName = "123" + p.FirstName + "012345" };  				q = q.Where(p => p.FirstName.LastIndexOf("123"' 5) == 8);  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf2,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>   			{  				var q = from p in db.Person where p.ID == 1 select new { p.ID' FirstName = "123" + p.FirstName + "012345" };  				q = q.Where(p => p.FirstName.LastIndexOf("123"' 5) == 8);  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf3,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>   			{  				var q = from p in db.Person where p.ID == 1 select new { p.ID' FirstName = "123" + p.FirstName + "0123451234" };  				q = q.Where(p => p.FirstName.LastIndexOf("123"' 5' 6) == 8);  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf3,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>   			{  				var q = from p in db.Person where p.ID == 1 select new { p.ID' FirstName = "123" + p.FirstName + "0123451234" };  				q = q.Where(p => p.FirstName.LastIndexOf("123"' 5' 6) == 8);  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,LastIndexOf3,The following statement contains a magic number: ForEachProvider(_lastIndexExcludeList' db =>   			{  				var q = from p in db.Person where p.ID == 1 select new { p.ID' FirstName = "123" + p.FirstName + "0123451234" };  				q = q.Where(p => p.FirstName.LastIndexOf("123"' 5' 6) == 8);  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CharIndex1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where Sql.CharIndex("oh"' p.FirstName) == 2 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CharIndex2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where Sql.CharIndex("p"' p.LastName' 2) == 3 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CharIndex2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Firebird' ProviderName.Informix }' db =>   			{  				var q = from p in db.Person where Sql.CharIndex("p"' p.LastName' 2) == 3 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Left,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where Sql.Left(p.FirstName' 2) == "Jo" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Right,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where Sql.Right(p.FirstName' 3) == "ohn" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Substring2,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where p.FirstName.Substring(1' 2) == "oh" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Stuff,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where Sql.Stuff(p.FirstName' 3' 1' "123") == "Jo123n" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Insert,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where p.FirstName.Insert(2' "123") == "Jo123hn" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Remove1,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where p.FirstName.Remove(2) == "Jo" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Remove2,The following statement contains a magic number: ForEachProvider(db =>   			{  				var q = from p in db.Person where p.FirstName.Remove(1' 2) == "Jn" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadRight,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where Sql.PadRight(p.FirstName' 6' ' ') + "123" == "John  123" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadRight1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where p.FirstName.PadRight(6) + "123" == "John  123" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadRight2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where p.FirstName.PadRight(6' '*') + "123" == "John**123" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadLeft,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where "123" + Sql.PadLeft(p.FirstName' 6' ' ') == "123  John" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadLeft1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where "123" + p.FirstName.PadLeft(6) == "123  John" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,PadLeft2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where "123" + p.FirstName.PadLeft(6' '*') == "123**John" && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CompareTo3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where p.FirstName.CompareTo(55) > 0 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CompareTo31,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where p.FirstName.CompareTo(55) >= 0 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CompareTo32,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where 0 <= p.FirstName.CompareTo(55) && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,CompareOrdinal2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where string.CompareOrdinal(p.FirstName' 1' "Joh"' 1' 2) == 0 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Compare3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where string.Compare(p.FirstName' 1' "Joh"' 1' 2) == 0 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,StringFunctions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\StringFunctions.cs,Compare4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q = from p in db.Person where string.Compare(p.FirstName' 1' "Joh"' 1' 2' true) == 0 && p.ID == 1 select p;  				Assert.AreEqual(1' q.ToList().First().ID);  			});
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,NewParam,The following statement contains a magic number: ForEachProvider(db => { for (var i = 0; i < 5; i++) NewParam(db.Person' i); });
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect8,The following statement contains a magic number: ForEachProvider(db =>  			{  				var person = (    					db.Person  						.Select(p1 => new Person { ID = p1.ID * 2'           FirstName = p1.FirstName })  						.Select(p2 => new        { ID = p2.ID / "22".Length' p2.FirstName })    				).ToList().Where(p => p.ID == 1).First();  				Assert.AreEqual(1'      person.ID);  				Assert.AreEqual("John"' person.FirstName);  			});
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect9,The following statement contains a magic number: TestJohn(db => db.Person  				.Select(p1 => new        { ID = p1.ID - 1' p1.FirstName })  				.Select(p2 => new Person { ID = p2.ID + 1' FirstName = p2.FirstName })  				.Select(p3 => p3)  				.Select(p4 => new        { ID = p4.ID * "22".Length' p4.FirstName })  				.Select(p5 => new Person { ID = p5.ID / 2' FirstName = p5.FirstName }));
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: var q =  					from p in db.Parent  					from  g1 in p.GrandChildren.DefaultIfEmpty()  					let   c1 = g1.Child.ChildID  					where c1 == 1  					from  g2 in p.GrandChildren.DefaultIfEmpty()  					let   c2 = g2.Child.ChildID  					where c2 == 2  					from  g3 in p.GrandChildren.DefaultIfEmpty()  					let   c3 = g3.Child.ChildID  					where c3 == 3  					from  g4 in p.GrandChildren.DefaultIfEmpty()  					let   c4 = g4.Child.ChildID  					where c4 == 4  					from  g5 in p.GrandChildren.DefaultIfEmpty()  					let   c5 = g5.Child.ChildID  					where c5 == 5  					from  g6 in p.GrandChildren.DefaultIfEmpty()  					let   c6 = g6.Child.ChildID  					where c6 == 6  					from  g7 in p.GrandChildren.DefaultIfEmpty()  					let   c7 = g7.Child.ChildID  					where c7 == 7  					from  g8 in p.GrandChildren.DefaultIfEmpty()  					let   c8 = g8.Child.ChildID  					where c8 == 8  					from  g9 in p.GrandChildren.DefaultIfEmpty()  					let   c9 = g9.Child.ChildID  					where c9 == 9  					from  g10 in p.GrandChildren.DefaultIfEmpty()  					let   c10 = g10.Child.ChildID  					where c10 == 10  					from  g11 in p.GrandChildren.DefaultIfEmpty()  					let   c11 = g11.Child.ChildID  					where c11 == 11  					from  g12 in p.GrandChildren.DefaultIfEmpty()  					let   c12 = g12.Child.ChildID  					where c12 == 12  					from  g13 in p.GrandChildren.DefaultIfEmpty()  					let   c13 = g13.Child.ChildID  					where c13 == 13  					from  g14 in p.GrandChildren.DefaultIfEmpty()  					let   c14 = g14.Child.ChildID  					where c14 == 14  					from  g15 in p.GrandChildren.DefaultIfEmpty()  					let   c15 = g15.Child.ChildID  					where c15 == 15  					from  g16 in p.GrandChildren.DefaultIfEmpty()  					let   c16 = g16.Child.ChildID  					where c16 == 16  					from  g17 in p.GrandChildren.DefaultIfEmpty()  					let   c17 = g17.Child.ChildID  					where c17 == 17  					from  g18 in p.GrandChildren.DefaultIfEmpty()  					let   c18 = g18.Child.ChildID  					where c18 == 18  					from  g19 in p.GrandChildren.DefaultIfEmpty()  					let   c19 = g19.Child.ChildID  					where c19 == 19  					from  g20 in p.GrandChildren.DefaultIfEmpty()  					let   c20 = g20.Child.ChildID  					where c20 == 20  					orderby c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20  					select new  					{  						p'  						cs = new [] { c1' c2' c3' c4' c5' c6' c7' c8' c9' c10' c11' c12' c13' c14' c15' c16' c17' c18' c19' c20 }  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,MultipleSelect11,The following statement contains a magic number: Assert.IsTrue((DateTime.Now - dt).TotalSeconds < 30);
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Index,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					db.Child  						.OrderByDescending(m => m.ChildID)  						.Where(m => m.Parent != null && m.ParentID > 0);    				var lines =  					q.Select(  						(m' i) =>  							ConvertString(m.Parent.ParentID.ToString()' m.ChildID' i % 2 == 0' i)).ToArray();    				Assert.AreEqual("7.77.True.0"' lines[0]);    				q =  					db.Child  						.OrderByDescending(m => m.ChildID)  						.Where(m => m.Parent != null && m.ParentID > 0);    				lines =  					q.Select(  						(m' i) =>  							ConvertString(m.Parent.ParentID.ToString()' m.ChildID' i % 2 == 0' i)).ToArray();    				Assert.AreEqual("7.77.True.0"' lines[0]);  			});
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Index,The following statement contains a magic number: ForEachProvider(db =>  			{  				var q =  					db.Child  						.OrderByDescending(m => m.ChildID)  						.Where(m => m.Parent != null && m.ParentID > 0);    				var lines =  					q.Select(  						(m' i) =>  							ConvertString(m.Parent.ParentID.ToString()' m.ChildID' i % 2 == 0' i)).ToArray();    				Assert.AreEqual("7.77.True.0"' lines[0]);    				q =  					db.Child  						.OrderByDescending(m => m.ChildID)  						.Where(m => m.Parent != null && m.ParentID > 0);    				lines =  					q.Select(  						(m' i) =>  							ConvertString(m.Parent.ParentID.ToString()' m.ChildID' i % 2 == 0' i)).ToArray();    				Assert.AreEqual("7.77.True.0"' lines[0]);  			});
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Issue317,The following statement contains a magic number: var q =   					from p in db.Parent  					join c in db.Child on p.ParentID equals c.ChildID into childs  					from c in childs.DefaultIfEmpty()  					select new  					{  						p.ParentID'  						ChildId1 = null == c ? -1000 : c.ChildID'  						ChildId2 = c == null ? -2000 : c.ChildID'  					};
Magic Number,Data.Linq,SelectTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectTest.cs,Issue317,The following statement contains a magic number: var q =   					from p in db.Parent  					join c in db.Child on p.ParentID equals c.ChildID into childs  					from c in childs.DefaultIfEmpty()  					select new  					{  						p.ParentID'  						ChildId1 = null == c ? -1000 : c.ChildID'  						ChildId2 = c == null ? -2000 : c.ChildID'  					};
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Add,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(s.Substring(1).Length + 3' db.Select(() => s.Substring(1).Length + 3)));
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Add,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(s.Substring(1).Length + 3' db.Select(() => s.Substring(1).Length + 3)));
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar21,The following statement contains a magic number: ForEachProvider(db =>  			{  				var n = (from p in db.Person select p.FirstName.Length).ToList().Where(len => len == 4).First();  				Assert.AreEqual(4' n);  			});
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar21,The following statement contains a magic number: ForEachProvider(db =>  			{  				var n = (from p in db.Person select p.FirstName.Length).ToList().Where(len => len == 4).First();  				Assert.AreEqual(4' n);  			});
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar4,The following statement contains a magic number: var expected =  				from p in Parent  					join c in Child on p.ParentID equals c.ParentID  				where c.ChildID > 20  				select p;
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Where(p => p.ParentID == 3).First()' result.Where(p => p.ParentID == 3).First());  			});
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Where(p => p.ParentID == 3).First()' result.Where(p => p.ParentID == 3).First());  			});
Magic Number,Data.Linq,SelectScalar,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\SelectScalar.cs,Scalar4,The following statement contains a magic number: ForEachProvider(db =>  			{  				var result =  					from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  					where c.ChildID > 20  					select p;    				Assert.AreEqual(expected.Where(p => p.ParentID == 3).First()' result.Where(p => p.ParentID == 3).First());  			});
Magic Number,Data.Linq,TestBase,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestBase.cs,GetIP,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Data.Linq,TestBase,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestBase.cs,GetIP,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Data.Linq,TestBase,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestBase.cs,GetIP,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Data.Linq,TestBase,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestBase.cs,GetIP,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Data.Linq,TestBase,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\TestBase.cs,GetIP,The following statement contains a magic number: host.AddServiceEndpoint(  				typeof(ILinqService)'  				new NetTcpBinding(SecurityMode.None)  				{  					MaxReceivedMessageSize = 10000000'  					MaxBufferPoolSize      = 10000000'  					MaxBufferSize          = 10000000'  					CloseTimeout           = new TimeSpan(00' 01' 00)'  					OpenTimeout            = new TimeSpan(00' 01' 00)'  					ReceiveTimeout         = new TimeSpan(00' 10' 00)'  					SendTimeout            = new TimeSpan(00' 10' 00)'  				}'  				"LinqOverWCF");
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,MakeSubQuery,The following statement contains a magic number: TestOneJohn(db =>   				from p in db.Person  				select new { PersonID = p.ID + 1' p.FirstName } into p  				where p.PersonID == 2  				select new Person(p.PersonID - 1) { FirstName = p.FirstName });
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,MakeSubQueryWithParam,The following statement contains a magic number: TestOneJohn(new[] { "Fdp" }' db =>   				from p in db.Person  				select new { PersonID = p.ID + n' p.FirstName } into p  				where p.PersonID == 2  				select new Person(p.PersonID - 1) { FirstName = p.FirstName });
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,EqualsConsts2,The following statement contains a magic number: TestOneJohn(db =>  				from p in db.Person  				where (p.FirstName == "John" || p.FirstName == "John's") && p.ID > 0 && p.ID < 2 && p.LastName != "123"  				select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,MethodParam2,The following statement contains a magic number: MethodParam(2);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryAdd,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where p.ID + 1 == 2 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryDivide,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where (p.ID + 9) / 10 == 1 && p.ID == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryDivide,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where (p.ID + 9) / 10 == 1 && p.ID == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryModulo,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where p.ID % 2 == 1 && p.ID == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryMultiply,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where p.ID * 10 - 9 == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryMultiply,The following statement contains a magic number: TestOneJohn(db => from p in db.Person where p.ID * 10 - 9 == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryXor,The following statement contains a magic number: TestOneJohn(new[] { ProviderName.Access }' db => from p in db.Person where (p.ID ^ 2) == 3 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryXor,The following statement contains a magic number: TestOneJohn(new[] { ProviderName.Access }' db => from p in db.Person where (p.ID ^ 2) == 3 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryAnd,The following statement contains a magic number: TestOneJohn(new[] { ProviderName.Access }' db => from p in db.Person where (p.ID & 3) == 1 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryOr,The following statement contains a magic number: TestOneJohn(new[] { ProviderName.Access }' db => from p in db.Person where (p.ID | 2) == 3 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,BinaryOr,The following statement contains a magic number: TestOneJohn(new[] { ProviderName.Access }' db => from p in db.Person where (p.ID | 2) == 3 select p);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotTest2,The following statement contains a magic number: int n = 2;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2'  				(from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 10 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2'  				(from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 10 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2'  				(from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 10 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce5,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2'  				(from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 10 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.Value1 == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Coalesce7,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p'  				from p in db.Parent where (p.ParentID == 1 ? 10 : 20) == 20 select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName == null ? 1 : 2) == 1 &&  					(p.FirstName  != null ? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName == null ? 1 : 2) == 1 &&  					(p.FirstName  != null ? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional2,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.MiddleName == null? 1 : 2) == 1 &&  					(p.FirstName  == null ? 3 : p.FirstName  != null? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional2,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.MiddleName == null? 1 : 2) == 1 &&  					(p.FirstName  == null ? 3 : p.FirstName  != null? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional2,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.MiddleName == null? 1 : 2) == 1 &&  					(p.FirstName  == null ? 3 : p.FirstName  != null? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional2,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.MiddleName == null? 1 : 2) == 1 &&  					(p.FirstName  == null ? 3 : p.FirstName  != null? 1 : 2) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Conditional3,The following statement contains a magic number: TestOneJohn(db =>    				from p in db.Person  				where  					p.ID == 1 &&  					(p.MiddleName != null ? 3 : p.ID == 2 ? 2 : p.MiddleName != null ? 0 : 1) == 1 &&  					(p.FirstName  == null ? 3 : p.ID == 2 ? 2 : p.FirstName  == null ? 0 : 1) == 1  				select p    			);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,MultipleQuery1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var id = 1;  				var q  = from p in db.Person where p.ID == id select p;    				var list = q.ToList();  				Assert.AreEqual(1' list[0].ID);    				id = 2;  				list = q.ToList();  				Assert.AreEqual(2' list[0].ID);  			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,MultipleQuery1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var id = 1;  				var q  = from p in db.Person where p.ID == id select p;    				var list = q.ToList();  				Assert.AreEqual(1' list[0].ID);    				id = 2;  				list = q.ToList();  				Assert.AreEqual(2' list[0].ID);  			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,HasValue2,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' (from p in db.Parent where !p.Value1.HasValue select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Value,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' (from p in db.Parent where p.Value1.Value == 1 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareNullable1,The following statement contains a magic number: ForEachProvider(db => Assert.AreEqual(2' (from p in db.Parent where p.Value1 == 1 select p).ToList().Count));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: var expected =  				from t in  					from ch in Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: var expected =  				from t in  					from ch in Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: var expected =  				from t in  					from ch in Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from t in  					from ch in db.Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from t in  					from ch in db.Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from t in  					from ch in db.Child  					select ch.ParentID * 1000  				where t > 2000  				select t / 1000));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual1,The following statement contains a magic number: var child    = new { ParentID = 2' ChildID = 21 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual1,The following statement contains a magic number: var child    = new { ParentID = 2' ChildID = 21 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual2,The following statement contains a magic number: var child    = new { ParentID = 2' ChildID = 21 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual2,The following statement contains a magic number: var child    = new { ParentID = 2' ChildID = 21 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual3,The following statement contains a magic number: var expected =  				from ch in Child  				where ch.ParentID == 2 && ch.ChildID == 21  				select ch;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual3,The following statement contains a magic number: var expected =  				from ch in Child  				where ch.ParentID == 2 && ch.ChildID == 21  				select ch;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in db.Child  				where new { ch.ParentID' ch.ChildID } == new { ParentID = 2' ChildID = 21 }  				select ch));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual3,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from ch in db.Child  				where new { ch.ParentID' ch.ChildID } == new { ParentID = 2' ChildID = 21 }  				select ch));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual4,The following statement contains a magic number: var parent   = new { ParentID = 2' Value1 = (int?)null };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual5,The following statement contains a magic number: var parent   = new { ParentID = 3' Value1 = (int?)3 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AnonymousEqual5,The following statement contains a magic number: var parent   = new { ParentID = 3' Value1 = (int?)3 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition1,The following statement contains a magic number: var expected =  				from p in Parent  				where p.ParentID == 1 && p.Value1 == 1 || p.ParentID == 2 && p.Value1.HasValue  				select p;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from p in db.Parent  				where p.ParentID == 1 && p.Value1 == 1 || p.ParentID == 2 && p.Value1.HasValue  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition2,The following statement contains a magic number: var p2 = 2;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition2,The following statement contains a magic number: var p3 = 3;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckCondition2,The following statement contains a magic number: var p4 = 4;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareObject1,The following statement contains a magic number: var child    = (from ch in Child where ch.ParentID == 2 select ch).First();
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareObject2,The following statement contains a magic number: var parent   = (from p in Parent where p.ParentID == 2 select p).First();
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CompareObject3,The following statement contains a magic number: var child    = (from ch in Child where ch.ParentID == 2 select ch).First();
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,OrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where (c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 21  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: var expected =  				from c in Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NotOrAnd,The following statement contains a magic number: ForEachProvider(db => AreEqual(expected'  				from c in db.Child  				where !(c.ParentID == 2 || c.ParentID == 3) && c.ChildID != 44  				select c));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AndOr,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p'  				from p in db.Parent  				where p.ParentID == 1 || (p.ParentID == 2 || p.ParentID == 3) && (p.ParentID == 3 || p.ParentID == 1)  				select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains2,The following statement contains a magic number: IEnumerable<int> ids = new [] { 2' 3 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains2,The following statement contains a magic number: IEnumerable<int> ids = new [] { 2' 3 };
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,GetIds,The following statement contains a magic number: yield return 2;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p'  				from p in db.Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p'  				from p in db.Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p'  				from p in db.Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,Contains4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in    Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p'  				from p in db.Parent where GetIds(1' 2).Contains(p.ParentID) || GetIds(3' 0).Contains(p.ParentID) select p));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest1,The following statement contains a magic number: int user = 3;
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(_ => _.ParentID == 3)'  				db.Parent.Where(_ => _.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest2,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(_ => _.ParentID == 3)'  				db.Parent.Where(_ => _.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(_p => _p.ParentID == 3)'  				db.Parent.Where(_p => _p.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest3,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(_p => _p.ParentID == 3)'  				db.Parent.Where(_p => _p.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(тбл => тбл.ParentID == 3)'  				db.Parent.Where(тбл => тбл.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest4,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(тбл => тбл.ParentID == 3)'  				db.Parent.Where(тбл => тбл.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p_ => p_.ParentID == 3)'  				db.Parent.Where(p_ => p_.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,AliasTest5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Where(p_ => p_.ParentID == 3)'  				db.Parent.Where(p_ => p_.ParentID == 3)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SelectNestedCalculatedTest,The following statement contains a magic number: AreEqual(  					from r in from o in    Order select o.Freight * 1000 where r > 100000 select r / 1000'  					from r in from o in db.Order select o.Freight * 1000 where r > 100000 select r / 1000);
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckField5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Select(p => new { Value = p.Value1 + 1' p }).Where(p => p.Value == 2 && p.p.ParentID == 1)'  				db.Parent.Select(p => new { Value = p.Value1 + 1' p }).Where(p => p.Value == 2 && p.p.ParentID == 1)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckField5,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				   Parent.Select(p => new { Value = p.Value1 + 1' p }).Where(p => p.Value == 2 && p.p.ParentID == 1)'  				db.Parent.Select(p => new { Value = p.Value1 + 1' p }).Where(p => p.Value == 2 && p.p.ParentID == 1)));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckField6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p1 in    Parent  				select new { p1' Value = p1.Value1 * 100 } into p  				where p.p1.ParentID == 1 && p.Value > 0  				select new { p' p.p1.Value1' p.Value' p.p1 }'    				from p1 in db.Parent  				select new { p1' Value = p1.Value1 * 100 } into p  				where p.p1.ParentID == 1 && p.Value > 0  				select new { p' p.p1.Value1' p.Value' p.p1 }));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,CheckField6,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p1 in    Parent  				select new { p1' Value = p1.Value1 * 100 } into p  				where p.p1.ParentID == 1 && p.Value > 0  				select new { p' p.p1.Value1' p.Value' p.p1 }'    				from p1 in db.Parent  				select new { p1' Value = p1.Value1 * 100 } into p  				where p.p1.ParentID == 1 && p.Value > 0  				select new { p' p.p1.Value1' p.Value' p.p1 }));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value'  				from p in db.Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value'  				from p in db.Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value'  				from p in db.Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SubQuery1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from p in Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value'  				from p in db.Types  				select new { Value = Math.Round(p.MoneyValue' 2) } into pp  				where pp.Value != 0 && pp.Value != 7  				select pp.Value));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,SearchCondition1,The following statement contains a magic number: ForEachProvider(db => AreEqual(  				from t in    Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t'  				from t in db.Types  				where !t.BoolValue && t.MoneyValue > 1 && (t.SmallIntValue == 5 || t.SmallIntValue == 7 || t.SmallIntValue == 8)  				select t));
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_344,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second });    				var types = new[] { TestEnum.Second' TestEnum.First };    				var data = t  				  .Where(i => types.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Data.Linq,WhereTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\WhereTest.cs,NullableEnum_302,The following statement contains a magic number: ForEachProvider(db =>  			{  				var t = db.GetTable<Table>();  				t.Where(_ => _.ID > 1000).Delete();    				t.Insert(() => new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null' BoolValue = true' GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' EnumValue = null });  				t.Insert(() => new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null' SmallIntValue = 2' EnumValue = TestEnum.Second });      				var data = t  				  .Where(i => new[] { TestEnum.Second' TestEnum.First }.Contains(i.EnumValue ?? TestEnum.First))  				  .ToList();    				Assert.That(data.Count >= 2);    				t.Where(_ => _.ID > 1000).Delete();    			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Update(p => p.ParentID == parent.ParentID' p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Update(p => new Parent { ParentID = p.ParentID + 1 }));  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' db.Child.Where(c => c.ChildID == id && c.Parent.Value1 == 1).Update(c => new Child { ChildID = c.ChildID + 1 }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' db.Child.Where(c => c.ChildID == id && c.Parent.Value1 == 1).Update(c => new Child { ChildID = c.ChildID + 1 }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' db.Child.Where(c => c.ChildID == id && c.Parent.Value1 == 1).Update(c => new Child { ChildID = c.ChildID + 1 }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' c => c.ChildID + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' c => c.ChildID + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' c => c.ChildID + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' () => id + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' () => id + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update5,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == id && c.Parent.Value1 == 1)  								.Set(c => c.ChildID' () => id + 1)  							.Update());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' () => TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' () => TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update6,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' () => TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update7,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));    					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value3)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value3));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update7,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));    					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value3)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value3));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update7,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(p => p.ParentID > 1000);  					db.Insert(new Parent4 { ParentID = id' Value1 = TypeValue.Value1 });    					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value1));  					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value2)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value2));    					Assert.AreEqual(1'  						db.Parent4  							.Where(p => p.ParentID == id)  								.Set(p => p.Value1' TypeValue.Value3)  							.Update());  					Assert.AreEqual(1' db.Parent4.Count(p => p.ParentID == id && p.Value1 == TypeValue.Value3));  				}  				finally  				{  					db.Parent4.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    					db.Parent.Delete(p => p.ParentID > 1000);  					db.Insert(parent);    					parent.Value1++;    					db.Update(parent);    					Assert.AreEqual(1002' db.Parent.Single(p => p.ParentID == parent.ParentID).Value1);  				}  				finally  				{  					db.Child .Delete(c => c.ChildID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from c in db.Child  						join p in db.Parent on c.ParentID equals p.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from c in db.Child  						join p in db.Parent on c.ParentID equals p.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update9,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from c in db.Child  						join p in db.Parent on c.ParentID equals p.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update10,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix' ProviderName.SqlCe' ProviderName.DB2' ProviderName.Firebird' "Oracle"' "DevartOracle"' ProviderName.OracleManaged' ProviderName.PostgreSQL' ProviderName.MySql' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = id});    					var q =  						from p in db.Parent  						join c in db.Child on p.ParentID equals c.ParentID  						where c.ChildID == id && c.Parent.Value1 == 1  						select new { c' p };    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  					Assert.AreEqual(1' q.Update(db.Child' _ => new Child { ChildID = _.c.ChildID + 1' ParentID = _.p.ParentID }));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id + 1));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update12,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent3 = db.GetTable<Parent3>();  				try  				{  					var id = 1001;    					parent3.Delete(_ => _.ParentID2 > 1000);  					parent3.Insert(() => new Parent3() { ParentID2 = id' Value = id});    					Assert.AreEqual(1' parent3.Where(_ => _.ParentID2 == id).Set(_ => _.ParentID2' id+1).Set(_ => _.Value' _ => _.ParentID2).Update());    					var obj = parent3.FirstOrDefault(_ => _.ParentID2 == id + 1);  					Assert.IsNotNull(obj);    					db.Update(obj);    				}  				finally  				{  					parent3.Delete(_ => _.ParentID2 > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update12,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent3 = db.GetTable<Parent3>();  				try  				{  					var id = 1001;    					parent3.Delete(_ => _.ParentID2 > 1000);  					parent3.Insert(() => new Parent3() { ParentID2 = id' Value = id});    					Assert.AreEqual(1' parent3.Where(_ => _.ParentID2 == id).Set(_ => _.ParentID2' id+1).Set(_ => _.Value' _ => _.ParentID2).Update());    					var obj = parent3.FirstOrDefault(_ => _.ParentID2 == id + 1);  					Assert.IsNotNull(obj);    					db.Update(obj);    				}  				finally  				{  					parent3.Delete(_ => _.ParentID2 > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update12,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent3 = db.GetTable<Parent3>();  				try  				{  					var id = 1001;    					parent3.Delete(_ => _.ParentID2 > 1000);  					parent3.Insert(() => new Parent3() { ParentID2 = id' Value = id});    					Assert.AreEqual(1' parent3.Where(_ => _.ParentID2 == id).Set(_ => _.ParentID2' id+1).Set(_ => _.Value' _ => _.ParentID2).Update());    					var obj = parent3.FirstOrDefault(_ => _.ParentID2 == id + 1);  					Assert.IsNotNull(obj);    					db.Update(obj);    				}  				finally  				{  					parent3.Delete(_ => _.ParentID2 > 1000);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation1,The following statement contains a magic number: const int childId  = 10000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation1,The following statement contains a magic number: const int parentId = 20000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation1,The following statement contains a magic number: Assert.AreEqual(1' parents.Update(db.Parent' x => new Parent { Value1 = 5 }));
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation2,The following statement contains a magic number: const int childId  = 10000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation2,The following statement contains a magic number: const int parentId = 20000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation2,The following statement contains a magic number: Assert.AreEqual(1' parents.Update(x => new Parent { Value1 = 5 }));
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation3,The following statement contains a magic number: const int childId  = 10000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation3,The following statement contains a magic number: const int parentId = 20000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation3,The following statement contains a magic number: Assert.AreEqual(1' parents.Update(x => x.ParentID > 0' x => new Parent { Value1 = 5 }));
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation4,The following statement contains a magic number: const int childId  = 10000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation4,The following statement contains a magic number: const int parentId = 20000;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation4,The following statement contains a magic number: Assert.AreEqual(1' parents.Set(x => x.Value1' 5).Update());
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,CompiledUpdate,The following statement contains a magic number: _updateQuery(ctx' 12345' "54321");
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation5,The following statement contains a magic number: var ids = new[] { 10000' 20000 };
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateAssociation5,The following statement contains a magic number: var ids = new[] { 10000' 20000 };
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,AsUpdatableTest,The following statement contains a magic number: var id = 1001;
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,AsUpdatableTest,The following statement contains a magic number: db.Child.Delete(c => c.ChildID > 1000);
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateNullablePrimaryKey,The following statement contains a magic number: db.Update(new Table3 { ParentID = 10000' ChildID = null' GrandChildID = 1000 });
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateNullablePrimaryKey,The following statement contains a magic number: db.Update(new Table3 { ParentID = 10000' ChildID = null' GrandChildID = 1000 });
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateNullablePrimaryKey,The following statement contains a magic number: db.Update(new Table3 { ParentID = 10000' ChildID = 111' GrandChildID = 1000 });
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateNullablePrimaryKey,The following statement contains a magic number: db.Update(new Table3 { ParentID = 10000' ChildID = 111' GrandChildID = 1000 });
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateNullablePrimaryKey,The following statement contains a magic number: db.Update(new Table3 { ParentID = 10000' ChildID = 111' GrandChildID = 1000 });
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,UpdateComplexField,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<Table4>();  				int id = 3;  				try  				{    					var obj = new Table4();  					obj.Object = new TestObject() {Value = 101};  					obj.Id = id = Convert.ToInt32(db.InsertWithIdentity(obj));    					var obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 999;  					db.Update(obj);    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 666;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' _ => obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					obj.Object.Value = 777;  					table  						.Where(_ => _.Id == id)  						.Set(_ => _.Object' obj.Object)  						.Update();    					obj2 = table.First(_ => _.Id == id);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id2 = Convert.ToInt32(table.InsertWithIdentity(() => new Table4  					{  						Object = new TestObject() {Value = 300}  					}));    					obj2 = table.First(_ => _.Id == id2);  					Assert.AreEqual(300' obj2.Object.Value);    					var id3 = Convert.ToInt32(table.Value(_ => _.Object' () => obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id3);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);    					var id4 = Convert.ToInt32(table.Value(_ => _.Object' obj.Object)  						.InsertWithIdentity());    					obj2 = table.First(_ => _.Id == id4);  					Assert.AreEqual(obj.Object.Value' obj2.Object.Value);  				}  				finally  				{  					table.Delete(_ => _.Id >= id);  				}  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update15,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<LinqDataTypes3>();  				var date1 = new DateTime(2000' 1' 1);  				var date2 = new DateTime(2001' 1' 1);  				var date3 = new DateTime(2002' 1' 1);    				var obj = new LinqDataTypes3()  				{  					ID             = 1000'  					DateTimeValue  = date1'  					DateTimeValue2 = date1  				};    				table.Delete(_ => _.ID == obj.ID);  				db.Insert(obj);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date2)  					.Set(_ => _.DateTimeValue2' date3)  					.Update();    				var res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date2' res.DateTimeValue);  				Assert.AreEqual(date3' res.DateTimeValue2);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date3)  					.Set(_ => _.DateTimeValue2' date2)  					.Update();    				res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date3' res.DateTimeValue);  				Assert.AreEqual(date2' res.DateTimeValue2);  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update15,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<LinqDataTypes3>();  				var date1 = new DateTime(2000' 1' 1);  				var date2 = new DateTime(2001' 1' 1);  				var date3 = new DateTime(2002' 1' 1);    				var obj = new LinqDataTypes3()  				{  					ID             = 1000'  					DateTimeValue  = date1'  					DateTimeValue2 = date1  				};    				table.Delete(_ => _.ID == obj.ID);  				db.Insert(obj);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date2)  					.Set(_ => _.DateTimeValue2' date3)  					.Update();    				var res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date2' res.DateTimeValue);  				Assert.AreEqual(date3' res.DateTimeValue2);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date3)  					.Set(_ => _.DateTimeValue2' date2)  					.Update();    				res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date3' res.DateTimeValue);  				Assert.AreEqual(date2' res.DateTimeValue2);  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update15,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<LinqDataTypes3>();  				var date1 = new DateTime(2000' 1' 1);  				var date2 = new DateTime(2001' 1' 1);  				var date3 = new DateTime(2002' 1' 1);    				var obj = new LinqDataTypes3()  				{  					ID             = 1000'  					DateTimeValue  = date1'  					DateTimeValue2 = date1  				};    				table.Delete(_ => _.ID == obj.ID);  				db.Insert(obj);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date2)  					.Set(_ => _.DateTimeValue2' date3)  					.Update();    				var res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date2' res.DateTimeValue);  				Assert.AreEqual(date3' res.DateTimeValue2);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date3)  					.Set(_ => _.DateTimeValue2' date2)  					.Update();    				res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date3' res.DateTimeValue);  				Assert.AreEqual(date2' res.DateTimeValue2);  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Update15,The following statement contains a magic number: ForEachProvider(db =>  			{  				var table = db.GetTable<LinqDataTypes3>();  				var date1 = new DateTime(2000' 1' 1);  				var date2 = new DateTime(2001' 1' 1);  				var date3 = new DateTime(2002' 1' 1);    				var obj = new LinqDataTypes3()  				{  					ID             = 1000'  					DateTimeValue  = date1'  					DateTimeValue2 = date1  				};    				table.Delete(_ => _.ID == obj.ID);  				db.Insert(obj);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date2)  					.Set(_ => _.DateTimeValue2' date3)  					.Update();    				var res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date2' res.DateTimeValue);  				Assert.AreEqual(date3' res.DateTimeValue2);    				table  					.Where(_ => _.ID == obj.ID)  					.Set(_ => _.DateTimeValue'  date3)  					.Set(_ => _.DateTimeValue2' date2)  					.Update();    				res = table.First(_ => _.ID == obj.ID);  				Assert.AreEqual(date3' res.DateTimeValue);  				Assert.AreEqual(date2' res.DateTimeValue2);  			});
Magic Number,Update,UpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UpdateTest.cs,Issue331,The following statement contains a magic number: ForEachProvider(new[] { "PostgreSQL"' ProviderName.OracleManaged }' dc =>  			{  				var db = dc as DbManager;  				if (db == null)  					return;    				var id = BLToolkit.Common.Convert.ToInt32(db.InsertWithIdentity(new DataTypeTest3()));    				var values = db.GetTable<DataTypeTest3>().ToList();    				db.Update<DataTypeTest3>(values);    				var s = values.First(_ => _.DataTypeID == 2);  				var o = values.First(_ => _.DataTypeID == id);    				db.MappingSchema.MapObjectToObject(s' o);  				o.DataTypeID = id;    				Assert.AreEqual(s.String_' o.String_);  				Assert.AreEqual(s.Decimal_' o.Decimal_);    				db.Update<DataTypeTest3>(values);    				o = db.GetTable<DataTypeTest3>().First(_ => _.DataTypeID == id);    				Assert.AreEqual(s.String_' o.String_);  				Assert.AreEqual(s.Decimal_' o.Decimal_);  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    				db.Delete(parent);    				try  				{  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Delete(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(0' db.Parent.Count (p => p.ParentID == parent.ParentID));  				}  				finally  				{  					db.Delete(parent);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    				db.Delete(parent);    				try  				{  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count (p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Delete(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(0' db.Parent.Count (p => p.ParentID == parent.ParentID));  				}  				finally  				{  					db.Delete(parent);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    				db.Delete(parent);    				try  				{  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Delete());  					Assert.AreEqual(0' db.Parent.Count(p => p.ParentID == parent.ParentID));  				}  				finally  				{  					db.Delete(parent);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete2,The following statement contains a magic number: ForEachProvider(db =>  			{  				var parent = new Parent1 { ParentID = 1001' Value1 = 1001 };    				db.Delete(parent);    				try  				{  					db.Insert(parent);    					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == parent.ParentID));  					Assert.AreEqual(1' db.Parent.Where(p => p.ParentID == parent.ParentID).Delete());  					Assert.AreEqual(0' db.Parent.Count(p => p.ParentID == parent.ParentID));  				}  				finally  				{  					db.Delete(parent);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete3,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));    				try  				{  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1001 });  					db.Child.Insert(() => new Child { ParentID = 1' ChildID = 1002 });    					Assert.AreEqual(3' db.Child.Count(c => c.ParentID == 1));  					Assert.AreEqual(2' db.Child.Where(c => c.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(c.ChildID)).Delete());  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == 1));  				}  				finally  				{  					db.Child.Delete(c => new[] { 1001' 1002 }.Contains(c.ChildID));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete4,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.Informix }' db =>  			{  				db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));    				try  				{  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 1' GrandChildID = 1001 });  					db.GrandChild.Insert(() => new GrandChild { ParentID = 1' ChildID = 2' GrandChildID = 1002 });    					Assert.AreEqual(3' db.GrandChild1.Count(gc => gc.ParentID == 1));  					Assert.AreEqual(2' db.GrandChild1.Where(gc => gc.Parent.ParentID == 1 && new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value)).Delete());  					Assert.AreEqual(1' db.GrandChild1.Count(gc => gc.ParentID == 1));  				}  				finally  				{  					db.GrandChild1.Delete(gc => new[] { 1001' 1002 }.Contains(gc.GrandChildID.Value));  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,Delete5,The following statement contains a magic number: ForEachProvider(db =>  			{  				var values = new[] { 1001' 1002 };    				db.Parent.Delete(_ => _.ParentID > 1000);    				try  				{  					db.Parent.Insert(() => new Parent { ParentID = values[0]' Value1 = 1 });  					db.Parent.Insert(() => new Parent { ParentID = values[1]' Value1 = 1 });    					Assert.AreEqual(2' db.Parent.Count(_ => _.ParentID > 1000));  					Assert.AreEqual(2' db.Parent.Delete(_ => values.Contains(_.ParentID)));  					Assert.AreEqual(0' db.Parent.Count(_ => _.ParentID > 1000));  				}  				finally  				{  					db.Parent.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: db.Parent.Insert(() => new Parent { ParentID = 1001 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: db.Child. Insert(() => new Child  { ParentID = 1001' ChildID = 1 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: db.Child. Insert(() => new Child  { ParentID = 1001' ChildID = 2 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: db.Child. Insert(() => new Child  { ParentID = 1001' ChildID = 2 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: var q =  						from p in db.Parent  						where p.ParentID >= 1000  						select p;
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany1,The following statement contains a magic number: Assert.That(n' Is.GreaterThanOrEqualTo(2));
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.Parent.    Insert(() => new Parent     { ParentID = 1001 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.Child.     Insert(() => new Child      { ParentID = 1001' ChildID = 1 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 1});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 3});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 3});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.Child.     Insert(() => new Child      { ParentID = 1001' ChildID = 2 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.Child.     Insert(() => new Child      { ParentID = 1001' ChildID = 2 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 1});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 1});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 3});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 3});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 2' GrandChildID = 3});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: var q =  						from p in db.Parent  						where p.ParentID >= 1000  						select p;
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: Assert.That(n1' Is.EqualTo(6));
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany2,The following statement contains a magic number: Assert.That(n2' Is.EqualTo(2));
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: var ids = new[] { 1001 };
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.GrandChild.Delete(c => c.ParentID >= 1000);
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.Child.     Delete(c => c.ParentID >= 1000);
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.Parent.    Delete(c => c.ParentID >= 1000);
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.Parent.    Insert(() => new Parent     { ParentID = 1001 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.Child.     Insert(() => new Child      { ParentID = 1001' ChildID = 1 });
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 1});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: db.GrandChild.Insert(() => new GrandChild { ParentID = 1001' ChildID = 1' GrandChildID = 2});
Magic Number,Update,DeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\DeleteTest.cs,DeleteMany3,The following statement contains a magic number: Assert.That(n1' Is.EqualTo(2));
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,Transaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransaction,The following statement contains a magic number: var list = new[]  				{  					new Parent { ParentID = 1111' Value1 = 1111 }'  					new Parent { ParentID = 2111' Value1 = 2111 }'  					new Parent { ParentID = 3111' Value1 = 3111 }'  					new Parent { ParentID = 4111' Value1 = 4111 }'  				};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: db.GetTable<Table>().Delete(_ => _.Id > 2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity1,The following statement contains a magic number: Assert.AreEqual(c1+4' c2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: var list = new[]  					{  						new Table {IntValue = 1111' StringValue = "1111"}'  						new Table {IntValue = 2111' StringValue = "2111"}'  						new Table {IntValue = 3111' StringValue = "3111"}'  						new Table {IntValue = 4111' StringValue = "4111"}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: db.GetTable<Table>().Delete(_ => _.Id > 2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity1,The following statement contains a magic number: Assert.AreEqual(c1+4' c2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: db.GetTable<Table2>().Delete(_ => _.IntValue == 1111);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: Assert.AreEqual(c1+4' c2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: var result = db.GetTable<Table2>().Where(_ => _.IntValue == 1111).ToList();
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,TransactionWithIdentity2,The following statement contains a magic number: Assert.AreEqual(1111' e.Object.Value);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var list = new[]  					{  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  						new Table2 {IntValue = 1111' Object = new TestObject{Value = 1111}}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: db.GetTable<Table2>().Delete(_ => _.IntValue == 1111);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: Assert.AreEqual(c1+4' c2);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: var result = db.GetTable<Table2>().Where(_ => _.IntValue == 1111).ToList();
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,NoTransactionWithIdentity2,The following statement contains a magic number: Assert.AreEqual(1111' e.Object.Value);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var list = new[]  					{  						new Table3 {ID = 1000' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1001' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1002' BoolValue = true'  MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  						new Table3 {ID = 1003' BoolValue = false' MoneyValue = 10.1m' DateTimeValue = DateTime.Today}'  					};
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: db.GetTable<Table3>().Delete(_ => _.ID >= 1000);
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: var res = db.GetTable<Table3>().Where(_ => _.ID >= 1000).ToList();
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res.ForEach(_ => { _.MoneyValue = _.ID; _.DateTimeValue = tomorrow; _.SmallIntValue = 121; });
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res = db.GetTable<Table3>().Where(_ => _.ID >= 1000).ToList();
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res.ForEach(_=> { Assert.AreEqual(_.ID' _.MoneyValue); Assert.AreEqual(tomorrow' _.DateTimeValue); Assert.AreEqual(121' _.SmallIntValue);});
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res.ForEach(_=> { _.MoneyValue = _.ID+1; _.DateTimeValue = tomorrow; _.SmallIntValue = 131; });
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res = db.GetTable<Table3>().Where(_ => _.ID >= 1000).ToList();
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res.ForEach(_=> { Assert.AreEqual(_.ID+1' _.MoneyValue); Assert.AreEqual(tomorrow' _.DateTimeValue); Assert.AreEqual(131' _.SmallIntValue);});
Magic Number,Update,BatchTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\BatchTest.cs,BatchWithTwoKeys,The following statement contains a magic number: res = db.GetTable<Table3>().Where(_ => _.ID >= 1000).ToList();
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db  							.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Insert(db.Types' _ => new LinqDataTypes  							{  								ID        = (int)(_ + 1001)'  								GuidValue = Sql.NewGuid()'  								BoolValue = true  							}));  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db  							.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Insert(db.Types' _ => new LinqDataTypes  							{  								ID        = (int)(_ + 1001)'  								GuidValue = Sql.NewGuid()'  								BoolValue = true  							}));  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db  							.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Insert(db.Types' _ => new LinqDataTypes  							{  								ID        = (int)(_ + 1001)'  								GuidValue = Sql.NewGuid()'  								BoolValue = true  							}));  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db  							.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Insert(db.Types' _ => new LinqDataTypes  							{  								ID        = (int)(_ + 1001)'  								GuidValue = Sql.NewGuid()'  								BoolValue = true  							}));  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db  							.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Insert(db.Types' _ => new LinqDataTypes  							{  								ID        = (int)(_ + 1001)'  								GuidValue = Sql.NewGuid()'  								BoolValue = true  							}));  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Into(db.Types)  								.Value(t => t.ID'        t => (int)(t + 1001))  								.Value(t => t.GuidValue' t => Sql.NewGuid())  								.Value(t => t.BoolValue' t => true)  							.Insert());  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Into(db.Types)  								.Value(t => t.ID'        t => (int)(t + 1001))  								.Value(t => t.GuidValue' t => Sql.NewGuid())  								.Value(t => t.BoolValue' t => true)  							.Insert());  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Into(db.Types)  								.Value(t => t.ID'        t => (int)(t + 1001))  								.Value(t => t.GuidValue' t => Sql.NewGuid())  								.Value(t => t.BoolValue' t => true)  							.Insert());  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Into(db.Types)  								.Value(t => t.ID'        t => (int)(t + 1001))  								.Value(t => t.GuidValue' t => Sql.NewGuid())  								.Value(t => t.BoolValue' t => true)  							.Insert());  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,DistinctInsert2,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.DB2' ProviderName.Informix' ProviderName.PostgreSQL' ProviderName.SQLite' ProviderName.Access }' db =>  			{  				try  				{  					db.Types.Delete(c => c.ID > 1000);    					Assert.AreEqual(  						Types.Select(_ => _.ID / 3).Distinct().Count()'  						db.Types  							.Select(_ => Math.Floor(_.ID / 3.0))  							.Distinct()  							.Into(db.Types)  								.Value(t => t.ID'        t => (int)(t + 1001))  								.Value(t => t.GuidValue' t => Sql.NewGuid())  								.Value(t => t.BoolValue' t => true)  							.Insert());  				}  				finally  				{  					db.Types.Delete(c => c.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  						.Insert(() => new Child  						{  							ParentID = 1'  							ChildID  = id  						}));    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  						.Insert(() => new Child  						{  							ParentID = 1'  							ChildID  = id  						}));    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  						.Insert(() => new Child  						{  							ParentID = 1'  							ChildID  = id  						}));    					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Into(db.Child)  								.Value(c => c.ParentID' () => 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Into(db.Child)  								.Value(c => c.ParentID' () => 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Into(db.Child)  								.Value(c => c.ParentID' () => 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Insert(db.Child' c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Insert(db.Child' c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Insert(db.Child' c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Insert(db.Child' c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert31,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Select(c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							})  							.Insert(db.Child' c => c));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert31,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Select(c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							})  							.Insert(db.Child' c => c));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert31,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Select(c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							})  							.Insert(db.Child' c => c));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert31,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Select(c => new Child  							{  								ParentID = c.ParentID'  								ChildID  = id  							})  							.Insert(db.Child' c => c));  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c  => c.ParentID)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c  => c.ParentID)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c  => c.ParentID)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c  => c.ParentID)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c => c.ParentID)  								.Value(c => c.ChildID'  id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c => c.ParentID)  								.Value(c => c.ChildID'  id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c => c.ParentID)  								.Value(c => c.ChildID'  id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Child)  								.Value(c => c.ParentID' c => c.ParentID)  								.Value(c => c.ChildID'  id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert6,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.Value1 == 11);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Parent)  								.Value(p => p.ParentID' c => c.ParentID)  								.Value(p => p.Value1'   c => (int?)c.ChildID)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.Value1 == 11));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 11);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert6,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.Value1 == 11);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Parent)  								.Value(p => p.ParentID' c => c.ParentID)  								.Value(p => p.Value1'   c => (int?)c.ChildID)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.Value1 == 11));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 11);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert6,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.Value1 == 11);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Parent)  								.Value(p => p.ParentID' c => c.ParentID)  								.Value(p => p.Value1'   c => (int?)c.ChildID)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.Value1 == 11));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 11);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert6,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.Value1 == 11);    					Assert.AreEqual(1'  						db.Child  							.Where(c => c.ChildID == 11)  							.Into(db.Parent)  								.Value(p => p.ParentID' c => c.ParentID)  								.Value(p => p.Value1'   c => (int?)c.ChildID)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.Value1 == 11));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 11);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert7,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ChildID'  () => id)  								.Value(c => c.ParentID' 1)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert7,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ChildID'  () => id)  								.Value(c => c.ParentID' 1)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert7,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ChildID'  () => id)  								.Value(c => c.ParentID' 1)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ParentID' 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ParentID' 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert8,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child.Delete(c => c.ChildID > 1000);    					Assert.AreEqual(1'  						db  							.Child  								.Value(c => c.ParentID' 1)  								.Value(c => c.ChildID'  () => id)  							.Insert());  					Assert.AreEqual(1' db.Child.Count(c => c.ChildID == id));  				}  				finally  				{  					db.Child.Delete(c => c.ChildID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert9,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);    					db.Insert(new Parent { ParentID = id' Value1 = id });    					Assert.AreEqual(1'  						db.Parent  							.Where(p => p.ParentID == id)  							.Insert(db.Child' p => new Child  							{  								ParentID = p.ParentID'  								ChildID  = p.ParentID'  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == id));  				}  				finally  				{  					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert9,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);    					db.Insert(new Parent { ParentID = id' Value1 = id });    					Assert.AreEqual(1'  						db.Parent  							.Where(p => p.ParentID == id)  							.Insert(db.Child' p => new Child  							{  								ParentID = p.ParentID'  								ChildID  = p.ParentID'  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == id));  				}  				finally  				{  					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert9,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);    					db.Insert(new Parent { ParentID = id' Value1 = id });    					Assert.AreEqual(1'  						db.Parent  							.Where(p => p.ParentID == id)  							.Insert(db.Child' p => new Child  							{  								ParentID = p.ParentID'  								ChildID  = p.ParentID'  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == id));  				}  				finally  				{  					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert9,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);    					db.Insert(new Parent { ParentID = id' Value1 = id });    					Assert.AreEqual(1'  						db.Parent  							.Where(p => p.ParentID == id)  							.Insert(db.Child' p => new Child  							{  								ParentID = p.ParentID'  								ChildID  = p.ParentID'  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == id));  				}  				finally  				{  					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,Insert9,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);    					db.Insert(new Parent { ParentID = id' Value1 = id });    					Assert.AreEqual(1'  						db.Parent  							.Where(p => p.ParentID == id)  							.Insert(db.Child' p => new Child  							{  								ParentID = p.ParentID'  								ChildID  = p.ParentID'  							}));  					Assert.AreEqual(1' db.Child.Count(c => c.ParentID == id));  				}  				finally  				{  					db.Child. Delete(c => c.ParentID > 1000);  					db.Parent.Delete(p => p.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);  					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = null });    					Assert.IsNull(types.Single(t => t.ID == 1001).BinaryValue);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);  					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = null });    					Assert.IsNull(types.Single(t => t.ID == 1001).BinaryValue);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);  					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = null });    					Assert.IsNull(types.Single(t => t.ID == 1001).BinaryValue);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);  					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = null });    					Assert.IsNull(types.Single(t => t.ID == 1001).BinaryValue);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);    					byte[] arr = null;    					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = arr });    					var res = types.Single(t => t.ID == 1001).BinaryValue;    					Assert.IsNull(res);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);    					byte[] arr = null;    					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = arr });    					var res = types.Single(t => t.ID == 1001).BinaryValue;    					Assert.IsNull(res);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);    					byte[] arr = null;    					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = arr });    					var res = types.Single(t => t.ID == 1001).BinaryValue;    					Assert.IsNull(res);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertArray2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var types = db.GetTable<LinqDataTypesArrayTest>();    					types.Delete(t => t.ID > 1000);    					byte[] arr = null;    					types.Insert(() => new LinqDataTypesArrayTest { ID = 1001' BoolValue = true' BinaryValue = arr });    					var res = types.Single(t => t.ID == 1001).BinaryValue;    					Assert.IsNull(res);  				}  				finally  				{  					db.GetTable<LinqDataTypesArrayTest>().Delete(t => t.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertUnion1,The following statement contains a magic number: ForEachProvider(  				db =>  				{  					db.Parent.Delete(p => p.ParentID > 1000);    					try  					{  						var q =  							db.Child.     Select(c => new Parent { ParentID = c.ParentID'      Value1 = (int) Math.Floor(c.ChildID / 10.0) }).Union(  							db.GrandChild.Select(c => new Parent { ParentID = c.ParentID ?? 0' Value1 = (int?)Math.Floor((c.GrandChildID ?? 0) / 100.0) }));    						q.Insert(db.Parent' p => new Parent  						{  							ParentID = p.ParentID + 1000'  							Value1   = p.Value1  						});    						Assert.AreEqual(  							Child.     Select(c => new { ParentID = c.ParentID      }).Union(  							GrandChild.Select(c => new { ParentID = c.ParentID ?? 0 })).Count()'  							db.Parent.Count(c => c.ParentID > 1000));  					}  					finally  					{  						db.Parent.Delete(p => p.ParentID > 1000);  					}  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					var p = new Parent4  					{  						ParentID = id'  						Value1   = TypeValue.Value2  					};    					Assert.AreEqual(1'  						db.Parent4  						.Insert(() => new Parent4  						{  							ParentID = 1001'  							Value1   = p.Value1  						}));    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id && _.Value1 == p.Value1));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					var p = new Parent4  					{  						ParentID = id'  						Value1   = TypeValue.Value2  					};    					Assert.AreEqual(1'  						db.Parent4  						.Insert(() => new Parent4  						{  							ParentID = 1001'  							Value1   = p.Value1  						}));    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id && _.Value1 == p.Value1));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					var p = new Parent4  					{  						ParentID = id'  						Value1   = TypeValue.Value2  					};    					Assert.AreEqual(1'  						db.Parent4  						.Insert(() => new Parent4  						{  							ParentID = 1001'  							Value1   = p.Value1  						}));    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id && _.Value1 == p.Value1));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					var p = new Parent4  					{  						ParentID = id'  						Value1   = TypeValue.Value2  					};    					Assert.AreEqual(1'  						db.Parent4  						.Insert(() => new Parent4  						{  							ParentID = 1001'  							Value1   = p.Value1  						}));    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id && _.Value1 == p.Value1));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   () => TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   () => TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertEnum3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					var id = 1001;    					db.Parent4.Delete(_ => _.ParentID > 1000);    					Assert.AreEqual(1'  						db.Parent4  							.Value(_ => _.ParentID' id)  							.Value(_ => _.Value1'   () => TypeValue.Value1)  						.Insert());    					Assert.AreEqual(1' db.Parent4.Count(_ => _.ParentID == id));  				}  				finally  				{  					db.Parent4.Delete(_ => _.ParentID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertNull,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1001);    					Assert.AreEqual(1'  						db  							.Into(db.Parent)  								.Value(p => p.ParentID' 1001)  								.Value(p => p.Value1'   (int?)null)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == 1001));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 1001);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertNull,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1001);    					Assert.AreEqual(1'  						db  							.Into(db.Parent)  								.Value(p => p.ParentID' 1001)  								.Value(p => p.Value1'   (int?)null)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == 1001));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 1001);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertNull,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1001);    					Assert.AreEqual(1'  						db  							.Into(db.Parent)  								.Value(p => p.ParentID' 1001)  								.Value(p => p.Value1'   (int?)null)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == 1001));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 1001);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertNull,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1001);    					Assert.AreEqual(1'  						db  							.Into(db.Parent)  								.Value(p => p.ParentID' 1001)  								.Value(p => p.Value1'   (int?)null)  							.Insert());  					Assert.AreEqual(1' db.Parent.Count(p => p.ParentID == 1001));  				}  				finally  				{  					db.Parent.Delete(p => p.Value1 == 1001);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id =  						db.Person  							.InsertWithIdentity(() => new Person  							{  								FirstName = "John"'  								LastName  = "Shepard"'  								Gender    = Gender.Male  							});    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity1,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id =  						db.Person  							.InsertWithIdentity(() => new Person  							{  								FirstName = "John"'  								LastName  = "Shepard"'  								Gender    = Gender.Male  							});    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id = db  						.Into(db.Person)  							.Value(p => p.FirstName' () => "John")  							.Value(p => p.LastName'  () => "Shepard")  							.Value(p => p.Gender'    () => Gender.Male)  						.InsertWithIdentity();    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity2,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id = db  						.Into(db.Person)  							.Value(p => p.FirstName' () => "John")  							.Value(p => p.LastName'  () => "Shepard")  							.Value(p => p.Gender'    () => Gender.Male)  						.InsertWithIdentity();    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id = db  						.Into(db.Person)  							.Value(p => p.FirstName' "John")  							.Value(p => p.LastName'  "Shepard")  							.Value(p => p.Gender'    Gender.Male)  						.InsertWithIdentity();    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity3,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Person.Delete(p => p.ID > 2);    					var id = db  						.Into(db.Person)  							.Value(p => p.FirstName' "John")  							.Value(p => p.LastName'  "Shepard")  							.Value(p => p.Gender'    Gender.Male)  						.InsertWithIdentity();    					Assert.NotNull(id);    					var john = db.Person.Single(p => p.FirstName == "John" && p.LastName == "Shepard");    					Assert.NotNull (john);  					Assert.AreEqual(id' john.ID);  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var id = db.InsertWithIdentity(  							new Person  							{  								FirstName = "John" + i'  								LastName  = "Shepard"'  								Gender    = Gender.Male  							});    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var id = db.InsertWithIdentity(  							new Person  							{  								FirstName = "John" + i'  								LastName  = "Shepard"'  								Gender    = Gender.Male  							});    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity4,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var id = db.InsertWithIdentity(  							new Person  							{  								FirstName = "John" + i'  								LastName  = "Shepard"'  								Gender    = Gender.Male  							});    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var person = new Person  						{  							FirstName = "John" + i'  							LastName  = "Shepard"'  							Gender    = Gender.Male  						};    						var id = db.InsertWithIdentity(person);    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var person = new Person  						{  							FirstName = "John" + i'  							LastName  = "Shepard"'  							Gender    = Gender.Male  						};    						var id = db.InsertWithIdentity(person);    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertWithIdentity5,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					for (var i = 0; i < 2; i++)  					{  						db.Person.Delete(p => p.ID > 2);    						var person = new Person  						{  							FirstName = "John" + i'  							LastName  = "Shepard"'  							Gender    = Gender.Male  						};    						var id = db.InsertWithIdentity(person);    						Assert.NotNull(id);    						var john = db.Person.Single(p => p.FirstName == "John" + i && p.LastName == "Shepard");    						Assert.NotNull (john);  						Assert.AreEqual(id' john.ID);  					}  				}  				finally  				{  					db.Person.Delete(p => p.ID > 2);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertOrUpdate1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var id = 0;    				try  				{  					id = Convert.ToInt32(db.Person.InsertWithIdentity(() => new Person  					{  						FirstName = "John"'  						LastName  = "Shepard"'  						Gender    = Gender.Male  					}));    					for (var i = 0; i < 3; i++)  					{  						db.Patient.InsertOrUpdate(  							() => new Patient  							{  								PersonID  = id'  								Diagnosis = "abc"'  							}'  							p => new Patient  							{  								Diagnosis = (p.Diagnosis.Length + i).ToString()'  							});  					}    					Assert.AreEqual("3"' db.Patient.Single(p => p.PersonID == id).Diagnosis);  				}  				finally  				{  					db.Patient.Delete(p => p.PersonID == id);  					db.Person. Delete(p => p.ID       == id);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertOrReplace1,The following statement contains a magic number: ForEachProvider(db =>  			{  				var id = 0;    				try  				{  					id = Convert.ToInt32(db.Person.InsertWithIdentity(() => new Person  					{  						FirstName = "John"'  						LastName  = "Shepard"'  						Gender    = Gender.Male  					}));    					for (var i = 0; i < 3; i++)  					{  						db.InsertOrReplace(new Patient  						{  							PersonID  = id'  							Diagnosis = ("abc" + i).ToString()'  						});  					}    					Assert.AreEqual("abc2"' db.Patient.Single(p => p.PersonID == id).Diagnosis);  				}  				finally  				{  					db.Patient.Delete(p => p.PersonID == id);  					db.Person. Delete(p => p.ID       == id);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertOrUpdate3,The following statement contains a magic number: ForEachProvider(db =>  			{  				var id = 0;    				try  				{  					id = Convert.ToInt32(db.Person.InsertWithIdentity(() => new Person  					{  						FirstName = "John"'  						LastName  = "Shepard"'  						Gender    = Gender.Male  					}));    					var diagnosis = "abc";    					for (var i = 0; i < 3; i++)  					{  						db.Patient.InsertOrUpdate(  							() => new Patient  							{  								PersonID  = id'  								Diagnosis = "abc"'  							}'  							p => new Patient  							{  								Diagnosis = (p.Diagnosis.Length + i).ToString()'  							}'  							() => new Patient  							{  								PersonID  = id'  								//Diagnosis = diagnosis'  							});    						diagnosis = (diagnosis.Length + i).ToString();  					}    					Assert.AreEqual("3"' db.Patient.Single(p => p.PersonID == id).Diagnosis);  				}  				finally  				{  					db.Patient.Delete(p => p.PersonID == id);  					db.Person. Delete(p => p.ID       == id);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch1,The following statement contains a magic number: ForEachProvider(new[] { ProviderName.PostgreSQL }' db =>  			{  				if (db is DbManager && ((DbManager)db).ConfigurationString == "Oracle")  				{  					db.Types2.Delete(_ => _.ID > 1000);    					((DbManager)db).InsertBatch(1' new[]  					{  						new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  						new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  					});    					db.Types2.Delete(_ => _.ID > 1000);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.Types2.Delete(_ => _.ID > 1000);
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(100' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(100' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(100' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(100' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(100' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    IntValue = 1532334 }'  				});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch2,The following statement contains a magic number: db.Types2.Delete(_ => _.ID > 1000);
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBatch3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table>();    				t.Delete(_ => _.ID > 1000);    				((DbManager)db).InsertBatch(1' new[]  				{  					new Table { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  null' EnumValue = null }'  					new Table { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue =  2'    EnumValue = TestEnum.Second }'  				});    				foreach (var e in t.Where(_ => _.ID > 1000))  				{  					if (e.EnumValue != null)  						Assert.AreEqual(TestEnum.Second' e.EnumValue);  				}    				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,NullableFieldTest,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1100);    					db.Insert(new NullableFieldTestObject { ParentID = 1100 });    					var parent = db.Parent.Single(p => p.ParentID == 1100);    					Assert.IsNull(parent.Value1);  				}  				finally  				{  					db.Parent.Delete(p => p.ParentID == 1100);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,NullableFieldTest,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1100);    					db.Insert(new NullableFieldTestObject { ParentID = 1100 });    					var parent = db.Parent.Single(p => p.ParentID == 1100);    					Assert.IsNull(parent.Value1);  				}  				finally  				{  					db.Parent.Delete(p => p.ParentID == 1100);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,NullableFieldTest,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1100);    					db.Insert(new NullableFieldTestObject { ParentID = 1100 });    					var parent = db.Parent.Single(p => p.ParentID == 1100);    					Assert.IsNull(parent.Value1);  				}  				finally  				{  					db.Parent.Delete(p => p.ParentID == 1100);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,NullableFieldTest,The following statement contains a magic number: ForEachProvider(db =>  			{  				try  				{  					db.Parent.Delete(p => p.ParentID == 1100);    					db.Insert(new NullableFieldTestObject { ParentID = 1100 });    					var parent = db.Parent.Single(p => p.ParentID == 1100);    					Assert.IsNull(parent.Value1);  				}  				finally  				{  					db.Parent.Delete(p => p.ParentID == 1100);  				}  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinaryBatch,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};  				((DbManager)db).InsertBatch(1' src);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' o.ID)  						.Value(_ => _.BinaryValue' o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				db.Insert(src[0]);  				db.Insert(src[1]);    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);  			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertBinary3,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<Table2>();    				t.Delete(_ => _.ID > 1000);    				var src = new[]  				{  					new Table2 { ID = 1001' BinaryValue = new byte[]{0' 1' 2}}'  					new Table2 { ID = 1002' BinaryValue = new byte[]{3' 4' 5}}  				};    				foreach (var o in src)  					t  						.Value(_ => _.ID' () => o.ID)  						.Value(_ => _.BinaryValue' () => o.BinaryValue)  						.Insert();    				AreEqual(src' t.Where(_ => _.ID > 1000));  				t.Delete(_ => _.ID > 1000);    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool1,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedFieldsTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool1,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedFieldsTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool1,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedFieldsTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool1,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedFieldsTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool1,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedFieldsTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedClassTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedClassTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedClassTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedClassTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Update,InsertTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\InsertTest.cs,InsertMappedBool2,The following statement contains a magic number: ForEachProvider(db =>  			{  				if (!(db is DbManager))  					return;    				var t = db.GetTable<MappedClassTable>();  				var ct = db.GetTable<MappedBoolCheckTable>().Where(_ => _.ID == 1001);    				t.Delete(_ => _.ID > 1000);    				var src = new MappedFieldsTable {ID = 1001' BoolValue1 = true' BoolValue2 = false};    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' src.BoolValue1)  					.Value(_ => _.BoolValue2' src.BoolValue2)  					.Insert();    				//db.Insert(src);    				var to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);      				db.Insert(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Delete(_ => _.ID > 1000);    				t  					.Value(_ => _.ID' src.ID)  					.Value(_ => _.BoolValue1' () => src.BoolValue1)  					.Value(_ => _.BoolValue2' () => src.BoolValue2)  					.Insert();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				src.BoolValue1 = false;  				src.BoolValue2 = true;    				db.Update(src);    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' true)  					.Set(_ => _.BoolValue2' false)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue2);    				t.Where(_ => _.ID == src.ID)  					.Set(_ => _.BoolValue1' () => false)  					.Set(_ => _.BoolValue2' () => true)  					.Update();    				to = ct.First();  				Assert.AreEqual(MappedFieldsTable.False' to.BoolValue1);  				Assert.AreEqual(MappedFieldsTable.True'  to.BoolValue2);    				ct.Delete();    			});
Magic Number,Data.Exceptions,Common,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\Common.cs,ReplaceTableTest,The following statement contains a magic number: var n = 555;
Magic Number,Data.Exceptions,MyDbManager,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\Common.cs,ProcessQuery,The following statement contains a magic number: value == 555
Magic Number,Data.Exceptions,DmlTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\DmlTest.cs,InsertOrUpdate1,The following statement contains a magic number: ForEachProvider(  					new[] { "Northwind" }'  					db =>  					db.Doctor.InsertOrUpdate(  						() => new Doctor  						{  							PersonID  = 10'  							Taxonomy = "...."'  						}'  						p => new Doctor  						{  							Taxonomy = "..."'  						}));
Magic Number,Data.Exceptions,ElementOperationTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\Exceptions\ElementOperationTest.cs,First,The following statement contains a magic number: ForEachProvider(typeof(InvalidOperationException)'  				new[] { "Northwind" }'  				db => db.Parent.First(p => p.ParentID == 100));
Magic Number,Data.Linq.ProviderSpecific,MySqlSprocParameterPrefixTests,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\MySqlSprocParameterPrefixTests.cs,PrefixIsAddedWhenRetrievingParameterFromDbManager,The following statement contains a magic number: new[] { 1' 2 }
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: var data = new[]  			{  				new Trade { ID = 375' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 328' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 348' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 357' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 371' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     }'  				new Trade { ID = 333' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1'          ValueAsDate = new DateTime(2011' 1' 5) }'  				new Trade { ID = 353' Version = 1' TypeID = 20224' TypeName = "Gas Month"'     ValueAsInteger = 1000000000'                                        }'  				new Trade { ID = 973' Version = 1' TypeID = 20160' TypeName = "EU Allowances"' }'  			};
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch1,The following statement contains a magic number: db.InsertBatch(5' data);
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.Types2.Delete(_ => _.ID > 1000);
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.InsertBatch(2' new[]  				{  					new LinqDataTypes2 { ID = 1003' MoneyValue = 0m' DateTimeValue = null'         BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue = null' IntValue = null }'  					new LinqDataTypes2 { ID = 1004' MoneyValue = 0m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 2'    IntValue = 1532334 }'  					new LinqDataTypes2 { ID = 1005' MoneyValue = 1m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 5'    IntValue = null }'  					new LinqDataTypes2 { ID = 1006' MoneyValue = 2m' DateTimeValue = DateTime.Now' BoolValue = false' GuidValue = null'                                             SmallIntValue = 6'    IntValue = 153     }'  				});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,InsertBatch2,The following statement contains a magic number: db.Types2.Delete(_ => _.ID > 1000);
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,ParameterNameLength,The following statement contains a magic number: t.Insert(() => new LongFieldName() {Id = 2' VeryVeryVeryVeryLongFieldName1 = "Crazy name"});
Magic Number,Data.Linq.ProviderSpecific,Oracle,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Oracle.cs,ParameterNameLength,The following statement contains a magic number: p.Id = 3;
Magic Number,Data.Linq.ProviderSpecific,Access,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Access.cs,SqlTest,The following statement contains a magic number: var res = db  					.SetCommand(@"  						UPDATE  							[Child] [c]  								LEFT JOIN [Parent] [t1] ON [c].[ParentID] = [t1].[ParentID]  						SET  							[ChildID] = @id  						WHERE  							[c].[ChildID] = @id1 AND [t1].[Value1] = 1  "'  						db.Parameter("@id1"' 1001)'  						db.Parameter("@id"' 1002))  					.ExecuteNonQuery();
Magic Number,Data.Linq.ProviderSpecific,Access,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\Access.cs,SqlTest,The following statement contains a magic number: var res = db  					.SetCommand(@"  						UPDATE  							[Child] [c]  								LEFT JOIN [Parent] [t1] ON [c].[ParentID] = [t1].[ParentID]  						SET  							[ChildID] = @id  						WHERE  							[c].[ChildID] = @id1 AND [t1].[Value1] = 1  "'  						db.Parameter("@id1"' 1001)'  						db.Parameter("@id"' 1002))  					.ExecuteNonQuery();
Magic Number,Data.Linq.ProviderSpecific,SqlCe,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ProviderSpecific\SqlCe.cs,DateTime2Test,The following statement contains a magic number: new SqlQuery<Test>().Insert(db' new Test { ID = 100001' Data = DateTime.Now });
Magic Number,Data.Linq.UserTests,FirstOrDefaultNullReferenceExceptionTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\FirstOrDefaultNullReferenceExceptionTest.cs,Test,The following statement contains a magic number: query.FirstOrDefault(p => p.c1 > 10);
Magic Number,Data.Linq.UserTests,Issue369,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\Issue369.cs,NullableTest2,The following statement contains a magic number: db.GetTable<SmallDataTypeTest>().Delete(_ => _.DataTypeID > 2);
Magic Number,Data.Linq.UserTests,Issue369,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\Issue369.cs,NullableTest3,The following statement contains a magic number: db.GetTable<SmallDataTypeTest>().Delete(_ => _.DataTypeID > 2);
Magic Number,Data.Linq.UserTests,Issue369,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\Issue369.cs,NullableTest,The following statement contains a magic number: db.GetTable<SmallDataTypeTest>().Delete(_ => _.DataTypeID > 2);
Magic Number,Data.Linq.UserTests,Issue369,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\Issue369.cs,NullableTest4,The following statement contains a magic number: db.GetTable<SmallDataTypeTest>().Delete(_ => _.DataTypeID > 2);
Magic Number,Data.Linq.UserTests,SelectManyUpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\SelectManyUpdateTest.cs,Test1,The following statement contains a magic number: var harnessIds = new int[2];
Magic Number,Data.Linq.UserTests,SelectManyUpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\SelectManyUpdateTest.cs,Test2,The following statement contains a magic number: var harnessIds = new int[2];
Magic Number,Data.Linq.UserTests,SelectManyUpdateTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\SelectManyUpdateTest.cs,Test2,The following statement contains a magic number: db.GetTable<Parent>()  					.Where     (x => harnessIds.Contains(x.ParentID))  					.SelectMany(x => x.Children)  					.SelectMany(x => x.Children)  					.Set       (x => x.ChildID' 10)  					.Update();
Magic Number,Data.Linq.UserTests,SelectManyDeleteTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\SelectManyDeleteTest.cs,Test,The following statement contains a magic number: var harnessIds = new int[2];
Magic Number,Data.Linq.UserTests,UnnecessaryInnerJoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\UnnecessaryInnerJoinTest.cs,Test,The following statement contains a magic number: var ids = new long[] { 1' 2' 3 };
Magic Number,Data.Linq.UserTests,UnnecessaryInnerJoinTest,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\UserTests\UnnecessaryInnerJoinTest.cs,Test,The following statement contains a magic number: var ids = new long[] { 1' 2' 3 };
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new LinqDataTypes { ID =  1' MoneyValue =  1.11m' DateTimeValue = new DateTime(2001'  1'  11'  1' 11' 21' 100)' BoolValue = true'  GuidValue = new Guid("ef129165-6ffe-4df9-bb6b-bb16e413c883")' SmallIntValue =  1' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = UInt64.MaxValue/2    }'  					new LinqDataTypes { ID =  2' MoneyValue =  2.49m' DateTimeValue = new DateTime(2005'  5'  15'  5' 15' 25' 500)' BoolValue = false' GuidValue = new Guid("bc663a61-7b40-4681-ac38-f9aaf55b706b")' SmallIntValue =  2' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  3' MoneyValue =  3.99m' DateTimeValue = new DateTime(2009'  9'  19'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d2f970c0-35ac-4987-9cd5-5badb1757436")' SmallIntValue =  3' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  4' MoneyValue =  4.50m' DateTimeValue = new DateTime(2009'  9'  20'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("40932fdb-1543-4e4a-ac2c-ca371604fb4b")' SmallIntValue =  4' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  5' MoneyValue =  5.50m' DateTimeValue = new DateTime(2009'  9'  21'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("febe3eca-cb5f-40b2-ad39-2979d312afca")' SmallIntValue =  5' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  6' MoneyValue =  6.55m' DateTimeValue = new DateTime(2009'  9'  22'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("8d3c5d1d-47db-4730-9fe7-968f6228a4c0")' SmallIntValue =  6' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  7' MoneyValue =  7.00m' DateTimeValue = new DateTime(2009'  9'  23'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("48094115-83af-46dd-a906-bff26ee21ee2")' SmallIntValue =  7' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  8' MoneyValue =  8.99m' DateTimeValue = new DateTime(2009'  9'  24'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("c1139f1f-1335-4cd4-937e-92602f732dd3")' SmallIntValue =  8' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID =  9' MoneyValue =  9.63m' DateTimeValue = new DateTime(2009'  9'  25'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("46c5c512-3d4b-4cf7-b4e7-1de080789e5d")' SmallIntValue =  9' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 10' MoneyValue = 10.77m' DateTimeValue = new DateTime(2009'  9'  26'  9' 19' 29'  90)' BoolValue = false' GuidValue = new Guid("61b2bc55-147f-4b40-93ed-a4aa83602fee")' SmallIntValue = 10' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 11' MoneyValue = 11.45m' DateTimeValue = new DateTime(2009'  9'  27'  9' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("d3021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 11' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  					new LinqDataTypes { ID = 12' MoneyValue = 11.45m' DateTimeValue = new DateTime(2012' 11'   7' 19' 19' 29'  90)' BoolValue = true'  GuidValue = new Guid("03021d18-97f0-4dc0-98d0-f0c7df4a1230")' SmallIntValue = 12' UInt16 = UInt16.MaxValue' UInt32 = UInt32.MaxValue' UInt64 = 18446744073709500000 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Parent { ParentID = 1' Value1 = 1    }'  					new Parent { ParentID = 2' Value1 = null }'  					new Parent { ParentID = 3' Value1 = 3    }'  					new Parent { ParentID = 4' Value1 = null }'  					new Parent { ParentID = 5' Value1 = 5    }'  					new Parent { ParentID = 6' Value1 = 6    }'  					new Parent { ParentID = 7' Value1 = 1    }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new Child { ParentID = 1' ChildID = 11 }'  					new Child { ParentID = 2' ChildID = 21 }'  					new Child { ParentID = 2' ChildID = 22 }'  					new Child { ParentID = 3' ChildID = 31 }'  					new Child { ParentID = 3' ChildID = 32 }'  					new Child { ParentID = 3' ChildID = 33 }'  					new Child { ParentID = 4' ChildID = 41 }'  					new Child { ParentID = 4' ChildID = 42 }'  					new Child { ParentID = 4' ChildID = 43 }'  					new Child { ParentID = 4' ChildID = 44 }'  					new Child { ParentID = 6' ChildID = 61 }'  					new Child { ParentID = 6' ChildID = 62 }'  					new Child { ParentID = 6' ChildID = 63 }'  					new Child { ParentID = 6' ChildID = 64 }'  					new Child { ParentID = 6' ChildID = 65 }'  					new Child { ParentID = 6' ChildID = 66 }'  					new Child { ParentID = 7' ChildID = 77 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Magic Number,Create,CreateData,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\CreateData.cs,RunScript,The following statement contains a magic number: db.InsertBatch(new[]  				{  					new GrandChild { ParentID = 1' ChildID = 11' GrandChildID = 111 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 211 }'  					new GrandChild { ParentID = 2' ChildID = 21' GrandChildID = 212 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 221 }'  					new GrandChild { ParentID = 2' ChildID = 22' GrandChildID = 222 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 311 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 312 }'  					new GrandChild { ParentID = 3' ChildID = 31' GrandChildID = 313 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 321 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 322 }'  					new GrandChild { ParentID = 3' ChildID = 32' GrandChildID = 323 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 331 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 332 }'  					new GrandChild { ParentID = 3' ChildID = 33' GrandChildID = 333 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 411 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 412 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 413 }'  					new GrandChild { ParentID = 4' ChildID = 41' GrandChildID = 414 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 421 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 422 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 423 }'  					new GrandChild { ParentID = 4' ChildID = 42' GrandChildID = 424 }'  				});
Missing Default,Data.Linq,Extensions,D:\research\architectureSmells\repos\igor-tkachev_bltoolkit\UnitTests\Linq\ParserTest.cs,Unwrap,The following switch statement is missing a default case: switch (ex.NodeType)  			{  				case ExpressionType.Quote          :  				case ExpressionType.Convert        :  				case ExpressionType.ConvertChecked : return ((UnaryExpression)ex).Operand.Unwrap();  			}
