Implementation smell,Namespace,Class,File,Method,Description
Complex Method,HowTo.Data,AdoDemo,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\AdoDemo.cs,GetList,Cyclomatic complexity of the method is 30
Complex Method,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,SetValue,Cyclomatic complexity of the method is 40
Complex Method,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,WriteXmlJson,Cyclomatic complexity of the method is 10
Long Statement,HowTo.Aspects,CounterAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CounterAspect.cs,Test,The length of the statement  ""' counter.MethodInfo.DeclaringType.Name' counter.MethodInfo.Name' counter.TotalCount' // total actual calls (no cached calls) " is 126.
Long Statement,HowTo.DataAccess,Delete,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\Delete.cs,Insert,The length of the statement  "						SELECT Cast(SCOPE_IDENTITY() as int)"' db.Parameter ("@FirstName"' "Crazy")' db.Parameter ("@LastName"' "Frog")' db.Parameter ("@Gender"' "U")).ExecuteScalar<int> (); " is 166.
Long Statement,HowTo.DataAccess,Update,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\Update.cs,Insert,The length of the statement  "						SELECT Cast(SCOPE_IDENTITY() as int)"' db.Parameter ("@FirstName"' "Crazy")' db.Parameter ("@LastName"' "Frog")' db.Parameter ("@Gender"' Map.EnumToValue (Gender.Unknown))).ExecuteScalar<int> (); " is 195.
Long Statement,HowTo.DataAccess,DeleteSql,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\DeleteSql.cs,Insert,The length of the statement  "						SELECT Cast(SCOPE_IDENTITY() as int)"' db.Parameter ("@FirstName"' "Crazy")' db.Parameter ("@LastName"' "Frog")' db.Parameter ("@Gender"' "U")).ExecuteScalar<int> (); " is 166.
Long Statement,HowTo.DataAccess,UpdateSql,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\UpdateSql.cs,Insert,The length of the statement  "						SELECT Cast(SCOPE_IDENTITY() as int)"' db.Parameter ("@FirstName"' "Crazy")' db.Parameter ("@LastName"' "Frog")' db.Parameter ("@Gender"' Map.EnumToValue (Gender.Unknown))).ExecuteScalar<int> (); " is 195.
Long Statement,HowTo.Data,ExecuteScalarDictionary,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalarDictionary.cs,GetNameDictionary,The length of the statement  "		return db.SetCommand ("SELECT * FROM Person")./*[a]*/ExecuteScalarDictionary/*[/a]*/<int' string> (/*[a]*/"PersonID"/*[/a]*/' /*[a]*/"FirstName"/*[/a]*/); " is 154.
Long Statement,HowTo.Data,ExecuteScalar,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,GetFirstName,The length of the statement  "		return db.SetCommand ("SELECT FirstName FROM Person WHERE PersonID = @id"' db.Parameter ("@id"' id))./*[a]*/ExecuteScalar/*[/a]*/<string> (); " is 141.
Long Statement,HowTo.Data,ExecuteScalar,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,ReturnValueTest,The length of the statement  "				 */int n = db.SetSpCommand ("Scalar_ReturnParameter")./*[a]*/ExecuteScalar/*[/a]*/<int> (/*[a]*/ScalarSourceType.ReturnValue/*[/a]*/); " is 133.
Long Statement,HowTo.Data,ExecuteScalar,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,OutputParameterAsReturnValueTest,The length of the statement  "				 */string returnValue = db.SetSpCommand ("Scalar_OutputParameter")./*[a]*/ExecuteScalar/*[/a]*/<string> (/*[a]*/ScalarSourceType.OutputParameter/*[/a]*/' /*[a]*/"outputString"/*[/a]*/); " is 184.
Long Statement,HowTo.Data,ExecuteDictionary,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteDictionary.cs,GetPersonDictionary2,The length of the statement  "		return db.SetCommand ("SELECT * FROM Person")./*[a]*/ExecuteDictionary/*[/a]*/<int' Person> (/*[a]*/"@PersonID"/*[/a]*/); " is 121.
Long Statement,HowTo.Data,ExecuteDictionary,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteDictionary.cs,GetPersonDictionary3,The length of the statement  "		return db.SetCommand ("SELECT * FROM Person")./*[a]*/ExecuteDictionary/*[/a]*/<Person> (new/*[a]*/MapIndex ("FirstName"' "LastName")/*[/a]*/); " is 142.
Long Statement,HowTo.Data,ExecuteNonQuery,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteNonQuery.cs,Test,The length of the statement  "		person = db.SetCommand ("SELECT * FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteObject<Person> (); " is 137.
Long Statement,HowTo.Data,ExecuteNonQuery,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteNonQuery.cs,Test,The length of the statement  "		db.SetCommand ("DELETE FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith"))./*[a]*/ExecuteNonQuery /*[/a]*/(); " is 135.
Long Statement,HowTo.Data,ExecuteForEach,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteForEach.cs,Test,The length of the statement  "		list = db.SetCommand ("SELECT * FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteList<Person> (); " is 133.
Long Statement,HowTo.Data,ExecuteForEach,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteForEach.cs,Test,The length of the statement  "		db.SetCommand ("DELETE FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteNonQuery (); " is 120.
Long Statement,HowTo.Data,Prepare,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Prepare.cs,Test,The length of the statement  "		list = db.SetCommand ("SELECT * FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteList<Person> (); " is 133.
Long Statement,HowTo.Data,Prepare,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Prepare.cs,Test,The length of the statement  "		db.SetCommand ("DELETE FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteNonQuery (); " is 120.
Long Statement,HowTo.Data,DbManagerDemo,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\DbManagerDemo.cs,GetList,The length of the statement  "		return db./*[a]*/SetCommand /*[/a]*/("SELECT * FROM Person WHERE Gender = @gender"' db./*[a]*/Parameter /*[/a]*/("@gender"' /*[a]*/Map.EnumToValue /*[/a]*/(gender)))./*[a]*/ExecuteList/*[/a]*/<Person> (); " is 204.
Long Statement,HowTo.Data,ExecuteObject,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteObject.cs,GetPersonSqlText,The length of the statement  "		return db.SetCommand ("SELECT * FROM Person WHERE PersonID = @id"' db.Parameter ("@id"' id))./*[a]*/ExecuteObject<Person> ()/*[/a]*/; " is 133.
Long Statement,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The length of the statement  "		int n = db.SetCommand ("SELECT @par1 + @par2"' db./*[a]*/Parameter /*[/a]*/("@par1"' 2)' db./*[a]*/Parameter /*[/a]*/("@par2"' 2)).ExecuteScalar<int> (); " is 153.
Long Statement,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,OutputParameterTest,The length of the statement  "				 */db.SetSpCommand ("Scalar_OutputParameter"' db./*[a]*/OutputParameter /*[/a]*/("@outputInt"' 1)' db./*[a]*/OutputParameter /*[/a]*/("@outputString"' "1")).ExecuteNonQuery (); " is 175.
Long Statement,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,OutputParameterAsReturnValueTest,The length of the statement  "		string returnValue = db.SetSpCommand ("Scalar_OutputParameter").ExecuteScalar<string> (/*[a]*/ScalarSourceType.OutputParameter/*[/a]*/' /*[a]*/"outputString"/*[/a]*/); " is 167.
Long Statement,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,CreateParametersTest,The length of the statement  "		person = db.SetCommand ("SELECT * FROM Person WHERE PersonID = @id"' db.Parameter ("@id"' id)).ExecuteObject<Person> (); " is 120.
Long Statement,HowTo.Data,SetCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetCommand.cs,GetPersonByID,The length of the statement  "		return db./*[a]*/SetCommand /*[/a]*/("SELECT * FROM Person WHERE PersonID = @id"' db./*[a]*/Parameter /*[/a]*/("@id"' id)).ExecuteObject<Person> (); " is 148.
Long Statement,HowTo.Data,SetCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetCommand.cs,GetPersonByID,The length of the statement  "	return db./*[a]*/SetCommand /*[/a]*/("SELECT * FROM Person WHERE PersonID = @id"' db./*[a]*/Parameter /*[/a]*/("@id"' id)).ExecuteObject<Person> (); " is 148.
Long Statement,HowTo.Data,SetCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetCommand.cs,CreatePerson,The length of the statement  "					SELECT Cast(SCOPE_IDENTITY() as int) PersonID"' db./*[a]*/Parameter /*[/a]*/("@LastName"' "Frog")' db./*[a]*/Parameter /*[/a]*/("@FirstName"' "Crazy")' db./*[a]*/Parameter /*[/a]*/("@Gender"' Map.EnumToValue (Gender.Male))).ExecuteScalar<int> (); " is 246.
Long Statement,HowTo.Data,SetCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetCommand.cs,DeletePerson,The length of the statement  "	db./*[a]*/SetCommand /*[/a]*/("DELETE FROM Person WHERE PersonID = @id"' db./*[a]*/Parameter /*[/a]*/("@id"' person.ID)).ExecuteNonQuery (); " is 140.
Long Statement,HowTo.Data,SetSpCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetSpCommand.cs,GetPersonByID1,The length of the statement  "		return db./*[a]*/SetSpCommand /*[/a]*/("Person_SelectByKey"' db./*[a]*/Parameter /*[/a]*/("@id"' id)).ExecuteObject<Person> (); " is 127.
Long Statement,HowTo.Data,SetSpCommand,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\SetSpCommand.cs,CreatePerson,The length of the statement  "	int id = db./*[a]*/SetSpCommand /*[/a]*/("Person_Insert"' db./*[a]*/Parameter /*[/a]*/("@LastName"' "Frog")' db./*[a]*/Parameter /*[/a]*/("@MiddleName"' null)' db./*[a]*/Parameter /*[/a]*/("@FirstName"' "Crazy")' db./*[a]*/Parameter /*[/a]*/("@Gender"' Map.EnumToValue (Gender.Male))).ExecuteScalar<int> (); " is 307.
Long Statement,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,encode,The length of the statement  "	return value.Replace ("\r\n"' "\\r").Replace ("\n\r"' "\\r").Replace ("\n"' "\\r").Replace ("\r"' "\\r").Replace ("\""' "\\\""); " is 128.
Empty Catch Block,HowTo.Aspects,LoggingAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\LoggingAspect.cs,Test,The method has an empty catch block.
Magic Number,HowTo.Aspects,AsyncTestObject,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,Test,The following statement contains a magic number: Thread.Sleep (200);  
Magic Number,HowTo.Aspects,AsyncAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,CallbackTest,The following statement contains a magic number: o.BeginTest (2' null' /*[a]*/CallBack/*[/a]*/' /*[a]*/o/*[/a]*/);  
Magic Number,HowTo.Aspects,AsyncAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,AnyNameTest,The following statement contains a magic number: Assert.AreEqual (2' o./*[a]*/AnyName /*[/a]*/(ar));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: TestClass.Value = 777;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod (2' 2) == 777) {  	// This change will not affect the Test method return value for 500 ms.  	//  	TestClass.Value++;  }  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod (2' 2) == 777) {  	// This change will not affect the Test method return value for 500 ms.  	//  	TestClass.Value++;  }  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod (2' 2) == 777) {  	// This change will not affect the Test method return value for 500 ms.  	//  	TestClass.Value++;  }  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: Assert.GreaterOrEqual (totalMilliseconds' 500);  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/2/*[/a]*/;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/3/*[/a]*/;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/3/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/3/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/4/*[/a]*/;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/4/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/4/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/5/*[/a]*/;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/5/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/5/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/6/*[/a]*/;  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/6/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,CacheAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual (/*[a]*/6/*[/a]*/' tc.CachedMethod (2' 1));  
Magic Number,HowTo.Aspects,ClearCacheAspect,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: TestClass.Value = 2;  
Magic Number,HowTo.Aspects,ClearCacheAspect,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: TestClass.Value = 3;  
Magic Number,HowTo.Aspects,ClearCacheAspect,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: Assert.AreNotEqual (value1' tc.CachedMethod (1' 2));  
Magic Number,HowTo.Aspects,CounterAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CounterAspect.cs,Test,The following statement contains a magic number: for (int i = 0; i < 10; i++)  	t.TestMethod ();  
Magic Number,HowTo.Aspects,CounterAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\CounterAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (10' counter.TotalCount);  
Magic Number,HowTo.Aspects,LoggingAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\LoggingAspect.cs,Test,The following statement contains a magic number: LoggingAspect.MinCallTime = /*[a]*/1000/*[/a]*/;  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/10/*[/a]*/' i1.TestMethod (/*[a]*/10/*[/a]*/));  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/10/*[/a]*/' i1.TestMethod (/*[a]*/10/*[/a]*/));  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/15/*[/a]*/' i2.TestMethod1 (/*[a]*/20/*[/a]*/));  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/15/*[/a]*/' i2.TestMethod1 (/*[a]*/20/*[/a]*/));  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/30/*[/a]*/' i2.TestMethod2 (/*[a]*/30/*[/a]*/));  
Magic Number,HowTo.Aspects,MixinAspectTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/30/*[/a]*/' i2.TestMethod2 (/*[a]*/30/*[/a]*/));  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 2;  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 3;  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/3/*[/a]*/' t.NoCacheMethod (2' 1));  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/3/*[/a]*/' t.NoCacheMethod (2' 1));  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 4;  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/4/*[/a]*/' t.NoCacheMethod (2' 1));  
Magic Number,HowTo.Aspects,NoCacheAttributeTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual (/*[a]*/4/*[/a]*/' t.NoCacheMethod (2' 1));  
Magic Number,HowTo.DataAccess,AbstractAccessor,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\AbstractAccessor.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	PersonAccessor pa = /*[a]*/DataAccessor.CreateInstance<PersonAccessor> (db)/*[/a]*/;  	pa.BeginTransaction ();  	// Insert and get id.  	//  	Person person = new Person ();  	person.FirstName = "Crazy";  	person.LastName = "Frog";  	person.Gender = Gender.Unknown;  	int id = pa./*[a]*/Insert (person)/*[/a]*/;  	// SelectByName.  	//  	person = pa./*[a]*/SelectByName ("Crazy"' "Frog")/*[/a]*/;  	Assert.IsNotNull (person);  	// Select top.  	//  	Dictionary<int' Person> dic = pa./*[a]*/SelectTop (10)/*[/a]*/;  	Assert.IsTrue (dic.Count <= 10);  	// Delete.  	//  	pa.Query.Delete (person);  	pa.CommitTransaction ();  }  
Magic Number,HowTo.DataAccess,AbstractAccessor,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\AbstractAccessor.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	PersonAccessor pa = /*[a]*/DataAccessor.CreateInstance<PersonAccessor> (db)/*[/a]*/;  	pa.BeginTransaction ();  	// Insert and get id.  	//  	Person person = new Person ();  	person.FirstName = "Crazy";  	person.LastName = "Frog";  	person.Gender = Gender.Unknown;  	int id = pa./*[a]*/Insert (person)/*[/a]*/;  	// SelectByName.  	//  	person = pa./*[a]*/SelectByName ("Crazy"' "Frog")/*[/a]*/;  	Assert.IsNotNull (person);  	// Select top.  	//  	Dictionary<int' Person> dic = pa./*[a]*/SelectTop (10)/*[/a]*/;  	Assert.IsTrue (dic.Count <= 10);  	// Delete.  	//  	pa.Query.Delete (person);  	pa.CommitTransaction ();  }  
Magic Number,HowTo.DataAccess,AbstractAccessor,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\AbstractAccessor.cs,Test,The following statement contains a magic number: Assert.IsTrue (dic.Count <= 10);  
Magic Number,HowTo.DataAccess,CustomSqlQuery2,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery2.cs,Test4,The following statement contains a magic number: Assert.AreEqual (42' list [0].ID);  
Magic Number,HowTo.DataAccess,CustomSqlQuery1,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery1.cs,Test4,The following statement contains a magic number: Assert.AreEqual (42' list [0].ID);  
Magic Number,HowTo.DataAccess,ParamName,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\ParamName.cs,Test,The following statement contains a magic number: Assert.AreEqual (2' p.ID);  
Magic Number,HowTo.DataAccess,Format,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\Format.cs,Test,The following statement contains a magic number: Assert.That (list.Count' Is.LessThanOrEqualTo (2));  
Magic Number,HowTo.DataAccess,DiscoverParameters,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\DiscoverParameters.cs,Test,The following statement contains a magic number: Assert.AreEqual (2' p.ID);  
Magic Number,HowTo.DataAccess,DirectionTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\Direction.cs,TestReturnParameter,The following statement contains a magic number: Assert.AreEqual (12345' p.ID);  
Magic Number,HowTo.DataAccess,DirectionTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\Direction.cs,TestReturnParameter2,The following statement contains a magic number: Assert.AreEqual (12345' p.ID);  
Magic Number,HowTo.DataAccess,ExecuteObject,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\DataAccess\ExecuteObject.cs,Test,The following statement contains a magic number: Assert.IsNotNull (pa.GetPersonByID (2));  
Magic Number,HowTo.Data,ComplexMapping,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets [2] = new MapResultSet (typeof(Grandchild));  
Magic Number,HowTo.Data,ComplexMapping,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets [1].AddRelation (sets [2]' "ChildID"' "ChildID"' "Grandchildren");  
Magic Number,HowTo.Data,ComplexMapping,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets [2].AddRelation (sets [1]' "ChildID"' "ChildID"' "Child");  
Magic Number,HowTo.Data,ComplexMapping,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test2,The following statement contains a magic number: sets [2] = new MapResultSet (typeof(Grandchild));  
Magic Number,HowTo.Data,ComplexMapping,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test3,The following statement contains a magic number: sets [2] = new MapResultSet (typeof(GrandchildEx));  
Magic Number,HowTo.Data,ExecuteScalar,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,ReturnValueTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	/* 				 * CREATE Function Scalar_ReturnParameter() 				 * RETURNS int 				 * AS 				 * BEGIN 				 *     RETURN 12345 				 * END 				 */int n = db.SetSpCommand ("Scalar_ReturnParameter")./*[a]*/ExecuteScalar/*[/a]*/<int> (/*[a]*/ScalarSourceType.ReturnValue/*[/a]*/);  	Assert.AreEqual (12345' n);  }  
Magic Number,HowTo.Data,ExecuteScalar,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,ReturnValueTest,The following statement contains a magic number: Assert.AreEqual (12345' n);  
Magic Number,HowTo.Data,ExecuteForEach,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteForEach.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	db.BeginTransaction ();  	// Execute.  	//  	db.SetSpCommand ("Person_Insert")./*[a]*/ExecuteForEach/*[/a]*/<Person> (list);  	// Check the result.  	//  	list = db.SetCommand ("SELECT * FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteList<Person> ();  	Assert.GreaterOrEqual (2' list.Count);  	// Cleanup.  	//  	db.SetCommand ("DELETE FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteNonQuery ();  	db.CommitTransaction ();  }  
Magic Number,HowTo.Data,ExecuteForEach,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\ExecuteForEach.cs,Test,The following statement contains a magic number: Assert.GreaterOrEqual (2' list.Count);  
Magic Number,HowTo.Data,Prepare,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Prepare.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	db.BeginTransaction ();  	// Prepare command.  	//  	db.SetSpCommand ("Person_Insert"' db.CreateParameters (list [0]))./*[a]*/Prepare /*[/a]*/();  	// Insert.  	//  	foreach (Person person in list) {  		db./*[a]*/AssignParameterValues /*[/a]*/(person);  		db.ExecuteNonQuery ();  	}  	// Check the result.  	//  	list = db.SetCommand ("SELECT * FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteList<Person> ();  	Assert.GreaterOrEqual (2' list.Count);  	// Cleanup.  	//  	db.SetCommand ("DELETE FROM Person WHERE LastName = @lastName"' db.Parameter ("@lastName"' "Smith")).ExecuteNonQuery ();  	db.CommitTransaction ();  }  
Magic Number,HowTo.Data,Prepare,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Prepare.cs,Test,The following statement contains a magic number: Assert.GreaterOrEqual (2' list.Count);  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	int n = db.SetCommand ("SELECT @par1 + @par2"' db./*[a]*/Parameter /*[/a]*/("@par1"' 2)' db./*[a]*/Parameter /*[/a]*/("@par2"' 2)).ExecuteScalar<int> ();  	Assert.AreEqual (4' n);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	int n = db.SetCommand ("SELECT @par1 + @par2"' db./*[a]*/Parameter /*[/a]*/("@par1"' 2)' db./*[a]*/Parameter /*[/a]*/("@par2"' 2)).ExecuteScalar<int> ();  	Assert.AreEqual (4' n);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	int n = db.SetCommand ("SELECT @par1 + @par2"' db./*[a]*/Parameter /*[/a]*/("@par1"' 2)' db./*[a]*/Parameter /*[/a]*/("@par2"' 2)).ExecuteScalar<int> ();  	Assert.AreEqual (4' n);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: Assert.AreEqual (4' n);  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	db.SetCommand ("SELECT @par * 2"' db./*[a]*/Parameter /*[/a]*/("@par"' DbType.Int32));  	db./*[a]*/Parameter ("@par").Value /*[/a]*/= 2;  	Assert.AreEqual (4' db.ExecuteScalar<int> ());  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	db.SetCommand ("SELECT @par * 2"' db./*[a]*/Parameter /*[/a]*/("@par"' DbType.Int32));  	db./*[a]*/Parameter ("@par").Value /*[/a]*/= 2;  	Assert.AreEqual (4' db.ExecuteScalar<int> ());  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: db./*[a]*/Parameter ("@par").Value /*[/a]*/= 2;  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: Assert.AreEqual (4' db.ExecuteScalar<int> ());  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	/* 				 * CREATE Function Scalar_ReturnParameter() 				 * RETURNS int 				 * AS 				 * BEGIN 				 *     RETURN 12345 				 * END 				 */db.SetSpCommand ("Scalar_ReturnParameter").ExecuteNonQuery ();  	int n = (int)db./*[a]*/Parameter ("@RETURN_VALUE").Value/*[/a]*/;  	Assert.AreEqual (12345' n);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest,The following statement contains a magic number: Assert.AreEqual (12345' n);  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest2,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	int n = db.SetSpCommand ("Scalar_ReturnParameter").ExecuteScalar<int> (ScalarSourceType.ReturnValue);  	Assert.AreEqual (12345' n);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest2,The following statement contains a magic number: Assert.AreEqual (12345' n);  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,OutputParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	/* 				 * CREATE Procedure Scalar_OutputParameter 				 *     @outputInt    int         = 0  output' 				 *     @outputString varchar(50) = '' output 				 * AS 				 * BEGIN 				 *     SET @outputInt = 12345 				 *     SET @outputString = '54321' 				 * END 				 */db.SetSpCommand ("Scalar_OutputParameter"' db./*[a]*/OutputParameter /*[/a]*/("@outputInt"' 1)' db./*[a]*/OutputParameter /*[/a]*/("@outputString"' "1")).ExecuteNonQuery ();  	Assert.AreEqual (12345' (int)db./*[a]*/Parameter ("@outputInt").Value/*[/a]*/);  	Assert.AreEqual ("54321"' (string)db./*[a]*/Parameter ("@outputString").Value/*[/a]*/);  }  
Magic Number,HowTo.Data,Parameter,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,OutputParameterTest,The following statement contains a magic number: Assert.AreEqual (12345' (int)db./*[a]*/Parameter ("@outputInt").Value/*[/a]*/);  
Magic Number,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,SetValue,The following statement contains a magic number: if (value == null)  	_sb.Append ("null");  else {  	switch (Type.GetTypeCode (value.GetType ())) {  	case TypeCode.Empty:  	case TypeCode.DBNull:  		_sb.Append ("null");  		break;  	case TypeCode.Boolean:  		_sb.Append ((bool)value ? "true" : "false");  		break;  	case TypeCode.Char:  		_sb.Append ('\'').Append ((char)value).Append ('\'');  		break;  	case TypeCode.SByte:  	case TypeCode.Int16:  	case TypeCode.Int32:  	case TypeCode.Int64:  	case TypeCode.Byte:  	case TypeCode.UInt16:  	case TypeCode.UInt32:  	case TypeCode.UInt64:  	case TypeCode.Single:  	case TypeCode.Double:  	case TypeCode.Decimal:  		_sb.Append (((IFormattable)value).ToString (null' CultureInfo.InvariantCulture));  		break;  	case TypeCode.DateTime:  		_sb.Append ("new Date(").Append ((((DateTime)value).Ticks - InitialJavaScriptDateTicks) / 10000).Append (")");  		break;  	case TypeCode.String:  		_sb.Append ('"').Append (encode ((string)value)).Append ('"');  		break;  	default:  		if (value is XmlNode) {  			if (IsEmptyNode ((XmlNode)value))  				_sb.Append ("null");  			else  				WriteXmlJson ((XmlNode)value);  		} else {  			JsonMapper inner = new JsonMapper (_sb' _indent + 1);  			if (value.GetType ().IsArray)  				_mappingSchema.MapSourceListToDestinationList (_mappingSchema.GetDataSourceList (value)' inner);  			else  				_mappingSchema.MapSourceToDestination (_mappingSchema.GetDataSource (value)' value' inner' inner);  		}  		break;  	}  }  
Magic Number,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,SetValue,The following statement contains a magic number: switch (Type.GetTypeCode (value.GetType ())) {  case TypeCode.Empty:  case TypeCode.DBNull:  	_sb.Append ("null");  	break;  case TypeCode.Boolean:  	_sb.Append ((bool)value ? "true" : "false");  	break;  case TypeCode.Char:  	_sb.Append ('\'').Append ((char)value).Append ('\'');  	break;  case TypeCode.SByte:  case TypeCode.Int16:  case TypeCode.Int32:  case TypeCode.Int64:  case TypeCode.Byte:  case TypeCode.UInt16:  case TypeCode.UInt32:  case TypeCode.UInt64:  case TypeCode.Single:  case TypeCode.Double:  case TypeCode.Decimal:  	_sb.Append (((IFormattable)value).ToString (null' CultureInfo.InvariantCulture));  	break;  case TypeCode.DateTime:  	_sb.Append ("new Date(").Append ((((DateTime)value).Ticks - InitialJavaScriptDateTicks) / 10000).Append (")");  	break;  case TypeCode.String:  	_sb.Append ('"').Append (encode ((string)value)).Append ('"');  	break;  default:  	if (value is XmlNode) {  		if (IsEmptyNode ((XmlNode)value))  			_sb.Append ("null");  		else  			WriteXmlJson ((XmlNode)value);  	} else {  		JsonMapper inner = new JsonMapper (_sb' _indent + 1);  		if (value.GetType ().IsArray)  			_mappingSchema.MapSourceListToDestinationList (_mappingSchema.GetDataSourceList (value)' inner);  		else  			_mappingSchema.MapSourceToDestination (_mappingSchema.GetDataSource (value)' value' inner' inner);  	}  	break;  }  
Magic Number,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,SetValue,The following statement contains a magic number: _sb.Append ("new Date(").Append ((((DateTime)value).Ticks - InitialJavaScriptDateTicks) / 10000).Append (")");  
Magic Number,HowTo.Mapping,ObjectToObject,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\ObjectToObject.cs,Test1,The following statement contains a magic number: Assert.AreEqual (10' dest.IntValue);  
Magic Number,HowTo.Mapping,EnumToValue,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\EnumToValue.cs,Test2,The following statement contains a magic number: Assert.AreEqual (2' value);  
Magic Number,HowTo.Mapping,EnumToValue,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\EnumToValue.cs,Test3,The following statement contains a magic number: Assert.AreEqual (2' value);  
Magic Number,HowTo.Reflection,ObjectFactoryTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	List<Person> list = db.SetCommand (@"  						SELECT  							ps.*'  							d.Taxonomy'  							p.Diagnosis'  							CASE  								WHEN d.PersonID IS NOT NULL THEN 'D'  								WHEN p.PersonID IS NOT NULL THEN 'P'  							END as PersonType  						FROM  							Person ps  								LEFT JOIN Doctor  d ON d.PersonID = ps.PersonID  								LEFT JOIN Patient p ON p.PersonID = ps.PersonID  						ORDER BY  							ps.PersonID").ExecuteList<Person> ();  	Assert.AreEqual (list [0].GetType ()' /*[a]*/typeof(Doctor)/*[/a]*/);  	Assert.AreEqual (list [1].GetType ()' /*[a]*/typeof(Patient)/*[/a]*/);  	if (list.Count > 2)  		Assert.AreEqual (list [2].GetType ()' typeof(Person));  }  
Magic Number,HowTo.Reflection,ObjectFactoryTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager ()) {  	List<Person> list = db.SetCommand (@"  						SELECT  							ps.*'  							d.Taxonomy'  							p.Diagnosis'  							CASE  								WHEN d.PersonID IS NOT NULL THEN 'D'  								WHEN p.PersonID IS NOT NULL THEN 'P'  							END as PersonType  						FROM  							Person ps  								LEFT JOIN Doctor  d ON d.PersonID = ps.PersonID  								LEFT JOIN Patient p ON p.PersonID = ps.PersonID  						ORDER BY  							ps.PersonID").ExecuteList<Person> ();  	Assert.AreEqual (list [0].GetType ()' /*[a]*/typeof(Doctor)/*[/a]*/);  	Assert.AreEqual (list [1].GetType ()' /*[a]*/typeof(Patient)/*[/a]*/);  	if (list.Count > 2)  		Assert.AreEqual (list [2].GetType ()' typeof(Person));  }  
Magic Number,HowTo.Reflection,ObjectFactoryTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: if (list.Count > 2)  	Assert.AreEqual (list [2].GetType ()' typeof(Person));  
Magic Number,HowTo.Reflection,ObjectFactoryTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: if (list.Count > 2)  	Assert.AreEqual (list [2].GetType ()' typeof(Person));  
Magic Number,HowTo.Reflection,ObjectFactoryTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: Assert.AreEqual (list [2].GetType ()' typeof(Person));  
Magic Number,HowTo.TypeBuilder,InitialValueTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That (o.Int' Is.EqualTo (54));  
Magic Number,HowTo.TypeBuilder,InitialValueTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That (o.Date' Is.EqualTo (new DateTime (2' 2' 2)));  
Magic Number,HowTo.TypeBuilder,InitialValueTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That (o.Date' Is.EqualTo (new DateTime (2' 2' 2)));  
Magic Number,HowTo.TypeBuilder,InitialValueTest,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That (o.Date' Is.EqualTo (new DateTime (2' 2' 2)));  
Missing Default,BLToolkit.Data.DataProvider,SybaseAdoDataProvider,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\..\Source\Data\DataProvider\SybaseAdoDataProvider.cs,Convert,The following switch statement is missing a default case: switch (convertType) {  case ConvertType.NameToQueryParameter:  	return "?";  case ConvertType.NameToCommandParameter:  case ConvertType.NameToSprocParameter:  	return value;  }  
Missing Default,HowTo.Data,AdoDemo,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\AdoDemo.cs,GetList,The following switch statement is missing a default case: switch (gender) {  case Gender.Female:  	paramValue = "F";  	break;  case Gender.Male:  	paramValue = "M";  	break;  case Gender.Unknown:  	paramValue = "U";  	break;  case Gender.Other:  	paramValue = "O";  	break;  }  
Missing Default,HowTo.Data,AdoDemo,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Data\AdoDemo.cs,GetList,The following switch statement is missing a default case: switch (rd ["Gender"].ToString ()) {  case "F":  	person.Gender = Gender.Female;  	break;  case "M":  	person.Gender = Gender.Male;  	break;  case "U":  	person.Gender = Gender.Unknown;  	break;  case "O":  	person.Gender = Gender.Other;  	break;  }  
Missing Default,HowTo.Mapping,JsonMapper,F:\newReposMay17\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,IsWhitespace,The following switch statement is missing a default case: switch (node.NodeType) {  case XmlNodeType.Comment:  case XmlNodeType.Whitespace:  case XmlNodeType.SignificantWhitespace:  	return true;  }  
