Implementation smell,Namespace,Class,File,Method,Description
Empty Catch Block,HowTo.Aspects,LoggingAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\LoggingAspect.cs,Test,The method has an empty catch block.
Magic Number,HowTo.Aspects,AsyncTestObject,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,Test,The following statement contains a magic number: Thread.Sleep(200);
Magic Number,HowTo.Aspects,AsyncAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,CallbackTest,The following statement contains a magic number: o.BeginTest(2' null' /*[a]*/CallBack/*[/a]*/' /*[a]*/o/*[/a]*/);
Magic Number,HowTo.Aspects,AsyncAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,AnyNameTest,The following statement contains a magic number: IAsyncResult ar = o./*[a]*/AnyName/*[/a]*/(2' null' null' null);
Magic Number,HowTo.Aspects,AsyncAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\AsyncAspect.cs,AnyNameTest,The following statement contains a magic number: Assert.AreEqual(2' o./*[a]*/AnyName/*[/a]*/(ar));
Magic Number,HowTo.Aspects,TestClass,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: Thread.Sleep(/*[a]*/100/*[/a]*/);
Magic Number,HowTo.Aspects,TestClass,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Thread.Sleep(/*[a]*/100/*[/a]*/);
Magic Number,HowTo.Aspects,TestClass,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,TestMethod1,The following statement contains a magic number: return /*[a]*/15/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: TestClass.Value = 777;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod(2' 2) == 777)  			{  				// This change will not affect the Test method return value for 500 ms.  				//  				TestClass.Value++;  			}
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod(2' 2) == 777)  			{  				// This change will not affect the Test method return value for 500 ms.  				//  				TestClass.Value++;  			}
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: while (tc.CachedMethod(2' 2) == 777)  			{  				// This change will not affect the Test method return value for 500 ms.  				//  				TestClass.Value++;  			}
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test1,The following statement contains a magic number: Assert.GreaterOrEqual(totalMilliseconds' 500);
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/2/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/3/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/3/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/3/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/4/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/4/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/4/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/5/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/5/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/5/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: TestClass.Value = /*[a]*/6/*[/a]*/;
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/6/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,CacheAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CacheAspect.cs,Test2,The following statement contains a magic number: Assert.AreEqual(/*[a]*/6/*[/a]*/' tc.CachedMethod(2' 1));
Magic Number,HowTo.Aspects,ClearCacheAspect,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: int value1 = tc.CachedMethod(1' 2);
Magic Number,HowTo.Aspects,ClearCacheAspect,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: TestClass.Value = 2;
Magic Number,HowTo.Aspects,ClearCacheAspect,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: int value2 = tc.CachedMethod(1' 2);
Magic Number,HowTo.Aspects,ClearCacheAspect,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: TestClass.Value = 3;
Magic Number,HowTo.Aspects,ClearCacheAspect,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\ClearCacheAspect.cs,Test,The following statement contains a magic number: Assert.AreNotEqual(value1' tc.CachedMethod(1' 2));
Magic Number,HowTo.Aspects,CounterAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CounterAspect.cs,Test,The following statement contains a magic number: for (int i = 0; i < 10; i++)  				t.TestMethod();
Magic Number,HowTo.Aspects,CounterAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\CounterAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(10' counter.TotalCount);
Magic Number,HowTo.Aspects,LoggingAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\LoggingAspect.cs,Test,The following statement contains a magic number: LoggingAspect.MinCallTime = /*[a]*/1000/*[/a]*/;
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/10/*[/a]*/' i1.TestMethod (/*[a]*/10/*[/a]*/));
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/10/*[/a]*/' i1.TestMethod (/*[a]*/10/*[/a]*/));
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/15/*[/a]*/' i2.TestMethod1(/*[a]*/20/*[/a]*/));
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/15/*[/a]*/' i2.TestMethod1(/*[a]*/20/*[/a]*/));
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/30/*[/a]*/' i2.TestMethod2(/*[a]*/30/*[/a]*/));
Magic Number,HowTo.Aspects,MixinAspectTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\MixinAspect.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/30/*[/a]*/' i2.TestMethod2(/*[a]*/30/*[/a]*/));
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 2;
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 3;
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/3/*[/a]*/' t.NoCacheMethod(2' 1));
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/3/*[/a]*/' t.NoCacheMethod(2' 1));
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: NoCacheTestClass.Value = 4;
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/4/*[/a]*/' t.NoCacheMethod(2' 1));
Magic Number,HowTo.Aspects,NoCacheAttributeTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Aspects\NoCache.cs,Test,The following statement contains a magic number: Assert.AreEqual(/*[a]*/4/*[/a]*/' t.NoCacheMethod(2' 1));
Magic Number,HowTo.DataAccess,AbstractAccessor,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\AbstractAccessor.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				PersonAccessor pa = /*[a]*/DataAccessor.CreateInstance<PersonAccessor>(db)/*[/a]*/;    				pa.BeginTransaction();    				// Insert and get id.  				//  				Person person = new Person();    				person.FirstName = "Crazy";  				person.LastName  = "Frog";  				person.Gender    = Gender.Unknown;    				int id = pa./*[a]*/Insert(person)/*[/a]*/;    				// SelectByName.  				//  				person = pa./*[a]*/SelectByName("Crazy"' "Frog")/*[/a]*/;    				Assert.IsNotNull(person);    				// Select top.  				//  				Dictionary<int'Person> dic = pa./*[a]*/SelectTop(10)/*[/a]*/;    				Assert.IsTrue(dic.Count <= 10);    				// Delete.  				//  				pa.Query.Delete(person);    				pa.CommitTransaction();  			}
Magic Number,HowTo.DataAccess,AbstractAccessor,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\AbstractAccessor.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				PersonAccessor pa = /*[a]*/DataAccessor.CreateInstance<PersonAccessor>(db)/*[/a]*/;    				pa.BeginTransaction();    				// Insert and get id.  				//  				Person person = new Person();    				person.FirstName = "Crazy";  				person.LastName  = "Frog";  				person.Gender    = Gender.Unknown;    				int id = pa./*[a]*/Insert(person)/*[/a]*/;    				// SelectByName.  				//  				person = pa./*[a]*/SelectByName("Crazy"' "Frog")/*[/a]*/;    				Assert.IsNotNull(person);    				// Select top.  				//  				Dictionary<int'Person> dic = pa./*[a]*/SelectTop(10)/*[/a]*/;    				Assert.IsTrue(dic.Count <= 10);    				// Delete.  				//  				pa.Query.Delete(person);    				pa.CommitTransaction();  			}
Magic Number,HowTo.DataAccess,CustomSqlQuery2,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery2.cs,Test4,The following statement contains a magic number: List<Person> list = da.SelectID(42);
Magic Number,HowTo.DataAccess,CustomSqlQuery2,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery2.cs,Test4,The following statement contains a magic number: Assert.AreEqual(42' list[0].ID);
Magic Number,HowTo.DataAccess,TestAccessorBase<T>,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery2.cs,PrepareSqlQuery,The following statement contains a magic number: int    key = provider * 1000000 + uniqueID;
Magic Number,HowTo.DataAccess,CustomSqlQuery1,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery1.cs,Test4,The following statement contains a magic number: List<Person> list = da.SelectID(42);
Magic Number,HowTo.DataAccess,CustomSqlQuery1,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery1.cs,Test4,The following statement contains a magic number: Assert.AreEqual(42' list[0].ID);
Magic Number,HowTo.DataAccess,ScalarSource,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ScalarSource.cs,DataReaderTest,The following statement contains a magic number: int expectedValue = 12345;
Magic Number,HowTo.DataAccess,ScalarSource,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ScalarSource.cs,OutputParameterTest,The following statement contains a magic number: int expectedValue = 12345;
Magic Number,HowTo.DataAccess,ScalarSource,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ScalarSource.cs,ReturnParameterTest,The following statement contains a magic number: int expectedValue = 12345;
Magic Number,HowTo.DataAccess,ParamNullValue,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ParamNullValue.cs,Test,The following statement contains a magic number: Person p2 = ta.SelectByKey(2);
Magic Number,HowTo.DataAccess,ParamName,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ParamName.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' p.ID);
Magic Number,HowTo.DataAccess,Format,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\Format.cs,Test,The following statement contains a magic number: List<Person>   list = pa.GetPersonList(2);
Magic Number,HowTo.DataAccess,Format,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\Format.cs,Test,The following statement contains a magic number: Assert.That(list.Count' Is.LessThanOrEqualTo(2));
Magic Number,HowTo.DataAccess,DiscoverParameters,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\DiscoverParameters.cs,Test,The following statement contains a magic number: Assert.AreEqual(2' p.ID);
Magic Number,HowTo.DataAccess,DirectionTest,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\Direction.cs,TestReturnParameter,The following statement contains a magic number: Assert.AreEqual(12345' p.ID);
Magic Number,HowTo.DataAccess,DirectionTest,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\Direction.cs,TestReturnParameter2,The following statement contains a magic number: Assert.AreEqual(12345' p.ID);
Magic Number,HowTo.DataAccess,ExecuteObject,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ExecuteObject.cs,Test,The following statement contains a magic number: Assert.IsNotNull(pa.GetPersonByID  (2));
Magic Number,HowTo.DataAccess,ExecuteDictionary2,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\ExecuteDictionary.cs,Test,The following statement contains a magic number: string firstName = sdic[new CompoundValue(2' "Testerson")];
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: MapResultSet/*[/a]*/[] sets    = new MapResultSet[3];
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets[2] = new MapResultSet(typeof(Grandchild));
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets[1].AddRelation(sets[2]' "ChildID"' "ChildID"' "Grandchildren");
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test,The following statement contains a magic number: sets[2].AddRelation(sets[1]' "ChildID"' "ChildID"' "Child");
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test2,The following statement contains a magic number: MapResultSet/*[/a]*/[] sets = new MapResultSet[3];
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test2,The following statement contains a magic number: sets[2] = new MapResultSet(typeof(Grandchild));
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test3,The following statement contains a magic number: var sets    = new /*[a]*/MapResultSet/*[/a]*/[3];
Magic Number,HowTo.Data,ComplexMapping,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ComplexMapping.cs,Test3,The following statement contains a magic number: sets[2] = new MapResultSet(typeof(GrandchildEx));
Magic Number,HowTo.Data,ExecuteScalar,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ExecuteScalar.cs,ReturnValueTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				/*  				 * CREATE Function Scalar_ReturnParameter()  				 * RETURNS int  				 * AS  				 * BEGIN  				 *     RETURN 12345  				 * END  				 */  				int n = db  					.SetSpCommand("Scalar_ReturnParameter")  					./*[a]*/ExecuteScalar/*[/a]*/<int>(/*[a]*/ScalarSourceType.ReturnValue/*[/a]*/);    				Assert.AreEqual(12345' n);  			}
Magic Number,HowTo.Data,ExecuteForEach,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ExecuteForEach.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				db.BeginTransaction();    				// Execute.  				//  				db  					.SetSpCommand("Person_Insert")  					./*[a]*/ExecuteForEach/*[/a]*/<Person>(list);    				// Check the result.  				//  				list = db  					.SetCommand(  						"SELECT * FROM Person WHERE LastName = @lastName"'  						db.Parameter("@lastName"' "Smith"))  					.ExecuteList<Person>();    				Assert.GreaterOrEqual(2' list.Count);    				// Cleanup.  				//  				db  					.SetCommand(  						"DELETE FROM Person WHERE LastName = @lastName"'  						db.Parameter("@lastName"' "Smith"))  					.ExecuteNonQuery();    				db.CommitTransaction();  			}
Magic Number,HowTo.Data,Prepare,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Prepare.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				db.BeginTransaction();    				// Prepare command.  				//  				db  					.SetSpCommand("Person_Insert"'  						db.CreateParameters(list[0]))  					./*[a]*/Prepare/*[/a]*/();    				// Insert.  				//  				foreach (Person person in list)  				{  					db./*[a]*/AssignParameterValues/*[/a]*/(person);  					db.ExecuteNonQuery();  				}    				// Check the result.  				//  				list = db  					.SetCommand(  						"SELECT * FROM Person WHERE LastName = @lastName"'  						db.Parameter("@lastName"' "Smith"))  					.ExecuteList<Person>();    				Assert.GreaterOrEqual(2' list.Count);    				// Cleanup.  				//  				db  					.SetCommand(  						"DELETE FROM Person WHERE LastName = @lastName"'  						db.Parameter("@lastName"' "Smith"))  					.ExecuteNonQuery();    				db.CommitTransaction();  			}
Magic Number,HowTo.Data,ExecuteList,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\ExecuteList.cs,CustomList,The following statement contains a magic number: ArrayList list = new ArrayList(10);
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				int n = db  					.SetCommand("SELECT @par1 + @par2"'  						db./*[a]*/Parameter/*[/a]*/("@par1"' 2)'  						db./*[a]*/Parameter/*[/a]*/("@par2"' 2))  					.ExecuteScalar<int>();    				Assert.AreEqual(4' n);  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				int n = db  					.SetCommand("SELECT @par1 + @par2"'  						db./*[a]*/Parameter/*[/a]*/("@par1"' 2)'  						db./*[a]*/Parameter/*[/a]*/("@par2"' 2))  					.ExecuteScalar<int>();    				Assert.AreEqual(4' n);  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,AssignParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				int n = db  					.SetCommand("SELECT @par1 + @par2"'  						db./*[a]*/Parameter/*[/a]*/("@par1"' 2)'  						db./*[a]*/Parameter/*[/a]*/("@par2"' 2))  					.ExecuteScalar<int>();    				Assert.AreEqual(4' n);  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				db.SetCommand("SELECT @par * 2"'  					db./*[a]*/Parameter/*[/a]*/("@par"' DbType.Int32));    				db./*[a]*/Parameter("@par").Value/*[/a]*/ = 2;    				Assert.AreEqual(4' db.ExecuteScalar<int>());  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,SetValueTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				db.SetCommand("SELECT @par * 2"'  					db./*[a]*/Parameter/*[/a]*/("@par"' DbType.Int32));    				db./*[a]*/Parameter("@par").Value/*[/a]*/ = 2;    				Assert.AreEqual(4' db.ExecuteScalar<int>());  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				/*  				 * CREATE Function Scalar_ReturnParameter()  				 * RETURNS int  				 * AS  				 * BEGIN  				 *     RETURN 12345  				 * END  				 */  				db  					.SetSpCommand("Scalar_ReturnParameter")  					.ExecuteNonQuery();    				int n = (int)db./*[a]*/Parameter("@RETURN_VALUE").Value/*[/a]*/;    				Assert.AreEqual(12345' n);  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,ReturnValueTest2,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				int n = db  					.SetSpCommand("Scalar_ReturnParameter")  					.ExecuteScalar<int>(ScalarSourceType.ReturnValue);    				Assert.AreEqual(12345' n);  			}
Magic Number,HowTo.Data,Parameter,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\Parameter.cs,OutputParameterTest,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				/*  				 * CREATE Procedure Scalar_OutputParameter  				 *     @outputInt    int         = 0  output'  				 *     @outputString varchar(50) = '' output  				 * AS  				 * BEGIN  				 *     SET @outputInt = 12345  				 *     SET @outputString = '54321'  				 * END  				 */    				db  					.SetSpCommand("Scalar_OutputParameter"'  						db./*[a]*/OutputParameter/*[/a]*/("@outputInt"'    1)'  						db./*[a]*/OutputParameter/*[/a]*/("@outputString"' "1"))  					.ExecuteNonQuery();    				Assert.AreEqual(12345'   (int)   db./*[a]*/Parameter("@outputInt").   Value/*[/a]*/);  				Assert.AreEqual("54321"' (string)db./*[a]*/Parameter("@outputString").Value/*[/a]*/);  			}
Magic Number,HowTo.Mapping,JsonMapper,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,SetValue,The following statement contains a magic number: if (value == null)  				_sb.Append("null");  			else  			{  				switch (Type.GetTypeCode(value.GetType()))  				{  					case TypeCode.Empty:  					case TypeCode.DBNull:  						_sb.Append("null");  						break;  					case TypeCode.Boolean:  						_sb.Append((bool)value? "true": "false");  						break;  					case TypeCode.Char:  						_sb  							.Append('\'')  							.Append((char)value)  							.Append('\'')  							;  						break;  					case TypeCode.SByte:  					case TypeCode.Int16:  					case TypeCode.Int32:  					case TypeCode.Int64:  					case TypeCode.Byte:  					case TypeCode.UInt16:  					case TypeCode.UInt32:  					case TypeCode.UInt64:  					case TypeCode.Single:  					case TypeCode.Double:  					case TypeCode.Decimal:  						_sb.Append(((IFormattable)value).ToString(null' CultureInfo.InvariantCulture));  						break;  					case TypeCode.DateTime:  						_sb  							.Append("new Date(")  							.Append((((DateTime)value).Ticks - InitialJavaScriptDateTicks)/10000)  							.Append(")");  						break;  					case TypeCode.String:  						_sb  							.Append('"')  							.Append(encode((string)value))  							.Append('"')  							;  						break;  					default:  						if (value is XmlNode)  						{  							if (IsEmptyNode((XmlNode) value))  								_sb.Append("null");  							else  								WriteXmlJson((XmlNode)value);  						}  						else  						{  							JsonMapper inner = new JsonMapper(_sb' _indent + 1);    							if (value.GetType().IsArray)  								_mappingSchema.MapSourceListToDestinationList(  									_mappingSchema.GetDataSourceList(value)' inner);  							else  								_mappingSchema.MapSourceToDestination(  									_mappingSchema.GetDataSource(value)' value' inner' inner);  						}  						break;  				}  			}
Magic Number,HowTo.Mapping,MapToJson,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,Test,The following statement contains a magic number: JsonMapper jm = new JsonMapper(new StringBuilder(256));
Magic Number,HowTo.Mapping,ObjectToObject,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\ObjectToObject.cs,Test1,The following statement contains a magic number: Assert.AreEqual(10'     dest.IntValue);
Magic Number,HowTo.Mapping,MapValue2,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\MapValueAttribute2.cs,Test2,The following statement contains a magic number: Gender2 g = Map.ToEnum<Gender2>(2);
Magic Number,HowTo.Mapping,ValueToEnum,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\ValueToEnum.cs,Test2,The following statement contains a magic number: Gender2 g = Map./*[a]*/ToEnum<Gender2>/*[/a]*/(2);
Magic Number,HowTo.Mapping,ValueToEnum,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\ValueToEnum.cs,Test3,The following statement contains a magic number: Gender3 g = Map./*[a]*/ToEnum<Gender3>/*[/a]*/(2);
Magic Number,HowTo.Mapping,EnumToValue,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\EnumToValue.cs,Test2,The following statement contains a magic number: Assert.AreEqual(2' value);
Magic Number,HowTo.Mapping,EnumToValue,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\EnumToValue.cs,Test3,The following statement contains a magic number: Assert.AreEqual(2' value);
Magic Number,HowTo.Patterns,TestClass,C:\repos\igor-tkachev_bltoolkit\HowTo\Patterns\DuckTyping.cs,Method3,The following statement contains a magic number: return 3;
Magic Number,HowTo.Reflection,ObjectFactoryTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				List<Person> list = db  					.SetCommand(@"  						SELECT  							ps.*'  							d.Taxonomy'  							p.Diagnosis'  							CASE  								WHEN d.PersonID IS NOT NULL THEN 'D'  								WHEN p.PersonID IS NOT NULL THEN 'P'  							END as PersonType  						FROM  							Person ps  								LEFT JOIN Doctor  d ON d.PersonID = ps.PersonID  								LEFT JOIN Patient p ON p.PersonID = ps.PersonID  						ORDER BY  							ps.PersonID")  					.ExecuteList<Person>();    				Assert.AreEqual(list[0].GetType()' /*[a]*/typeof(Doctor)/*[/a]*/);  				Assert.AreEqual(list[1].GetType()' /*[a]*/typeof(Patient)/*[/a]*/);    				if (list.Count > 2)  					Assert.AreEqual(list[2].GetType()' typeof(Person));  			}
Magic Number,HowTo.Reflection,ObjectFactoryTest,C:\repos\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,Test,The following statement contains a magic number: using (DbManager db = new DbManager())  			{  				List<Person> list = db  					.SetCommand(@"  						SELECT  							ps.*'  							d.Taxonomy'  							p.Diagnosis'  							CASE  								WHEN d.PersonID IS NOT NULL THEN 'D'  								WHEN p.PersonID IS NOT NULL THEN 'P'  							END as PersonType  						FROM  							Person ps  								LEFT JOIN Doctor  d ON d.PersonID = ps.PersonID  								LEFT JOIN Patient p ON p.PersonID = ps.PersonID  						ORDER BY  							ps.PersonID")  					.ExecuteList<Person>();    				Assert.AreEqual(list[0].GetType()' /*[a]*/typeof(Doctor)/*[/a]*/);  				Assert.AreEqual(list[1].GetType()' /*[a]*/typeof(Patient)/*[/a]*/);    				if (list.Count > 2)  					Assert.AreEqual(list[2].GetType()' typeof(Person));  			}
Magic Number,HowTo.TypeBuilder,InitialValueTest,C:\repos\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That(o.Int'      Is.EqualTo(54));
Magic Number,HowTo.TypeBuilder,InitialValueTest,C:\repos\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That(o.Date'     Is.EqualTo(new DateTime(2'2'2)));
Magic Number,HowTo.TypeBuilder,InitialValueTest,C:\repos\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That(o.Date'     Is.EqualTo(new DateTime(2'2'2)));
Magic Number,HowTo.TypeBuilder,InitialValueTest,C:\repos\igor-tkachev_bltoolkit\HowTo\TypeBuilder\InitialValues.cs,Test,The following statement contains a magic number: Assert.That(o.Date'     Is.EqualTo(new DateTime(2'2'2)));
Missing Default,BLToolkit.Data.DataProvider,SybaseAdoDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\SybaseAdoDataProvider.cs,Convert,The following switch statement is missing a default case: switch (convertType)  			{  				case ConvertType.NameToQueryParameter:  					return "?";    				case ConvertType.NameToCommandParameter:  				case ConvertType.NameToSprocParameter:  					return value;  			}
Missing Default,HowTo.DataAccess,TestQueryAttribute,C:\repos\igor-tkachev_bltoolkit\HowTo\DataAccess\CustomSqlQuery1.cs,GetSqlText,The following switch statement is missing a default case: switch (dbManager.DataProvider.Name)  				{  					case "Sql"       :  					case "MsSql2000" :  					case "MsSql2005" :  					case "MsSql2008" :  					case "MsSql2012" :  					case "Access"    : return SqlText;  					case "Oracle"    : return OracleText ?? SqlText;  					case "Fdp"       : return FbText     ?? SqlText;  					case "SQLite"    : return SQLiteText ?? SqlText;  				}
Missing Default,HowTo.Data,AdoDemo,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\AdoDemo.cs,GetList,The following switch statement is missing a default case: switch (gender)  			{  				case Gender.Female:  paramValue = "F"; break;  				case Gender.Male:    paramValue = "M"; break;  				case Gender.Unknown: paramValue = "U"; break;  				case Gender.Other:   paramValue = "O"; break;  			}
Missing Default,HowTo.Data,AdoDemo,C:\repos\igor-tkachev_bltoolkit\HowTo\Data\AdoDemo.cs,GetList,The following switch statement is missing a default case: switch (rd["Gender"].ToString())  							{  								case "F": person.Gender = Gender.Female;  break;  								case "M": person.Gender = Gender.Male;    break;  								case "U": person.Gender = Gender.Unknown; break;  								case "O": person.Gender = Gender.Other;   break;  							}
Missing Default,HowTo.Mapping,JsonMapper,C:\repos\igor-tkachev_bltoolkit\HowTo\Mapping\MapToJson.cs,IsWhitespace,The following switch statement is missing a default case: switch (node.NodeType)  			{  				case XmlNodeType.Comment:  				case XmlNodeType.Whitespace:  				case XmlNodeType.SignificantWhitespace:  					return true;  			}
Missing Default,HowTo.Reflection,ObjectFactory,C:\repos\igor-tkachev_bltoolkit\HowTo\Reflection\ObjectFactory.cs,CreateInstance,The following switch statement is missing a default case: switch ((string)objectType)  					{  						case "D": /*[a]*/context.ObjectMapper = ObjectMapper<Doctor>. Instance;/*[/a]*/ break;  						case "P": /*[a]*/context.ObjectMapper = ObjectMapper<Patient>.Instance;/*[/a]*/ break;  					}
