Implementation smell,Namespace,Class,File,Method,Description
Long Method,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The method has 173 lines of code.
Complex Method,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,Cyclomatic complexity of the method is 12
Complex Method,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GetTable,Cyclomatic complexity of the method is 12
Long Parameter List,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,Generate,The method has 8 parameters. Parameters: createdFiles' templateFileName' path' destFolder' sourcePath' cleanUp' createIndex' fileAction
Long Statement,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The length of the statement  "									source = ct_item2.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link}>${label}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td class='j' colspan='3'>${text}</td></tr>"); " is 165.
Long Statement,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The length of the statement  "									source = ct_item3.Replace(source' @"<tr><td nowrap class='p'>&#8226; <a href=${link}>${label}</a></td><td></td><td class='pj' colspan='3'>${text}</td></tr>"); " is 158.
Long Statement,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The length of the statement  "									source = ct_item4.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap colspan='3'>&#8226; <a href=${link2}>${label2}</a></td></tr>"); " is 195.
Long Statement,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The length of the statement  "									source = ct_item5.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link2}>${label2}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link3}>${label3}</a></td></tr>"); " is 264.
Long Statement,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The length of the statement  "				.Replace(@"Data Source=(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=DBHost)(PORT=1521))(CONNECT_DATA=(SERVICE_NAME=XE)));User Id=TestUser;Password=TestPassword;"' "..."); " is 167.
Empty Catch Block,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,CleanUp,The method has an empty catch block.
Empty Catch Block,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,CleanUp,The method has an empty catch block.
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateSource,The following statement contains a magic number: for (int  				 idx = text.IndexOf("<%")'  				 end = text.IndexOf("%>"' idx + 2);  				 idx >= 0 &&  				 end >= 0;  				 idx = text.IndexOf("<%"' idx + 2)'  				 end = text.IndexOf("%>"' idx + 2))  			{  				var startSource = text.Substring(0' idx);  				var source      = text.Substring(idx + 2' end - idx - 2).Trim();  				var command     = "source";    				var cmdIdx = source.IndexOf('#');    				if (cmdIdx >= 0)  				{  					command = source.Substring(0' cmdIdx).Trim().ToLower();  					source  = source.Substring(cmdIdx+1).Trim();  				}    				switch (command)  				{  					case "source"  : source = GetSourceCodeFromPath(Path.Combine(_sourcePath' source)' text); break;  					case "rss"     : source = GetNews              (Path.Combine(_sourcePath' source));       break;  					case "txt"     :  					case "cs"      :  					case "sql"     : source = GetSourceCode(source' "." + command' text);                     break;  					case "title"   : item.Title     = source;            source = "";                         break;  					case "order"   : item.SortOrder = int.Parse(source); source = "";                         break;  					case "group"   : item.Group     = source;            source = "";                         break;  					case "index"   : item.Indexes.Add(source);           source = "";                         break;  					case "table"   : source = GetTable(Path.Combine(_sourcePath' source));                    break;  					case "noindex" :  						if (source.Length == 0)  							item.NoIndex = true;  						else  							item.NoIndexes.Add(source);  							  						source = "";  						break;    					default        : throw new InvalidOperationException();  				}    				text = startSource + source + text.Substring(end + 2);  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GetNews,The following statement contains a magic number: foreach (XmlNode item in doc.SelectNodes("rss/channel/item"))  			{  				html += string.Format(@"  <tr><td{0} colspan='2'><nobr><b>{1:MM/dd/yy}</nobr></b> <a href='{2}'>{3}</a></td></tr>  <tr><td>&nbsp;&nbsp;</td><td class='j'>{4}</td></tr>  "'  					@class'  					DateTime.Parse(item.SelectSingleNode("pubDate").InnerText)'  					item.SelectSingleNode("link").       InnerText'  					item.SelectSingleNode("title").      InnerText'  					item.SelectSingleNode("description").InnerText);    				@class = " class='p'";    				if (++i == 20)  					break;  			}
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GetTableItem,The following statement contains a magic number: if (ss.Length != 4)  				throw new InvalidOperationException(line);
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GetTableItem,The following statement contains a magic number: var impl = ss[3].Trim().Replace("$$$$$"' "||");
Magic Number,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GetTableItem,The following statement contains a magic number: return new TableItem  			{  				Provider       = _providerName'  				Feature        = ss[1].Trim().Replace("$$$$$"' "||")'  				Linq           = ss[2].Trim().Replace("$$$$$"' "||")'  				Implementation = impl  			};
Missing Default,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The following switch statement is missing a default case: switch (_fileAction(fileName))  				{  					case FileAction.Skip:  						break;    					case FileAction.Copy:  						File.Copy(fileName' destName' true);  						break;    					case FileAction.Process:  						if (Directory.Exists(destFolder) == false)  							Directory.CreateDirectory(destFolder);    						switch (ext)  						{  							case ".htm":  							case ".html":  								using (var sw = File.CreateText(destName))  								using (var sr = File.OpenText(fileName))  								{  									var item = new FileItem { IsFile = true' Name = destName };  									createdFiles.Add(item);    									var source = sr.ReadToEnd();    									source = source  										.Replace("<ct_table>"'  "<table border='0' cellpadding='0' cellspacing='0'>")  										.Replace("<ct_hr>"'     "<ct_mg><tr><td colspan='5' class='hr'><img width='1' height='1' alt=''/></td></tr><ct_mg>")  										.Replace("<ct_text>"'   "<tr><td colspan='5'>")  										.Replace("</ct_text>"'  "</td></tr><ct_mg>")  										.Replace("<ct_mg>"'     "<tr><td colspan='5' class='sp'><img width='1' height='1' alt=''/></td></tr>")  										.Replace("</ct_table>"' "</table>")  										;    									source = ct_item1.Replace(source' @"<tr><td nowrap colspan='5'>&#8226; <a href=${link}>${label}</a></td></tr>");  									source = ct_item2.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link}>${label}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td class='j' colspan='3'>${text}</td></tr>");  									source = ct_item3.Replace(source' @"<tr><td nowrap class='p'>&#8226; <a href=${link}>${label}</a></td><td></td><td class='pj' colspan='3'>${text}</td></tr>");  									source = ct_item4.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap colspan='3'>&#8226; <a href=${link2}>${label2}</a></td></tr>");  									source = ct_item5.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link2}>${label2}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link3}>${label3}</a></td></tr>");    									if (_modifySourceLinks)  									{  										source = source  											.Replace("href=\"..\\..\\..\\Source\\"' "target=_blank href=\"/Source/")  											.Replace("href='..\\..\\..\\Source\\"'  "target=_blank href='/Source/")  											.Replace("<a href=\"http://"' "<a target=_blank href=\"http://")  											.Replace("<a href='http://"'  "<a target=_blank href='http://")  											;  									}    									var title  = item.Title;    									if (title == "index")  									{  										title = Path.GetFileName(Path.GetDirectoryName(fileName));    										if (title != "content")  											item.Title = title;  									}    									source = GenerateSource(source' item);  									title  = item.Title;    									if (title.Length > 0 && _addDashToTitle)  										title += " - ";    									sw.WriteLine(string.Format(  										template'  										source'  										backPath'  										backLinks'  										title));    									if (item.NoIndex == false)  									{  										source = source  											.Replace("<span class='a'>"' "")  											.Replace("</span>"' "")  											.Replace("&lt;"' "<")  											.Replace("&gt;"' ">")  											;    										foreach (var index in IndexItem.Index)  											if (!item.NoIndexes.Contains(index.Name))  												foreach (var s in index.Text)  													if (source.IndexOf(s) >= 0)  													{  														index.Files.Add(item);  														break;  													}    										foreach (var s in item.Indexes)  										{  											var index = IndexItem.Index.Find(i => i.Name == s);    											if (index == null)  												IndexItem.Index.Add(new IndexItem(s));    											if (index.Files.Contains(item) == false)  												index.Files.Add(item);  										}  									}  								}    								break;    							case ".cs":  								using (var sw = File.CreateText(destName + ".htm"))  								{  									createdFiles.Add(new FileItem { IsFile = true' Name = destName + ".htm" });    									var source = GenerateSource("<% " + fileName + " %>"' null);    									sw.WriteLine(string.Format(  										template'  										source'  										backPath'  										backLinks'  										Path.GetFileNameWithoutExtension(fileName) + " - "));  								}  								break;  						}    						files.Add(fileName);    						break;  				}
Missing Default,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GenerateContent,The following switch statement is missing a default case: switch (ext)  						{  							case ".htm":  							case ".html":  								using (var sw = File.CreateText(destName))  								using (var sr = File.OpenText(fileName))  								{  									var item = new FileItem { IsFile = true' Name = destName };  									createdFiles.Add(item);    									var source = sr.ReadToEnd();    									source = source  										.Replace("<ct_table>"'  "<table border='0' cellpadding='0' cellspacing='0'>")  										.Replace("<ct_hr>"'     "<ct_mg><tr><td colspan='5' class='hr'><img width='1' height='1' alt=''/></td></tr><ct_mg>")  										.Replace("<ct_text>"'   "<tr><td colspan='5'>")  										.Replace("</ct_text>"'  "</td></tr><ct_mg>")  										.Replace("<ct_mg>"'     "<tr><td colspan='5' class='sp'><img width='1' height='1' alt=''/></td></tr>")  										.Replace("</ct_table>"' "</table>")  										;    									source = ct_item1.Replace(source' @"<tr><td nowrap colspan='5'>&#8226; <a href=${link}>${label}</a></td></tr>");  									source = ct_item2.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link}>${label}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td class='j' colspan='3'>${text}</td></tr>");  									source = ct_item3.Replace(source' @"<tr><td nowrap class='p'>&#8226; <a href=${link}>${label}</a></td><td></td><td class='pj' colspan='3'>${text}</td></tr>");  									source = ct_item4.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap colspan='3'>&#8226; <a href=${link2}>${label2}</a></td></tr>");  									source = ct_item5.Replace(source' @"<tr><td nowrap>&#8226; <a href=${link1}>${label1}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link2}>${label2}</a></td><td>&nbsp;&nbsp;&nbsp;</td><td nowrap>&#8226; <a href=${link3}>${label3}</a></td></tr>");    									if (_modifySourceLinks)  									{  										source = source  											.Replace("href=\"..\\..\\..\\Source\\"' "target=_blank href=\"/Source/")  											.Replace("href='..\\..\\..\\Source\\"'  "target=_blank href='/Source/")  											.Replace("<a href=\"http://"' "<a target=_blank href=\"http://")  											.Replace("<a href='http://"'  "<a target=_blank href='http://")  											;  									}    									var title  = item.Title;    									if (title == "index")  									{  										title = Path.GetFileName(Path.GetDirectoryName(fileName));    										if (title != "content")  											item.Title = title;  									}    									source = GenerateSource(source' item);  									title  = item.Title;    									if (title.Length > 0 && _addDashToTitle)  										title += " - ";    									sw.WriteLine(string.Format(  										template'  										source'  										backPath'  										backLinks'  										title));    									if (item.NoIndex == false)  									{  										source = source  											.Replace("<span class='a'>"' "")  											.Replace("</span>"' "")  											.Replace("&lt;"' "<")  											.Replace("&gt;"' ">")  											;    										foreach (var index in IndexItem.Index)  											if (!item.NoIndexes.Contains(index.Name))  												foreach (var s in index.Text)  													if (source.IndexOf(s) >= 0)  													{  														index.Files.Add(item);  														break;  													}    										foreach (var s in item.Indexes)  										{  											var index = IndexItem.Index.Find(i => i.Name == s);    											if (index == null)  												IndexItem.Index.Add(new IndexItem(s));    											if (index.Files.Contains(item) == false)  												index.Files.Add(item);  										}  									}  								}    								break;    							case ".cs":  								using (var sw = File.CreateText(destName + ".htm"))  								{  									createdFiles.Add(new FileItem { IsFile = true' Name = destName + ".htm" });    									var source = GenerateSource("<% " + fileName + " %>"' null);    									sw.WriteLine(string.Format(  										template'  										source'  										backPath'  										backLinks'  										Path.GetFileNameWithoutExtension(fileName) + " - "));  								}  								break;  						}
Missing Default,DocGen,Generator,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Generator.cs,GeneratePath,The following switch statement is missing a default case: switch (path[0])  			{  				case "Doc":  					backLinks += string.Format(  						"<br><nobr>&nbsp;&nbsp;<small><a class='m' href='{0}Doc/index.htm'>Doc</a>"'  						backPath);    					for (var i = 1; i < path.Length; i++)  					{  						parent = "";    						for (var j = i + 1; j < path.Length; j++)  							parent += "../";    						backLinks += string.Format(".<a class='m' href='{0}index.htm'>{1}</a>"' parent' path[i]);  					}    					if (name.ToLower() != "index")  					{  						backLinks += string.Format(".<a class='m' href='{0}{1}'>{2}</a>"'  							parent' Path.GetFileName(fileName)' name);  					}    					backLinks += "<small></nobr></br>";    					break;    				case "Source":  					backLinks += string.Format(  						"<br><nobr>&nbsp;&nbsp;<small><a class='m' href='{0}Source/index.htm'>Source</a>"'  						backPath);    					for (var i = 1; i < path.Length; i++)  					{  						parent = "";    						for (var j = i + 1; j < path.Length; j++)  							parent += "../";    						backLinks += string.Format(".<a class='m' href='{0}index.htm'>{1}</a>"' parent' path[i]);  					}    					if (name.ToLower() != "@@@")  					{  						backLinks += string.Format(".<a class='m' href='{0}{1}.htm'>{1}</a>"'  							parent' Path.GetFileName(fileName));  					}    					backLinks += "<small></nobr></br>";    					break;  			}
Missing Default,DocGen,Program,C:\repos\igor-tkachev_bltoolkit\Tools\DocGen\Program.Web.cs,Main,The following switch statement is missing a default case: switch (name)  					{  						case "rss.xml"         : return FileAction.Copy;  						case "chmtemplate.html": return FileAction.Skip;  						case "webtemplate.html": return FileAction.Skip;  					}
