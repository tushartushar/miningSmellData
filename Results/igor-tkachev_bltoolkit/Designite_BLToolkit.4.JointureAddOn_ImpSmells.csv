Implementation smell,Namespace,Class,File,Method,Description
Long Method,BLToolkit.Mapping,FullObjectMapper,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullObjectMapper.cs,GetObjectMapper,The method has 155 lines of code.
Complex Method,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,FillObject,Cyclomatic complexity of the method is 9
Complex Method,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,FillObject,Cyclomatic complexity of the method is 10
Complex Method,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,internalMapDataReaderToList,Cyclomatic complexity of the method is 11
Complex Method,BLToolkit.Mapping,FullObjectMapper,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullObjectMapper.cs,GetObjectMapper,Cyclomatic complexity of the method is 15
Complex Method,BLToolkit.Mapping,ValueMapper,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\ValueMapper.cs,SetDataReaderIndex,Cyclomatic complexity of the method is 9
Long Parameter List,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,AppendJoinTableName,The method has 5 parameters. Parameters: mapper' sb' db' type' tableName
Long Parameter List,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,AddWherePK,The method has 5 parameters. Parameters: db' query' sb' nParameter' mapper
Long Parameter List,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,MapInternal,The method has 6 parameters. Parameters: initContext' source' sourceObject' dest' destObject' parameters
Long Statement,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,AppendJoinTableName,The length of the statement  "            Dictionary<string' ValueMapper> valueMappers = mapper.PropertiesMapping.Where(e => e is ValueMapper).Cast<ValueMapper>().ToDictionary(e => e.PropertyName' e => e); " is 163.
Long Statement,BLToolkit.Emit,DynamicMethodCompiler,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Emit\DynamicCompilationSpike.cs,CreateInstantiateObjectHandler,The length of the statement  "                        "The type {0} must declare an empty constructor (the constructor may be private' internal' protected' protected internal' or public)."' " is 135.
Long Statement,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,FillObject,The length of the statement  "                        //This is needed' because DBValue can be Null' but the Field can be Guid' wich then is filled with Guid.Empty and this is also a valid value! " is 141.
Long Statement,BLToolkit.Mapping,FullMappingSchema,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullMappingSchema.cs,internalMapDataReaderToList,The length of the statement  "                //This is needed' because DBValue can be Null' but the Field can be Guid' wich then is filled with Guid.Empty and this is also a valid value! " is 141.
Long Statement,BLToolkit.Mapping,FullObjectMapper,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullObjectMapper.cs,GetObjectMapper,The length of the statement  "            _extension = TypeExtension.GetTypeExtension(mapper.PropertyType /*_typeAccessor.OriginalType*/' MappingSchema.Extensions); " is 122.
Long Statement,BLToolkit.Mapping,FullObjectMapper,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\FullObjectMapper.cs,GetObjectMapper,The length of the statement  "                mapper.PropertiesMapping.Add(GetObjectMapper(objMap' ref startIndex' MappingSchema.GetObjectMapper(objMap.PropertyType).TypeAccessor)); " is 135.
Magic Number,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,CreateSelectAllFullSqlText,The following statement contains a magic number: sb.Remove(sb.Length - 2' 1);
Magic Number,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,CreateSelectFullByKeySqlText,The following statement contains a magic number: sb.Remove(sb.Length - 2' 1);
Magic Number,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,AddWherePK,The following statement contains a magic number: sb.Remove(sb.Length - 5' 5);
Magic Number,BLToolkit.DataAccess,FullSqlQuery,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\DataAccess\FullSqlQuery.cs,AddWherePK,The following statement contains a magic number: sb.Remove(sb.Length - 5' 5);
Magic Number,BLToolkit.Emit,Il,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Emit\FunctionFactory.cs,CreateSetMethod,The following statement contains a magic number: var arguments = new Type[2];
Magic Number,BLToolkit.Mapping,NotifyPropertyChangedInterceptor,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\NotifyPropertyChangedInterceptor.cs,Intercept,The following statement contains a magic number: if (invocation.Method.Name.StartsWith("set_"))              {                  var propertyName = invocation.Method.Name.Substring(4);                  _subscribers(invocation.InvocationTarget' new PropertyChangedEventArgs(propertyName));              }
Magic Number,BLToolkit.Mapping,LazyValueLoadInterceptor,C:\repos\igor-tkachev_bltoolkit\Extensions\JointureAddOn\Mapping\LazyValueLoadInterceptor.cs,Intercept,The following statement contains a magic number: if (invocation.Method.Name.StartsWith("get_"))              {                  string propertyName = invocation.Method.Name.Substring(4);                    foreach (IMapper map in _mapper.PropertiesMapping)                  {                      if (map.PropertyName == propertyName)                      {                          if (!_intercepted)                          {                              _intercepted = true;                              map.Setter(invocation.Proxy' _lazyLoader(map' invocation.Proxy' invocation.TargetType));                          }                          break;                      }                  }              }
