Implementation smell,Namespace,Class,File,Method,Description
Long Method,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The method has 204 lines of code.
Complex Method,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,Cyclomatic complexity of the method is 11
Complex Method,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,Cyclomatic complexity of the method is 11
Long Parameter List,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,The method has 6 parameters. Parameters: db' insertText' collection' members' maxBatchSize' getParameters
Long Statement,BLToolkit.Data.DataProvider,OracleDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetNullableDecimal,The length of the statement  "{ return _dataReader.IsDBNull(index)? (decimal?)null: OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(index)' 28).Value; }" is 130.
Long Statement,BLToolkit.Data.DataProvider,OracleScalarDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetNullableDecimal,The length of the statement  "{ return _dataReader.IsDBNull(index)? (decimal?)null: OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(Index)' 28).Value; }" is 130.
Complex Conditional,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,The conditional expression  "(value is string && ((string)value).Length >= 2000) || value is byte[] || value is Binary"  is complex.
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,SetParameterValue,The following statement contains a magic number: if (parameter is OracleParameterWrap)  			{  				const int ThresholdSize = 4000;  				if (value is string && Encoding.UTF8.GetBytes((string)value).Length > ThresholdSize)  				{  					((OracleParameterWrap)parameter).OracleParameter.OracleDbType = OracleDbType.Clob;  				}  				else if (value is byte[] && ((byte[])value).Length > ThresholdSize)  				{  					((OracleParameterWrap)parameter).OracleParameter.OracleDbType = OracleDbType.Blob;  				}  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following statement contains a magic number: if (null != oraParameter)  			{  				if (oraParameter.CollectionType == OracleCollectionType.PLSQLAssociativeArray)  				{  					if (oraParameter.Direction == ParameterDirection.Input  						|| oraParameter.Direction == ParameterDirection.InputOutput)  					{  						var ar = oraParameter.Value as Array;    						if (null != ar && !(ar is byte[] || ar is char[]))  						{  							oraParameter.Size = ar.Length;    							if (oraParameter.DbType == DbType.String  								&& oraParameter.Direction == ParameterDirection.InputOutput)  							{  								var arrayBindSize = new int[oraParameter.Size];    								for (var i = 0; i < oraParameter.Size; ++i)  								{  									arrayBindSize[i] = 1024;  								}  								  								oraParameter.ArrayBindSize = arrayBindSize;  							}  						}    						if (oraParameter.Size == 0)  						{  							// Skip this parameter.  							// Fix Oracle.Net bug #2: Empty arrays can not be sent to the server.  							//  							return;  						}    						if (oraParameter.Value is Stream[])  						{  							var streams = (Stream[]) oraParameter.Value;    							for (var i = 0; i < oraParameter.Size; ++i)  							{  								if (streams[i] is OracleBFile || streams[i] is OracleBlob || streams[i] is OracleClob   #if !MANAGED  									|| streams[i] is OracleXmlStream  #endif  									)  								{  									// Known Oracle type.  									//  									continue;  								}    								streams[i] = CopyStream(streams[i]' (OracleCommand)command);  							}  						}  						else if (oraParameter.Value is XmlDocument[])  						{  							var xmlDocuments = (XmlDocument[]) oraParameter.Value;  							var values       = new object[oraParameter.Size];    							switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}  						}  					}  					else if (oraParameter.Direction == ParameterDirection.Output)  					{  						// Fix Oracle.Net bug #4: ArrayBindSize must be explicitly specified.  						//  						if (oraParameter.DbType == DbType.String)  						{  							oraParameter.Size = 1024;  							var arrayBindSize = new int[oraParameter.Size];  							for (var i = 0; i < oraParameter.Size; ++i)  							{  								arrayBindSize[i] = 1024;  							}  							  							oraParameter.ArrayBindSize = arrayBindSize;  						}  						else  						{  							oraParameter.Size = 32767;  						}  					}  				}  				else if (oraParameter.Value is Stream)  				{  					var stream = (Stream) oraParameter.Value;    					if (!(stream is OracleBFile) && !(stream is OracleBlob) &&  						!(stream is OracleClob)  #if !MANAGED   						&& !(stream is OracleXmlStream)  #endif  						)  					{  						oraParameter.Value = CopyStream(stream' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is Byte[])  				{  					var bytes = (Byte[]) oraParameter.Value;    					if (bytes.Length > 32000)  					{  						oraParameter.Value = CopyStream(bytes' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is XmlDocument)  				{  					var xmlDocument = (XmlDocument)oraParameter.Value;  					if (xmlDocument.DocumentElement == null)  						oraParameter.Value = DBNull.Value;  					else  					{    						switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}  					}  				}    				parameter = oraParameter;  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following statement contains a magic number: if (null != oraParameter)  			{  				if (oraParameter.CollectionType == OracleCollectionType.PLSQLAssociativeArray)  				{  					if (oraParameter.Direction == ParameterDirection.Input  						|| oraParameter.Direction == ParameterDirection.InputOutput)  					{  						var ar = oraParameter.Value as Array;    						if (null != ar && !(ar is byte[] || ar is char[]))  						{  							oraParameter.Size = ar.Length;    							if (oraParameter.DbType == DbType.String  								&& oraParameter.Direction == ParameterDirection.InputOutput)  							{  								var arrayBindSize = new int[oraParameter.Size];    								for (var i = 0; i < oraParameter.Size; ++i)  								{  									arrayBindSize[i] = 1024;  								}  								  								oraParameter.ArrayBindSize = arrayBindSize;  							}  						}    						if (oraParameter.Size == 0)  						{  							// Skip this parameter.  							// Fix Oracle.Net bug #2: Empty arrays can not be sent to the server.  							//  							return;  						}    						if (oraParameter.Value is Stream[])  						{  							var streams = (Stream[]) oraParameter.Value;    							for (var i = 0; i < oraParameter.Size; ++i)  							{  								if (streams[i] is OracleBFile || streams[i] is OracleBlob || streams[i] is OracleClob   #if !MANAGED  									|| streams[i] is OracleXmlStream  #endif  									)  								{  									// Known Oracle type.  									//  									continue;  								}    								streams[i] = CopyStream(streams[i]' (OracleCommand)command);  							}  						}  						else if (oraParameter.Value is XmlDocument[])  						{  							var xmlDocuments = (XmlDocument[]) oraParameter.Value;  							var values       = new object[oraParameter.Size];    							switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}  						}  					}  					else if (oraParameter.Direction == ParameterDirection.Output)  					{  						// Fix Oracle.Net bug #4: ArrayBindSize must be explicitly specified.  						//  						if (oraParameter.DbType == DbType.String)  						{  							oraParameter.Size = 1024;  							var arrayBindSize = new int[oraParameter.Size];  							for (var i = 0; i < oraParameter.Size; ++i)  							{  								arrayBindSize[i] = 1024;  							}  							  							oraParameter.ArrayBindSize = arrayBindSize;  						}  						else  						{  							oraParameter.Size = 32767;  						}  					}  				}  				else if (oraParameter.Value is Stream)  				{  					var stream = (Stream) oraParameter.Value;    					if (!(stream is OracleBFile) && !(stream is OracleBlob) &&  						!(stream is OracleClob)  #if !MANAGED   						&& !(stream is OracleXmlStream)  #endif  						)  					{  						oraParameter.Value = CopyStream(stream' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is Byte[])  				{  					var bytes = (Byte[]) oraParameter.Value;    					if (bytes.Length > 32000)  					{  						oraParameter.Value = CopyStream(bytes' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is XmlDocument)  				{  					var xmlDocument = (XmlDocument)oraParameter.Value;  					if (xmlDocument.DocumentElement == null)  						oraParameter.Value = DBNull.Value;  					else  					{    						switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}  					}  				}    				parameter = oraParameter;  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following statement contains a magic number: if (null != oraParameter)  			{  				if (oraParameter.CollectionType == OracleCollectionType.PLSQLAssociativeArray)  				{  					if (oraParameter.Direction == ParameterDirection.Input  						|| oraParameter.Direction == ParameterDirection.InputOutput)  					{  						var ar = oraParameter.Value as Array;    						if (null != ar && !(ar is byte[] || ar is char[]))  						{  							oraParameter.Size = ar.Length;    							if (oraParameter.DbType == DbType.String  								&& oraParameter.Direction == ParameterDirection.InputOutput)  							{  								var arrayBindSize = new int[oraParameter.Size];    								for (var i = 0; i < oraParameter.Size; ++i)  								{  									arrayBindSize[i] = 1024;  								}  								  								oraParameter.ArrayBindSize = arrayBindSize;  							}  						}    						if (oraParameter.Size == 0)  						{  							// Skip this parameter.  							// Fix Oracle.Net bug #2: Empty arrays can not be sent to the server.  							//  							return;  						}    						if (oraParameter.Value is Stream[])  						{  							var streams = (Stream[]) oraParameter.Value;    							for (var i = 0; i < oraParameter.Size; ++i)  							{  								if (streams[i] is OracleBFile || streams[i] is OracleBlob || streams[i] is OracleClob   #if !MANAGED  									|| streams[i] is OracleXmlStream  #endif  									)  								{  									// Known Oracle type.  									//  									continue;  								}    								streams[i] = CopyStream(streams[i]' (OracleCommand)command);  							}  						}  						else if (oraParameter.Value is XmlDocument[])  						{  							var xmlDocuments = (XmlDocument[]) oraParameter.Value;  							var values       = new object[oraParameter.Size];    							switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}  						}  					}  					else if (oraParameter.Direction == ParameterDirection.Output)  					{  						// Fix Oracle.Net bug #4: ArrayBindSize must be explicitly specified.  						//  						if (oraParameter.DbType == DbType.String)  						{  							oraParameter.Size = 1024;  							var arrayBindSize = new int[oraParameter.Size];  							for (var i = 0; i < oraParameter.Size; ++i)  							{  								arrayBindSize[i] = 1024;  							}  							  							oraParameter.ArrayBindSize = arrayBindSize;  						}  						else  						{  							oraParameter.Size = 32767;  						}  					}  				}  				else if (oraParameter.Value is Stream)  				{  					var stream = (Stream) oraParameter.Value;    					if (!(stream is OracleBFile) && !(stream is OracleBlob) &&  						!(stream is OracleClob)  #if !MANAGED   						&& !(stream is OracleXmlStream)  #endif  						)  					{  						oraParameter.Value = CopyStream(stream' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is Byte[])  				{  					var bytes = (Byte[]) oraParameter.Value;    					if (bytes.Length > 32000)  					{  						oraParameter.Value = CopyStream(bytes' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is XmlDocument)  				{  					var xmlDocument = (XmlDocument)oraParameter.Value;  					if (xmlDocument.DocumentElement == null)  						oraParameter.Value = DBNull.Value;  					else  					{    						switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}  					}  				}    				parameter = oraParameter;  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following statement contains a magic number: if (null != oraParameter)  			{  				if (oraParameter.CollectionType == OracleCollectionType.PLSQLAssociativeArray)  				{  					if (oraParameter.Direction == ParameterDirection.Input  						|| oraParameter.Direction == ParameterDirection.InputOutput)  					{  						var ar = oraParameter.Value as Array;    						if (null != ar && !(ar is byte[] || ar is char[]))  						{  							oraParameter.Size = ar.Length;    							if (oraParameter.DbType == DbType.String  								&& oraParameter.Direction == ParameterDirection.InputOutput)  							{  								var arrayBindSize = new int[oraParameter.Size];    								for (var i = 0; i < oraParameter.Size; ++i)  								{  									arrayBindSize[i] = 1024;  								}  								  								oraParameter.ArrayBindSize = arrayBindSize;  							}  						}    						if (oraParameter.Size == 0)  						{  							// Skip this parameter.  							// Fix Oracle.Net bug #2: Empty arrays can not be sent to the server.  							//  							return;  						}    						if (oraParameter.Value is Stream[])  						{  							var streams = (Stream[]) oraParameter.Value;    							for (var i = 0; i < oraParameter.Size; ++i)  							{  								if (streams[i] is OracleBFile || streams[i] is OracleBlob || streams[i] is OracleClob   #if !MANAGED  									|| streams[i] is OracleXmlStream  #endif  									)  								{  									// Known Oracle type.  									//  									continue;  								}    								streams[i] = CopyStream(streams[i]' (OracleCommand)command);  							}  						}  						else if (oraParameter.Value is XmlDocument[])  						{  							var xmlDocuments = (XmlDocument[]) oraParameter.Value;  							var values       = new object[oraParameter.Size];    							switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}  						}  					}  					else if (oraParameter.Direction == ParameterDirection.Output)  					{  						// Fix Oracle.Net bug #4: ArrayBindSize must be explicitly specified.  						//  						if (oraParameter.DbType == DbType.String)  						{  							oraParameter.Size = 1024;  							var arrayBindSize = new int[oraParameter.Size];  							for (var i = 0; i < oraParameter.Size; ++i)  							{  								arrayBindSize[i] = 1024;  							}  							  							oraParameter.ArrayBindSize = arrayBindSize;  						}  						else  						{  							oraParameter.Size = 32767;  						}  					}  				}  				else if (oraParameter.Value is Stream)  				{  					var stream = (Stream) oraParameter.Value;    					if (!(stream is OracleBFile) && !(stream is OracleBlob) &&  						!(stream is OracleClob)  #if !MANAGED   						&& !(stream is OracleXmlStream)  #endif  						)  					{  						oraParameter.Value = CopyStream(stream' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is Byte[])  				{  					var bytes = (Byte[]) oraParameter.Value;    					if (bytes.Length > 32000)  					{  						oraParameter.Value = CopyStream(bytes' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is XmlDocument)  				{  					var xmlDocument = (XmlDocument)oraParameter.Value;  					if (xmlDocument.DocumentElement == null)  						oraParameter.Value = DBNull.Value;  					else  					{    						switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}  					}  				}    				parameter = oraParameter;  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following statement contains a magic number: if (null != oraParameter)  			{  				if (oraParameter.CollectionType == OracleCollectionType.PLSQLAssociativeArray)  				{  					if (oraParameter.Direction == ParameterDirection.Input  						|| oraParameter.Direction == ParameterDirection.InputOutput)  					{  						var ar = oraParameter.Value as Array;    						if (null != ar && !(ar is byte[] || ar is char[]))  						{  							oraParameter.Size = ar.Length;    							if (oraParameter.DbType == DbType.String  								&& oraParameter.Direction == ParameterDirection.InputOutput)  							{  								var arrayBindSize = new int[oraParameter.Size];    								for (var i = 0; i < oraParameter.Size; ++i)  								{  									arrayBindSize[i] = 1024;  								}  								  								oraParameter.ArrayBindSize = arrayBindSize;  							}  						}    						if (oraParameter.Size == 0)  						{  							// Skip this parameter.  							// Fix Oracle.Net bug #2: Empty arrays can not be sent to the server.  							//  							return;  						}    						if (oraParameter.Value is Stream[])  						{  							var streams = (Stream[]) oraParameter.Value;    							for (var i = 0; i < oraParameter.Size; ++i)  							{  								if (streams[i] is OracleBFile || streams[i] is OracleBlob || streams[i] is OracleClob   #if !MANAGED  									|| streams[i] is OracleXmlStream  #endif  									)  								{  									// Known Oracle type.  									//  									continue;  								}    								streams[i] = CopyStream(streams[i]' (OracleCommand)command);  							}  						}  						else if (oraParameter.Value is XmlDocument[])  						{  							var xmlDocuments = (XmlDocument[]) oraParameter.Value;  							var values       = new object[oraParameter.Size];    							switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}  						}  					}  					else if (oraParameter.Direction == ParameterDirection.Output)  					{  						// Fix Oracle.Net bug #4: ArrayBindSize must be explicitly specified.  						//  						if (oraParameter.DbType == DbType.String)  						{  							oraParameter.Size = 1024;  							var arrayBindSize = new int[oraParameter.Size];  							for (var i = 0; i < oraParameter.Size; ++i)  							{  								arrayBindSize[i] = 1024;  							}  							  							oraParameter.ArrayBindSize = arrayBindSize;  						}  						else  						{  							oraParameter.Size = 32767;  						}  					}  				}  				else if (oraParameter.Value is Stream)  				{  					var stream = (Stream) oraParameter.Value;    					if (!(stream is OracleBFile) && !(stream is OracleBlob) &&  						!(stream is OracleClob)  #if !MANAGED   						&& !(stream is OracleXmlStream)  #endif  						)  					{  						oraParameter.Value = CopyStream(stream' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is Byte[])  				{  					var bytes = (Byte[]) oraParameter.Value;    					if (bytes.Length > 32000)  					{  						oraParameter.Value = CopyStream(bytes' (OracleCommand)command);  					}  				}  				else if (oraParameter.Value is XmlDocument)  				{  					var xmlDocument = (XmlDocument)oraParameter.Value;  					if (xmlDocument.DocumentElement == null)  						oraParameter.Value = DBNull.Value;  					else  					{    						switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}  					}  				}    				parameter = oraParameter;  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,The following statement contains a magic number: var str = "\t" + insertText  				.Substring(0' insertText.IndexOf(") VALUES ("))  				.Substring(7)  				.Replace("\r"' "")  				.Replace("\n"' "")  				.Replace("\t"' " ")  				.Replace("( "' "(")  				//.Replace("  "' " ")  				+ ") VALUES (";
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,The following statement contains a magic number: foreach (var item in collection)  			{  				if (sb.Length == 0)  					sb.AppendLine("INSERT ALL");    				sb.Append(str);    				foreach (var member in members)  				{  					var value = member.GetValue(item);    					if (value != null && value.GetType().IsEnum)  						value = MappingSchema.MapEnumToValue(value' true);    					if (value is Nullable<DateTime>)  						value = ((DateTime?)value).Value;    					if (value is DateTime)  					{  						var dt = (DateTime)value;  						sb.Append(string.Format("to_timestamp('{0:dd.MM.yyyy HH:mm:ss.ffffff}'' 'DD.MM.YYYY HH24:MI:SS.FF6')"' dt));  					}  					else if ((value is string && ((string)value).Length >= 2000) || value is byte[] || value is Binary) 					{ 						var par = db.Parameter("p" + ++pn' value); 						parameters.Add(par); 						sb.Append(":" + par.ParameterName); 					}  					else  						sp.BuildValue(sb' value);    					sb.Append("' ");  				}    				sb.Length -= 2;  				sb.AppendLine(")");    				n++;    				if (n >= maxBatchSize)  				{  					sb.AppendLine("SELECT * FROM dual");    					var sql = sb.ToString();    					if (DbManager.TraceSwitch.TraceInfo)  						DbManager.WriteTraceLine("\n" + sql.Replace("\r"' "")' DbManager.TraceSwitch.DisplayName);    					cnt += db 						.SetCommand(sql' parameters.Count > 0 ? parameters.ToArray() : null) 						.ExecuteNonQuery();   					parameters.Clear();  					pn = 0;  					n  = 0;  					sb.Length = 0;  				}  			}
Magic Number,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,InsertBatch,The following statement contains a magic number: foreach (var item in collection)  			{  				if (sb.Length == 0)  					sb.AppendLine("INSERT ALL");    				sb.Append(str);    				foreach (var member in members)  				{  					var value = member.GetValue(item);    					if (value != null && value.GetType().IsEnum)  						value = MappingSchema.MapEnumToValue(value' true);    					if (value is Nullable<DateTime>)  						value = ((DateTime?)value).Value;    					if (value is DateTime)  					{  						var dt = (DateTime)value;  						sb.Append(string.Format("to_timestamp('{0:dd.MM.yyyy HH:mm:ss.ffffff}'' 'DD.MM.YYYY HH24:MI:SS.FF6')"' dt));  					}  					else if ((value is string && ((string)value).Length >= 2000) || value is byte[] || value is Binary) 					{ 						var par = db.Parameter("p" + ++pn' value); 						parameters.Add(par); 						sb.Append(":" + par.ParameterName); 					}  					else  						sp.BuildValue(sb' value);    					sb.Append("' ");  				}    				sb.Length -= 2;  				sb.AppendLine(")");    				n++;    				if (n >= maxBatchSize)  				{  					sb.AppendLine("SELECT * FROM dual");    					var sql = sb.ToString();    					if (DbManager.TraceSwitch.TraceInfo)  						DbManager.WriteTraceLine("\n" + sql.Replace("\r"' "")' DbManager.TraceSwitch.DisplayName);    					cnt += db 						.SetCommand(sql' parameters.Count > 0 ? parameters.ToArray() : null) 						.ExecuteNonQuery();   					parameters.Clear();  					pn = 0;  					n  = 0;  					sb.Length = 0;  				}  			}
Magic Number,BLToolkit.Data.DataProvider,OracleDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetDecimal,The following statement contains a magic number: return OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(index)' 28).Value;
Magic Number,BLToolkit.Data.DataProvider,OracleDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetNullableDecimal,The following statement contains a magic number: return _dataReader.IsDBNull(index)? (decimal?)null: OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(index)' 28).Value;
Magic Number,BLToolkit.Data.DataProvider,OracleScalarDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetDecimal,The following statement contains a magic number: return OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(Index)' 28).Value;
Magic Number,BLToolkit.Data.DataProvider,OracleScalarDataReaderMapper,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,GetNullableDecimal,The following statement contains a magic number: return _dataReader.IsDBNull(index)? (decimal?)null: OracleDecimal.SetPrecision(_dataReader.GetOracleDecimal(Index)' 28).Value;
Missing Default,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,Convert,The following switch statement is missing a default case: switch (convertType)  			{  				case ConvertType.NameToCommandParameter:  				case ConvertType.NameToSprocParameter:  					return ParameterPrefix == null? value: ParameterPrefix + value;    				case ConvertType.SprocParameterToName:  					var name = (string)value;    					if (name.Length > 0)  					{  						if (name[0] == ':')  							return name.Substring(1);    						if (ParameterPrefix != null &&  							name.ToUpper(CultureInfo.InvariantCulture).StartsWith(ParameterPrefix))  						{  							return name.Substring(ParameterPrefix.Length);  						}  					}    					break;    				case ConvertType.ExceptionToErrorNumber:  					if (value is OracleException)  						return ((OracleException)value).Number;  					break;  			}
Missing Default,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following switch statement is missing a default case: switch (oraParameter.OracleDbType)  							{  								case OracleDbType.XmlType:  #if !MANAGED  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											new OracleXmlType((OracleConnection)command.Connection' xmlDocuments[i]);  									}    									oraParameter.Value = values;  									break;  #else  									throw new NotSupportedException();  #endif  								// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  								// so m_value.ToString() is not enought.  								//  								case OracleDbType.Clob:  								case OracleDbType.NClob:  								case OracleDbType.Varchar2:  								case OracleDbType.NVarchar2:  								case OracleDbType.Char:  								case OracleDbType.NChar:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										values[i] = xmlDocuments[i].DocumentElement == null?  											(object) DBNull.Value:  											xmlDocuments[i].InnerXml;  									}    									oraParameter.Value = values;    									break;    								// Or convert to bytes if need.  								//  								case OracleDbType.Blob:  								case OracleDbType.BFile:  								case OracleDbType.Raw:  								case OracleDbType.Long:  								case OracleDbType.LongRaw:  									for (var i = 0; i < oraParameter.Size; ++i)  									{  										if (xmlDocuments[i].DocumentElement == null)  											values[i] = DBNull.Value;  										else  											using (var s = new MemoryStream())  											{  												xmlDocuments[i].Save(s);  												values[i] = s.GetBuffer();  											}  									}    									oraParameter.Value = values;    									break;  							}
Missing Default,BLToolkit.Data.DataProvider,OdpManagedDataProvider,C:\repos\igor-tkachev_bltoolkit\Source\Data\DataProvider\OdpDataProvider.cs,AttachParameter,The following switch statement is missing a default case: switch (oraParameter.OracleDbType)  						{  							case OracleDbType.XmlType:  #if !MANAGED  								oraParameter.Value = new OracleXmlType((OracleConnection)command.Connection' xmlDocument);  								break;  #else  								throw new NotSupportedException();  #endif    							// Fix Oracle.Net bug #9: XmlDocument.ToString() returns System.Xml.XmlDocument'  							// so m_value.ToString() is not enought.  							//  							case OracleDbType.Clob:  							case OracleDbType.NClob:  							case OracleDbType.Varchar2:  							case OracleDbType.NVarchar2:  							case OracleDbType.Char:  							case OracleDbType.NChar:  								using (TextWriter w = new StringWriter())  								{  									xmlDocument.Save(w);  									oraParameter.Value = w.ToString();  								}  								break;    							// Or convert to bytes if need.  							//  							case OracleDbType.Blob:  							case OracleDbType.BFile:  							case OracleDbType.Raw:  							case OracleDbType.Long:  							case OracleDbType.LongRaw:  								using (var s = new MemoryStream())  								{  									xmlDocument.Save(s);  									oraParameter.Value = s.GetBuffer();  								}  								break;  						}
