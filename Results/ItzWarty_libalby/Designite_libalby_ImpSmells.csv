Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,CutLine,Cyclomatic complexity of the method is 16
Long Parameter List,Shade.Alby,SpiralParametricFunction,C:\repos\ItzWarty_libalby\SpiralParametricFunction.cs,SpiralParametricFunction,The method has 6 parameters.
Long Statement,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,FillRegion,The length of the statement  "		var candidates = seed.Connectors.Where (c => c.State == ConnectorState.Disconnected && !cells.Contains (c.Other (seed))).ToArray (); " is 132.
Magic Number,Shade.Alby,GridPosition,C:\repos\ItzWarty_libalby\GridPosition.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + X * 17;  
Magic Number,Shade.Alby,GridPosition,C:\repos\ItzWarty_libalby\GridPosition.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + X * 17;  
Magic Number,Shade.Alby,GridPosition,C:\repos\ItzWarty_libalby\GridPosition.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Y * 17;  
Magic Number,Shade.Alby,GridPosition,C:\repos\ItzWarty_libalby\GridPosition.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Y * 17;  
Magic Number,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,CutLine,The following statement contains a magic number: if (x1 > x2) {  	CutLine (x2' y2' x1' y1);  }  else {  	// detect snapped endpoints  	CutSnappedPoint (x1' y1);  	CutSnappedPoint (x2' y2);  	// note: this assumes down-right-ward  	var dx = x2 - x1;  	var dy = y2 - y1;  	bool upward = dy > 0;  	int cx = (int)Math.Floor (x1)' cy = upward ? (int)Math.Floor (y1) : (int)Math.Ceiling (y1);  	float x = x1' y = y1;  	var e = upward ? y - cy : cy - y;  	var dedx = Math.Abs (dy / dx);  	var dxde = 1.0f / dedx;  	var yStep = upward ? 1 : -1;  	if (Math.Abs (dx) < 0.001) {  		CutVerticalLine (x1' y1' x2' y2);  		return;  	}  	while (x < x2 || (y < y2 == upward)) {  		int nextX = cx + 1;  		var deToDx = dedx * (nextX - x);  		// Hit horizontal connector  		if (e + deToDx >= 1.0f) {  			var dxToNextE = (1.0f - e) * dxde;  			var nextY = y + (dy / dx) * dxToNextE;  			if ((nextY > y2) == upward) {  				// we're done  				break;  			}  			x += dxToNextE;  			y = nextY;  			e = 0;  			if (debugGraphicsContext != null)  				debugGraphicsContext.PlotPoint (new PointF (x' y));  			cy += yStep;  			var cell = grid.GetCellOrNull (cx' cy);  			if (cell != null) {  				if (cell.EastConnector != null) {  					cell.EastConnector.Break ();  				}  			}  		}  		else {  			if (nextX > x2) {  				// we're done  				break;  			}  			// hit vertical connector  			var dxToNextX = nextX - x;  			x = nextX;  			y += dxToNextX * dy / dx;  			e += dedx * dxToNextX;  			if (debugGraphicsContext != null)  				debugGraphicsContext.PlotPoint (new PointF (x' y));  			cx++;  			var cell = grid.GetCellOrNull (cx' cy);  			if (cell != null) {  				if (upward) {  					if (cell.SouthConnector != null) {  						cell.SouthConnector.Break ();  					}  				}  				else {  					if (cell.NorthConnector != null) {  						cell.NorthConnector.Break ();  					}  				}  			}  		}  	}  }  
Magic Number,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,CutLine,The following statement contains a magic number: if (Math.Abs (dx) < 0.001) {  	CutVerticalLine (x1' y1' x2' y2);  	return;  }  
Magic Number,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,CutSnappedPoint,The following statement contains a magic number: if (Math.Abs (x1 - snapX) < 0.001) {  	var y = (int)Math.Floor (y1);  	var cell = grid.GetCellOrNull (snapX' y);  	if (cell != null && cell.SouthConnector != null) {  		cell.SouthConnector.Break ();  	}  }  
Magic Number,Shade.Alby,SquareGridManipulator,C:\repos\ItzWarty_libalby\SquareGridManipulator.cs,CutSnappedPoint,The following statement contains a magic number: if (Math.Abs (y1 - snapY) < 0.001) {  	var x = (int)Math.Floor (x1);  	var cell = grid.GetCellOrNull (x' snapY);  	if (cell != null && cell.EastConnector != null) {  		cell.EastConnector.Break ();  	}  }  
