Implementation smell,Namespace,Class,File,Method,Description
Long Method,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The method has 263 lines of code.
Long Parameter List,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,HookPin,The method has 5 parameters.
Long Parameter List,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,OleCreatePropertyFrame,The method has 11 parameters.
Long Statement,TranscodeToMP4,GraphPlayer,C:\repos\jeffgriffin_Blog\TranscodeToMP4\GraphRenderer.cs,CreateRenderer,The length of the statement  "	IBaseFilter renderer = CreateVideoRenderer (WPFMediaKit.DirectShow.MediaPlayers.VideoRendererType.VideoMixingRenderer9' graph); " is 127.
Long Statement,TranscodeToMP4.Ref,ResourceReferenceResolver,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Ref\ResourceReferenceResolver.cs,GetResourceReferences,The length of the statement  "	return executingAssembly.GetManifestResourceNames ().Where (name => name.ToLower ().EndsWith (".dll")).Select<string' Assembly> (path => GetAssembly (path)); " is 157.
Long Statement,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,InitDispatcher,The length of the statement  "		AudioCompressorItems = new ObservableCollection<CompressorItem> (Enumerable.Repeat (new CompressorItem (PASSTHROUGH' () => CurrentAudioCompressorName = null' () => _currentAudioCompressor == null)' 1).Concat (_audioCompressors.Select<DsDevice' CompressorItem> (dev => new CompressorItem (dev.Name' () => CurrentAudioCompressorName = dev.Name' () => _currentAudioCompressor == dev)))); " is 384.
Long Statement,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,InitDispatcher,The length of the statement  "		VideoCompressorItems = new ObservableCollection<CompressorItem> (Enumerable.Repeat (new CompressorItem (PASSTHROUGH' () => CurrentVideoCompressorName = null' () => _currentVideoCompressor == null)' 1).Concat (_videoCompressors.Select<DsDevice' CompressorItem> (dev => new CompressorItem (dev.Name' () => CurrentVideoCompressorName = dev.Name' () => _currentVideoCompressor == dev)))); " is 384.
Long Statement,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,GetPinMediaSubType,The length of the statement  "	var memberinfo = typeof(MediaSubType).GetMembers (BindingFlags.Public | BindingFlags.Static).Concat (typeof(MissingMediaSubTypes).GetMembers (BindingFlags.Public | BindingFlags.Static)); " is 186.
Long Statement,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,ChooseSource,The length of the statement  "	mtsDialog.Filter = "Media Files(*.mp4;*.m4v;*.mkv;*.mts;*mt2s;*.tod;*.ogg;*.ogm;*.avi;*.mov)|*.mp4;*.m4v;*.mkv;*.mts;*mt2s;*.tod;*.ogg;*.ogm;*.avi;*.mov|All files (*.*)|*.*"; " is 174.
Long Statement,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,ShowFilterProperties,The length of the statement  "		err = OleCreatePropertyFrame (IntPtr.Zero' 0' 0' filterInfo.achName' 1' ref filterObject' caGuid.cElems' caGuid.pElems' 0' 0' IntPtr.Zero); " is 139.
Empty Catch Block,TranscodeToMP4,AboutDialog,C:\repos\jeffgriffin_Blog\TranscodeToMP4\AboutDialog.xaml.cs,HyperlinkRequestNavigate,The method has an empty catch block.
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		_isTranscoding = true;  		CancelCommand.RaiseCanExecuteChanged ();  		TranscodeCommand.RaiseCanExecuteChanged ();  		LogInfo ("Destroying preview graph...");  		DestroyPreviewGraph ();  		ConstructSharedGraph ();  		//set sync source to null to allow the graph to progress as quickly as possible  		IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  		int err;  		if (!UseClock) {  			err = mediaFilter.SetSyncSource (null);  			DsError.ThrowExceptionForHR (err);  		}  		LogInfo ("Rendering streams to null...");  		IBaseFilter nullVideo;  		IBaseFilter nullAudio;  		GetConnectNullRenderers (out nullVideo' out nullAudio);  		if (nullVideo == null)  			throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  		IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  		IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  		if (compressedVideoPin == null)  			throw new ApplicationException ("Unable to find compressed video stream.");  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		if (compressedAudioPin != null)  			compressedAudioPin.Disconnect ();  		err = _graphBuilder.RemoveFilter (nullVideo);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullVideo);  		err = _graphBuilder.RemoveFilter (nullAudio);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullAudio);  		LogInfo ("Adding Haali Matroska Muxer...");  		IBaseFilter muxer;  		muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  		if (muxer == null)  			throw new ApplicationException ("Haali Matroska Muxer not found.");  		//set the FileType on the multiplexer to MP4  		IPropertyBag muxerPB = (IPropertyBag)muxer;  		object pVar = 1;  		err = muxerPB.Write ("FileType"' ref pVar);  		DsError.ThrowExceptionForHR (err);  		IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  		string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  		LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  		err = muxerFS.SetFileName (tempPath' null);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter pinTeeVideo = null;  		if (ShowPreview) {  			pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  			if (pinTeeVideo == null)  				throw new ApplicationException ("Infinite Pin Tee Filter not found.");  		}  		if (_currentVideoCompressor != null) {  			if (ShowPreview) {  				LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  				//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  				IPin decoderPin = RenderForDumbPin (compressedVideoPin);  				err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  				DsError.ThrowExceptionForHR (err);  				HookPinDirect (decoderPin' pinTeeVideo' 0);  				_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  				IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  				err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  				DsError.ThrowExceptionForHR (err);  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				Marshal.ReleaseComObject (pinTee0);  				HookPin (pinTeeVideo' 1' _videoEncoder' 0);  				Marshal.ReleaseComObject (decoderPin);  			}  			else {  				LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  					throw new ApplicationException ("Unable to connect compressed video to video encoder");  			}  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			//HookPin(_videoEncoder' 0' muxer' 0);  			IPin direct;  			if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  				throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  			Marshal.ReleaseComObject (direct);  			//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  		}  		else if (ShowPreview) {  			LogInfo ("Rendering compressed video with preview...");  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			PinInfo decoderPinInfo;  			err = decoderPin.QueryPinInfo (out decoderPinInfo);  			DsError.ThrowExceptionForHR (err);  			IBaseFilter decoderFilter = decoderPinInfo.filter;  			DisconnectAll (decoderFilter);  			err = compressedVideoPin.Disconnect ();  			DsError.ThrowExceptionForHR (err);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' pinTeeVideo' 0);  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (pinTeeVideo' 0' muxer' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  			TryConnectToAny (pinTeeOut1' decoderFilter);  			HookPin (decoderPin' _videoRenderer' 0);  			//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  			//err = _graphBuilder.Render(decoderPin);  			//DsError.ThrowExceptionForHR(err);  			Marshal.ReleaseComObject (pinTeeOut1);  			Marshal.ReleaseComObject (decoderPin);  			//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  		}  		else {  			LogInfo ("Rendering compressed video without preview...");  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' muxer' 0);  		}  		Marshal.ReleaseComObject (compressedVideoPin);  		if (compressedAudioPin != null) {  			if (_currentAudioCompressor != null) {  				LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  				if (_audioEncoder == null)  					_audioEncoder = CreateAudioCompressorFilter ();  				err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  				DsError.ThrowExceptionForHR (err);  				HookPin (compressedAudioPin' _audioEncoder' 0);  				HookPinDirect (_audioEncoder' 0' muxer' 1);  			}  			else {  				LogInfo ("Rendering compressed audio...");  				HookPin (compressedAudioPin' muxer' 1);  			}  			Marshal.ReleaseComObject (compressedAudioPin);  		}  		LogInfo ("Filter built.  Running it...");  		err = _mediaCtrl.Run ();  		DsError.ThrowExceptionForHR (err);  		ProgressIsIndeterminate = false;  		RaisePropertyChanged ("ProgressIsIndeterminate");  		var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  		timer.Interval = TimeSpan.FromMilliseconds (500);  		int numElipses = 0;  		ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  		progressLogEntry.Brush = Brushes.White;  		CheckBeginInvokeUI<object> (delegate (object obj) {  			LogEntries.Add (progressLogEntry);  		}' null);  		timer.Tick += delegate {  			Dispatcher.BeginInvoke ((Action)delegate {  				lock (_syncGraph) {  					try {  						if (_graphBuilder == null)  							return;  						IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  						IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  						EventCode eventCode;  						double current = 0;  						double duration = 0;  						int waitRes = S_OK;  						if (!_cancelRequested)  							waitRes = medEvent.WaitForCompletion (1' out eventCode);  						if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  							LogInfo ("Finish signaled.  Stopping filter...");  							timer.Stop ();  							try {  								err = _mediaCtrl.StopWhenReady ();  								DestroyAudioEncoder ();  								DestroyVideoEncoder ();  								if (pinTeeVideo != null)  									Marshal.ReleaseComObject (pinTeeVideo);  								Marshal.ReleaseComObject (muxer);  								Marshal.ReleaseComObject (muxerPB);  								Marshal.ReleaseComObject (muxerFS);  								DestroyPreviewGraph ();  								Marshal.ReleaseComObject (mediaFilter);  								Marshal.ReleaseComObject (mediaPos);  								Marshal.ReleaseComObject (medEvent);  							}  							finally {  								CheckBeginInvokeUI<object> (delegate (object obj) {  									ProgressIsIndeterminate = false;  									RaisePropertyChanged ("ProgressIsIndeterminate");  									ProgressValue = 0;  									RaisePropertyChanged ("ProgressValue");  									progressLogEntry.Text = "Finished";  									LogInfo ("Graph Completed.");  									try {  										if (!_cancelRequested)  											ChooseDestination (tempPath);  									}  									catch (Exception e) {  										LogError (e);  										return;  									}  									File.Delete (tempPath);  									LogInfo ("Temporary file deleted.");  									_cancelRequested = false;  									_isTranscoding = false;  									TranscodeCommand.RaiseCanExecuteChanged ();  									CancelCommand.RaiseCanExecuteChanged ();  								}' null);  							}  						}  						else if (!_cancelRequested) {  							err = mediaPos.get_CurrentPosition (out current);  							err = mediaPos.get_Duration (out duration);  						}  						if (current < duration && !_cancelRequested) {  							ProgressValue = (current / duration) * 10000;  							RaisePropertyChanged ("ProgressValue");  							if (numElipses == 3)  								numElipses = 0;  							else  								numElipses++;  							StringBuilder sb = new StringBuilder ();  							for (int i = 0; i < numElipses; i++)  								sb.Append ('.');  							var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  							CheckBeginInvokeUI<object> (delegate (object obj) {  								progressLogEntry.Text = progressLogText;  							}' null);  						}  						else {  							ProgressIsIndeterminate = true;  							RaisePropertyChanged ("ProgressIsIndeterminate");  						}  					}  					catch (Exception e) {  						LogError (e);  					}  				}  			});  		};  		timer.Start ();  	}  	catch (Exception e) {  		LogError (e);  	}  	finally {  		_cancelRequested = false;  		_isTranscoding = false;  		TranscodeCommand.RaiseCanExecuteChanged ();  		CancelCommand.RaiseCanExecuteChanged ();  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		_isTranscoding = true;  		CancelCommand.RaiseCanExecuteChanged ();  		TranscodeCommand.RaiseCanExecuteChanged ();  		LogInfo ("Destroying preview graph...");  		DestroyPreviewGraph ();  		ConstructSharedGraph ();  		//set sync source to null to allow the graph to progress as quickly as possible  		IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  		int err;  		if (!UseClock) {  			err = mediaFilter.SetSyncSource (null);  			DsError.ThrowExceptionForHR (err);  		}  		LogInfo ("Rendering streams to null...");  		IBaseFilter nullVideo;  		IBaseFilter nullAudio;  		GetConnectNullRenderers (out nullVideo' out nullAudio);  		if (nullVideo == null)  			throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  		IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  		IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  		if (compressedVideoPin == null)  			throw new ApplicationException ("Unable to find compressed video stream.");  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		if (compressedAudioPin != null)  			compressedAudioPin.Disconnect ();  		err = _graphBuilder.RemoveFilter (nullVideo);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullVideo);  		err = _graphBuilder.RemoveFilter (nullAudio);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullAudio);  		LogInfo ("Adding Haali Matroska Muxer...");  		IBaseFilter muxer;  		muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  		if (muxer == null)  			throw new ApplicationException ("Haali Matroska Muxer not found.");  		//set the FileType on the multiplexer to MP4  		IPropertyBag muxerPB = (IPropertyBag)muxer;  		object pVar = 1;  		err = muxerPB.Write ("FileType"' ref pVar);  		DsError.ThrowExceptionForHR (err);  		IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  		string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  		LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  		err = muxerFS.SetFileName (tempPath' null);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter pinTeeVideo = null;  		if (ShowPreview) {  			pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  			if (pinTeeVideo == null)  				throw new ApplicationException ("Infinite Pin Tee Filter not found.");  		}  		if (_currentVideoCompressor != null) {  			if (ShowPreview) {  				LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  				//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  				IPin decoderPin = RenderForDumbPin (compressedVideoPin);  				err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  				DsError.ThrowExceptionForHR (err);  				HookPinDirect (decoderPin' pinTeeVideo' 0);  				_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  				IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  				err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  				DsError.ThrowExceptionForHR (err);  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				Marshal.ReleaseComObject (pinTee0);  				HookPin (pinTeeVideo' 1' _videoEncoder' 0);  				Marshal.ReleaseComObject (decoderPin);  			}  			else {  				LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  					throw new ApplicationException ("Unable to connect compressed video to video encoder");  			}  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			//HookPin(_videoEncoder' 0' muxer' 0);  			IPin direct;  			if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  				throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  			Marshal.ReleaseComObject (direct);  			//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  		}  		else if (ShowPreview) {  			LogInfo ("Rendering compressed video with preview...");  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			PinInfo decoderPinInfo;  			err = decoderPin.QueryPinInfo (out decoderPinInfo);  			DsError.ThrowExceptionForHR (err);  			IBaseFilter decoderFilter = decoderPinInfo.filter;  			DisconnectAll (decoderFilter);  			err = compressedVideoPin.Disconnect ();  			DsError.ThrowExceptionForHR (err);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' pinTeeVideo' 0);  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (pinTeeVideo' 0' muxer' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  			TryConnectToAny (pinTeeOut1' decoderFilter);  			HookPin (decoderPin' _videoRenderer' 0);  			//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  			//err = _graphBuilder.Render(decoderPin);  			//DsError.ThrowExceptionForHR(err);  			Marshal.ReleaseComObject (pinTeeOut1);  			Marshal.ReleaseComObject (decoderPin);  			//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  		}  		else {  			LogInfo ("Rendering compressed video without preview...");  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' muxer' 0);  		}  		Marshal.ReleaseComObject (compressedVideoPin);  		if (compressedAudioPin != null) {  			if (_currentAudioCompressor != null) {  				LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  				if (_audioEncoder == null)  					_audioEncoder = CreateAudioCompressorFilter ();  				err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  				DsError.ThrowExceptionForHR (err);  				HookPin (compressedAudioPin' _audioEncoder' 0);  				HookPinDirect (_audioEncoder' 0' muxer' 1);  			}  			else {  				LogInfo ("Rendering compressed audio...");  				HookPin (compressedAudioPin' muxer' 1);  			}  			Marshal.ReleaseComObject (compressedAudioPin);  		}  		LogInfo ("Filter built.  Running it...");  		err = _mediaCtrl.Run ();  		DsError.ThrowExceptionForHR (err);  		ProgressIsIndeterminate = false;  		RaisePropertyChanged ("ProgressIsIndeterminate");  		var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  		timer.Interval = TimeSpan.FromMilliseconds (500);  		int numElipses = 0;  		ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  		progressLogEntry.Brush = Brushes.White;  		CheckBeginInvokeUI<object> (delegate (object obj) {  			LogEntries.Add (progressLogEntry);  		}' null);  		timer.Tick += delegate {  			Dispatcher.BeginInvoke ((Action)delegate {  				lock (_syncGraph) {  					try {  						if (_graphBuilder == null)  							return;  						IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  						IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  						EventCode eventCode;  						double current = 0;  						double duration = 0;  						int waitRes = S_OK;  						if (!_cancelRequested)  							waitRes = medEvent.WaitForCompletion (1' out eventCode);  						if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  							LogInfo ("Finish signaled.  Stopping filter...");  							timer.Stop ();  							try {  								err = _mediaCtrl.StopWhenReady ();  								DestroyAudioEncoder ();  								DestroyVideoEncoder ();  								if (pinTeeVideo != null)  									Marshal.ReleaseComObject (pinTeeVideo);  								Marshal.ReleaseComObject (muxer);  								Marshal.ReleaseComObject (muxerPB);  								Marshal.ReleaseComObject (muxerFS);  								DestroyPreviewGraph ();  								Marshal.ReleaseComObject (mediaFilter);  								Marshal.ReleaseComObject (mediaPos);  								Marshal.ReleaseComObject (medEvent);  							}  							finally {  								CheckBeginInvokeUI<object> (delegate (object obj) {  									ProgressIsIndeterminate = false;  									RaisePropertyChanged ("ProgressIsIndeterminate");  									ProgressValue = 0;  									RaisePropertyChanged ("ProgressValue");  									progressLogEntry.Text = "Finished";  									LogInfo ("Graph Completed.");  									try {  										if (!_cancelRequested)  											ChooseDestination (tempPath);  									}  									catch (Exception e) {  										LogError (e);  										return;  									}  									File.Delete (tempPath);  									LogInfo ("Temporary file deleted.");  									_cancelRequested = false;  									_isTranscoding = false;  									TranscodeCommand.RaiseCanExecuteChanged ();  									CancelCommand.RaiseCanExecuteChanged ();  								}' null);  							}  						}  						else if (!_cancelRequested) {  							err = mediaPos.get_CurrentPosition (out current);  							err = mediaPos.get_Duration (out duration);  						}  						if (current < duration && !_cancelRequested) {  							ProgressValue = (current / duration) * 10000;  							RaisePropertyChanged ("ProgressValue");  							if (numElipses == 3)  								numElipses = 0;  							else  								numElipses++;  							StringBuilder sb = new StringBuilder ();  							for (int i = 0; i < numElipses; i++)  								sb.Append ('.');  							var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  							CheckBeginInvokeUI<object> (delegate (object obj) {  								progressLogEntry.Text = progressLogText;  							}' null);  						}  						else {  							ProgressIsIndeterminate = true;  							RaisePropertyChanged ("ProgressIsIndeterminate");  						}  					}  					catch (Exception e) {  						LogError (e);  					}  				}  			});  		};  		timer.Start ();  	}  	catch (Exception e) {  		LogError (e);  	}  	finally {  		_cancelRequested = false;  		_isTranscoding = false;  		TranscodeCommand.RaiseCanExecuteChanged ();  		CancelCommand.RaiseCanExecuteChanged ();  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		_isTranscoding = true;  		CancelCommand.RaiseCanExecuteChanged ();  		TranscodeCommand.RaiseCanExecuteChanged ();  		LogInfo ("Destroying preview graph...");  		DestroyPreviewGraph ();  		ConstructSharedGraph ();  		//set sync source to null to allow the graph to progress as quickly as possible  		IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  		int err;  		if (!UseClock) {  			err = mediaFilter.SetSyncSource (null);  			DsError.ThrowExceptionForHR (err);  		}  		LogInfo ("Rendering streams to null...");  		IBaseFilter nullVideo;  		IBaseFilter nullAudio;  		GetConnectNullRenderers (out nullVideo' out nullAudio);  		if (nullVideo == null)  			throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  		IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  		IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  		if (compressedVideoPin == null)  			throw new ApplicationException ("Unable to find compressed video stream.");  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		if (compressedAudioPin != null)  			compressedAudioPin.Disconnect ();  		err = _graphBuilder.RemoveFilter (nullVideo);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullVideo);  		err = _graphBuilder.RemoveFilter (nullAudio);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullAudio);  		LogInfo ("Adding Haali Matroska Muxer...");  		IBaseFilter muxer;  		muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  		if (muxer == null)  			throw new ApplicationException ("Haali Matroska Muxer not found.");  		//set the FileType on the multiplexer to MP4  		IPropertyBag muxerPB = (IPropertyBag)muxer;  		object pVar = 1;  		err = muxerPB.Write ("FileType"' ref pVar);  		DsError.ThrowExceptionForHR (err);  		IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  		string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  		LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  		err = muxerFS.SetFileName (tempPath' null);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter pinTeeVideo = null;  		if (ShowPreview) {  			pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  			if (pinTeeVideo == null)  				throw new ApplicationException ("Infinite Pin Tee Filter not found.");  		}  		if (_currentVideoCompressor != null) {  			if (ShowPreview) {  				LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  				//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  				IPin decoderPin = RenderForDumbPin (compressedVideoPin);  				err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  				DsError.ThrowExceptionForHR (err);  				HookPinDirect (decoderPin' pinTeeVideo' 0);  				_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  				IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  				err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  				DsError.ThrowExceptionForHR (err);  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				Marshal.ReleaseComObject (pinTee0);  				HookPin (pinTeeVideo' 1' _videoEncoder' 0);  				Marshal.ReleaseComObject (decoderPin);  			}  			else {  				LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  					throw new ApplicationException ("Unable to connect compressed video to video encoder");  			}  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			//HookPin(_videoEncoder' 0' muxer' 0);  			IPin direct;  			if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  				throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  			Marshal.ReleaseComObject (direct);  			//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  		}  		else if (ShowPreview) {  			LogInfo ("Rendering compressed video with preview...");  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			PinInfo decoderPinInfo;  			err = decoderPin.QueryPinInfo (out decoderPinInfo);  			DsError.ThrowExceptionForHR (err);  			IBaseFilter decoderFilter = decoderPinInfo.filter;  			DisconnectAll (decoderFilter);  			err = compressedVideoPin.Disconnect ();  			DsError.ThrowExceptionForHR (err);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' pinTeeVideo' 0);  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (pinTeeVideo' 0' muxer' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  			TryConnectToAny (pinTeeOut1' decoderFilter);  			HookPin (decoderPin' _videoRenderer' 0);  			//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  			//err = _graphBuilder.Render(decoderPin);  			//DsError.ThrowExceptionForHR(err);  			Marshal.ReleaseComObject (pinTeeOut1);  			Marshal.ReleaseComObject (decoderPin);  			//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  		}  		else {  			LogInfo ("Rendering compressed video without preview...");  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' muxer' 0);  		}  		Marshal.ReleaseComObject (compressedVideoPin);  		if (compressedAudioPin != null) {  			if (_currentAudioCompressor != null) {  				LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  				if (_audioEncoder == null)  					_audioEncoder = CreateAudioCompressorFilter ();  				err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  				DsError.ThrowExceptionForHR (err);  				HookPin (compressedAudioPin' _audioEncoder' 0);  				HookPinDirect (_audioEncoder' 0' muxer' 1);  			}  			else {  				LogInfo ("Rendering compressed audio...");  				HookPin (compressedAudioPin' muxer' 1);  			}  			Marshal.ReleaseComObject (compressedAudioPin);  		}  		LogInfo ("Filter built.  Running it...");  		err = _mediaCtrl.Run ();  		DsError.ThrowExceptionForHR (err);  		ProgressIsIndeterminate = false;  		RaisePropertyChanged ("ProgressIsIndeterminate");  		var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  		timer.Interval = TimeSpan.FromMilliseconds (500);  		int numElipses = 0;  		ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  		progressLogEntry.Brush = Brushes.White;  		CheckBeginInvokeUI<object> (delegate (object obj) {  			LogEntries.Add (progressLogEntry);  		}' null);  		timer.Tick += delegate {  			Dispatcher.BeginInvoke ((Action)delegate {  				lock (_syncGraph) {  					try {  						if (_graphBuilder == null)  							return;  						IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  						IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  						EventCode eventCode;  						double current = 0;  						double duration = 0;  						int waitRes = S_OK;  						if (!_cancelRequested)  							waitRes = medEvent.WaitForCompletion (1' out eventCode);  						if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  							LogInfo ("Finish signaled.  Stopping filter...");  							timer.Stop ();  							try {  								err = _mediaCtrl.StopWhenReady ();  								DestroyAudioEncoder ();  								DestroyVideoEncoder ();  								if (pinTeeVideo != null)  									Marshal.ReleaseComObject (pinTeeVideo);  								Marshal.ReleaseComObject (muxer);  								Marshal.ReleaseComObject (muxerPB);  								Marshal.ReleaseComObject (muxerFS);  								DestroyPreviewGraph ();  								Marshal.ReleaseComObject (mediaFilter);  								Marshal.ReleaseComObject (mediaPos);  								Marshal.ReleaseComObject (medEvent);  							}  							finally {  								CheckBeginInvokeUI<object> (delegate (object obj) {  									ProgressIsIndeterminate = false;  									RaisePropertyChanged ("ProgressIsIndeterminate");  									ProgressValue = 0;  									RaisePropertyChanged ("ProgressValue");  									progressLogEntry.Text = "Finished";  									LogInfo ("Graph Completed.");  									try {  										if (!_cancelRequested)  											ChooseDestination (tempPath);  									}  									catch (Exception e) {  										LogError (e);  										return;  									}  									File.Delete (tempPath);  									LogInfo ("Temporary file deleted.");  									_cancelRequested = false;  									_isTranscoding = false;  									TranscodeCommand.RaiseCanExecuteChanged ();  									CancelCommand.RaiseCanExecuteChanged ();  								}' null);  							}  						}  						else if (!_cancelRequested) {  							err = mediaPos.get_CurrentPosition (out current);  							err = mediaPos.get_Duration (out duration);  						}  						if (current < duration && !_cancelRequested) {  							ProgressValue = (current / duration) * 10000;  							RaisePropertyChanged ("ProgressValue");  							if (numElipses == 3)  								numElipses = 0;  							else  								numElipses++;  							StringBuilder sb = new StringBuilder ();  							for (int i = 0; i < numElipses; i++)  								sb.Append ('.');  							var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  							CheckBeginInvokeUI<object> (delegate (object obj) {  								progressLogEntry.Text = progressLogText;  							}' null);  						}  						else {  							ProgressIsIndeterminate = true;  							RaisePropertyChanged ("ProgressIsIndeterminate");  						}  					}  					catch (Exception e) {  						LogError (e);  					}  				}  			});  		};  		timer.Start ();  	}  	catch (Exception e) {  		LogError (e);  	}  	finally {  		_cancelRequested = false;  		_isTranscoding = false;  		TranscodeCommand.RaiseCanExecuteChanged ();  		CancelCommand.RaiseCanExecuteChanged ();  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		_isTranscoding = true;  		CancelCommand.RaiseCanExecuteChanged ();  		TranscodeCommand.RaiseCanExecuteChanged ();  		LogInfo ("Destroying preview graph...");  		DestroyPreviewGraph ();  		ConstructSharedGraph ();  		//set sync source to null to allow the graph to progress as quickly as possible  		IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  		int err;  		if (!UseClock) {  			err = mediaFilter.SetSyncSource (null);  			DsError.ThrowExceptionForHR (err);  		}  		LogInfo ("Rendering streams to null...");  		IBaseFilter nullVideo;  		IBaseFilter nullAudio;  		GetConnectNullRenderers (out nullVideo' out nullAudio);  		if (nullVideo == null)  			throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  		IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  		IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  		if (compressedVideoPin == null)  			throw new ApplicationException ("Unable to find compressed video stream.");  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		if (compressedAudioPin != null)  			compressedAudioPin.Disconnect ();  		err = _graphBuilder.RemoveFilter (nullVideo);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullVideo);  		err = _graphBuilder.RemoveFilter (nullAudio);  		DsError.ThrowExceptionForHR (err);  		Marshal.ReleaseComObject (nullAudio);  		LogInfo ("Adding Haali Matroska Muxer...");  		IBaseFilter muxer;  		muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  		if (muxer == null)  			throw new ApplicationException ("Haali Matroska Muxer not found.");  		//set the FileType on the multiplexer to MP4  		IPropertyBag muxerPB = (IPropertyBag)muxer;  		object pVar = 1;  		err = muxerPB.Write ("FileType"' ref pVar);  		DsError.ThrowExceptionForHR (err);  		IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  		string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  		LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  		err = muxerFS.SetFileName (tempPath' null);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter pinTeeVideo = null;  		if (ShowPreview) {  			pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  			if (pinTeeVideo == null)  				throw new ApplicationException ("Infinite Pin Tee Filter not found.");  		}  		if (_currentVideoCompressor != null) {  			if (ShowPreview) {  				LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  				//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  				IPin decoderPin = RenderForDumbPin (compressedVideoPin);  				err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  				DsError.ThrowExceptionForHR (err);  				HookPinDirect (decoderPin' pinTeeVideo' 0);  				_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  				IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  				err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  				DsError.ThrowExceptionForHR (err);  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				Marshal.ReleaseComObject (pinTee0);  				HookPin (pinTeeVideo' 1' _videoEncoder' 0);  				Marshal.ReleaseComObject (decoderPin);  			}  			else {  				LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  				if (_videoEncoder == null)  					_videoEncoder = CreateVideoCompressorFilter ();  				err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  				DsError.ThrowExceptionForHR (err);  				if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  					throw new ApplicationException ("Unable to connect compressed video to video encoder");  			}  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			//HookPin(_videoEncoder' 0' muxer' 0);  			IPin direct;  			if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  				throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  			Marshal.ReleaseComObject (direct);  			//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  		}  		else if (ShowPreview) {  			LogInfo ("Rendering compressed video with preview...");  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			PinInfo decoderPinInfo;  			err = decoderPin.QueryPinInfo (out decoderPinInfo);  			DsError.ThrowExceptionForHR (err);  			IBaseFilter decoderFilter = decoderPinInfo.filter;  			DisconnectAll (decoderFilter);  			err = compressedVideoPin.Disconnect ();  			DsError.ThrowExceptionForHR (err);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' pinTeeVideo' 0);  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (pinTeeVideo' 0' muxer' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  			TryConnectToAny (pinTeeOut1' decoderFilter);  			HookPin (decoderPin' _videoRenderer' 0);  			//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  			//err = _graphBuilder.Render(decoderPin);  			//DsError.ThrowExceptionForHR(err);  			Marshal.ReleaseComObject (pinTeeOut1);  			Marshal.ReleaseComObject (decoderPin);  			//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  		}  		else {  			LogInfo ("Rendering compressed video without preview...");  			err = _graphBuilder.AddFilter (muxer' "muxer");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedVideoPin' muxer' 0);  		}  		Marshal.ReleaseComObject (compressedVideoPin);  		if (compressedAudioPin != null) {  			if (_currentAudioCompressor != null) {  				LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  				if (_audioEncoder == null)  					_audioEncoder = CreateAudioCompressorFilter ();  				err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  				DsError.ThrowExceptionForHR (err);  				HookPin (compressedAudioPin' _audioEncoder' 0);  				HookPinDirect (_audioEncoder' 0' muxer' 1);  			}  			else {  				LogInfo ("Rendering compressed audio...");  				HookPin (compressedAudioPin' muxer' 1);  			}  			Marshal.ReleaseComObject (compressedAudioPin);  		}  		LogInfo ("Filter built.  Running it...");  		err = _mediaCtrl.Run ();  		DsError.ThrowExceptionForHR (err);  		ProgressIsIndeterminate = false;  		RaisePropertyChanged ("ProgressIsIndeterminate");  		var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  		timer.Interval = TimeSpan.FromMilliseconds (500);  		int numElipses = 0;  		ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  		progressLogEntry.Brush = Brushes.White;  		CheckBeginInvokeUI<object> (delegate (object obj) {  			LogEntries.Add (progressLogEntry);  		}' null);  		timer.Tick += delegate {  			Dispatcher.BeginInvoke ((Action)delegate {  				lock (_syncGraph) {  					try {  						if (_graphBuilder == null)  							return;  						IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  						IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  						EventCode eventCode;  						double current = 0;  						double duration = 0;  						int waitRes = S_OK;  						if (!_cancelRequested)  							waitRes = medEvent.WaitForCompletion (1' out eventCode);  						if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  							LogInfo ("Finish signaled.  Stopping filter...");  							timer.Stop ();  							try {  								err = _mediaCtrl.StopWhenReady ();  								DestroyAudioEncoder ();  								DestroyVideoEncoder ();  								if (pinTeeVideo != null)  									Marshal.ReleaseComObject (pinTeeVideo);  								Marshal.ReleaseComObject (muxer);  								Marshal.ReleaseComObject (muxerPB);  								Marshal.ReleaseComObject (muxerFS);  								DestroyPreviewGraph ();  								Marshal.ReleaseComObject (mediaFilter);  								Marshal.ReleaseComObject (mediaPos);  								Marshal.ReleaseComObject (medEvent);  							}  							finally {  								CheckBeginInvokeUI<object> (delegate (object obj) {  									ProgressIsIndeterminate = false;  									RaisePropertyChanged ("ProgressIsIndeterminate");  									ProgressValue = 0;  									RaisePropertyChanged ("ProgressValue");  									progressLogEntry.Text = "Finished";  									LogInfo ("Graph Completed.");  									try {  										if (!_cancelRequested)  											ChooseDestination (tempPath);  									}  									catch (Exception e) {  										LogError (e);  										return;  									}  									File.Delete (tempPath);  									LogInfo ("Temporary file deleted.");  									_cancelRequested = false;  									_isTranscoding = false;  									TranscodeCommand.RaiseCanExecuteChanged ();  									CancelCommand.RaiseCanExecuteChanged ();  								}' null);  							}  						}  						else if (!_cancelRequested) {  							err = mediaPos.get_CurrentPosition (out current);  							err = mediaPos.get_Duration (out duration);  						}  						if (current < duration && !_cancelRequested) {  							ProgressValue = (current / duration) * 10000;  							RaisePropertyChanged ("ProgressValue");  							if (numElipses == 3)  								numElipses = 0;  							else  								numElipses++;  							StringBuilder sb = new StringBuilder ();  							for (int i = 0; i < numElipses; i++)  								sb.Append ('.');  							var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  							CheckBeginInvokeUI<object> (delegate (object obj) {  								progressLogEntry.Text = progressLogText;  							}' null);  						}  						else {  							ProgressIsIndeterminate = true;  							RaisePropertyChanged ("ProgressIsIndeterminate");  						}  					}  					catch (Exception e) {  						LogError (e);  					}  				}  			});  		};  		timer.Start ();  	}  	catch (Exception e) {  		LogError (e);  	}  	finally {  		_cancelRequested = false;  		_isTranscoding = false;  		TranscodeCommand.RaiseCanExecuteChanged ();  		CancelCommand.RaiseCanExecuteChanged ();  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	_isTranscoding = true;  	CancelCommand.RaiseCanExecuteChanged ();  	TranscodeCommand.RaiseCanExecuteChanged ();  	LogInfo ("Destroying preview graph...");  	DestroyPreviewGraph ();  	ConstructSharedGraph ();  	//set sync source to null to allow the graph to progress as quickly as possible  	IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  	int err;  	if (!UseClock) {  		err = mediaFilter.SetSyncSource (null);  		DsError.ThrowExceptionForHR (err);  	}  	LogInfo ("Rendering streams to null...");  	IBaseFilter nullVideo;  	IBaseFilter nullAudio;  	GetConnectNullRenderers (out nullVideo' out nullAudio);  	if (nullVideo == null)  		throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  	IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  	IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  	if (compressedVideoPin == null)  		throw new ApplicationException ("Unable to find compressed video stream.");  	err = compressedVideoPin.Disconnect ();  	DsError.ThrowExceptionForHR (err);  	if (compressedAudioPin != null)  		compressedAudioPin.Disconnect ();  	err = _graphBuilder.RemoveFilter (nullVideo);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullVideo);  	err = _graphBuilder.RemoveFilter (nullAudio);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullAudio);  	LogInfo ("Adding Haali Matroska Muxer...");  	IBaseFilter muxer;  	muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  	if (muxer == null)  		throw new ApplicationException ("Haali Matroska Muxer not found.");  	//set the FileType on the multiplexer to MP4  	IPropertyBag muxerPB = (IPropertyBag)muxer;  	object pVar = 1;  	err = muxerPB.Write ("FileType"' ref pVar);  	DsError.ThrowExceptionForHR (err);  	IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  	string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  	LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  	err = muxerFS.SetFileName (tempPath' null);  	DsError.ThrowExceptionForHR (err);  	IBaseFilter pinTeeVideo = null;  	if (ShowPreview) {  		pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  		if (pinTeeVideo == null)  			throw new ApplicationException ("Infinite Pin Tee Filter not found.");  	}  	if (_currentVideoCompressor != null) {  		if (ShowPreview) {  			LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  			//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPinDirect (decoderPin' pinTeeVideo' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  			err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  			DsError.ThrowExceptionForHR (err);  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			Marshal.ReleaseComObject (pinTee0);  			HookPin (pinTeeVideo' 1' _videoEncoder' 0);  			Marshal.ReleaseComObject (decoderPin);  		}  		else {  			LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  				throw new ApplicationException ("Unable to connect compressed video to video encoder");  		}  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		//HookPin(_videoEncoder' 0' muxer' 0);  		IPin direct;  		if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  			throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  		Marshal.ReleaseComObject (direct);  		//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  	}  	else if (ShowPreview) {  		LogInfo ("Rendering compressed video with preview...");  		IPin decoderPin = RenderForDumbPin (compressedVideoPin);  		PinInfo decoderPinInfo;  		err = decoderPin.QueryPinInfo (out decoderPinInfo);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter decoderFilter = decoderPinInfo.filter;  		DisconnectAll (decoderFilter);  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' pinTeeVideo' 0);  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (pinTeeVideo' 0' muxer' 0);  		_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  		IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  		TryConnectToAny (pinTeeOut1' decoderFilter);  		HookPin (decoderPin' _videoRenderer' 0);  		//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  		//err = _graphBuilder.Render(decoderPin);  		//DsError.ThrowExceptionForHR(err);  		Marshal.ReleaseComObject (pinTeeOut1);  		Marshal.ReleaseComObject (decoderPin);  		//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  	}  	else {  		LogInfo ("Rendering compressed video without preview...");  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' muxer' 0);  	}  	Marshal.ReleaseComObject (compressedVideoPin);  	if (compressedAudioPin != null) {  		if (_currentAudioCompressor != null) {  			LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  			if (_audioEncoder == null)  				_audioEncoder = CreateAudioCompressorFilter ();  			err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedAudioPin' _audioEncoder' 0);  			HookPinDirect (_audioEncoder' 0' muxer' 1);  		}  		else {  			LogInfo ("Rendering compressed audio...");  			HookPin (compressedAudioPin' muxer' 1);  		}  		Marshal.ReleaseComObject (compressedAudioPin);  	}  	LogInfo ("Filter built.  Running it...");  	err = _mediaCtrl.Run ();  	DsError.ThrowExceptionForHR (err);  	ProgressIsIndeterminate = false;  	RaisePropertyChanged ("ProgressIsIndeterminate");  	var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  	timer.Interval = TimeSpan.FromMilliseconds (500);  	int numElipses = 0;  	ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  	progressLogEntry.Brush = Brushes.White;  	CheckBeginInvokeUI<object> (delegate (object obj) {  		LogEntries.Add (progressLogEntry);  	}' null);  	timer.Tick += delegate {  		Dispatcher.BeginInvoke ((Action)delegate {  			lock (_syncGraph) {  				try {  					if (_graphBuilder == null)  						return;  					IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  					IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  					EventCode eventCode;  					double current = 0;  					double duration = 0;  					int waitRes = S_OK;  					if (!_cancelRequested)  						waitRes = medEvent.WaitForCompletion (1' out eventCode);  					if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  						LogInfo ("Finish signaled.  Stopping filter...");  						timer.Stop ();  						try {  							err = _mediaCtrl.StopWhenReady ();  							DestroyAudioEncoder ();  							DestroyVideoEncoder ();  							if (pinTeeVideo != null)  								Marshal.ReleaseComObject (pinTeeVideo);  							Marshal.ReleaseComObject (muxer);  							Marshal.ReleaseComObject (muxerPB);  							Marshal.ReleaseComObject (muxerFS);  							DestroyPreviewGraph ();  							Marshal.ReleaseComObject (mediaFilter);  							Marshal.ReleaseComObject (mediaPos);  							Marshal.ReleaseComObject (medEvent);  						}  						finally {  							CheckBeginInvokeUI<object> (delegate (object obj) {  								ProgressIsIndeterminate = false;  								RaisePropertyChanged ("ProgressIsIndeterminate");  								ProgressValue = 0;  								RaisePropertyChanged ("ProgressValue");  								progressLogEntry.Text = "Finished";  								LogInfo ("Graph Completed.");  								try {  									if (!_cancelRequested)  										ChooseDestination (tempPath);  								}  								catch (Exception e) {  									LogError (e);  									return;  								}  								File.Delete (tempPath);  								LogInfo ("Temporary file deleted.");  								_cancelRequested = false;  								_isTranscoding = false;  								TranscodeCommand.RaiseCanExecuteChanged ();  								CancelCommand.RaiseCanExecuteChanged ();  							}' null);  						}  					}  					else if (!_cancelRequested) {  						err = mediaPos.get_CurrentPosition (out current);  						err = mediaPos.get_Duration (out duration);  					}  					if (current < duration && !_cancelRequested) {  						ProgressValue = (current / duration) * 10000;  						RaisePropertyChanged ("ProgressValue");  						if (numElipses == 3)  							numElipses = 0;  						else  							numElipses++;  						StringBuilder sb = new StringBuilder ();  						for (int i = 0; i < numElipses; i++)  							sb.Append ('.');  						var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  						CheckBeginInvokeUI<object> (delegate (object obj) {  							progressLogEntry.Text = progressLogText;  						}' null);  					}  					else {  						ProgressIsIndeterminate = true;  						RaisePropertyChanged ("ProgressIsIndeterminate");  					}  				}  				catch (Exception e) {  					LogError (e);  				}  			}  		});  	};  	timer.Start ();  }  catch (Exception e) {  	LogError (e);  }  finally {  	_cancelRequested = false;  	_isTranscoding = false;  	TranscodeCommand.RaiseCanExecuteChanged ();  	CancelCommand.RaiseCanExecuteChanged ();  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	_isTranscoding = true;  	CancelCommand.RaiseCanExecuteChanged ();  	TranscodeCommand.RaiseCanExecuteChanged ();  	LogInfo ("Destroying preview graph...");  	DestroyPreviewGraph ();  	ConstructSharedGraph ();  	//set sync source to null to allow the graph to progress as quickly as possible  	IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  	int err;  	if (!UseClock) {  		err = mediaFilter.SetSyncSource (null);  		DsError.ThrowExceptionForHR (err);  	}  	LogInfo ("Rendering streams to null...");  	IBaseFilter nullVideo;  	IBaseFilter nullAudio;  	GetConnectNullRenderers (out nullVideo' out nullAudio);  	if (nullVideo == null)  		throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  	IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  	IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  	if (compressedVideoPin == null)  		throw new ApplicationException ("Unable to find compressed video stream.");  	err = compressedVideoPin.Disconnect ();  	DsError.ThrowExceptionForHR (err);  	if (compressedAudioPin != null)  		compressedAudioPin.Disconnect ();  	err = _graphBuilder.RemoveFilter (nullVideo);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullVideo);  	err = _graphBuilder.RemoveFilter (nullAudio);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullAudio);  	LogInfo ("Adding Haali Matroska Muxer...");  	IBaseFilter muxer;  	muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  	if (muxer == null)  		throw new ApplicationException ("Haali Matroska Muxer not found.");  	//set the FileType on the multiplexer to MP4  	IPropertyBag muxerPB = (IPropertyBag)muxer;  	object pVar = 1;  	err = muxerPB.Write ("FileType"' ref pVar);  	DsError.ThrowExceptionForHR (err);  	IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  	string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  	LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  	err = muxerFS.SetFileName (tempPath' null);  	DsError.ThrowExceptionForHR (err);  	IBaseFilter pinTeeVideo = null;  	if (ShowPreview) {  		pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  		if (pinTeeVideo == null)  			throw new ApplicationException ("Infinite Pin Tee Filter not found.");  	}  	if (_currentVideoCompressor != null) {  		if (ShowPreview) {  			LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  			//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPinDirect (decoderPin' pinTeeVideo' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  			err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  			DsError.ThrowExceptionForHR (err);  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			Marshal.ReleaseComObject (pinTee0);  			HookPin (pinTeeVideo' 1' _videoEncoder' 0);  			Marshal.ReleaseComObject (decoderPin);  		}  		else {  			LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  				throw new ApplicationException ("Unable to connect compressed video to video encoder");  		}  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		//HookPin(_videoEncoder' 0' muxer' 0);  		IPin direct;  		if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  			throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  		Marshal.ReleaseComObject (direct);  		//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  	}  	else if (ShowPreview) {  		LogInfo ("Rendering compressed video with preview...");  		IPin decoderPin = RenderForDumbPin (compressedVideoPin);  		PinInfo decoderPinInfo;  		err = decoderPin.QueryPinInfo (out decoderPinInfo);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter decoderFilter = decoderPinInfo.filter;  		DisconnectAll (decoderFilter);  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' pinTeeVideo' 0);  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (pinTeeVideo' 0' muxer' 0);  		_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  		IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  		TryConnectToAny (pinTeeOut1' decoderFilter);  		HookPin (decoderPin' _videoRenderer' 0);  		//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  		//err = _graphBuilder.Render(decoderPin);  		//DsError.ThrowExceptionForHR(err);  		Marshal.ReleaseComObject (pinTeeOut1);  		Marshal.ReleaseComObject (decoderPin);  		//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  	}  	else {  		LogInfo ("Rendering compressed video without preview...");  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' muxer' 0);  	}  	Marshal.ReleaseComObject (compressedVideoPin);  	if (compressedAudioPin != null) {  		if (_currentAudioCompressor != null) {  			LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  			if (_audioEncoder == null)  				_audioEncoder = CreateAudioCompressorFilter ();  			err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedAudioPin' _audioEncoder' 0);  			HookPinDirect (_audioEncoder' 0' muxer' 1);  		}  		else {  			LogInfo ("Rendering compressed audio...");  			HookPin (compressedAudioPin' muxer' 1);  		}  		Marshal.ReleaseComObject (compressedAudioPin);  	}  	LogInfo ("Filter built.  Running it...");  	err = _mediaCtrl.Run ();  	DsError.ThrowExceptionForHR (err);  	ProgressIsIndeterminate = false;  	RaisePropertyChanged ("ProgressIsIndeterminate");  	var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  	timer.Interval = TimeSpan.FromMilliseconds (500);  	int numElipses = 0;  	ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  	progressLogEntry.Brush = Brushes.White;  	CheckBeginInvokeUI<object> (delegate (object obj) {  		LogEntries.Add (progressLogEntry);  	}' null);  	timer.Tick += delegate {  		Dispatcher.BeginInvoke ((Action)delegate {  			lock (_syncGraph) {  				try {  					if (_graphBuilder == null)  						return;  					IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  					IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  					EventCode eventCode;  					double current = 0;  					double duration = 0;  					int waitRes = S_OK;  					if (!_cancelRequested)  						waitRes = medEvent.WaitForCompletion (1' out eventCode);  					if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  						LogInfo ("Finish signaled.  Stopping filter...");  						timer.Stop ();  						try {  							err = _mediaCtrl.StopWhenReady ();  							DestroyAudioEncoder ();  							DestroyVideoEncoder ();  							if (pinTeeVideo != null)  								Marshal.ReleaseComObject (pinTeeVideo);  							Marshal.ReleaseComObject (muxer);  							Marshal.ReleaseComObject (muxerPB);  							Marshal.ReleaseComObject (muxerFS);  							DestroyPreviewGraph ();  							Marshal.ReleaseComObject (mediaFilter);  							Marshal.ReleaseComObject (mediaPos);  							Marshal.ReleaseComObject (medEvent);  						}  						finally {  							CheckBeginInvokeUI<object> (delegate (object obj) {  								ProgressIsIndeterminate = false;  								RaisePropertyChanged ("ProgressIsIndeterminate");  								ProgressValue = 0;  								RaisePropertyChanged ("ProgressValue");  								progressLogEntry.Text = "Finished";  								LogInfo ("Graph Completed.");  								try {  									if (!_cancelRequested)  										ChooseDestination (tempPath);  								}  								catch (Exception e) {  									LogError (e);  									return;  								}  								File.Delete (tempPath);  								LogInfo ("Temporary file deleted.");  								_cancelRequested = false;  								_isTranscoding = false;  								TranscodeCommand.RaiseCanExecuteChanged ();  								CancelCommand.RaiseCanExecuteChanged ();  							}' null);  						}  					}  					else if (!_cancelRequested) {  						err = mediaPos.get_CurrentPosition (out current);  						err = mediaPos.get_Duration (out duration);  					}  					if (current < duration && !_cancelRequested) {  						ProgressValue = (current / duration) * 10000;  						RaisePropertyChanged ("ProgressValue");  						if (numElipses == 3)  							numElipses = 0;  						else  							numElipses++;  						StringBuilder sb = new StringBuilder ();  						for (int i = 0; i < numElipses; i++)  							sb.Append ('.');  						var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  						CheckBeginInvokeUI<object> (delegate (object obj) {  							progressLogEntry.Text = progressLogText;  						}' null);  					}  					else {  						ProgressIsIndeterminate = true;  						RaisePropertyChanged ("ProgressIsIndeterminate");  					}  				}  				catch (Exception e) {  					LogError (e);  				}  			}  		});  	};  	timer.Start ();  }  catch (Exception e) {  	LogError (e);  }  finally {  	_cancelRequested = false;  	_isTranscoding = false;  	TranscodeCommand.RaiseCanExecuteChanged ();  	CancelCommand.RaiseCanExecuteChanged ();  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	_isTranscoding = true;  	CancelCommand.RaiseCanExecuteChanged ();  	TranscodeCommand.RaiseCanExecuteChanged ();  	LogInfo ("Destroying preview graph...");  	DestroyPreviewGraph ();  	ConstructSharedGraph ();  	//set sync source to null to allow the graph to progress as quickly as possible  	IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  	int err;  	if (!UseClock) {  		err = mediaFilter.SetSyncSource (null);  		DsError.ThrowExceptionForHR (err);  	}  	LogInfo ("Rendering streams to null...");  	IBaseFilter nullVideo;  	IBaseFilter nullAudio;  	GetConnectNullRenderers (out nullVideo' out nullAudio);  	if (nullVideo == null)  		throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  	IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  	IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  	if (compressedVideoPin == null)  		throw new ApplicationException ("Unable to find compressed video stream.");  	err = compressedVideoPin.Disconnect ();  	DsError.ThrowExceptionForHR (err);  	if (compressedAudioPin != null)  		compressedAudioPin.Disconnect ();  	err = _graphBuilder.RemoveFilter (nullVideo);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullVideo);  	err = _graphBuilder.RemoveFilter (nullAudio);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullAudio);  	LogInfo ("Adding Haali Matroska Muxer...");  	IBaseFilter muxer;  	muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  	if (muxer == null)  		throw new ApplicationException ("Haali Matroska Muxer not found.");  	//set the FileType on the multiplexer to MP4  	IPropertyBag muxerPB = (IPropertyBag)muxer;  	object pVar = 1;  	err = muxerPB.Write ("FileType"' ref pVar);  	DsError.ThrowExceptionForHR (err);  	IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  	string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  	LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  	err = muxerFS.SetFileName (tempPath' null);  	DsError.ThrowExceptionForHR (err);  	IBaseFilter pinTeeVideo = null;  	if (ShowPreview) {  		pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  		if (pinTeeVideo == null)  			throw new ApplicationException ("Infinite Pin Tee Filter not found.");  	}  	if (_currentVideoCompressor != null) {  		if (ShowPreview) {  			LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  			//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPinDirect (decoderPin' pinTeeVideo' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  			err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  			DsError.ThrowExceptionForHR (err);  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			Marshal.ReleaseComObject (pinTee0);  			HookPin (pinTeeVideo' 1' _videoEncoder' 0);  			Marshal.ReleaseComObject (decoderPin);  		}  		else {  			LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  				throw new ApplicationException ("Unable to connect compressed video to video encoder");  		}  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		//HookPin(_videoEncoder' 0' muxer' 0);  		IPin direct;  		if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  			throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  		Marshal.ReleaseComObject (direct);  		//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  	}  	else if (ShowPreview) {  		LogInfo ("Rendering compressed video with preview...");  		IPin decoderPin = RenderForDumbPin (compressedVideoPin);  		PinInfo decoderPinInfo;  		err = decoderPin.QueryPinInfo (out decoderPinInfo);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter decoderFilter = decoderPinInfo.filter;  		DisconnectAll (decoderFilter);  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' pinTeeVideo' 0);  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (pinTeeVideo' 0' muxer' 0);  		_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  		IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  		TryConnectToAny (pinTeeOut1' decoderFilter);  		HookPin (decoderPin' _videoRenderer' 0);  		//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  		//err = _graphBuilder.Render(decoderPin);  		//DsError.ThrowExceptionForHR(err);  		Marshal.ReleaseComObject (pinTeeOut1);  		Marshal.ReleaseComObject (decoderPin);  		//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  	}  	else {  		LogInfo ("Rendering compressed video without preview...");  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' muxer' 0);  	}  	Marshal.ReleaseComObject (compressedVideoPin);  	if (compressedAudioPin != null) {  		if (_currentAudioCompressor != null) {  			LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  			if (_audioEncoder == null)  				_audioEncoder = CreateAudioCompressorFilter ();  			err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedAudioPin' _audioEncoder' 0);  			HookPinDirect (_audioEncoder' 0' muxer' 1);  		}  		else {  			LogInfo ("Rendering compressed audio...");  			HookPin (compressedAudioPin' muxer' 1);  		}  		Marshal.ReleaseComObject (compressedAudioPin);  	}  	LogInfo ("Filter built.  Running it...");  	err = _mediaCtrl.Run ();  	DsError.ThrowExceptionForHR (err);  	ProgressIsIndeterminate = false;  	RaisePropertyChanged ("ProgressIsIndeterminate");  	var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  	timer.Interval = TimeSpan.FromMilliseconds (500);  	int numElipses = 0;  	ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  	progressLogEntry.Brush = Brushes.White;  	CheckBeginInvokeUI<object> (delegate (object obj) {  		LogEntries.Add (progressLogEntry);  	}' null);  	timer.Tick += delegate {  		Dispatcher.BeginInvoke ((Action)delegate {  			lock (_syncGraph) {  				try {  					if (_graphBuilder == null)  						return;  					IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  					IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  					EventCode eventCode;  					double current = 0;  					double duration = 0;  					int waitRes = S_OK;  					if (!_cancelRequested)  						waitRes = medEvent.WaitForCompletion (1' out eventCode);  					if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  						LogInfo ("Finish signaled.  Stopping filter...");  						timer.Stop ();  						try {  							err = _mediaCtrl.StopWhenReady ();  							DestroyAudioEncoder ();  							DestroyVideoEncoder ();  							if (pinTeeVideo != null)  								Marshal.ReleaseComObject (pinTeeVideo);  							Marshal.ReleaseComObject (muxer);  							Marshal.ReleaseComObject (muxerPB);  							Marshal.ReleaseComObject (muxerFS);  							DestroyPreviewGraph ();  							Marshal.ReleaseComObject (mediaFilter);  							Marshal.ReleaseComObject (mediaPos);  							Marshal.ReleaseComObject (medEvent);  						}  						finally {  							CheckBeginInvokeUI<object> (delegate (object obj) {  								ProgressIsIndeterminate = false;  								RaisePropertyChanged ("ProgressIsIndeterminate");  								ProgressValue = 0;  								RaisePropertyChanged ("ProgressValue");  								progressLogEntry.Text = "Finished";  								LogInfo ("Graph Completed.");  								try {  									if (!_cancelRequested)  										ChooseDestination (tempPath);  								}  								catch (Exception e) {  									LogError (e);  									return;  								}  								File.Delete (tempPath);  								LogInfo ("Temporary file deleted.");  								_cancelRequested = false;  								_isTranscoding = false;  								TranscodeCommand.RaiseCanExecuteChanged ();  								CancelCommand.RaiseCanExecuteChanged ();  							}' null);  						}  					}  					else if (!_cancelRequested) {  						err = mediaPos.get_CurrentPosition (out current);  						err = mediaPos.get_Duration (out duration);  					}  					if (current < duration && !_cancelRequested) {  						ProgressValue = (current / duration) * 10000;  						RaisePropertyChanged ("ProgressValue");  						if (numElipses == 3)  							numElipses = 0;  						else  							numElipses++;  						StringBuilder sb = new StringBuilder ();  						for (int i = 0; i < numElipses; i++)  							sb.Append ('.');  						var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  						CheckBeginInvokeUI<object> (delegate (object obj) {  							progressLogEntry.Text = progressLogText;  						}' null);  					}  					else {  						ProgressIsIndeterminate = true;  						RaisePropertyChanged ("ProgressIsIndeterminate");  					}  				}  				catch (Exception e) {  					LogError (e);  				}  			}  		});  	};  	timer.Start ();  }  catch (Exception e) {  	LogError (e);  }  finally {  	_cancelRequested = false;  	_isTranscoding = false;  	TranscodeCommand.RaiseCanExecuteChanged ();  	CancelCommand.RaiseCanExecuteChanged ();  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	_isTranscoding = true;  	CancelCommand.RaiseCanExecuteChanged ();  	TranscodeCommand.RaiseCanExecuteChanged ();  	LogInfo ("Destroying preview graph...");  	DestroyPreviewGraph ();  	ConstructSharedGraph ();  	//set sync source to null to allow the graph to progress as quickly as possible  	IMediaFilter mediaFilter = (IMediaFilter)_graphBuilder;  	int err;  	if (!UseClock) {  		err = mediaFilter.SetSyncSource (null);  		DsError.ThrowExceptionForHR (err);  	}  	LogInfo ("Rendering streams to null...");  	IBaseFilter nullVideo;  	IBaseFilter nullAudio;  	GetConnectNullRenderers (out nullVideo' out nullAudio);  	if (nullVideo == null)  		throw new ApplicationException ("Unable to find or filter a video stream from the requested file.");  	IPin compressedVideoPin = GetConnectedOut (nullVideo' 0);  	IPin compressedAudioPin = GetConnectedOut (nullAudio' 0);  	if (compressedVideoPin == null)  		throw new ApplicationException ("Unable to find compressed video stream.");  	err = compressedVideoPin.Disconnect ();  	DsError.ThrowExceptionForHR (err);  	if (compressedAudioPin != null)  		compressedAudioPin.Disconnect ();  	err = _graphBuilder.RemoveFilter (nullVideo);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullVideo);  	err = _graphBuilder.RemoveFilter (nullAudio);  	DsError.ThrowExceptionForHR (err);  	Marshal.ReleaseComObject (nullAudio);  	LogInfo ("Adding Haali Matroska Muxer...");  	IBaseFilter muxer;  	muxer = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Haali Matroska Muxer");  	if (muxer == null)  		throw new ApplicationException ("Haali Matroska Muxer not found.");  	//set the FileType on the multiplexer to MP4  	IPropertyBag muxerPB = (IPropertyBag)muxer;  	object pVar = 1;  	err = muxerPB.Write ("FileType"' ref pVar);  	DsError.ThrowExceptionForHR (err);  	IFileSinkFilter muxerFS = (IFileSinkFilter)muxer;  	string tempPath = Path.Combine (Path.GetTempPath ()' Path.GetRandomFileName ());  	LogInfo (string.Format ("Store output in temporary file: {0}"' tempPath));  	err = muxerFS.SetFileName (tempPath' null);  	DsError.ThrowExceptionForHR (err);  	IBaseFilter pinTeeVideo = null;  	if (ShowPreview) {  		pinTeeVideo = CreateFilter (FilterCategory.LegacyAmFilterCategory' "Infinite Pin Tee Filter");  		if (pinTeeVideo == null)  			throw new ApplicationException ("Infinite Pin Tee Filter not found.");  	}  	if (_currentVideoCompressor != null) {  		if (ShowPreview) {  			LogInfo (string.Format ("Rendering video through {0} with preview..."' _currentVideoCompressor.Name));  			//we want to use intelligent connect to choose a decoder' but the pin tee isn't going to resolve it.  			IPin decoderPin = RenderForDumbPin (compressedVideoPin);  			err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  			DsError.ThrowExceptionForHR (err);  			HookPinDirect (decoderPin' pinTeeVideo' 0);  			_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  			IPin pinTee0 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 0);  			err = TryConnect (pinTee0' _videoRenderer' 0' out pinTee0);  			DsError.ThrowExceptionForHR (err);  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			Marshal.ReleaseComObject (pinTee0);  			HookPin (pinTeeVideo' 1' _videoEncoder' 0);  			Marshal.ReleaseComObject (decoderPin);  		}  		else {  			LogInfo (string.Format ("Rendering video through {0} without preview..."' _currentVideoCompressor.Name));  			if (_videoEncoder == null)  				_videoEncoder = CreateVideoCompressorFilter ();  			err = _graphBuilder.AddFilter (_videoEncoder' "videoEncoder");  			DsError.ThrowExceptionForHR (err);  			if (!TryConnectToAny (compressedVideoPin' _videoEncoder))  				throw new ApplicationException ("Unable to connect compressed video to video encoder");  		}  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		//HookPin(_videoEncoder' 0' muxer' 0);  		IPin direct;  		if (!TryConnectAny (_videoEncoder' muxer' 0' out direct))  			throw new ApplicationException ("Unable to connect encoded video to MP4 container.");  		Marshal.ReleaseComObject (direct);  		//_previewPin = DsFindPin.ByDirection(pinTeeVideo' PinDirection.Output' 1);  	}  	else if (ShowPreview) {  		LogInfo ("Rendering compressed video with preview...");  		IPin decoderPin = RenderForDumbPin (compressedVideoPin);  		PinInfo decoderPinInfo;  		err = decoderPin.QueryPinInfo (out decoderPinInfo);  		DsError.ThrowExceptionForHR (err);  		IBaseFilter decoderFilter = decoderPinInfo.filter;  		DisconnectAll (decoderFilter);  		err = compressedVideoPin.Disconnect ();  		DsError.ThrowExceptionForHR (err);  		err = _graphBuilder.AddFilter (pinTeeVideo' "pinTeeVideo");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' pinTeeVideo' 0);  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (pinTeeVideo' 0' muxer' 0);  		_videoRenderer = _graphPlayer.CreateRenderer (_graphBuilder);  		IPin pinTeeOut1 = DsFindPin.ByDirection (pinTeeVideo' PinDirection.Output' 1);  		TryConnectToAny (pinTeeOut1' decoderFilter);  		HookPin (decoderPin' _videoRenderer' 0);  		//HookPin(pinTeeVideo' 1' _videoRenderer' 0);  		//err = _graphBuilder.Render(decoderPin);  		//DsError.ThrowExceptionForHR(err);  		Marshal.ReleaseComObject (pinTeeOut1);  		Marshal.ReleaseComObject (decoderPin);  		//_previewPin = DecodeForDumbPin(pinTeeVideo' 0);  	}  	else {  		LogInfo ("Rendering compressed video without preview...");  		err = _graphBuilder.AddFilter (muxer' "muxer");  		DsError.ThrowExceptionForHR (err);  		HookPin (compressedVideoPin' muxer' 0);  	}  	Marshal.ReleaseComObject (compressedVideoPin);  	if (compressedAudioPin != null) {  		if (_currentAudioCompressor != null) {  			LogInfo (string.Format ("Rendering audio through {0}..."' _currentAudioCompressor.Name));  			if (_audioEncoder == null)  				_audioEncoder = CreateAudioCompressorFilter ();  			err = _graphBuilder.AddFilter (_audioEncoder' "audioEncoder");  			DsError.ThrowExceptionForHR (err);  			HookPin (compressedAudioPin' _audioEncoder' 0);  			HookPinDirect (_audioEncoder' 0' muxer' 1);  		}  		else {  			LogInfo ("Rendering compressed audio...");  			HookPin (compressedAudioPin' muxer' 1);  		}  		Marshal.ReleaseComObject (compressedAudioPin);  	}  	LogInfo ("Filter built.  Running it...");  	err = _mediaCtrl.Run ();  	DsError.ThrowExceptionForHR (err);  	ProgressIsIndeterminate = false;  	RaisePropertyChanged ("ProgressIsIndeterminate");  	var timer = new DispatcherTimer (DispatcherPriority.Background' Application.Current.Dispatcher);  	timer.Interval = TimeSpan.FromMilliseconds (500);  	int numElipses = 0;  	ObservableLogEntry progressLogEntry = new ObservableLogEntry ();  	progressLogEntry.Brush = Brushes.White;  	CheckBeginInvokeUI<object> (delegate (object obj) {  		LogEntries.Add (progressLogEntry);  	}' null);  	timer.Tick += delegate {  		Dispatcher.BeginInvoke ((Action)delegate {  			lock (_syncGraph) {  				try {  					if (_graphBuilder == null)  						return;  					IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  					IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  					EventCode eventCode;  					double current = 0;  					double duration = 0;  					int waitRes = S_OK;  					if (!_cancelRequested)  						waitRes = medEvent.WaitForCompletion (1' out eventCode);  					if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  						LogInfo ("Finish signaled.  Stopping filter...");  						timer.Stop ();  						try {  							err = _mediaCtrl.StopWhenReady ();  							DestroyAudioEncoder ();  							DestroyVideoEncoder ();  							if (pinTeeVideo != null)  								Marshal.ReleaseComObject (pinTeeVideo);  							Marshal.ReleaseComObject (muxer);  							Marshal.ReleaseComObject (muxerPB);  							Marshal.ReleaseComObject (muxerFS);  							DestroyPreviewGraph ();  							Marshal.ReleaseComObject (mediaFilter);  							Marshal.ReleaseComObject (mediaPos);  							Marshal.ReleaseComObject (medEvent);  						}  						finally {  							CheckBeginInvokeUI<object> (delegate (object obj) {  								ProgressIsIndeterminate = false;  								RaisePropertyChanged ("ProgressIsIndeterminate");  								ProgressValue = 0;  								RaisePropertyChanged ("ProgressValue");  								progressLogEntry.Text = "Finished";  								LogInfo ("Graph Completed.");  								try {  									if (!_cancelRequested)  										ChooseDestination (tempPath);  								}  								catch (Exception e) {  									LogError (e);  									return;  								}  								File.Delete (tempPath);  								LogInfo ("Temporary file deleted.");  								_cancelRequested = false;  								_isTranscoding = false;  								TranscodeCommand.RaiseCanExecuteChanged ();  								CancelCommand.RaiseCanExecuteChanged ();  							}' null);  						}  					}  					else if (!_cancelRequested) {  						err = mediaPos.get_CurrentPosition (out current);  						err = mediaPos.get_Duration (out duration);  					}  					if (current < duration && !_cancelRequested) {  						ProgressValue = (current / duration) * 10000;  						RaisePropertyChanged ("ProgressValue");  						if (numElipses == 3)  							numElipses = 0;  						else  							numElipses++;  						StringBuilder sb = new StringBuilder ();  						for (int i = 0; i < numElipses; i++)  							sb.Append ('.');  						var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  						CheckBeginInvokeUI<object> (delegate (object obj) {  							progressLogEntry.Text = progressLogText;  						}' null);  					}  					else {  						ProgressIsIndeterminate = true;  						RaisePropertyChanged ("ProgressIsIndeterminate");  					}  				}  				catch (Exception e) {  					LogError (e);  				}  			}  		});  	};  	timer.Start ();  }  catch (Exception e) {  	LogError (e);  }  finally {  	_cancelRequested = false;  	_isTranscoding = false;  	TranscodeCommand.RaiseCanExecuteChanged ();  	CancelCommand.RaiseCanExecuteChanged ();  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: timer.Interval = TimeSpan.FromMilliseconds (500);  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: timer.Tick += delegate {  	Dispatcher.BeginInvoke ((Action)delegate {  		lock (_syncGraph) {  			try {  				if (_graphBuilder == null)  					return;  				IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  				IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  				EventCode eventCode;  				double current = 0;  				double duration = 0;  				int waitRes = S_OK;  				if (!_cancelRequested)  					waitRes = medEvent.WaitForCompletion (1' out eventCode);  				if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  					LogInfo ("Finish signaled.  Stopping filter...");  					timer.Stop ();  					try {  						err = _mediaCtrl.StopWhenReady ();  						DestroyAudioEncoder ();  						DestroyVideoEncoder ();  						if (pinTeeVideo != null)  							Marshal.ReleaseComObject (pinTeeVideo);  						Marshal.ReleaseComObject (muxer);  						Marshal.ReleaseComObject (muxerPB);  						Marshal.ReleaseComObject (muxerFS);  						DestroyPreviewGraph ();  						Marshal.ReleaseComObject (mediaFilter);  						Marshal.ReleaseComObject (mediaPos);  						Marshal.ReleaseComObject (medEvent);  					}  					finally {  						CheckBeginInvokeUI<object> (delegate (object obj) {  							ProgressIsIndeterminate = false;  							RaisePropertyChanged ("ProgressIsIndeterminate");  							ProgressValue = 0;  							RaisePropertyChanged ("ProgressValue");  							progressLogEntry.Text = "Finished";  							LogInfo ("Graph Completed.");  							try {  								if (!_cancelRequested)  									ChooseDestination (tempPath);  							}  							catch (Exception e) {  								LogError (e);  								return;  							}  							File.Delete (tempPath);  							LogInfo ("Temporary file deleted.");  							_cancelRequested = false;  							_isTranscoding = false;  							TranscodeCommand.RaiseCanExecuteChanged ();  							CancelCommand.RaiseCanExecuteChanged ();  						}' null);  					}  				}  				else if (!_cancelRequested) {  					err = mediaPos.get_CurrentPosition (out current);  					err = mediaPos.get_Duration (out duration);  				}  				if (current < duration && !_cancelRequested) {  					ProgressValue = (current / duration) * 10000;  					RaisePropertyChanged ("ProgressValue");  					if (numElipses == 3)  						numElipses = 0;  					else  						numElipses++;  					StringBuilder sb = new StringBuilder ();  					for (int i = 0; i < numElipses; i++)  						sb.Append ('.');  					var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  					CheckBeginInvokeUI<object> (delegate (object obj) {  						progressLogEntry.Text = progressLogText;  					}' null);  				}  				else {  					ProgressIsIndeterminate = true;  					RaisePropertyChanged ("ProgressIsIndeterminate");  				}  			}  			catch (Exception e) {  				LogError (e);  			}  		}  	});  };  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: timer.Tick += delegate {  	Dispatcher.BeginInvoke ((Action)delegate {  		lock (_syncGraph) {  			try {  				if (_graphBuilder == null)  					return;  				IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  				IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  				EventCode eventCode;  				double current = 0;  				double duration = 0;  				int waitRes = S_OK;  				if (!_cancelRequested)  					waitRes = medEvent.WaitForCompletion (1' out eventCode);  				if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  					LogInfo ("Finish signaled.  Stopping filter...");  					timer.Stop ();  					try {  						err = _mediaCtrl.StopWhenReady ();  						DestroyAudioEncoder ();  						DestroyVideoEncoder ();  						if (pinTeeVideo != null)  							Marshal.ReleaseComObject (pinTeeVideo);  						Marshal.ReleaseComObject (muxer);  						Marshal.ReleaseComObject (muxerPB);  						Marshal.ReleaseComObject (muxerFS);  						DestroyPreviewGraph ();  						Marshal.ReleaseComObject (mediaFilter);  						Marshal.ReleaseComObject (mediaPos);  						Marshal.ReleaseComObject (medEvent);  					}  					finally {  						CheckBeginInvokeUI<object> (delegate (object obj) {  							ProgressIsIndeterminate = false;  							RaisePropertyChanged ("ProgressIsIndeterminate");  							ProgressValue = 0;  							RaisePropertyChanged ("ProgressValue");  							progressLogEntry.Text = "Finished";  							LogInfo ("Graph Completed.");  							try {  								if (!_cancelRequested)  									ChooseDestination (tempPath);  							}  							catch (Exception e) {  								LogError (e);  								return;  							}  							File.Delete (tempPath);  							LogInfo ("Temporary file deleted.");  							_cancelRequested = false;  							_isTranscoding = false;  							TranscodeCommand.RaiseCanExecuteChanged ();  							CancelCommand.RaiseCanExecuteChanged ();  						}' null);  					}  				}  				else if (!_cancelRequested) {  					err = mediaPos.get_CurrentPosition (out current);  					err = mediaPos.get_Duration (out duration);  				}  				if (current < duration && !_cancelRequested) {  					ProgressValue = (current / duration) * 10000;  					RaisePropertyChanged ("ProgressValue");  					if (numElipses == 3)  						numElipses = 0;  					else  						numElipses++;  					StringBuilder sb = new StringBuilder ();  					for (int i = 0; i < numElipses; i++)  						sb.Append ('.');  					var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  					CheckBeginInvokeUI<object> (delegate (object obj) {  						progressLogEntry.Text = progressLogText;  					}' null);  				}  				else {  					ProgressIsIndeterminate = true;  					RaisePropertyChanged ("ProgressIsIndeterminate");  				}  			}  			catch (Exception e) {  				LogError (e);  			}  		}  	});  };  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: timer.Tick += delegate {  	Dispatcher.BeginInvoke ((Action)delegate {  		lock (_syncGraph) {  			try {  				if (_graphBuilder == null)  					return;  				IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  				IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  				EventCode eventCode;  				double current = 0;  				double duration = 0;  				int waitRes = S_OK;  				if (!_cancelRequested)  					waitRes = medEvent.WaitForCompletion (1' out eventCode);  				if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  					LogInfo ("Finish signaled.  Stopping filter...");  					timer.Stop ();  					try {  						err = _mediaCtrl.StopWhenReady ();  						DestroyAudioEncoder ();  						DestroyVideoEncoder ();  						if (pinTeeVideo != null)  							Marshal.ReleaseComObject (pinTeeVideo);  						Marshal.ReleaseComObject (muxer);  						Marshal.ReleaseComObject (muxerPB);  						Marshal.ReleaseComObject (muxerFS);  						DestroyPreviewGraph ();  						Marshal.ReleaseComObject (mediaFilter);  						Marshal.ReleaseComObject (mediaPos);  						Marshal.ReleaseComObject (medEvent);  					}  					finally {  						CheckBeginInvokeUI<object> (delegate (object obj) {  							ProgressIsIndeterminate = false;  							RaisePropertyChanged ("ProgressIsIndeterminate");  							ProgressValue = 0;  							RaisePropertyChanged ("ProgressValue");  							progressLogEntry.Text = "Finished";  							LogInfo ("Graph Completed.");  							try {  								if (!_cancelRequested)  									ChooseDestination (tempPath);  							}  							catch (Exception e) {  								LogError (e);  								return;  							}  							File.Delete (tempPath);  							LogInfo ("Temporary file deleted.");  							_cancelRequested = false;  							_isTranscoding = false;  							TranscodeCommand.RaiseCanExecuteChanged ();  							CancelCommand.RaiseCanExecuteChanged ();  						}' null);  					}  				}  				else if (!_cancelRequested) {  					err = mediaPos.get_CurrentPosition (out current);  					err = mediaPos.get_Duration (out duration);  				}  				if (current < duration && !_cancelRequested) {  					ProgressValue = (current / duration) * 10000;  					RaisePropertyChanged ("ProgressValue");  					if (numElipses == 3)  						numElipses = 0;  					else  						numElipses++;  					StringBuilder sb = new StringBuilder ();  					for (int i = 0; i < numElipses; i++)  						sb.Append ('.');  					var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  					CheckBeginInvokeUI<object> (delegate (object obj) {  						progressLogEntry.Text = progressLogText;  					}' null);  				}  				else {  					ProgressIsIndeterminate = true;  					RaisePropertyChanged ("ProgressIsIndeterminate");  				}  			}  			catch (Exception e) {  				LogError (e);  			}  		}  	});  };  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: Dispatcher.BeginInvoke ((Action)delegate {  	lock (_syncGraph) {  		try {  			if (_graphBuilder == null)  				return;  			IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  			IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  			EventCode eventCode;  			double current = 0;  			double duration = 0;  			int waitRes = S_OK;  			if (!_cancelRequested)  				waitRes = medEvent.WaitForCompletion (1' out eventCode);  			if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  				LogInfo ("Finish signaled.  Stopping filter...");  				timer.Stop ();  				try {  					err = _mediaCtrl.StopWhenReady ();  					DestroyAudioEncoder ();  					DestroyVideoEncoder ();  					if (pinTeeVideo != null)  						Marshal.ReleaseComObject (pinTeeVideo);  					Marshal.ReleaseComObject (muxer);  					Marshal.ReleaseComObject (muxerPB);  					Marshal.ReleaseComObject (muxerFS);  					DestroyPreviewGraph ();  					Marshal.ReleaseComObject (mediaFilter);  					Marshal.ReleaseComObject (mediaPos);  					Marshal.ReleaseComObject (medEvent);  				}  				finally {  					CheckBeginInvokeUI<object> (delegate (object obj) {  						ProgressIsIndeterminate = false;  						RaisePropertyChanged ("ProgressIsIndeterminate");  						ProgressValue = 0;  						RaisePropertyChanged ("ProgressValue");  						progressLogEntry.Text = "Finished";  						LogInfo ("Graph Completed.");  						try {  							if (!_cancelRequested)  								ChooseDestination (tempPath);  						}  						catch (Exception e) {  							LogError (e);  							return;  						}  						File.Delete (tempPath);  						LogInfo ("Temporary file deleted.");  						_cancelRequested = false;  						_isTranscoding = false;  						TranscodeCommand.RaiseCanExecuteChanged ();  						CancelCommand.RaiseCanExecuteChanged ();  					}' null);  				}  			}  			else if (!_cancelRequested) {  				err = mediaPos.get_CurrentPosition (out current);  				err = mediaPos.get_Duration (out duration);  			}  			if (current < duration && !_cancelRequested) {  				ProgressValue = (current / duration) * 10000;  				RaisePropertyChanged ("ProgressValue");  				if (numElipses == 3)  					numElipses = 0;  				else  					numElipses++;  				StringBuilder sb = new StringBuilder ();  				for (int i = 0; i < numElipses; i++)  					sb.Append ('.');  				var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  				CheckBeginInvokeUI<object> (delegate (object obj) {  					progressLogEntry.Text = progressLogText;  				}' null);  			}  			else {  				ProgressIsIndeterminate = true;  				RaisePropertyChanged ("ProgressIsIndeterminate");  			}  		}  		catch (Exception e) {  			LogError (e);  		}  	}  });  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: Dispatcher.BeginInvoke ((Action)delegate {  	lock (_syncGraph) {  		try {  			if (_graphBuilder == null)  				return;  			IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  			IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  			EventCode eventCode;  			double current = 0;  			double duration = 0;  			int waitRes = S_OK;  			if (!_cancelRequested)  				waitRes = medEvent.WaitForCompletion (1' out eventCode);  			if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  				LogInfo ("Finish signaled.  Stopping filter...");  				timer.Stop ();  				try {  					err = _mediaCtrl.StopWhenReady ();  					DestroyAudioEncoder ();  					DestroyVideoEncoder ();  					if (pinTeeVideo != null)  						Marshal.ReleaseComObject (pinTeeVideo);  					Marshal.ReleaseComObject (muxer);  					Marshal.ReleaseComObject (muxerPB);  					Marshal.ReleaseComObject (muxerFS);  					DestroyPreviewGraph ();  					Marshal.ReleaseComObject (mediaFilter);  					Marshal.ReleaseComObject (mediaPos);  					Marshal.ReleaseComObject (medEvent);  				}  				finally {  					CheckBeginInvokeUI<object> (delegate (object obj) {  						ProgressIsIndeterminate = false;  						RaisePropertyChanged ("ProgressIsIndeterminate");  						ProgressValue = 0;  						RaisePropertyChanged ("ProgressValue");  						progressLogEntry.Text = "Finished";  						LogInfo ("Graph Completed.");  						try {  							if (!_cancelRequested)  								ChooseDestination (tempPath);  						}  						catch (Exception e) {  							LogError (e);  							return;  						}  						File.Delete (tempPath);  						LogInfo ("Temporary file deleted.");  						_cancelRequested = false;  						_isTranscoding = false;  						TranscodeCommand.RaiseCanExecuteChanged ();  						CancelCommand.RaiseCanExecuteChanged ();  					}' null);  				}  			}  			else if (!_cancelRequested) {  				err = mediaPos.get_CurrentPosition (out current);  				err = mediaPos.get_Duration (out duration);  			}  			if (current < duration && !_cancelRequested) {  				ProgressValue = (current / duration) * 10000;  				RaisePropertyChanged ("ProgressValue");  				if (numElipses == 3)  					numElipses = 0;  				else  					numElipses++;  				StringBuilder sb = new StringBuilder ();  				for (int i = 0; i < numElipses; i++)  					sb.Append ('.');  				var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  				CheckBeginInvokeUI<object> (delegate (object obj) {  					progressLogEntry.Text = progressLogText;  				}' null);  			}  			else {  				ProgressIsIndeterminate = true;  				RaisePropertyChanged ("ProgressIsIndeterminate");  			}  		}  		catch (Exception e) {  			LogError (e);  		}  	}  });  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: Dispatcher.BeginInvoke ((Action)delegate {  	lock (_syncGraph) {  		try {  			if (_graphBuilder == null)  				return;  			IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  			IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  			EventCode eventCode;  			double current = 0;  			double duration = 0;  			int waitRes = S_OK;  			if (!_cancelRequested)  				waitRes = medEvent.WaitForCompletion (1' out eventCode);  			if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  				LogInfo ("Finish signaled.  Stopping filter...");  				timer.Stop ();  				try {  					err = _mediaCtrl.StopWhenReady ();  					DestroyAudioEncoder ();  					DestroyVideoEncoder ();  					if (pinTeeVideo != null)  						Marshal.ReleaseComObject (pinTeeVideo);  					Marshal.ReleaseComObject (muxer);  					Marshal.ReleaseComObject (muxerPB);  					Marshal.ReleaseComObject (muxerFS);  					DestroyPreviewGraph ();  					Marshal.ReleaseComObject (mediaFilter);  					Marshal.ReleaseComObject (mediaPos);  					Marshal.ReleaseComObject (medEvent);  				}  				finally {  					CheckBeginInvokeUI<object> (delegate (object obj) {  						ProgressIsIndeterminate = false;  						RaisePropertyChanged ("ProgressIsIndeterminate");  						ProgressValue = 0;  						RaisePropertyChanged ("ProgressValue");  						progressLogEntry.Text = "Finished";  						LogInfo ("Graph Completed.");  						try {  							if (!_cancelRequested)  								ChooseDestination (tempPath);  						}  						catch (Exception e) {  							LogError (e);  							return;  						}  						File.Delete (tempPath);  						LogInfo ("Temporary file deleted.");  						_cancelRequested = false;  						_isTranscoding = false;  						TranscodeCommand.RaiseCanExecuteChanged ();  						CancelCommand.RaiseCanExecuteChanged ();  					}' null);  				}  			}  			else if (!_cancelRequested) {  				err = mediaPos.get_CurrentPosition (out current);  				err = mediaPos.get_Duration (out duration);  			}  			if (current < duration && !_cancelRequested) {  				ProgressValue = (current / duration) * 10000;  				RaisePropertyChanged ("ProgressValue");  				if (numElipses == 3)  					numElipses = 0;  				else  					numElipses++;  				StringBuilder sb = new StringBuilder ();  				for (int i = 0; i < numElipses; i++)  					sb.Append ('.');  				var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  				CheckBeginInvokeUI<object> (delegate (object obj) {  					progressLogEntry.Text = progressLogText;  				}' null);  			}  			else {  				ProgressIsIndeterminate = true;  				RaisePropertyChanged ("ProgressIsIndeterminate");  			}  		}  		catch (Exception e) {  			LogError (e);  		}  	}  });  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		if (_graphBuilder == null)  			return;  		IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  		IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  		EventCode eventCode;  		double current = 0;  		double duration = 0;  		int waitRes = S_OK;  		if (!_cancelRequested)  			waitRes = medEvent.WaitForCompletion (1' out eventCode);  		if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  			LogInfo ("Finish signaled.  Stopping filter...");  			timer.Stop ();  			try {  				err = _mediaCtrl.StopWhenReady ();  				DestroyAudioEncoder ();  				DestroyVideoEncoder ();  				if (pinTeeVideo != null)  					Marshal.ReleaseComObject (pinTeeVideo);  				Marshal.ReleaseComObject (muxer);  				Marshal.ReleaseComObject (muxerPB);  				Marshal.ReleaseComObject (muxerFS);  				DestroyPreviewGraph ();  				Marshal.ReleaseComObject (mediaFilter);  				Marshal.ReleaseComObject (mediaPos);  				Marshal.ReleaseComObject (medEvent);  			}  			finally {  				CheckBeginInvokeUI<object> (delegate (object obj) {  					ProgressIsIndeterminate = false;  					RaisePropertyChanged ("ProgressIsIndeterminate");  					ProgressValue = 0;  					RaisePropertyChanged ("ProgressValue");  					progressLogEntry.Text = "Finished";  					LogInfo ("Graph Completed.");  					try {  						if (!_cancelRequested)  							ChooseDestination (tempPath);  					}  					catch (Exception e) {  						LogError (e);  						return;  					}  					File.Delete (tempPath);  					LogInfo ("Temporary file deleted.");  					_cancelRequested = false;  					_isTranscoding = false;  					TranscodeCommand.RaiseCanExecuteChanged ();  					CancelCommand.RaiseCanExecuteChanged ();  				}' null);  			}  		}  		else if (!_cancelRequested) {  			err = mediaPos.get_CurrentPosition (out current);  			err = mediaPos.get_Duration (out duration);  		}  		if (current < duration && !_cancelRequested) {  			ProgressValue = (current / duration) * 10000;  			RaisePropertyChanged ("ProgressValue");  			if (numElipses == 3)  				numElipses = 0;  			else  				numElipses++;  			StringBuilder sb = new StringBuilder ();  			for (int i = 0; i < numElipses; i++)  				sb.Append ('.');  			var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  			CheckBeginInvokeUI<object> (delegate (object obj) {  				progressLogEntry.Text = progressLogText;  			}' null);  		}  		else {  			ProgressIsIndeterminate = true;  			RaisePropertyChanged ("ProgressIsIndeterminate");  		}  	}  	catch (Exception e) {  		LogError (e);  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		if (_graphBuilder == null)  			return;  		IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  		IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  		EventCode eventCode;  		double current = 0;  		double duration = 0;  		int waitRes = S_OK;  		if (!_cancelRequested)  			waitRes = medEvent.WaitForCompletion (1' out eventCode);  		if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  			LogInfo ("Finish signaled.  Stopping filter...");  			timer.Stop ();  			try {  				err = _mediaCtrl.StopWhenReady ();  				DestroyAudioEncoder ();  				DestroyVideoEncoder ();  				if (pinTeeVideo != null)  					Marshal.ReleaseComObject (pinTeeVideo);  				Marshal.ReleaseComObject (muxer);  				Marshal.ReleaseComObject (muxerPB);  				Marshal.ReleaseComObject (muxerFS);  				DestroyPreviewGraph ();  				Marshal.ReleaseComObject (mediaFilter);  				Marshal.ReleaseComObject (mediaPos);  				Marshal.ReleaseComObject (medEvent);  			}  			finally {  				CheckBeginInvokeUI<object> (delegate (object obj) {  					ProgressIsIndeterminate = false;  					RaisePropertyChanged ("ProgressIsIndeterminate");  					ProgressValue = 0;  					RaisePropertyChanged ("ProgressValue");  					progressLogEntry.Text = "Finished";  					LogInfo ("Graph Completed.");  					try {  						if (!_cancelRequested)  							ChooseDestination (tempPath);  					}  					catch (Exception e) {  						LogError (e);  						return;  					}  					File.Delete (tempPath);  					LogInfo ("Temporary file deleted.");  					_cancelRequested = false;  					_isTranscoding = false;  					TranscodeCommand.RaiseCanExecuteChanged ();  					CancelCommand.RaiseCanExecuteChanged ();  				}' null);  			}  		}  		else if (!_cancelRequested) {  			err = mediaPos.get_CurrentPosition (out current);  			err = mediaPos.get_Duration (out duration);  		}  		if (current < duration && !_cancelRequested) {  			ProgressValue = (current / duration) * 10000;  			RaisePropertyChanged ("ProgressValue");  			if (numElipses == 3)  				numElipses = 0;  			else  				numElipses++;  			StringBuilder sb = new StringBuilder ();  			for (int i = 0; i < numElipses; i++)  				sb.Append ('.');  			var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  			CheckBeginInvokeUI<object> (delegate (object obj) {  				progressLogEntry.Text = progressLogText;  			}' null);  		}  		else {  			ProgressIsIndeterminate = true;  			RaisePropertyChanged ("ProgressIsIndeterminate");  		}  	}  	catch (Exception e) {  		LogError (e);  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: lock (_syncGraph) {  	try {  		if (_graphBuilder == null)  			return;  		IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  		IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  		EventCode eventCode;  		double current = 0;  		double duration = 0;  		int waitRes = S_OK;  		if (!_cancelRequested)  			waitRes = medEvent.WaitForCompletion (1' out eventCode);  		if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  			LogInfo ("Finish signaled.  Stopping filter...");  			timer.Stop ();  			try {  				err = _mediaCtrl.StopWhenReady ();  				DestroyAudioEncoder ();  				DestroyVideoEncoder ();  				if (pinTeeVideo != null)  					Marshal.ReleaseComObject (pinTeeVideo);  				Marshal.ReleaseComObject (muxer);  				Marshal.ReleaseComObject (muxerPB);  				Marshal.ReleaseComObject (muxerFS);  				DestroyPreviewGraph ();  				Marshal.ReleaseComObject (mediaFilter);  				Marshal.ReleaseComObject (mediaPos);  				Marshal.ReleaseComObject (medEvent);  			}  			finally {  				CheckBeginInvokeUI<object> (delegate (object obj) {  					ProgressIsIndeterminate = false;  					RaisePropertyChanged ("ProgressIsIndeterminate");  					ProgressValue = 0;  					RaisePropertyChanged ("ProgressValue");  					progressLogEntry.Text = "Finished";  					LogInfo ("Graph Completed.");  					try {  						if (!_cancelRequested)  							ChooseDestination (tempPath);  					}  					catch (Exception e) {  						LogError (e);  						return;  					}  					File.Delete (tempPath);  					LogInfo ("Temporary file deleted.");  					_cancelRequested = false;  					_isTranscoding = false;  					TranscodeCommand.RaiseCanExecuteChanged ();  					CancelCommand.RaiseCanExecuteChanged ();  				}' null);  			}  		}  		else if (!_cancelRequested) {  			err = mediaPos.get_CurrentPosition (out current);  			err = mediaPos.get_Duration (out duration);  		}  		if (current < duration && !_cancelRequested) {  			ProgressValue = (current / duration) * 10000;  			RaisePropertyChanged ("ProgressValue");  			if (numElipses == 3)  				numElipses = 0;  			else  				numElipses++;  			StringBuilder sb = new StringBuilder ();  			for (int i = 0; i < numElipses; i++)  				sb.Append ('.');  			var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  			CheckBeginInvokeUI<object> (delegate (object obj) {  				progressLogEntry.Text = progressLogText;  			}' null);  		}  		else {  			ProgressIsIndeterminate = true;  			RaisePropertyChanged ("ProgressIsIndeterminate");  		}  	}  	catch (Exception e) {  		LogError (e);  	}  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	if (_graphBuilder == null)  		return;  	IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  	IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  	EventCode eventCode;  	double current = 0;  	double duration = 0;  	int waitRes = S_OK;  	if (!_cancelRequested)  		waitRes = medEvent.WaitForCompletion (1' out eventCode);  	if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  		LogInfo ("Finish signaled.  Stopping filter...");  		timer.Stop ();  		try {  			err = _mediaCtrl.StopWhenReady ();  			DestroyAudioEncoder ();  			DestroyVideoEncoder ();  			if (pinTeeVideo != null)  				Marshal.ReleaseComObject (pinTeeVideo);  			Marshal.ReleaseComObject (muxer);  			Marshal.ReleaseComObject (muxerPB);  			Marshal.ReleaseComObject (muxerFS);  			DestroyPreviewGraph ();  			Marshal.ReleaseComObject (mediaFilter);  			Marshal.ReleaseComObject (mediaPos);  			Marshal.ReleaseComObject (medEvent);  		}  		finally {  			CheckBeginInvokeUI<object> (delegate (object obj) {  				ProgressIsIndeterminate = false;  				RaisePropertyChanged ("ProgressIsIndeterminate");  				ProgressValue = 0;  				RaisePropertyChanged ("ProgressValue");  				progressLogEntry.Text = "Finished";  				LogInfo ("Graph Completed.");  				try {  					if (!_cancelRequested)  						ChooseDestination (tempPath);  				}  				catch (Exception e) {  					LogError (e);  					return;  				}  				File.Delete (tempPath);  				LogInfo ("Temporary file deleted.");  				_cancelRequested = false;  				_isTranscoding = false;  				TranscodeCommand.RaiseCanExecuteChanged ();  				CancelCommand.RaiseCanExecuteChanged ();  			}' null);  		}  	}  	else if (!_cancelRequested) {  		err = mediaPos.get_CurrentPosition (out current);  		err = mediaPos.get_Duration (out duration);  	}  	if (current < duration && !_cancelRequested) {  		ProgressValue = (current / duration) * 10000;  		RaisePropertyChanged ("ProgressValue");  		if (numElipses == 3)  			numElipses = 0;  		else  			numElipses++;  		StringBuilder sb = new StringBuilder ();  		for (int i = 0; i < numElipses; i++)  			sb.Append ('.');  		var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  		CheckBeginInvokeUI<object> (delegate (object obj) {  			progressLogEntry.Text = progressLogText;  		}' null);  	}  	else {  		ProgressIsIndeterminate = true;  		RaisePropertyChanged ("ProgressIsIndeterminate");  	}  }  catch (Exception e) {  	LogError (e);  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	if (_graphBuilder == null)  		return;  	IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  	IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  	EventCode eventCode;  	double current = 0;  	double duration = 0;  	int waitRes = S_OK;  	if (!_cancelRequested)  		waitRes = medEvent.WaitForCompletion (1' out eventCode);  	if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  		LogInfo ("Finish signaled.  Stopping filter...");  		timer.Stop ();  		try {  			err = _mediaCtrl.StopWhenReady ();  			DestroyAudioEncoder ();  			DestroyVideoEncoder ();  			if (pinTeeVideo != null)  				Marshal.ReleaseComObject (pinTeeVideo);  			Marshal.ReleaseComObject (muxer);  			Marshal.ReleaseComObject (muxerPB);  			Marshal.ReleaseComObject (muxerFS);  			DestroyPreviewGraph ();  			Marshal.ReleaseComObject (mediaFilter);  			Marshal.ReleaseComObject (mediaPos);  			Marshal.ReleaseComObject (medEvent);  		}  		finally {  			CheckBeginInvokeUI<object> (delegate (object obj) {  				ProgressIsIndeterminate = false;  				RaisePropertyChanged ("ProgressIsIndeterminate");  				ProgressValue = 0;  				RaisePropertyChanged ("ProgressValue");  				progressLogEntry.Text = "Finished";  				LogInfo ("Graph Completed.");  				try {  					if (!_cancelRequested)  						ChooseDestination (tempPath);  				}  				catch (Exception e) {  					LogError (e);  					return;  				}  				File.Delete (tempPath);  				LogInfo ("Temporary file deleted.");  				_cancelRequested = false;  				_isTranscoding = false;  				TranscodeCommand.RaiseCanExecuteChanged ();  				CancelCommand.RaiseCanExecuteChanged ();  			}' null);  		}  	}  	else if (!_cancelRequested) {  		err = mediaPos.get_CurrentPosition (out current);  		err = mediaPos.get_Duration (out duration);  	}  	if (current < duration && !_cancelRequested) {  		ProgressValue = (current / duration) * 10000;  		RaisePropertyChanged ("ProgressValue");  		if (numElipses == 3)  			numElipses = 0;  		else  			numElipses++;  		StringBuilder sb = new StringBuilder ();  		for (int i = 0; i < numElipses; i++)  			sb.Append ('.');  		var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  		CheckBeginInvokeUI<object> (delegate (object obj) {  			progressLogEntry.Text = progressLogText;  		}' null);  	}  	else {  		ProgressIsIndeterminate = true;  		RaisePropertyChanged ("ProgressIsIndeterminate");  	}  }  catch (Exception e) {  	LogError (e);  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: try {  	if (_graphBuilder == null)  		return;  	IMediaPosition mediaPos = (IMediaPosition)_graphBuilder;  	IMediaEvent medEvent = (IMediaEvent)_graphBuilder;  	EventCode eventCode;  	double current = 0;  	double duration = 0;  	int waitRes = S_OK;  	if (!_cancelRequested)  		waitRes = medEvent.WaitForCompletion (1' out eventCode);  	if (_cancelRequested || waitRes == S_OK || waitRes == VFW_E_WRONG_STATE) {  		LogInfo ("Finish signaled.  Stopping filter...");  		timer.Stop ();  		try {  			err = _mediaCtrl.StopWhenReady ();  			DestroyAudioEncoder ();  			DestroyVideoEncoder ();  			if (pinTeeVideo != null)  				Marshal.ReleaseComObject (pinTeeVideo);  			Marshal.ReleaseComObject (muxer);  			Marshal.ReleaseComObject (muxerPB);  			Marshal.ReleaseComObject (muxerFS);  			DestroyPreviewGraph ();  			Marshal.ReleaseComObject (mediaFilter);  			Marshal.ReleaseComObject (mediaPos);  			Marshal.ReleaseComObject (medEvent);  		}  		finally {  			CheckBeginInvokeUI<object> (delegate (object obj) {  				ProgressIsIndeterminate = false;  				RaisePropertyChanged ("ProgressIsIndeterminate");  				ProgressValue = 0;  				RaisePropertyChanged ("ProgressValue");  				progressLogEntry.Text = "Finished";  				LogInfo ("Graph Completed.");  				try {  					if (!_cancelRequested)  						ChooseDestination (tempPath);  				}  				catch (Exception e) {  					LogError (e);  					return;  				}  				File.Delete (tempPath);  				LogInfo ("Temporary file deleted.");  				_cancelRequested = false;  				_isTranscoding = false;  				TranscodeCommand.RaiseCanExecuteChanged ();  				CancelCommand.RaiseCanExecuteChanged ();  			}' null);  		}  	}  	else if (!_cancelRequested) {  		err = mediaPos.get_CurrentPosition (out current);  		err = mediaPos.get_Duration (out duration);  	}  	if (current < duration && !_cancelRequested) {  		ProgressValue = (current / duration) * 10000;  		RaisePropertyChanged ("ProgressValue");  		if (numElipses == 3)  			numElipses = 0;  		else  			numElipses++;  		StringBuilder sb = new StringBuilder ();  		for (int i = 0; i < numElipses; i++)  			sb.Append ('.');  		var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  		CheckBeginInvokeUI<object> (delegate (object obj) {  			progressLogEntry.Text = progressLogText;  		}' null);  	}  	else {  		ProgressIsIndeterminate = true;  		RaisePropertyChanged ("ProgressIsIndeterminate");  	}  }  catch (Exception e) {  	LogError (e);  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: if (current < duration && !_cancelRequested) {  	ProgressValue = (current / duration) * 10000;  	RaisePropertyChanged ("ProgressValue");  	if (numElipses == 3)  		numElipses = 0;  	else  		numElipses++;  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i < numElipses; i++)  		sb.Append ('.');  	var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  	CheckBeginInvokeUI<object> (delegate (object obj) {  		progressLogEntry.Text = progressLogText;  	}' null);  }  else {  	ProgressIsIndeterminate = true;  	RaisePropertyChanged ("ProgressIsIndeterminate");  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: if (current < duration && !_cancelRequested) {  	ProgressValue = (current / duration) * 10000;  	RaisePropertyChanged ("ProgressValue");  	if (numElipses == 3)  		numElipses = 0;  	else  		numElipses++;  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i < numElipses; i++)  		sb.Append ('.');  	var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  	CheckBeginInvokeUI<object> (delegate (object obj) {  		progressLogEntry.Text = progressLogText;  	}' null);  }  else {  	ProgressIsIndeterminate = true;  	RaisePropertyChanged ("ProgressIsIndeterminate");  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: if (current < duration && !_cancelRequested) {  	ProgressValue = (current / duration) * 10000;  	RaisePropertyChanged ("ProgressValue");  	if (numElipses == 3)  		numElipses = 0;  	else  		numElipses++;  	StringBuilder sb = new StringBuilder ();  	for (int i = 0; i < numElipses; i++)  		sb.Append ('.');  	var progressLogText = string.Format ("Transcoding {0:f2}%{1}"' (current / duration) * 100' sb.ToString ());  	CheckBeginInvokeUI<object> (delegate (object obj) {  		progressLogEntry.Text = progressLogText;  	}' null);  }  else {  	ProgressIsIndeterminate = true;  	RaisePropertyChanged ("ProgressIsIndeterminate");  }  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: ProgressValue = (current / duration) * 10000;  
Magic Number,TranscodeToMP4.Model,PrimaryModel,C:\repos\jeffgriffin_Blog\TranscodeToMP4\Model\PrimaryModel.cs,Transcode,The following statement contains a magic number: if (numElipses == 3)  	numElipses = 0;  else  	numElipses++;  
