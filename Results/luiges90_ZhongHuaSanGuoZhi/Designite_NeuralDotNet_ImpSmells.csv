Implementation smell,Namespace,Class,File,Method,Description
Complex Method,NeuronDotNet.Core,Network,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Network.cs,Learn,Cyclomatic complexity of the method is 8
Complex Conditional,NeuronDotNet.Core,Network,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Network.cs,Learn,The conditional expression  "(trainingSet.InputVectorLength != inputLayer.NeuronCount)                  || (trainingMethod == TrainingMethod.Supervised && trainingSet.OutputVectorLength != outputLayer.NeuronCount)                  || (trainingMethod == TrainingMethod.Unsupervised && trainingSet.OutputVectorLength != 0)"  is complex.
Virtual Method Call from Constructor,NeuronDotNet.Core,Network,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Network.cs,Network,The constructor "Network" calls a virtual method "Initialize".
Magic Number,NeuronDotNet.Core,Layer<TNeuron>,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Layer.cs,Layer,The following statement contains a magic number: this.learningRateFunction = new LinearFunction(0.3d' 0.05d);
Magic Number,NeuronDotNet.Core,Layer<TNeuron>,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Layer.cs,Layer,The following statement contains a magic number: this.learningRateFunction = new LinearFunction(0.3d' 0.05d);
Magic Number,NeuronDotNet.Core,Network,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Network.cs,Network,The following statement contains a magic number: this.jitterEpoch = 73;
Magic Number,NeuronDotNet.Core,Network,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Network.cs,Network,The following statement contains a magic number: this.jitterNoiseLimit = 0.03d;
Magic Number,NeuronDotNet.Core.Initializers,NguyenWidrowFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\Initializers\NguyenWidrowFunction.cs,NGuyenWidrowFactor,The following statement contains a magic number: return 0.7d * Math.Pow(hiddenNeuronCount' (1d / inputNeuronCount)) / outputRange;
Magic Number,NeuronDotNet.Core.LearningRateFunctions,ExponentialFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\LearningRateFunctions\ExponentialFunction.cs,ExponentialFunction,The following statement contains a magic number: logFinalByInitial                  = Math.Log(Math.Max(initialLearningRate' initialLearningRate + 1e-4)                  / Math.Max(finalLearningRate' finalLearningRate + 1e-4));
Magic Number,NeuronDotNet.Core.LearningRateFunctions,ExponentialFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\LearningRateFunctions\ExponentialFunction.cs,ExponentialFunction,The following statement contains a magic number: logFinalByInitial                  = Math.Log(Math.Max(initialLearningRate' initialLearningRate + 1e-4)                  / Math.Max(finalLearningRate' finalLearningRate + 1e-4));
Magic Number,NeuronDotNet.Core.LearningRateFunctions,ExponentialFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\LearningRateFunctions\ExponentialFunction.cs,ExponentialFunction,The following statement contains a magic number: logFinalByInitial                  = Math.Log(Math.Max(initialLearningRate' initialLearningRate + 1e-4)                  / Math.Max(finalLearningRate' finalLearningRate + 1e-4));
Magic Number,NeuronDotNet.Core.LearningRateFunctions,ExponentialFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\LearningRateFunctions\ExponentialFunction.cs,ExponentialFunction,The following statement contains a magic number: logFinalByInitial                  = Math.Log(Math.Max(initialLearningRate' initialLearningRate + 1e-4)                  / Math.Max(finalLearningRate' finalLearningRate + 1e-4));
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,MexicanHatFunction,The following statement contains a magic number: this.sigma = learningRadius / 0.6259d;
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: double sigmaSquare = sigma * sigma + 1e-9;
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dxSquare += 0.25 + (((neuron.Coordinate.X > winnerX) == (winnerY % 2 == 0)) ? dx : -dx);
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dxSquare += 0.25 + (((neuron.Coordinate.X > winnerX) == (winnerY % 2 == 0)) ? dx : -dx);
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dy % 2 == 1
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dySquare *= 0.75;
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,MexicanHatFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\MexicanHatFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: neuron.neighborhoodValue = (1 - distanceBySigmaSquare) * Math.Exp(-distanceBySigmaSquare / 2);
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,GaussianFunction,The following statement contains a magic number: this.sigma = learningRadius / 1.17741d;
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: double twoSigmaSquare = 2 * currentSigma * currentSigma;
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dxSquare += 0.25 + (((neuron.Coordinate.X > winnerX )== (winnerY % 2 ==0))? dx: -dx);
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dxSquare += 0.25 + (((neuron.Coordinate.X > winnerX )== (winnerY % 2 ==0))? dx: -dx);
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dy % 2 == 1
Magic Number,NeuronDotNet.Core.SOM.NeighborhoodFunctions,GaussianFunction,D:\research\architectureSmells\repos\luiges90_ZhongHuaSanGuoZhi\NeuralDotNet\SOM\NeighborhoodFunctions\GaussianFunction.cs,EvaluateNeighborhood,The following statement contains a magic number: dySquare *= 0.75;
