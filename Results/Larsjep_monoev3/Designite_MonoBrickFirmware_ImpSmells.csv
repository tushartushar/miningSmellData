Implementation smell,Namespace,Class,File,Method,Description
Long Method,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The method has 106 lines of code.
Complex Method,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,Cyclomatic complexity of the method is 14
Complex Method,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,Cyclomatic complexity of the method is 13
Long Parameter List,MonoBrickFirmware.Native,Libc,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\Libc.cs,mmap,The method has 6 parameters. Parameters: addr' len' prot' flags' fd' offset
Long Parameter List,MonoBrickFirmware.Tools,PIDAbstraction,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\PIDAbstraction.cs,PIDAbstraction,The method has 8 parameters. Parameters: P' I' D' newSampleTime' maxOut' minOut' maxChangePerSec' minChangePerSec
Long Parameter List,MonoBrickFirmware.Display,Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Lcd.cs,DrawBitmap,The method has 5 parameters. Parameters: bs' p' xsize' ysize' color
Long Parameter List,MonoBrickFirmware.Display,Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Lcd.cs,WriteTextBox,The method has 5 parameters. Parameters: f' r' text' color' aln
Long Parameter List,MonoBrickFirmware.Display,Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Lcd.cs,DrawEllipse,The method has 5 parameters. Parameters: center' radiusA' radiusB' color' fill
Long Parameter List,MonoBrickFirmware.Display,ILcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\ILcd.cs,DrawBitmap,The method has 5 parameters. Parameters: bs' p' xsize' ysize' color
Long Parameter List,MonoBrickFirmware.Display,ILcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\ILcd.cs,WriteTextBox,The method has 5 parameters. Parameters: f' r' text' color' aln
Long Parameter List,MonoBrickFirmware.Display,ILcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\ILcd.cs,DrawEllipse,The method has 5 parameters. Parameters: center' radiusA' radiusB' color' fill
Long Parameter List,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawBitmap,The method has 5 parameters. Parameters: bs' p' xSize' ySize' color
Long Parameter List,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,WriteTextBox,The method has 5 parameters. Parameters: f' r' text' color' aln
Long Parameter List,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The method has 5 parameters. Parameters: center' radiusA' radiusB' color' fill
Long Parameter List,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,SetStepPower,The method has 5 parameters. Parameters: power' rampUpSteps' constantSpeedSteps' rampDownSteps' brake
Long Parameter List,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,SetTimePower,The method has 5 parameters. Parameters: power' rampUpTime' constantSpeedTime' rampDownTime' brake
Long Parameter List,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,SetStepSpeed,The method has 5 parameters. Parameters: speed' rampUpSteps' constantSpeedSteps' rampDownSteps' brake
Long Parameter List,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,SetTimeSpeed,The method has 5 parameters. Parameters: speed' rampUpTime' constantSpeedTime' rampDownTime' brake
Long Parameter List,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,WriteProfile,The method has 6 parameters. Parameters: code' speedOrPower' rampUp' constant' rampDown' brake
Long Parameter List,MonoBrickFirmware.Movement,Motor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Motor.cs,SpeedProfile,The method has 5 parameters. Parameters: speed' rampUpSteps' constantSpeedSteps' rampDownSteps' brake
Long Parameter List,MonoBrickFirmware.Movement,Motor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Motor.cs,SpeedProfileTime,The method has 5 parameters. Parameters: speed' rampUpTimeMs' constantSpeedTimeMs' rampDownTimeMs' brake
Long Parameter List,MonoBrickFirmware.Movement,Motor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Motor.cs,PowerProfile,The method has 5 parameters. Parameters: power' rampUpSteps' constantSpeedSteps' rampDownSteps' brake
Long Parameter List,MonoBrickFirmware.Movement,Motor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Motor.cs,PowerProfileTime,The method has 5 parameters. Parameters: power' rampUpTimeMs' constantSpeedTimeMs' rampDownTimeMs' brake
Long Parameter List,MonoBrickFirmware.Movement,PositionPID,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\PositionPID.cs,PositionPID,The method has 8 parameters. Parameters: motor' position' brake' maxPower' P' I' D' settleTimeMs
Long Parameter List,MonoBrickFirmware.Display.Menus,ItemWithCharacterInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithCharacterInput.cs,ItemWithCharacterInput,The method has 7 parameters. Parameters: subject' dialogTitle' startText' OnChanged' hideInput' disableEnter' disableNumberAndSymbols
Long Parameter List,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,ItemWithNumericInput,The method has 5 parameters. Parameters: text' startValue' OnValueChanged' min' max
Long Parameter List,MonoBrickFirmware.Display.Menus,ItemWithCheckBoxStep,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithCheckBoxStep.cs,ItemWithCheckBoxStep,The method has 5 parameters. Parameters: text' checkedAtStart' stepTitle' step' OnCheckedChanged
Long Parameter List,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The method has 5 parameters. Parameters: f' title' width' height' topOffset
Long Parameter List,MonoBrickFirmware.Display.Dialogs,QuestionDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\QuestionsDialog.cs,QuestionDialog,The method has 5 parameters. Parameters: question' title' positiveText' negativeText' isPositiveSelected
Long Parameter List,MonoBrickFirmware.Display.Dialogs,DialogWithProgessAnimation,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\DialogWithProgessAnimation.cs,DialogWithProgessAnimation,The method has 5 parameters. Parameters: f' title' width' height' topOffset
Long Parameter List,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Button,The method has 7 parameters. Parameters: text' position' size' container' id' disable' exitType
Long Statement,MonoBrickFirmware.Native,UnixDevice,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\Libc.cs,MMap,The length of the statement  "			IntPtr ptr = Libc.mmap(IntPtr.Zero' size' Libc.ProtectionFlags.PROT_READ | Libc.ProtectionFlags.PROT_WRITE' Libc.MMapFlags.MAP_SHARED' fd' offset); " is 147.
Long Statement,MonoBrickFirmware.Native,MemoryArea,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\Libc.cs,Write,The length of the statement  "				throw new IndexOutOfRangeException (string.Format ("Out of range accessing index {0}' max {1}"' offset + data.Length' size)); " is 125.
Long Statement,MonoBrickFirmware.Native,MemoryArea,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\Libc.cs,Read,The length of the statement  "				throw new IndexOutOfRangeException (string.Format ("Out of range accessing index {0}' max {1}"' offset + length' size)); " is 120.
Long Statement,MonoBrickFirmware.Tools,XmlHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\XmlHelper.cs,CreateSerializer,The length of the statement  "				XmlSerializerImplementation imp =  (XmlSerializerImplementation)asm.CreateInstance("Mono.GeneratedSerializers.Literal.XmlSerializerContract");		 " is 142.
Long Statement,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,TakeScreenShot,The length of the statement  "			TakeScreenShot(System.IO.Directory.GetCurrentDirectory()' "ScreenShot-" + string.Format ("{0:yyyy-MM-dd_hh-mm-ss-tt}"' DateTime.Now) + ".bmp"); " is 143.
Long Statement,MonoBrickFirmware.Sensors,SensorManager,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorManager.cs,ClearUartPortChanged,The length of the statement  "				UartDevice.IoCtl ((Int32)UartIOClearChanges'  SetupCommand (port' ConnectionType.UART' SensorType.None' (byte)UARTMode.Mode0)); " is 127.
Long Statement,MonoBrickFirmware.Sensors,UartSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\UARTSensor.cs,ClearPortChanged,The length of the statement  "			uartMemory.Write (UartStatusOffset + (int) port' new byte[] { (byte)(uartMemory.Read (UartStatusOffset +(int)port' 1) [0] & ~UartPortChanged) }); " is 145.
Long Statement,MonoBrickFirmware.Sensors,UltraSonicSettings,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,ToString,The length of the statement  "             return "Zero: " + zero.ToString() + " Scale factor: " + scaleFactor.ToString() + " Scale division: " + scaleDivision.ToString(); " is 128.
Long Statement,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,OnDrawTitle,The length of the statement  "			Rectangle arrowRect = new Rectangle (new Point (rectangle.P2.X - (arrowWidth + arrowOffset)' rectangle.P1.Y + arrowEdge)' new Point (rectangle.P2.X - arrowOffset' rectangle.P2.Y - arrowEdge)); " is 192.
Long Statement,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,DrawItemList,The length of the statement  "			Rectangle arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height - arrowHeight)' new Point (Lcd.Width / 2 + arrowWidth / 2' Lcd.Height - 1)); " is 167.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithCheckBox,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithCheckBox.cs,OnDrawTitle,The length of the statement  "			Rectangle outer = new Rectangle(new Point(Lcd.Width - xCheckBoxSize + edgeSize' r.P1.Y + edgeSize)' new Point(r.P2.X - edgeSize'r.P2.Y - edgeSize)); " is 148.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithCheckBox,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithCheckBox.cs,OnDrawTitle,The length of the statement  "			Rectangle innter = new Rectangle(new Point(Lcd.Width - xCheckBoxSize + lineSize+edgeSize' r.P1.Y+lineSize + edgeSize)' new Point(r.P2.X - lineSize - edgeSize'r.P2.Y - lineSize - edgeSize)); " is 189.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnDrawTitle,The length of the statement  "			Rectangle leftArrowRect = new Rectangle(new Point(numericRect.P1.X' numericRect.P1.Y+arrowEdge)' new Point(numericRect.P1.X+ arrowWidth' numericRect.P2.Y-arrowEdge)); " is 166.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnDrawTitle,The length of the statement  "			Rectangle rightArrowRect = new Rectangle( new Point(numericRect.P2.X-(arrowWidth + rightArrowOffset)' numericRect.P1.Y+arrowEdge) ' new Point(numericRect.P2.X-rightArrowOffset'numericRect.P2.Y-arrowEdge)); " is 205.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithOptions<OptionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithOptions.cs,OnDrawTitle,The length of the statement  "			Rectangle leftArrowRect = new Rectangle(new Point(numericRect.P1.X' numericRect.P1.Y+arrowEdge)' new Point(numericRect.P1.X+ arrowWidth' numericRect.P2.Y-arrowEdge)); " is 166.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithOptions<OptionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithOptions.cs,OnDrawTitle,The length of the statement  "			Rectangle rightArrowRect = new Rectangle( new Point(numericRect.P2.X-(arrowWidth + rightArrowOffset)' numericRect.P1.Y+arrowEdge) ' new Point(numericRect.P2.X-rightArrowOffset'numericRect.P2.Y-arrowEdge)); " is 205.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithSettings,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithSettings.cs,OnCreateChildList,The length of the statement  "			autoConnect = new ItemWithCheckBox ("WiFi auto connect"' FirmwareSettings.GeneralSettings.ConnectToWiFiAtStartUp' OnAutoConnectChanged); " is 136.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithSettings,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithSettings.cs,OnCreateChildList,The length of the statement  "			autoCheck = new ItemWithCheckBox("Update check"'FirmwareSettings.GeneralSettings.CheckForSwUpdatesAtStartUp' OnAutoCheckChanged); " is 129.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWiFiOptions,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithWiFiOptions.cs,OnCreateChildList,The length of the statement  "			ssidItem = new ItemWithCharacterInput("SSID"' "Enter SSID"' FirmwareSettings.WiFiSettings.SSID' OnSsidChanged'false' true ' false); " is 131.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWiFiOptions,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithWiFiOptions.cs,OnCreateChildList,The length of the statement  "			passwordItem = new ItemWithCharacterInput("Password"' "Password"' FirmwareSettings.WiFiSettings.Password' OnPasswordChanged' true' true' false); " is 144.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWiFiOptions,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithWiFiOptions.cs,OnCreateChildList,The length of the statement  "			encryptionItem = new ItemWithOptions<string>("Encryption"' new string[]{"None"'"WPA/2"}' OnEncryptionOptionChanged' FirmwareSettings.WiFiSettings.Encryption ? 1 : 0); " is 166.
Long Statement,MonoBrickFirmware.Display.Menus,TurnWiFiOnOffCheckBox,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithWiFiOptions.cs,OnTurnWiFiOn,The length of the statement  "			return WiFiDevice.TurnOn(FirmwareSettings.WiFiSettings.SSID' FirmwareSettings.WiFiSettings.Password' FirmwareSettings.WiFiSettings.Encryption' ConnectTimeout); " is 159.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithUpdateDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithUpdateDialog.cs,OnCheckCompleted,The length of the statement  "				infoDialog = new ItemWithDialog<InfoDialog>( new InfoDialog("New image available. Download it from www.monobrick.dk or ftp://soborg.net")); " is 139.
Long Statement,MonoBrickFirmware.Display.Menus,ItemWithUpdateDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithUpdateDialog.cs,OnCheckCompleted,The length of the statement  "						infoDialog = new ItemWithDialog<InfoDialog>( new InfoDialog("New Xamarin Add-in. Download it from www.monobrick.dk or ftp://soborg.net")); " is 138.
Long Statement,MonoBrickFirmware.Display.Dialogs,InfoDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\InfoDialog.cs,DrawScrollBar,The length of the statement  "			Rectangle indexRec = new Rectangle (new Point(scrollBar.P1.X + (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight)' new Point(scrollBar.P2.X - (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight + indexHeight ) ); " is 264.
Long Statement,MonoBrickFirmware.Display.Dialogs,DialogWithProgessAnimation,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\DialogWithProgessAnimation.cs,StartProgressAnimation,The length of the statement  "				progressRect = new Rectangle (progressRect.P1 + new Point (progressEdgeX' progressEdgeY)' progressRect.P2 + new Point (-progressEdgeX' -progressEdgeY)); " is 152.
Long Statement,MonoBrickFirmware.FileSystem,EV3ProgramManager,C:\repos\Larsjep_monoev3\MonoBrickFirmware\FileSystem\EV3ProgramManager.cs,UpdateProgramList,The length of the statement  "					ProgramLocation location = programFolder.Contains (ProgramPathSdCard) ? ProgramLocation.SDCard : ProgramLocation.ProgramFolder;  " is 127.
Long Statement,MonoBrickFirmware.FirmwareUpdate,EV3UpdateHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\FirmwareUpdate\EV3UpdateHelper.cs,DownloadFirmware,The length of the statement  "			return DownloadPackage(PackageName'Path.Combine(GetRepository()' "StartupApp")' Path.Combine(BinDir' GetAvailableFirmware())' true); " is 132.
Long Statement,MonoBrickFirmware.FirmwareUpdate,EV3UpdateHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\FirmwareUpdate\EV3UpdateHelper.cs,DownloadPackage,The length of the statement  "						ok = DownloadFile(element.FileName' Path.Combine(Path.Combine(GetRepository()'"StartupApp") ' element.Subdir)' Path.Combine(downloadPath' element.Subdir)' overwriteFiles); " is 171.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,ApplyContainer,The length of the statement  "			Point reSize = new Point (outherBox.P2.X + ((buttonOutherPoint.X + buttonSpace.X) * (Size.X - 1))' outherBox.P2.Y + ((buttonOutherPoint.Y + buttonSpace.Y) * (Size.Y - 1)));  " is 172.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,ApplyContainer,The length of the statement  "			innerBox = new Rectangle (new Point (outherBox.P1.X + characterEdge' outherBox.P1.Y + characterEdge)' new Point (outherBox.P2.X - characterEdge' outherBox.P2.Y - characterEdge)); " is 178.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The length of the statement  "			Lcd.DrawLine (new Point(arrowRect.P2.X' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y +((outherBox.P2.Y - outherBox.P1.Y)/2) )' !Selected); " is 211.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The length of the statement  "			Lcd.DrawLine (new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + 4* characterEdge)' !Selected); " is 210.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The length of the statement  "						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1))' inputLines [inputLines.Count - 1]' !Selected); " is 130.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The length of the statement  "						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1) * 2)' currentLine + SelectedCharacter' !Selected); " is 132.
Long Statement,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The length of the statement  "						Lcd.WriteText (resultFont' topPoint + new Point (0' (int)resultFont.maxHeight-1)' currentLine + SelectedCharacter' !Selected); " is 126.
Complex Conditional,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The conditional expression  "blue < 70 || green < 70 || (blank < 140 && red < 140)"  is complex.
Complex Conditional,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The conditional expression  "red < 70 || blue < 70 || (blank < 140 && green < 140)"  is complex.
Complex Conditional,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The conditional expression  "(((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue"  is complex.
Complex Conditional,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The conditional expression  "red < 60 || green < 60 || (blank < 110 && blue < 120)"  is complex.
Empty Catch Block,MonoBrickFirmware.Native,ProcessHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\ProcessHelper.cs,GetProcessId,The method has an empty catch block.
Empty Catch Block,MonoBrickFirmware.Connections,EV3WiFiDevice,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Connections\EV3WiFiDevice.cs,IsLinkUp,The method has an empty catch block.
Empty Catch Block,MonoBrickFirmware.Connections,EV3WiFiDevice,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Connections\EV3WiFiDevice.cs,Gateway,The method has an empty catch block.
Empty Catch Block,MonoBrickFirmware.FirmwareUpdate,EV3UpdateHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\FirmwareUpdate\EV3UpdateHelper.cs,CurrentAddInVersion,The method has an empty catch block.
Magic Number,MonoBrickFirmware.Native,GacHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Native\GacHelper.cs,IsAssembyInGac,The following statement contains a magic number: for (int i = 0; i < outputStrings.Length; i++)  			{  				if(outputStrings[i].ToLower().Contains("items") && outputStrings[i+1].ToLower().Contains("="))  				{  					installed = outputStrings[i+2] != "0";  					break;  				}  			  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following statement contains a magic number: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CalculateImageSize,The following statement contains a magic number: if(Convert.ToBoolean(( colorDepthAsUInt16 * width)%32) ){  				temp =(uint) (colorDepthAsUInt16 * width)/32+1;  			}  			else{  			  	temp = (uint) (colorDepthAsUInt16 * width) / 32;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CalculateImageSize,The following statement contains a magic number: if(Convert.ToBoolean(( colorDepthAsUInt16 * width)%32) ){  				temp =(uint) (colorDepthAsUInt16 * width)/32+1;  			}  			else{  			  	temp = (uint) (colorDepthAsUInt16 * width) / 32;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CalculateImageSize,The following statement contains a magic number: if(Convert.ToBoolean(( colorDepthAsUInt16 * width)%32) ){  				temp =(uint) (colorDepthAsUInt16 * width)/32+1;  			}  			else{  			  	temp = (uint) (colorDepthAsUInt16 * width) / 32;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CalculateImageSize,The following statement contains a magic number: return 4*temp*height;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CalculateFileSize,The following statement contains a magic number: if(colorDepth == ColorDepth.LowColor){  				return CalculateImageSize(width' height' colorDepth) + BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  			}
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: colorMatrix[2]=0x66;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: colorMatrix[3]=0x99;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: colorMatrix[4]=0xcc;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: colorMatrix[5]=0xff;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: while(i<6){  		    result=color-colorMatrix[i];  		    if(result<0){  		      result=-result;  		    }  		    if(result<=25){  		        j=i;  		        i=10;  		    }  		    i++;  		  }
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: while(i<6){  		    result=color-colorMatrix[i];  		    if(result<0){  		      result=-result;  		    }  		    if(result<=25){  		        j=i;  		        i=10;  		    }  		    i++;  		  }
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetCubeIndex,The following statement contains a magic number: while(i<6){  		    result=color-colorMatrix[i];  		    if(result<0){  		      result=-result;  		    }  		    if(result<=25){  		        j=i;  		        i=10;  		    }  		    i++;  		  }
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetColorIndex,The following statement contains a magic number: return (byte)((GetCubeIndex(color.Red) * 36) + (GetCubeIndex(color.Green) * 6) + GetCubeIndex(color.Blue));
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,GetColorIndex,The following statement contains a magic number: return (byte)((GetCubeIndex(color.Red) * 36) + (GetCubeIndex(color.Green) * 6) + GetCubeIndex(color.Blue));
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateColorPalette,The following statement contains a magic number: colorMatrix[2] = 0x66;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateColorPalette,The following statement contains a magic number: colorMatrix[3] = 0x99;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateColorPalette,The following statement contains a magic number: colorMatrix[4] = 0xcc;
Magic Number,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateColorPalette,The following statement contains a magic number: colorMatrix[5] = 0xff;
Magic Number,MonoBrickFirmware.Tools,ByteArrayCreator,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\ByteArrayCreator.cs,AddSpacesToString,The following statement contains a magic number: StringBuilder newText = new StringBuilder(text.Length * 2);
Magic Number,MonoBrickFirmware.Tools,PIDAbstraction,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\PIDAbstraction.cs,CalculateOutput,The following statement contains a magic number: uk = uk1 + k1 * (ek - ek1) + k2 * ek + k3 * (ek - 2 * ek1 + ek2);
Magic Number,MonoBrickFirmware.Display,Bitmap,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Bitmap.cs,Bitmap,The following statement contains a magic number: Height = data[2];
Magic Number,MonoBrickFirmware.Display,Bitmap,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Bitmap.cs,Bitmap,The following statement contains a magic number: dataOffset = 3;
Magic Number,MonoBrickFirmware.Display,Bitmap,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Bitmap.cs,FromResouce,The following statement contains a magic number: UInt32[] data = new UInt32[s.Length/4];
Magic Number,MonoBrickFirmware.Display,Bitmap,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Bitmap.cs,FromResouce,The following statement contains a magic number: for (int i = 0; i != s.Length/4; ++i)  				data[i] = BitConverter.ToUInt32(bytedata' i*4);
Magic Number,MonoBrickFirmware.Display,Bitmap,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Bitmap.cs,FromResouce,The following statement contains a magic number: for (int i = 0; i != s.Length/4; ++i)  				data[i] = BitConverter.ToUInt32(bytedata' i*4);
Magic Number,MonoBrickFirmware.Display,CharStreamer,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,CharStreamer,The following statement contains a magic number: this.width = GetBits(8);
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,FromResource,The following statement contains a magic number: UInt32[] data = new UInt32[s.Length/4];
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,FromResource,The following statement contains a magic number: for (int i = 0; i != s.Length/4; ++i)  				data[i] = BitConverter.ToUInt32(bytedata' i*4);
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,FromResource,The following statement contains a magic number: for (int i = 0; i != s.Length/4; ++i)  				data[i] = BitConverter.ToUInt32(bytedata' i*4);
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,Font,The following statement contains a magic number: maxHeight = data[2];
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,Font,The following statement contains a magic number: charWordSize = data[3];
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,Font,The following statement contains a magic number: firstChar = 4;
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,getChar,The following statement contains a magic number: int index = (int)c - 32;
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,getChar,The following statement contains a magic number: if (index < 0 || (index > 128-32))  				index = 0;
Magic Number,MonoBrickFirmware.Display,Font,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Font.cs,getChar,The following statement contains a magic number: if (index < 0 || (index > 128-32))  				index = 0;
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,SetPixel,The following statement contains a magic number: int index = (x/8)+ y * bytesPrLine;
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,IsPixelSet,The following statement contains a magic number: int index = (x / 8) + y * bytesPrLine;
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,TakeScreenShot,The following statement contains a magic number: for (int y = Height - 1; y >= 0; y--) {  				for (int x = 0; x < bytesPrLine * 8; x++) {  					if (IsPixelSet (x' y)) {  						color.Blue = 0x00;  						color.Green = 0x00;  						color.Red = 0x00;	  					} else {  						color.Red = (byte)redActual;  						color.Green = (byte)greenActual;  						color.Blue = (byte)blueActual;  					}  					screenshotImage.AppendRGB (color);  				}  				redActual -= redGradientStep;  				greenActual -= greenGradientStep;  				blueActual -= blueGradientStep;  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawBitmap,The following statement contains a magic number: for (int yPos = p.Y; yPos != p.Y+ySize; yPos++)  			{  				int BufPos = bytesPrLine*yPos+p.X/8;  				uint xBitsLeft = xSize;  				int xPos = p.X;    				while (xBitsLeft > 0)  				{  					int bitPos = xPos & 0x7;					  					uint bitsToWrite = Math.Min(xBitsLeft' (uint)(8-bitPos));  					if (color)  						displayBuf[BufPos] |= (byte)(bs.GetBits(bitsToWrite) << bitPos);  					else  						displayBuf[BufPos] &= (byte)~(bs.GetBits(bitsToWrite) << bitPos);  					xBitsLeft -= bitsToWrite;  					xPos += (int)bitsToWrite;  					BufPos++;  				}				  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawBitmap,The following statement contains a magic number: for (int yPos = p.Y; yPos != p.Y+ySize; yPos++)  			{  				int BufPos = bytesPrLine*yPos+p.X/8;  				uint xBitsLeft = xSize;  				int xPos = p.X;    				while (xBitsLeft > 0)  				{  					int bitPos = xPos & 0x7;					  					uint bitsToWrite = Math.Min(xBitsLeft' (uint)(8-bitPos));  					if (color)  						displayBuf[BufPos] |= (byte)(bs.GetBits(bitsToWrite) << bitPos);  					else  						displayBuf[BufPos] &= (byte)~(bs.GetBits(bitsToWrite) << bitPos);  					xBitsLeft -= bitsToWrite;  					xPos += (int)bitsToWrite;  					BufPos++;  				}				  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Left)   			{  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Left)   			{  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Left)   			{  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P1.X + i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Right) {  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P2.X - i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Right) {  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P2.X - i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Right) {  				for (int i = 0; i < width; i++) {  					SetPixel ((int)(r.P2.X - i)' (int)(r.P1.Y + height/2)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 +j)' color);  						SetPixel ((int)(r.P2.X -i)' (int)(r.P1.Y + height / 2 -j)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Up) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P1.Y + i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P1.Y + i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P1.Y + i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Up) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P1.Y + i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P1.Y + i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P1.Y + i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Up) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P1.Y + i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P1.Y + i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P1.Y + i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Down) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P2.Y -i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P2.Y - i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P2.Y - i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Down) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P2.Y -i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P2.Y - i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P2.Y - i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawArrow,The following statement contains a magic number: if (orientation == Lcd.ArrowOrientation.Down) {  				for (int i = 0; i < height; i++) {    					SetPixel ((int)(r.P1.X + width/2)' (int)(r.P2.Y -i)' color);  					int points = (int)(inc*(float)i)+1;  					for (int j = 0; j < points; j++) {  						SetPixel ((int)(r.P1.X + width/2+j)' (int)(r.P2.Y - i)' color);  						SetPixel ((int)(r.P1.X + width/2-j)' (int)(r.P2.Y - i)' color);  					}  				}	  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,WriteTextBox,The following statement contains a magic number: if (aln == Lcd.Alignment.Left)  			{  			}   			else if (aln == Lcd.Alignment.Center)  			{  				int width = TextWidth(f' text);  				xpos = (r.P2.X-r.P1.X)/2-width/2;  				if (xpos < 0) xpos = 0;  			}  			else   			{  				int width = TextWidth(f' text);  				xpos = (r.P2.X-r.P1.X)-width;  				if (xpos < 0) xpos = 0;  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,WriteTextBox,The following statement contains a magic number: if (aln == Lcd.Alignment.Left)  			{  			}   			else if (aln == Lcd.Alignment.Center)  			{  				int width = TextWidth(f' text);  				xpos = (r.P2.X-r.P1.X)/2-width/2;  				if (xpos < 0) xpos = 0;  			}  			else   			{  				int width = TextWidth(f' text);  				xpos = (r.P2.X-r.P1.X)-width;  				if (xpos < 0) xpos = 0;  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawCircle,The following statement contains a magic number: if (fill)   			{  				for (int y = -radius; y <= radius; y++) {  					for (int x = -radius; x <= radius; x++) {  						if (x * x + y * y <= radius * radius) {  							SetPixel (center.X + x' center.Y + y' color);  						}  					}  				}	  			}   			else   			{  				int f = 1 - radius;  				int ddF_x = 0;  				int ddF_y = -2 * radius;  				int x = 0;  				int y = radius;    				var right = new Point (center.X + radius' center.Y);  				var top = new Point (center.X' center.Y - radius);  				var left = new Point (center.X - radius' center.Y);  				var bottom = new Point (center.X' center.Y + radius);    				SetPixel (right.X' right.Y' color);  				SetPixel (top.X' top.Y' color);  				SetPixel (left.X' left.Y' color);  				SetPixel (bottom.X' bottom.Y' color);    				while (x < y) {  					if (f >= 0) {  						y--;  						ddF_y += 2;  						f += ddF_y;  					}  					x++;  					ddF_x += 2;  					f += ddF_x + 1;    					SetPixel (center.X + x' center.Y + y' color);  					SetPixel (center.X - x' center.Y + y' color);  					SetPixel (center.X + x' center.Y - y' color);  					SetPixel (center.X - x' center.Y - y' color);  					SetPixel (center.X + y' center.Y + x' color);  					SetPixel (center.X - y' center.Y + x' color);  					SetPixel (center.X + y' center.Y - x' color);  					SetPixel (center.X - y' center.Y - x' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawCircle,The following statement contains a magic number: if (fill)   			{  				for (int y = -radius; y <= radius; y++) {  					for (int x = -radius; x <= radius; x++) {  						if (x * x + y * y <= radius * radius) {  							SetPixel (center.X + x' center.Y + y' color);  						}  					}  				}	  			}   			else   			{  				int f = 1 - radius;  				int ddF_x = 0;  				int ddF_y = -2 * radius;  				int x = 0;  				int y = radius;    				var right = new Point (center.X + radius' center.Y);  				var top = new Point (center.X' center.Y - radius);  				var left = new Point (center.X - radius' center.Y);  				var bottom = new Point (center.X' center.Y + radius);    				SetPixel (right.X' right.Y' color);  				SetPixel (top.X' top.Y' color);  				SetPixel (left.X' left.Y' color);  				SetPixel (bottom.X' bottom.Y' color);    				while (x < y) {  					if (f >= 0) {  						y--;  						ddF_y += 2;  						f += ddF_y;  					}  					x++;  					ddF_x += 2;  					f += ddF_x + 1;    					SetPixel (center.X + x' center.Y + y' color);  					SetPixel (center.X - x' center.Y + y' color);  					SetPixel (center.X + x' center.Y - y' color);  					SetPixel (center.X - x' center.Y - y' color);  					SetPixel (center.X + y' center.Y + x' color);  					SetPixel (center.X - y' center.Y + x' color);  					SetPixel (center.X + y' center.Y - x' color);  					SetPixel (center.X - y' center.Y - x' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawCircle,The following statement contains a magic number: if (fill)   			{  				for (int y = -radius; y <= radius; y++) {  					for (int x = -radius; x <= radius; x++) {  						if (x * x + y * y <= radius * radius) {  							SetPixel (center.X + x' center.Y + y' color);  						}  					}  				}	  			}   			else   			{  				int f = 1 - radius;  				int ddF_x = 0;  				int ddF_y = -2 * radius;  				int x = 0;  				int y = radius;    				var right = new Point (center.X + radius' center.Y);  				var top = new Point (center.X' center.Y - radius);  				var left = new Point (center.X - radius' center.Y);  				var bottom = new Point (center.X' center.Y + radius);    				SetPixel (right.X' right.Y' color);  				SetPixel (top.X' top.Y' color);  				SetPixel (left.X' left.Y' color);  				SetPixel (bottom.X' bottom.Y' color);    				while (x < y) {  					if (f >= 0) {  						y--;  						ddF_y += 2;  						f += ddF_y;  					}  					x++;  					ddF_x += 2;  					f += ddF_x + 1;    					SetPixel (center.X + x' center.Y + y' color);  					SetPixel (center.X - x' center.Y + y' color);  					SetPixel (center.X + x' center.Y - y' color);  					SetPixel (center.X - x' center.Y - y' color);  					SetPixel (center.X + y' center.Y + x' color);  					SetPixel (center.X - y' center.Y + x' color);  					SetPixel (center.X + y' center.Y - x' color);  					SetPixel (center.X - y' center.Y - x' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawEllipse,The following statement contains a magic number: if (fill)   			{  				int hh = radiusB * radiusB;  				int ww = radiusA * radiusA;  				int hhww = hh * ww;  				int x0 = radiusA;  				int dx = 0;    				// do the horizontal diameter  				for (int x = -radiusA; x <= radiusA; x++)  					SetPixel(center.X + x' center.Y' color);    				// now do both halves at the same time' away from the diameter  				for (int y = 1; y <= radiusB; y++)  				{  					int x1 = x0 - (dx - 1);  // try slopes of dx - 1 or more    					for (; x1 > 0; x1--)  						if (x1 * x1 * hh + y * y * ww <= hhww)  							break;    					dx = x0 - x1;  // current approximation of the slope  					x0 = x1;    					for (int x = -x0; x <= x0; x++) {  						SetPixel(center.X + x' center.Y - y' color);  						SetPixel(center.X + x' center.Y + y' color);  					}  				}  			}   			else   			{  				int dx = 0;  				int dy = radiusB;  				int a2 = radiusA * radiusA;  				int b2 = radiusB * radiusB;  				int err = b2 - (2 * radiusB - 1) * a2;  				int e2;    				do {  					SetPixel (center.X + dx' center.Y + dy' color); /* I. Quadrant */  					SetPixel (center.X - dx' center.Y + dy' color); /* II. Quadrant */  					SetPixel (center.X - dx' center.Y - dy' color); /* III. Quadrant */  					SetPixel (center.X + dx' center.Y - dy' color); /* IV. Quadrant */    					e2 = 2 * err;    					if (e2 < (2 * dx + 1) * b2) {  						dx++;  						err += (2 * dx + 1) * b2;  					}    					if (e2 > -(2 * dy - 1) * a2) {  						dy--;  						err -= (2 * dy - 1) * a2;  					}  				} while (dy >= 0);    				while (dx++ < radiusA) {  					SetPixel (center.X + dx' center.Y' color);   					SetPixel (center.X - dx' center.Y' color);  				}  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawLine,The following statement contains a magic number: do {  				SetPixel (ix' iy' color);    				if (ix == end.X && iy == end.Y)  					break;    				e2 = 2 * err;  				if (e2 > (-height)) {  					err += (-height);  					ix += sx;  				}  				if (e2 < width) {  					err += width;  					iy += sy;  				}    			} while (true);
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawRectangle,The following statement contains a magic number: if (fill)   			{  				int length = r.P2.X - r.P1.X;  				for (int y = r.P1.Y; y <= r.P2.Y; ++y)  					DrawHLine(new Point(r.P1.X' y)' length' color);  			}   			else   			{  				int length = r.P2.X - r.P1.X;  				int height = r.P2.Y - r.P1.Y;    				DrawHLine (new Point (r.P1.X' r.P1.Y)' length' color);  				DrawHLine (new Point (r.P1.X' r.P2.Y)' length' color);    				DrawVLine (new Point (r.P1.X' r.P1.Y + 1)' height - 2' color);  				DrawVLine (new Point (r.P2.X' r.P1.Y + 1)' height - 2' color);  			}
Magic Number,MonoBrickFirmware.Display,EV3Lcd,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\EV3Lcd.cs,DrawRectangle,The following statement contains a magic number: if (fill)   			{  				int length = r.P2.X - r.P1.X;  				for (int y = r.P1.Y; y <= r.P2.Y; ++y)  					DrawHLine(new Point(r.P1.X' y)' length' color);  			}   			else   			{  				int length = r.P2.X - r.P1.X;  				int height = r.P2.Y - r.P1.Y;    				DrawHLine (new Point (r.P1.X' r.P1.Y)' length' color);  				DrawHLine (new Point (r.P1.X' r.P2.Y)' length' color);    				DrawVLine (new Point (r.P1.X' r.P1.Y + 1)' height - 2' color);  				DrawVLine (new Point (r.P2.X' r.P1.Y + 1)' height - 2' color);  			}
Magic Number,MonoBrickFirmware.Sensors,HiTecCompassSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTCompassSensor.cs,ReadDirection,The following statement contains a magic number: byte[] result = ReadRegister((byte)CompassRegister.Degree' 2);
Magic Number,MonoBrickFirmware.Sensors,HiTecCompassSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTCompassSensor.cs,ReadDirection,The following statement contains a magic number: return (int) (((int)result[0])*2) + (int) result[1];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: byte[] data = ReadRegister((byte)TiltRegister.XHigh'6);
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: z = (int) data[2];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( x > 127)                   x -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( x > 127)                   x -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: x = x *4 + data[3];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: x = x *4 + data[3];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( y > 127)                   y -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( y > 127)                   y -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: y = y * 4 + data[4];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: y = y * 4 + data[4];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( z > 172)                   z -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: if( z > 172)                   z -= 256;
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: z = z * 4 +data[5];
Magic Number,MonoBrickFirmware.Sensors,HiTecTiltSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTTiltSensor.cs,ReadPosition,The following statement contains a magic number: z = z * 4 +data[5];
Magic Number,MonoBrickFirmware.Sensors,SensorManager,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorManager.cs,SetupCommand,The following statement contains a magic number: lock (setupLock) {  				sensorData [(int)sensorPort] = (byte)conn;  				sensorData [(int)sensorPort + NumberOfSensorPorts] = (byte)type;  				sensorData [(int)sensorPort + 2 * NumberOfSensorPorts] = mode;  				return sensorData;  			}
Magic Number,MonoBrickFirmware.Sensors,SensorManager,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorManager.cs,SetI2COperatingMode,The following statement contains a magic number: unchecked {          		I2CDevice.IoCtl((Int32) I2CIOSetConnection' SetupCommand(port'ConnectionType.NXTI2C' SensorType.I2CUnknown' 255));           	}
Magic Number,MonoBrickFirmware.Sensors,HiTecColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTColorSensor.cs,ReadRGBColor,The following statement contains a magic number: byte[] result = ReadRegister((byte)ColorRegister.RedReading' 3);
Magic Number,MonoBrickFirmware.Sensors,HiTecColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTColorSensor.cs,ReadRGBColor,The following statement contains a magic number: return new RGBColor(result[0]' result[1]' result[2]);
Magic Number,MonoBrickFirmware.Sensors,HiTecColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTColorSensor.cs,ReadNormalizedRGBColor,The following statement contains a magic number: byte[] result = ReadRegister((byte)ColorRegister.RedNormalized' 3);
Magic Number,MonoBrickFirmware.Sensors,HiTecColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\HTColorSensor.cs,ReadNormalizedRGBColor,The following statement contains a magic number: return new RGBColor(result[0]' result[1]' result[2]);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadPin1AsPct,The following statement contains a magic number: return (Int16)((ReadPin1()*100)/ADCResolution);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadPin6AsPct,The following statement contains a magic number: return (Int16)((ReadPin6()*100)/ADCResolution);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadPin1As10Bit,The following statement contains a magic number: return (int) (((int) ReadPin1()+ 3)/4);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadPin1As10Bit,The following statement contains a magic number: return (int) (((int) ReadPin1()+ 3)/4);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadOffset,The following statement contains a magic number: return (int)BitConverter.ToInt16(analogMemory.Read(offset' NumberOfSensorPorts*2)'(int) port * 2);
Magic Number,MonoBrickFirmware.Sensors,AnalogSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\AnalogSensor.cs,ReadOffset,The following statement contains a magic number: return (int)BitConverter.ToInt16(analogMemory.Read(offset' NumberOfSensorPorts*2)'(int) port * 2);
Magic Number,MonoBrickFirmware.Sensors,I2CSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\I2CSensor.cs,ReadRegister,The following statement contains a magic number: return ReadRegister(register'8);
Magic Number,MonoBrickFirmware.Sensors,I2CSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\I2CSensor.cs,WriteAndRead,The following statement contains a magic number: command.Append ((byte)(data.Length + 2));
Magic Number,MonoBrickFirmware.Sensors,UartSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\UARTSensor.cs,GetActualData,The following statement contains a magic number: byte[] temp = uartMemory.Read (UartActualOffset' NumberOfSensorPorts * 2);
Magic Number,MonoBrickFirmware.Sensors,UartSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\UARTSensor.cs,GetActualData,The following statement contains a magic number: return (int) BitConverter.ToInt16(temp'(int) port * 2);
Magic Number,MonoBrickFirmware.Sensors,UARTHelper,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorFactory.cs,UARTHelper,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MonoBrickFirmware.Sensors,DummySensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorFactory.cs,DummySensor,The following statement contains a magic number: System.Threading.Thread.Sleep(500);
Magic Number,MonoBrickFirmware.Sensors,DummySensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorFactory.cs,ReadAsString,The following statement contains a magic number: return rnd.Next(1024) + " A/D value";
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,Reset,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				Mode = GyroMode.AngularVelocity;  				System.Threading.Thread.Sleep(100);  				Mode = GyroMode.Angle;  			}   			else   			{  				Mode = GyroMode.Angle;  				System.Threading.Thread.Sleep(100);  				Mode = GyroMode.AngularVelocity;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,Reset,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				Mode = GyroMode.AngularVelocity;  				System.Threading.Thread.Sleep(100);  				Mode = GyroMode.Angle;  			}   			else   			{  				Mode = GyroMode.Angle;  				System.Threading.Thread.Sleep(100);  				Mode = GyroMode.AngularVelocity;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,RotationCount,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				return BitConverter.ToInt16(ReadBytes(2)'0)/360;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,RotationCount,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				return BitConverter.ToInt16(ReadBytes(2)'0)/360;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,Read,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				return BitConverter.ToInt16(ReadBytes(2)'0)%360;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,Read,The following statement contains a magic number: if (Mode == GyroMode.Angle) {  				return BitConverter.ToInt16(ReadBytes(2)'0)%360;  			}
Magic Number,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,Read,The following statement contains a magic number: return BitConverter.ToInt16(ReadBytes(2)'0);
Magic Number,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadRemoteCommand,The following statement contains a magic number: return ReadBytes (4) [(int)Channel];
Magic Number,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadBeaconLocation,The following statement contains a magic number: byte[] data = ReadBytes(4*2);
Magic Number,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadBeaconLocation,The following statement contains a magic number: byte[] data = ReadBytes(4*2);
Magic Number,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadBeaconLocation,The following statement contains a magic number: return new BeaconLocation((sbyte)data[(int)Channel*2]' (sbyte)data[((int)Channel*2)+1]);
Magic Number,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadBeaconLocation,The following statement contains a magic number: return new BeaconLocation((sbyte)data[(int)Channel*2]' (sbyte)data[((int)Channel*2)+1]);
Magic Number,MonoBrickFirmware.Sensors,UltraSonicSettings,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,UltraSonicSettings,The following statement contains a magic number: if(data.Length == 3){                  zero = data[0];                  scaleFactor = data[1];                  scaleDivision = data[2];                              }              else{                  zero = 0;                  scaleFactor = 0;                  scaleDivision = 0;              }
Magic Number,MonoBrickFirmware.Sensors,UltraSonicSettings,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,UltraSonicSettings,The following statement contains a magic number: if(data.Length == 3){                  zero = data[0];                  scaleFactor = data[1];                  scaleDivision = data[2];                              }              else{                  zero = 0;                  scaleFactor = 0;                  scaleDivision = 0;              }
Magic Number,MonoBrickFirmware.Sensors,NXTUltraSonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,ReadDistance,The following statement contains a magic number: if (Mode == UltraSonicMode.Inch)                  return (reading * 39370) / 100;
Magic Number,MonoBrickFirmware.Sensors,NXTUltraSonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,ReadDistance,The following statement contains a magic number: if (Mode == UltraSonicMode.Inch)                  return (reading * 39370) / 100;
Magic Number,MonoBrickFirmware.Sensors,NXTUltraSonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,SetContinuousInterval,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MonoBrickFirmware.Sensors,NXTUltraSonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTUltraSonicSensor.cs,SetMode,The following statement contains a magic number: System.Threading.Thread.Sleep(100);
Magic Number,MonoBrickFirmware.Sensors,NXTSoundSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTSoundSensor.cs,Read,The following statement contains a magic number: switch (Mode)  			{  			    case SoundMode.SoundDB:  			        value =100 - ReadPin1AsPct();  			        break;  			   case SoundMode.SoundDBA:  			        value = 100 -ReadPin1AsPct();  			        break;  			}
Magic Number,MonoBrickFirmware.Sensors,NXTSoundSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTSoundSensor.cs,Read,The following statement contains a magic number: switch (Mode)  			{  			    case SoundMode.SoundDB:  			        value =100 - ReadPin1AsPct();  			        break;  			   case SoundMode.SoundDBA:  			        value = 100 -ReadPin1AsPct();  			        break;  			}
Magic Number,MonoBrickFirmware.Sensors,NXTSoundSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTSoundSensor.cs,ReadRaw,The following statement contains a magic number: return 1023 - base.ReadPin1As10Bit();
Magic Number,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,GetUInt16,The following statement contains a magic number: return (UInt16)(data[offset] + (data[offset+1] << 8));
Magic Number,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,ReadRGB,The following statement contains a magic number: if (uartMode == UARTMode.Mode4)              {                  byte[] rawBytes = ReadBytes(6);                  var r = GetUInt16(rawBytes' 0);                  var g = GetUInt16(rawBytes' 2);                  var b = GetUInt16(rawBytes' 4);                  rgbColor = new RGBColor(r' g 'b);              }
Magic Number,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,ReadRGB,The following statement contains a magic number: if (uartMode == UARTMode.Mode4)              {                  byte[] rawBytes = ReadBytes(6);                  var r = GetUInt16(rawBytes' 0);                  var g = GetUInt16(rawBytes' 2);                  var b = GetUInt16(rawBytes' 4);                  rgbColor = new RGBColor(r' g 'b);              }
Magic Number,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,ReadRGB,The following statement contains a magic number: if (uartMode == UARTMode.Mode4)              {                  byte[] rawBytes = ReadBytes(6);                  var r = GetUInt16(rawBytes' 0);                  var g = GetUInt16(rawBytes' 2);                  var b = GetUInt16(rawBytes' 4);                  rgbColor = new RGBColor(r' g 'b);              }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateRawAverage,The following statement contains a magic number: return (int)(rawValues[RedIndex] + rawValues[BlueIndex] + rawValues[GreenIndex])/3;
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateRawAverageAsPct,The following statement contains a magic number: return (CalculateRawAverage () * 100)/ADCResolution;
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetRawValues,The following statement contains a magic number: for(int i = 0; i < rawValues.Length; i++)              	rawValues[i] =  BitConverter.ToInt16(ReadBytes(first + i*2' 2)'0);
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetRawValues,The following statement contains a magic number: for(int i = 0; i < rawValues.Length; i++)              	rawValues[i] =  BitConverter.ToInt16(ReadBytes(first + i*2' 2)'0);
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetColorData,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetColorData,The following statement contains a magic number: for (int i = 0; i < calibrationValues.GetLength(0); i++) {  				for (int j = 0; j < calibrationValues.GetLength(1); j++) {  					calibrationValues [i'j] = BitConverter.ToInt32(ReadBytes(offset' 4)'0);  					offset += 4;  				}  			}
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetColorData,The following statement contains a magic number: for (int i = 0; i < calibrationValues.GetLength(0); i++) {  				for (int j = 0; j < calibrationValues.GetLength(1); j++) {  					calibrationValues [i'j] = BitConverter.ToInt32(ReadBytes(offset' 4)'0);  					offset += 4;  				}  			}
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetColorData,The following statement contains a magic number: for(int i = 0; i < calibrationLimits.Length; i++)  	        {  	            calibrationLimits[i] = BitConverter.ToInt16(ReadBytes(offset' 2)'0);  	            offset += 2;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,GetColorData,The following statement contains a magic number: for(int i = 0; i < calibrationLimits.Length; i++)  	        {  	            calibrationLimits[i] = BitConverter.ToInt16(ReadBytes(offset' 2)'0);  	            offset += 2;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,CalculateColor,The following statement contains a magic number: if (red > blue && red > green)  	        {  	            // Red dominant color  	            if (red < 65 || (blank < 40 && red < 110))  	                return Color.Black;  	            if (((blue >> 2) + (blue >> 3) + blue < green) &&  	                    ((green << 1) > red))  	                return Color.Yellow;  	            if ((green << 1) - (green >> 2) < red)  	                return Color.Red;  	            if (blue < 70 || green < 70 || (blank < 140 && red < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else if (green > blue)  	        {  	            // Green dominant color  	            if (green < 40 || (blank < 30 && green < 70))  	                return Color.Black;  	            if ((blue << 1) < red)  	                return Color.Yellow;  	            if ((red + (red >> 2)) < green ||  	                    (blue + (blue>>2)) < green )  	                return Color.Green;  	            if (red < 70 || blue < 70 || (blank < 140 && green < 140))  	                return Color.Black;  	            return Color.White;  	        }  	        else  	        {  	            // Blue dominant color  	            if (blue < 48 || (blank < 25 && blue < 85))  	                return Color.Black;  	            if ((((red*48) >> 5) < blue && ((green*48) >> 5) < blue) ||  	                    ((red*58) >> 5) < blue || ((green*58) >> 5) < blue)  	                return Color.Blue;  	            if (red < 60 || green < 60 || (blank < 110 && blue < 120))  	                return Color.Black;  	            if ((red + (red >> 3)) < blue || (green + (green >> 3)) < blue)  	                return Color.Blue;  	            return Color.White;  	        }
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,Calibrate,The following statement contains a magic number: if (blankVal < calibrationLimits[1])  	            calTab = 2;  	        else if (blankVal < calibrationLimits[0])  	            calTab = 1;  	        else  	            calTab = 0;
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,Calibrate,The following statement contains a magic number: for (int col = RedIndex; col <= BlueIndex; col++)  	            if (rawValues[col] > blankVal)  	                vals[col] = (Int16) (((rawValues[col] - blankVal) * calibrationValues[calTab'col]) >> 16);  	            else  	                vals[col] = 0;
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,Calibrate,The following statement contains a magic number: blankVal = (blankVal * 100) / (((SensorMax - MinumumBackGroundValue) * 100) / ADMax);
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,Calibrate,The following statement contains a magic number: blankVal = (blankVal * 100) / (((SensorMax - MinumumBackGroundValue) * 100) / ADMax);
Magic Number,MonoBrickFirmware.Sensors,NXTColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTColorSensor.cs,Calibrate,The following statement contains a magic number: vals[BackgroundIndex] = (Int16) ((blankVal * calibrationValues[calTab'BackgroundIndex]) >> 16);
Magic Number,MonoBrickFirmware.Sensors,EV3UltrasonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3UltraSonicSensor.cs,Read,The following statement contains a magic number: return (int) BitConverter.ToInt16(ReadBytes(2)'0);
Magic Number,MonoBrickFirmware.Sensors,MSDistanceSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSDistanceSensor.cs,GetDistance,The following statement contains a magic number: return (int) BitConverter.ToInt16(ReadRegister((byte)DistanceRegister.DistanceLsb' 2)'0);
Magic Number,MonoBrickFirmware.Sensors,MSDistanceSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSDistanceSensor.cs,GetVolgage,The following statement contains a magic number: return (int) BitConverter.ToInt16(ReadRegister((byte)DistanceRegister.DistanceLsb' 2)'0);
Magic Number,MonoBrickFirmware.Sensors,MSAngleSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSAngleSensor.cs,ReadAngle,The following statement contains a magic number: return (int) BitConverter.ToInt32(ReadRegister((byte)GlideWheelRegister.Angle' 4)'0);
Magic Number,MonoBrickFirmware.Sensors,MSAngleSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSAngleSensor.cs,ReadRAW,The following statement contains a magic number: return (int) BitConverter.ToInt32(ReadRegister((byte)GlideWheelRegister.RAW' 4)'0);
Magic Number,MonoBrickFirmware.Sensors,MSAngleSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSAngleSensor.cs,ReadRPM,The following statement contains a magic number: return (int) BitConverter.ToInt16(ReadRegister((byte)GlideWheelRegister.RPM' 2)'0);
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: NumberOfM = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: if (SensorMode != MSSensorMUXMode.TouchMode)  				NumberOfM = 3;  			else  				NumberOfM = 1;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: if (SensorMode == UltraSonicMode.Centimeter)  				Mode = 0;  			else if (SensorMode == UltraSonicMode.Inch)  				Mode = 1;  			else if (SensorMode == UltraSonicMode.Listen)  				Mode = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: NumberOfM = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: if (SensorMode == ColorMode.Reflection)  				Mode = 0;  			else if (SensorMode == ColorMode.Ambient)  				Mode = 1;  			else if (SensorMode == ColorMode.Color)  				Mode = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: NumberOfM = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: if (SensorMode == IRMode.Proximity)  				Mode = 0;  			else if (SensorMode == IRMode.Seek)  				Mode = 1;  			else if (SensorMode == IRMode.Remote)  				Mode = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,MSSensorMUXBase,The following statement contains a magic number: NumberOfM = 2;
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,ReadTwoBytes,The following statement contains a magic number: Result = base.ReadRegister ((byte)0x54' 2);
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,ReadFourBytes,The following statement contains a magic number: Result = base.ReadRegister ((byte)0x54' 4);
Magic Number,MonoBrickFirmware.Sensors,MSSensorMUXBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSSensorMuxBase.cs,ReadEightBytes,The following statement contains a magic number: Result = base.ReadRegister ((byte)0x54' 8);
Magic Number,MonoBrickFirmware.Movement,Output,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Output.cs,GetCount,The following statement contains a magic number: return  BitConverter.ToInt32(tachoMemory.Read((int)port * TachoBufferSize+ TachoDataOffset' 4)'0);
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleLeftForward,The following statement contains a magic number: if(!ReverseLeft && ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed' (short) ((short)-200+ (short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleLeftForward,The following statement contains a magic number: if(ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync(speed' (short) ((short)-200+(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleRightForward,The following statement contains a magic number: if(!ReverseLeft && ReverseRight){  				handle = motorSync.StepSync(speed' (short) ((short)200- (short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleRightForward,The following statement contains a magic number: if(ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed' (short) ((short)200-(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleLeftReverse,The following statement contains a magic number: if(!ReverseLeft && ReverseRight){  				handle = motorSync.StepSync((sbyte)speed'(short) ( (short)-200+(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleLeftReverse,The following statement contains a magic number: if(ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed' (short) ( (short)-200+(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleRightReverse,The following statement contains a magic number: if(!ReverseLeft && ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed'(short) ( (short)200-(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleRightReverse,The following statement contains a magic number: if(ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync((sbyte)speed' (short) ( (short)200-(short)turnPercent)' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleSpinRight,The following statement contains a magic number: if(!ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync(speed' 200' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleSpinRight,The following statement contains a magic number: if(ReverseLeft && ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed' 200' degrees' brake);				  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleSpinLeft,The following statement contains a magic number: if(!ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync(speed' -200' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,HandleSpinLeft,The following statement contains a magic number: if(ReverseLeft && ReverseRight){  				handle = motorSync.StepSync((sbyte)-speed' -200' degrees' brake);				  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,Move,The following statement contains a magic number: if(!ReverseLeft && ReverseRight){  				handle = motorSync.StepSync(speed' (short) 200' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,Vehicle,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\Vehicle.cs,Move,The following statement contains a magic number: if(ReverseLeft && !ReverseRight){  				handle = motorSync.StepSync(speed' -200' degrees' brake);  			}
Magic Number,MonoBrickFirmware.Movement,MotorBase,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Movement\MotorBase.cs,WaitForMotorsToStop,The following statement contains a magic number: (new Thread(() => {  				start.WaitOne (750);  				started=true;//make sure started is true if we get a timeout  				stop.WaitOne();  				timer.Stop();  				start.Reset();  				stop.Reset();  				waitHandle.Set();  		    })).Start();
Magic Number,MonoBrickFirmware.UserInput,EV3Buttons,C:\repos\Larsjep_monoev3\MonoBrickFirmware\UserInput\EV3Buttons.cs,LedPattern,The following statement contains a magic number: byte[] cmd = new byte[2];
Magic Number,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,OnDrawTitle,The following statement contains a magic number: int arrowWidth = (int)font.maxWidth / 3;
Magic Number,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,DrawItemList,The following statement contains a magic number: Rectangle arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height - arrowHeight)' new Point (Lcd.Width / 2 + arrowWidth / 2' Lcd.Height - 1));
Magic Number,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,DrawItemList,The following statement contains a magic number: Rectangle arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height - arrowHeight)' new Point (Lcd.Width / 2 + arrowWidth / 2' Lcd.Height - 1));
Magic Number,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,DrawItemList,The following statement contains a magic number: Rectangle arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height - arrowHeight)' new Point (Lcd.Width / 2 + arrowWidth / 2' Lcd.Height - 1));
Magic Number,MonoBrickFirmware.Display.Menus,ItemList,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemList.cs,DrawItemList,The following statement contains a magic number: Rectangle arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height - arrowHeight)' new Point (Lcd.Width / 2 + arrowWidth / 2' Lcd.Height - 1));
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnLeftPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value--;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value = Value -10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value -100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value - 500;  				}  				if(Value<min)  					Value = max;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Left && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnLeftPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value--;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value = Value -10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value -100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value - 500;  				}  				if(Value<min)  					Value = max;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Left && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnLeftPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value--;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value = Value -10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value -100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value - 500;  				}  				if(Value<min)  					Value = max;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Left && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnRightPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value++;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value=Value +10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value +100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value + 500;  				}  				if(Value>max)  					Value = min;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Right && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnRightPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value++;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value=Value +10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value +100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value + 500;  				}  				if(Value>max)  					Value = min;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Right && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnRightPressed,The following statement contains a magic number: do{  				if(counter < holdSingleWait ){  					counter++;  				}  				if(counter >= holdSingleWait  && counter < holdTenWait){  					counter++;  					Value++;  				}  				if(counter >= holdTenWait && counter < holdHundredWait){  					Value=Value +10;  					counter++;  				}  				if(counter >= holdHundredWait && counter < holdFiveHundredWait){  					Value = Value +100;  					counter++;  				}  				if(counter >= holdFiveHundredWait){  					Value=Value + 500;  				}  				if(Value>max)  					Value = min;  				this.OnDrawTitle(font'rect'false);  				Lcd.Update();  				System.Threading.Thread.Sleep(holdSleepTime);  			}while (Buttons.GetStates()== Buttons.ButtonStates.Right && !cancelSource.Token.IsCancellationRequested);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithNumericInput,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithNumericInput.cs,OnDrawTitle,The following statement contains a magic number: int arrowWidth = (int)f.maxWidth / 4;
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithOptions<OptionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithOptions.cs,OnDrawTitle,The following statement contains a magic number: int arrowWidth = (int)f.maxWidth / 4;
Magic Number,MonoBrickFirmware.Display.Menus,ProgramItem,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithProgramList.cs,OnSelectDialogExit,The following statement contains a magic number: if (!dialog.EscPressed) {  				switch (dialog.GetSelectionIndex ()) {  				case 0:  					var startDialog = new ExecuteProgramDialog (this.programInformation' false' useEscToStop);  					startDialog.Start (Parent);  					break;  				case 1:  					if (!programInformation.IsAOTCompiled)  					{  						compileBeforeExecution.SetFocus (Parent' OnCompileInfoDialogExit);   					}   					else   					{  						var start = new ExecuteProgramDialog (this.programInformation' true' useEscToStop);  						start.Start (Parent);  					}  					break;  				case 2:  					if (programInformation.IsAOTCompiled)  					{  						aotQuestionDialog.SetFocus (Parent'OnCompileDialogExit);  					}   					else   					{  						compileDialog.SetFocus (Parent);  					}  					break;  				case 3:  					deleteQuestionDialog.SetFocus (Parent'OnDeleteDialogExit);  					break;  				}  			}
Magic Number,MonoBrickFirmware.Display.Menus,ProgramItem,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithProgramList.cs,OnSelectDialogExit,The following statement contains a magic number: if (!dialog.EscPressed) {  				switch (dialog.GetSelectionIndex ()) {  				case 0:  					var startDialog = new ExecuteProgramDialog (this.programInformation' false' useEscToStop);  					startDialog.Start (Parent);  					break;  				case 1:  					if (!programInformation.IsAOTCompiled)  					{  						compileBeforeExecution.SetFocus (Parent' OnCompileInfoDialogExit);   					}   					else   					{  						var start = new ExecuteProgramDialog (this.programInformation' true' useEscToStop);  						start.Start (Parent);  					}  					break;  				case 2:  					if (programInformation.IsAOTCompiled)  					{  						aotQuestionDialog.SetFocus (Parent'OnCompileDialogExit);  					}   					else   					{  						compileDialog.SetFocus (Parent);  					}  					break;  				case 3:  					deleteQuestionDialog.SetFocus (Parent'OnDeleteDialogExit);  					break;  				}  			}
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithUpdateDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithUpdateDialog.cs,OnUpdateCompleted,The following statement contains a magic number: if (dialog.ExecutedOk)  			{  				Parent.SuspendButtonEvents ();  				Lcd.Clear ();  				Lcd.WriteText (Font.MediumFont' new Point (0' 0)' "Shutting down..."' true);  				Lcd.Update ();  				Buttons.LedPattern (2);  				Brick.TurnOff ();  				var whyAreYouHereDialog = new InfoDialog ("Cut the power"' "Reboot failed");  				whyAreYouHereDialog.Show ();  				Lcd.Clear ();  				new ManualResetEvent (false).WaitOne ();  			}
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithBrickInfo,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithBrickInfo.cs,OnDrawContent,The following statement contains a magic number: Lcd.WriteText(Font.MediumFont' startPos+offset*2' "Mono version: " + monoVersion.Substring(0'7)' true);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithBrickInfo,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithBrickInfo.cs,OnDrawContent,The following statement contains a magic number: Lcd.WriteText(Font.MediumFont' startPos+offset*2' "Mono version: " + monoVersion.Substring(0'7)' true);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithBrickInfo,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithBrickInfo.cs,OnDrawContent,The following statement contains a magic number: Lcd.WriteText(Font.MediumFont' startPos+offset*3' "Mono CLR: " + monoCLR' true);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithBrickInfo,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithBrickInfo.cs,OnDrawContent,The following statement contains a magic number: Lcd.WriteText(Font.MediumFont' startPos+offset*4' "IP: " + WiFiDevice.GetIpAddress()' true);
Magic Number,MonoBrickFirmware.Display.Menus,ItemWithTurnOff,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithTurnOff.cs,OnExit,The following statement contains a magic number: if (dialog.IsPositiveSelected)   			{  				Parent.SuspendButtonEvents ();  				Lcd.Clear();  				Lcd.WriteText(Font.MediumFont' new Point(0'0)' "Shutting down..."' true);  				Lcd.Update();    				Buttons.LedPattern(2);  				Brick.TurnOff ();  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int xEdge = (Lcd.Width - dialogWidth)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int yEdge = (Lcd.Height - dialogHeight)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (font.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (font.maxHeight / 2))));
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: if (titleRect.P1.Y < 0)  			{  				this.titleSize = Font.SmallFont.TextSize(this.title).X + (int)f.maxWidth;  				titleRect = new Rectangle (new Point ((int)(Lcd.Width / 2 - titleSize / 2)' (int)(startPoint1.Y - (Font.SmallFont.maxHeight / 2)))' new Point ((int)(Lcd.Width / 2 + titleSize / 2)' (int)(startPoint1.Y + (Font.SmallFont.maxHeight / 2))));  				useSmallTitle = true;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int top = innerWindow.P1.Y + (int)( f.maxHeight/2) + topOffset;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int middel = innerWindow.P1.Y  + ((innerWindow.P2.Y - innerWindow.P1.Y) / 2) - (int)(f.maxHeight)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int middel = innerWindow.P1.Y  + ((innerWindow.P2.Y - innerWindow.P1.Y) / 2) - (int)(f.maxHeight)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: int numberOfLines = count*2+1;
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: Point start1 = new Point (innerWindow.P1.X' topOffset+  innerWindow.P1.Y  + ((innerWindow.P2.Y - innerWindow.P1.Y) / 2) - (int)f.maxHeight/2 - count*((int)f.maxHeight) );
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: Point start1 = new Point (innerWindow.P1.X' topOffset+  innerWindow.P1.Y  + ((innerWindow.P2.Y - innerWindow.P1.Y) / 2) - (int)f.maxHeight/2 - count*((int)f.maxHeight) );
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: bottomLineCenter = new Point(innerWindow.P1.X + ((innerWindow.P2.X-innerWindow.P1.X)/2) ' outherWindow.P2.Y - dialogEdge/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Dialog,The following statement contains a magic number: bottomLineCenter = new Point(innerWindow.P1.X + ((innerWindow.P2.X-innerWindow.P1.X)/2) ' outherWindow.P2.Y - dialogEdge/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawCenterButton,The following statement contains a magic number: Point buttonP1 = bottomLineCenter + new Point((int)-textSize/2'(int)-font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawCenterButton,The following statement contains a magic number: Point buttonP1 = bottomLineCenter + new Point((int)-textSize/2'(int)-font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawCenterButton,The following statement contains a magic number: Point buttonP2 = bottomLineCenter + new Point((int)textSize/2'(int)font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawCenterButton,The following statement contains a magic number: Point buttonP2 = bottomLineCenter + new Point((int)textSize/2'(int)font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawLeftButton,The following statement contains a magic number: Point left1 = bottomLineCenter + new Point(-boxMiddleOffset - (int)textSize'(int)-font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawLeftButton,The following statement contains a magic number: Point left2 = bottomLineCenter + new Point(-boxMiddleOffset'(int)font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawRightButton,The following statement contains a magic number: Point right1 = bottomLineCenter + new Point(boxMiddleOffset'(int)-font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,DrawRightButton,The following statement contains a magic number: Point right2 = bottomLineCenter + new Point(boxMiddleOffset + (int)textSize'(int)font.maxHeight/2);
Magic Number,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,WriteTextOnDialog,The following statement contains a magic number: if (textRectRatio == 0) {  				int middle = (lines.Count / 2);  				Lcd.WriteTextBox (font' lines [middle]' text' true' Lcd.Alignment.Center);  			}   			else   			{  				string[] words = text.Split (' ');  				int rectIndex = 0;  				string s = "";  				for (int i = 0; i < words.Length; i++) {  					if (font.TextSize (s + " " + words [i]).X < width) {  						if (s == "") {  							s = words [i];   						} else {  							s = s + " " + words [i];  						}  					} else {  						Lcd.WriteTextBox (font' lines [rectIndex]' s' true' Lcd.Alignment.Center);  						s = words [i];  						rectIndex++;  						if (rectIndex >= lines.Count)  							break;  					}  			  				  				}  				if (s != "" && rectIndex < lines.Count) {  					Lcd.WriteTextBox (font' lines [rectIndex]' s' true' Lcd.Alignment.Center);  				}  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,InfoDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\InfoDialog.cs,DrawText,The following statement contains a magic number: if (numberOfPages == 1 && stringList.Count == 1)   			{  				int middle = (lines.Count / 2);  				Lcd.WriteTextBox (font' lines[middle]' stringList[0] ' true' Lcd.Alignment.Center);  			}   			else   			{  				for (int i = 0; i != lines.Count; ++i)   				{  					if (i + pagePos * lines.Count >= stringList.Count)  						break;  					WriteTextOnLine (stringList [i + pagePos * lines.Count]' i' true' Lcd.Alignment.Center);  				}  				if (numberOfPages > 1)  				{  					DrawScrollBar ();  				}  			}
Magic Number,MonoBrickFirmware.Display.Dialogs,InfoDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\InfoDialog.cs,DrawScrollBar,The following statement contains a magic number: Rectangle indexRec = new Rectangle (new Point(scrollBar.P1.X + (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight)' new Point(scrollBar.P2.X - (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight + indexHeight ) );
Magic Number,MonoBrickFirmware.Display.Dialogs,InfoDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\InfoDialog.cs,DrawScrollBar,The following statement contains a magic number: Rectangle indexRec = new Rectangle (new Point(scrollBar.P1.X + (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight)' new Point(scrollBar.P2.X - (scrollBarWidth - scrollIndexWith)/2' scrollBar.P1.Y + pagePos * indexHeight + indexHeight ) );
Magic Number,MonoBrickFirmware.Display.Dialogs,SelectDialog<SelectionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\SelectDialog.cs,SelectDialog,The following statement contains a magic number: arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-arrowHeight)' new Point (Lcd.Width/ 2 + arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-1));
Magic Number,MonoBrickFirmware.Display.Dialogs,SelectDialog<SelectionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\SelectDialog.cs,SelectDialog,The following statement contains a magic number: arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-arrowHeight)' new Point (Lcd.Width/ 2 + arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-1));
Magic Number,MonoBrickFirmware.Display.Dialogs,SelectDialog<SelectionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\SelectDialog.cs,SelectDialog,The following statement contains a magic number: arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-arrowHeight)' new Point (Lcd.Width/ 2 + arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-1));
Magic Number,MonoBrickFirmware.Display.Dialogs,SelectDialog<SelectionType>,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\SelectDialog.cs,SelectDialog,The following statement contains a magic number: arrowRect = new Rectangle (new Point (Lcd.Width / 2 - arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-arrowHeight)' new Point (Lcd.Width/ 2 + arrowWidth / 2' Lcd.Height-yEdge-dialogEdge-1));
Magic Number,MonoBrickFirmware.Display.Dialogs,StepDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\StepDialog.cs,StepDialog,The following statement contains a magic number: stepLineIndex = 2;
Magic Number,MonoBrickFirmware.Display.Dialogs,ProgressDialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\ProgressDialog.cs,OnDrawContent,The following statement contains a magic number: WriteTextOnLine("Please wait..."' 2);
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: if (BitConverter.ToInt32 (headerData' 8) != WaveFormat)  				headerOK = false;
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: if (BitConverter.ToInt32 (headerData' 12) != SubChunkId)  				headerOK = false;
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: if (BitConverter.ToUInt16 (headerData' 20) != AudioFormat)  				headerOK = false;
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: if (BitConverter.ToUInt16 (headerData' 22) != NumChannels)  				headerOK = false;
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Sound,Speaker,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sound\Speaker.cs,PlaySoundFile,The following statement contains a magic number: try {  				  			byte []buffer = new byte[2];              // get ready to play' set the volume             	buffer [0] = (byte)AudioMode.Play;  			buffer [1] = (byte)volume;  			soundDevice.Write(buffer);                                          int size = (int)audioFileStream.Length;  			int totalWritten  =  RiffHeaderSize;              buffer = new byte[BufferSize*4 + 1];              audioFileStream.Read (buffer' 1' BufferSize*4);  			int dataLen = BufferSize*4;   			while(dataLen > 0)              {                  // now make sure we write all of the data                  int offset = 0;                  while (offset < dataLen)                  {                      buffer[offset] = (byte)AudioMode.Play;                      int len = dataLen - offset;                      if (len >BufferSize)                       	len = BufferSize;  					byte[] data = new byte[len+1];  					Array.Copy(buffer' offset'data'0'len+1);  					soundDevice.Write(data);  					int written = len+1;                      if (written == 0)                      {                          //Delay.msDelay(1);                      }                      else                      offset += written;                      totalWritten += written-1;                  }  				if(size - totalWritten >= BufferSize*4){  					audioFileStream.Read (buffer' 1' BufferSize*4);  					dataLen = BufferSize*4;  				}  				else{  					audioFileStream.Read (buffer' 1' size- totalWritten);  						dataLen = size-totalWritten;  				}              }  				  				  				/*byte[] buffer = new byte[2];  				buffer [0] = (byte)AudioMode.Play;  				if (volume < 0)  					volume = -volume;  				buffer [1] = (byte)volume;  				soundDevice.Write (buffer);  				buffer = new byte[BufferSize + 1];  				  				int size = (int)audioFileStream.Length;  				int offset = RiffHeaderSize;  				while (offset < size) {  					if (size - offset >= BufferSize) {  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' BufferSize);  						MonoBrickFirmware.Display.LcdConsole.WriteLine(audioFileStream.Position.ToString());  						soundDevice.Write (buffer);  						offset += (BufferSize);  					} else {  						buffer = new byte[size - offset + 1];  						buffer [0] = (byte)AudioMode.Play;  						audioFileStream.Read (buffer' 1' size - offset);  						soundDevice.Write (buffer);  						offset += (size - offset);  						   					}  				}*/  			}   			catch(Exception e)  			{  				audioFileStream.Close();  				throw e;  			}
Magic Number,MonoBrickFirmware.Display.Animation,ProgressAnimation,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Animation\ProgressAnimation.cs,ProgressAnimation,The following statement contains a magic number: int startOffset = (width - totalWidthUsed)/2;
Magic Number,MonoBrickFirmware.Connections,EV3WiFiDevice,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Connections\EV3WiFiDevice.cs,Gateway,The following statement contains a magic number: if (IsLinkUp ()) {  				string s = ProcessHelper.RunAndWaitForProcessWithOutput ("route");  				string[] result = s.Split (new [] { '\r'' '\n' });  				if (result.Length >= 4) {    					//The gateway is in line 4 second word. Regex is used to remove whitespaces between words  					string ipString = System.Text.RegularExpressions.Regex.Replace(result[3]'@"\s+"'" ").Split(' ')[1];  					try{  						System.Net.IPAddress.Parse (ipString);  						return ipString;  					}  					catch{    					}  				}  			}
Magic Number,MonoBrickFirmware.Connections,EV3WiFiDevice,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Connections\EV3WiFiDevice.cs,Gateway,The following statement contains a magic number: if (IsLinkUp ()) {  				string s = ProcessHelper.RunAndWaitForProcessWithOutput ("route");  				string[] result = s.Split (new [] { '\r'' '\n' });  				if (result.Length >= 4) {    					//The gateway is in line 4 second word. Regex is used to remove whitespaces between words  					string ipString = System.Text.RegularExpressions.Regex.Replace(result[3]'@"\s+"'" ").Split(' ')[1];  					try{  						System.Net.IPAddress.Parse (ipString);  						return ipString;  					}  					catch{    					}  				}  			}
Magic Number,MonoBrickFirmware.Device,EV3Brick,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Device\EV3Brick.cs,TurnOff,The following statement contains a magic number: Thread.Sleep (120000);
Magic Number,MonoBrickFirmware.Device,EV3Brick,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Device\EV3Brick.cs,CurrentRaw,The following statement contains a magic number: return BitConverter.ToInt16(SensorManager.Instance.AnalogMemory.Read(batteryCurrentOffset' 2)' 0);
Magic Number,MonoBrickFirmware.Device,EV3Brick,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Device\EV3Brick.cs,VoltageRaw,The following statement contains a magic number: return BitConverter.ToInt16(SensorManager.Instance.AnalogMemory.Read(batteryVoltageOffset' 2)' 0);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,ButtonContainer,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\ButtonContainer.cs,UpdateXOnUpDown,The following statement contains a magic number: switch (selectedButton.ExitType)   			{  			case ExitType.Left:  				x = selectedButton.Position.X;  				break;  			case ExitType.Center:  				x = selectedButton.Position.X + selectedButton.Size.X / 2;  				break;  			case ExitType.Right:  				x = selectedButton.Position.X + selectedButton.Size.X-1;  				break;  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,CalculateTextCenterPoint,The following statement contains a magic number: int centerX = (outherBox.P2.X - outherBox.P1.X)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,CalculateTextCenterPoint,The following statement contains a magic number: int textSizeX = (Font.MediumFont.TextSize (Text).X)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,CalculateTextCenterPoint,The following statement contains a magic number: int textSizeY = (Font.MediumFont.TextSize (Text).Y)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,CalculateTextCenterPoint,The following statement contains a magic number: int centerY = (outherBox.P2.Y - outherBox.P1.Y)/2;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,ApplyContainer,The following statement contains a magic number: int characterHeight = (int)Font.MediumFont.maxHeight / 2;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,ApplyContainer,The following statement contains a magic number: Point buttonOutherPoint = new Point(buttonInnerPoint.X + 2* characterEdge' buttonInnerPoint.Y + 2* characterEdge);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Button,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,ApplyContainer,The following statement contains a magic number: Point buttonOutherPoint = new Point(buttonInnerPoint.X + 2* characterEdge' buttonInnerPoint.Y + 2* characterEdge);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Select,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Select,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 3 * characterEdge)' new Point (outherBox.P2.X - 3 * characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Select,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Select,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 3 * characterEdge)' new Point (outherBox.P2.X - 3 * characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Select,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Select,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 3 * characterEdge)' new Point (outherBox.P2.X - 3 * characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Select,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Select,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 3 * characterEdge)' new Point (outherBox.P2.X - 3 * characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 2 * characterEdge)' new Point (outherBox.P1.X + 14 * characterEdge' outherBox.P2.Y - 7 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 2 * characterEdge)' new Point (outherBox.P1.X + 14 * characterEdge' outherBox.P2.Y - 7 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 2 * characterEdge)' new Point (outherBox.P1.X + 14 * characterEdge' outherBox.P2.Y - 7 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + 3 * characterEdge' outherBox.P1.Y + 2 * characterEdge)' new Point (outherBox.P1.X + 14 * characterEdge' outherBox.P2.Y - 7 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (!small)  			{  				arrowRect = new Rectangle (new Point (arrowRect.P1.X' arrowRect.P1.Y)' new Point (arrowRect.P2.X' arrowRect.P1.Y + (arrowRect.P2.Y - arrowRect.P1.Y)/2 - 2 * characterEdge));  				arrowRect = arrowRect + new Point (7' 0);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (!small)  			{  				arrowRect = new Rectangle (new Point (arrowRect.P1.X' arrowRect.P1.Y)' new Point (arrowRect.P2.X' arrowRect.P1.Y + (arrowRect.P2.Y - arrowRect.P1.Y)/2 - 2 * characterEdge));  				arrowRect = arrowRect + new Point (7' 0);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (!small)  			{  				arrowRect = new Rectangle (new Point (arrowRect.P1.X' arrowRect.P1.Y)' new Point (arrowRect.P2.X' arrowRect.P1.Y + (arrowRect.P2.Y - arrowRect.P1.Y)/2 - 2 * characterEdge));  				arrowRect = arrowRect + new Point (7' 0);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: lineStart = new Point(arrowRect.P1.X + ((arrowRect.P2.X - arrowRect.P1.X) / 2)' arrowRect.P2.Y);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Shift,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Shift,The following statement contains a magic number: if (small)   			{  				lineLength = (innerBox.P2.Y - lineStart.Y)  - 2 * characterEdge;  				textDisplacement = new Point (10' 6);  			}   			else  			{  				lineLength = (innerBox.P2.Y - lineStart.Y)/3;  				textDisplacement = new Point (5' 14);  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Enter,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + characterEdge' outherBox.P1.Y + 4 * characterEdge)' new Point (outherBox.P2.X - ((outherBox.P2.X - outherBox.P1.X)/2) - 3* characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Enter,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + characterEdge' outherBox.P1.Y + 4 * characterEdge)' new Point (outherBox.P2.X - ((outherBox.P2.X - outherBox.P1.X)/2) - 3* characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Enter,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + characterEdge' outherBox.P1.Y + 4 * characterEdge)' new Point (outherBox.P2.X - ((outherBox.P2.X - outherBox.P1.X)/2) - 3* characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Enter,The following statement contains a magic number: arrowRect = new Rectangle (new Point (outherBox.P1.X + characterEdge' outherBox.P1.Y + 4 * characterEdge)' new Point (outherBox.P2.X - ((outherBox.P2.X - outherBox.P1.X)/2) - 3* characterEdge' outherBox.P2.Y - 3 * characterEdge));
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(arrowRect.P2.X' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y +((outherBox.P2.Y - outherBox.P1.Y)/2) )' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(arrowRect.P2.X' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y +((outherBox.P2.Y - outherBox.P1.Y)/2) )' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(arrowRect.P2.X' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y +((outherBox.P2.Y - outherBox.P1.Y)/2) )' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + 4* characterEdge)' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + 4* characterEdge)' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + 4* characterEdge)' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Enter,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Buttons.cs,Draw,The following statement contains a magic number: Lcd.DrawLine (new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + ((outherBox.P2.Y - outherBox.P1.Y)/2))' new Point(outherBox.P2.X - 8 * characterEdge' outherBox.P1.Y + 4* characterEdge)' !Selected);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Letters,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,Letters,The following statement contains a magic number: const int size = 26;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: var symbols = new char[26];
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[2] = '3';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[3] = '4';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[4] = '5';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[5] = '6';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[6] = '7';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[7] = '8';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[8] = '9';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[9] = '0';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[10] = '-';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[11] = '/';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[12] = '.';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[13] = ':';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[14] = ';';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[15] = '(';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[16] = ')';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[17] = '&';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[18] = '@';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[19] = '"';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[20] = '!';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[21] = '+';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[22] = '*';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[23] = ''';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[24] = '#';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols,The following statement contains a magic number: symbols[25] = '%';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: var symbols = new char[26];
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[2] = '3';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[3] = '4';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[4] = '5';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[5] = '6';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[6] = '7';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[7] = '8';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[8] = '9';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[9] = '0';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[10] = '$';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[11] = (char) 39;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[11] = (char) 39;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[12] = '<';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[13] = '=';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[14] = '>';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[15] = '?';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[16] = (char)92;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[16] = (char)92;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[17] = ']';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[18] = '^';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[19] = '_';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[20] = '`';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[21] = '{';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[22] = '|';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[23] = '}';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[24] = '~';
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,NumbersAndSymbols2,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\CharacterSets.cs,NumbersAndSymbols2,The following statement contains a magic number: symbols[25] = (char)0;
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableEnter)  			{  				Add(new Ok (new Position(8'2)' container' ExitType.Right' new Position(2'2)));  			}   			else   			{  				Add(new Enter (new Position(8'2)' container' ExitType.Right));  				Add(new Ok (new Position(8'3)' container' ExitType.Right));    			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: if (disableSelect)   			{  				Add(new Shift (new Position(0'2)' container' ExitType.Left' false));  				Add(new Space (new Position(2'3)' container' ExitType.Center' 6));  			}   			else   			{  				Add(new Select (new Position(0'2)' container' false));  				Add(new Select (new Position(1'2)' container' true));  				Add(new Shift (new Position(0'3)' container' ExitType.Left));  				Add(new Space (new Position(3'3)' container' ExitType.Center));  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: textButton = new  TextButton ("Something"' new Position (0' 4)' new Position (10' 2)' container);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: textButton = new  TextButton ("Something"' new Position (0' 4)' new Position (10' 2)' container);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,CreateSpecialKeys,The following statement contains a magic number: textButton = new  TextButton ("Something"' new Position (0' 4)' new Position (10' 2)' container);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,TextButton,The following statement contains a magic number: textCenterPoint = new Point (innerBox.P1.X + characterEdge *2' textCenterPoint.Y);
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The following statement contains a magic number: if (!useSmallFont)   			{  				Lcd.WriteText (resultFont' textCenterPoint' currentLine + SelectedCharacter' !Selected);  				int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  				int yUnderLine = innerBox.P2.Y - 1;  				Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  			}   			else   			{  				if (showLine)   				{  					if (inputLines.Count > 1)   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' innerBox.P1.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 2]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1))' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1) * 2)' currentLine + SelectedCharacter' !Selected);    					}   					else   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' textCenterPoint.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' (int)resultFont.maxHeight-1)' currentLine + SelectedCharacter' !Selected);  						int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  						int yUnderLine = innerBox.P2.Y - 1;  						Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  					}  				}   				else   				{  					Lcd.WriteText (resultFont' textCenterPoint + new Point(0'5)' currentLine + SelectedCharacter' !Selected);  					int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  					int yUnderLine = innerBox.P2.Y - 1;  					Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  				}  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The following statement contains a magic number: if (!useSmallFont)   			{  				Lcd.WriteText (resultFont' textCenterPoint' currentLine + SelectedCharacter' !Selected);  				int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  				int yUnderLine = innerBox.P2.Y - 1;  				Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  			}   			else   			{  				if (showLine)   				{  					if (inputLines.Count > 1)   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' innerBox.P1.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 2]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1))' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1) * 2)' currentLine + SelectedCharacter' !Selected);    					}   					else   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' textCenterPoint.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' (int)resultFont.maxHeight-1)' currentLine + SelectedCharacter' !Selected);  						int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  						int yUnderLine = innerBox.P2.Y - 1;  						Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  					}  				}   				else   				{  					Lcd.WriteText (resultFont' textCenterPoint + new Point(0'5)' currentLine + SelectedCharacter' !Selected);  					int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  					int yUnderLine = innerBox.P2.Y - 1;  					Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  				}  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Draw,The following statement contains a magic number: if (!useSmallFont)   			{  				Lcd.WriteText (resultFont' textCenterPoint' currentLine + SelectedCharacter' !Selected);  				int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  				int yUnderLine = innerBox.P2.Y - 1;  				Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  			}   			else   			{  				if (showLine)   				{  					if (inputLines.Count > 1)   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' innerBox.P1.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 2]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1))' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' ((int)resultFont.maxHeight-1) * 2)' currentLine + SelectedCharacter' !Selected);    					}   					else   					{  						Point topPoint = new Point (innerBox.P1.X + characterEdge' textCenterPoint.Y);  						Lcd.WriteText (resultFont' topPoint' inputLines [inputLines.Count - 1]' !Selected);  						Lcd.WriteText (resultFont' topPoint + new Point (0' (int)resultFont.maxHeight-1)' currentLine + SelectedCharacter' !Selected);  						int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  						int yUnderLine = innerBox.P2.Y - 1;  						Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  					}  				}   				else   				{  					Lcd.WriteText (resultFont' textCenterPoint + new Point(0'5)' currentLine + SelectedCharacter' !Selected);  					int xUnderLine = innerBox.P1.X + characterEdge + resultFont.TextSize (currentLine).X;  					int yUnderLine = innerBox.P2.Y - 1;  					Lcd.DrawHLine (new Point (xUnderLine' yUnderLine)' resultFont.TextSize(character).X' true);  				}  			}
Magic Number,MonoBrickFirmware.Display.Dialogs.UserInput,TextButton,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,AddToResult,The following statement contains a magic number: if (useSmallFont) {  				charSize = characterSize/2;  			}   			else   			{  				charSize = characterSize;  			}
Missing Default,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,CreateHeader,The following switch statement is missing a default case: switch(colorDepth){  				case ColorDepth.TrueColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 24  					header.YPixelPerMeter = 0; //zero when color depth = 24  					header.NumberOfColors =0; //zero when color depth = 24  					header.ImportantColors =0; //zero when color depth = 24  					paddingSize = (width*3)%4;  					//no need to add color palette  					header.ColorPalette = null;  					Write(header);  					break;  				case ColorDepth.LowColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' colorDepth);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth =  colorDepth;  					header.Compression = NoCompression;  					header.ImageSize = CalculateImageSize(width'height' colorDepth);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateColorPalette();  					Write(header);  					break;  				case ColorDepth.GrayScaleColor:  					header.MagicNumber = BMPFileType;  					header.FileSize = CalculateFileSize(width'height' ColorDepth.LowColor);  					header.Reserved1 = 0;//not used  					header.Reserved2 = 0;//not used  					header.OffsetBits = BMPHeaderSize + InfoHeaderSize + ColorPaletteSize * 4;  					header.InfoHeaderSize = InfoHeaderSize;  					header.ImageWidth = width;  					header.ImageHeight = height;  					header.Planes = Planes;  					header.ColorDepth = ColorDepth.LowColor; //will be set to GrayScaleColor when header has been written  					header.Compression = NoCompression;//no comression  					header.ImageSize = CalculateImageSize(width'height' ColorDepth.LowColor);  					header.XPixelPerMeter = 0; //zero when color depth = 8  					header.YPixelPerMeter = 0; //zero when color depth = 8  					header.NumberOfColors =0; //zero when color depth = 8  					header.ImportantColors =0; //zero when color depth = 8  					paddingSize = (width)%4;  					header.ColorPalette = CreateGrayScalePalette();  					Write(header);  					header.ColorDepth = ColorDepth.GrayScaleColor;  					break;  			}
Missing Default,MonoBrickFirmware.Tools,BmpImage,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Tools\BmpImage.cs,Write,The following switch statement is missing a default case: switch(header.ColorDepth){  			    case ColorDepth.TrueColor:  			      Write(color.Blue);  			      Write(color.Green);  			      Write(color.Red);  			      break;  			    case ColorDepth.LowColor:  			      temp= GetColorIndex(color);  			      Write(temp);  			      break;  			    case ColorDepth.GrayScaleColor:  			      temp=color.Red; //red = green = blue  			      Write(temp);  			      break;    			}
Missing Default,MonoBrickFirmware.Sensors,SensorFactory,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\SensorFactory.cs,GetSensor,The following switch statement is missing a default case: switch (sensorType) {  			case SensorType.Color:  				sensor = new EV3ColorSensor (port);   				break;  			case SensorType.Gyro:  				sensor = new EV3GyroSensor (port);   				break;  			case SensorType.IR:  				sensor = new EV3IRSensor (port);  				break;  			case SensorType.NXTColor:  				sensor = new NXTColorSensor (port);  				break;  			case SensorType.NXTLight:  				sensor = new NXTLightSensor (port);  				break;  			case SensorType.NXTSound:  				sensor = new NXTSoundSensor (port);  				break;  			case SensorType.NXTTouch:  				sensor = new NXTTouchSensor (port);  				break;  			case SensorType.NXTUltraSonic:  				sensor = new NXTUltraSonicSensor (port);  				break;  			case SensorType.Touch:  				sensor = new EV3TouchSensor (port);  				break;  			case SensorType.UltraSonic:  				sensor = new EV3UltrasonicSensor (port);  				break;  			case SensorType.NXTI2c:  				var helper = new I2CHelper (port);  				sensor = helper.GetSensor ();  				break;  			case SensorType.Unknown:  				if (connectionType == ConnectionType.UART) {  					var uartHelper = new UARTHelper (port);  					sensor = uartHelper.GetSensor ();  				}  				if (connectionType == ConnectionType.InputResistor) {  					sensor = new EV3TouchSensor (port);  				}  				break;  			case SensorType.I2CUnknown:  						  				break;  			case SensorType.NXTTemperature:  						  				break;  			case SensorType.LMotor:  						  				break;  			case SensorType.MMotor:  						  				break;  			case SensorType.NXTTest:  						  				break;  			case SensorType.Terminal:  						  				break;  			case SensorType.Test:  						  				break;  			case SensorType.Error:  					  				break;  			case SensorType.None:  				sensor = new NoSensor (port);  				break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3GyroSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3GyroSensor.cs,ReadAsString,The following switch statement is missing a default case: switch ((GyroMode)base.uartMode)  			{  			    case GyroMode.Angle:  			         s = Read().ToString() + " degree";  			        break;  			   case GyroMode.AngularVelocity:  			        s = Read().ToString() +  " deg/sec";  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,ReadAsString,The following switch statement is missing a default case: switch ((IRMode)base.uartMode)  			{  			    case IRMode.Proximity:  			        s = ReadDistance() + " cm";  			        break;  			   case IRMode.Remote:  			        s = ReadRemoteCommand() + " on channel " + Channel;  			        break;  			   case IRMode.Seek:  			        BeaconLocation location = ReadBeaconLocation();  			        s = "Location: " + location.Location + " Distance: " + location.Distance + " cm";  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3IRSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3IRSensor.cs,Read,The following switch statement is missing a default case: switch ((IRMode)base.uartMode)  			{  			    case IRMode.Proximity:  			        value = ReadDistance();  			        break;  			   case IRMode.Remote:  			        value = (int)ReadRemoteCommand();  			        break;  			   case IRMode.Seek:  			        value = (int)ReadBeaconLocation().Location;  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,NXTLightSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTLightSensor.cs,ReadAsString,The following switch statement is missing a default case: switch (AnalogMode)  			{  			    case (AnalogMode)LightMode.Ambient:  			        s = Read().ToString();  			        break;  			   case (AnalogMode)LightMode.Relection:  			        s = Read().ToString();  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,NXTSoundSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTSoundSensor.cs,ReadAsString,The following switch statement is missing a default case: switch (Mode)  			{  			    case SoundMode.SoundDB:  			        s = Read().ToString();  			        break;  			   case SoundMode.SoundDBA:  			        s = Read().ToString();  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,NXTSoundSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\NXTSoundSensor.cs,Read,The following switch statement is missing a default case: switch (Mode)  			{  			    case SoundMode.SoundDB:  			        value =100 - ReadPin1AsPct();  			        break;  			   case SoundMode.SoundDBA:  			        value = 100 -ReadPin1AsPct();  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,ColorModeToSensorMode,The following switch statement is missing a default case: switch (mode) {  				case ColorMode.Ambient:  					sensorMode = UARTMode.Mode1;  					break;  				case ColorMode.Color:  					sensorMode = UARTMode.Mode2;  					break;  				case ColorMode.Blue:  					sensorMode = UARTMode.Mode1;  					break;  				case ColorMode.Green:  					sensorMode = UARTMode.Mode0;//not supported by the EV3 use relection  					break;  				case ColorMode.Reflection:  					sensorMode = UARTMode.Mode0;  					break;                  case ColorMode.RGB:                      sensorMode = UARTMode.Mode4;                      break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3ColorSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3ColorSensor.cs,SensorModeToColorMode,The following switch statement is missing a default case: switch (mode) {  				case UARTMode.Mode1:  					colorMode = ColorMode.Ambient;  					break;  				case UARTMode.Mode2:  					colorMode = ColorMode.Color;  					break;  				case UARTMode.Mode0:  					colorMode = ColorMode.Reflection;  					break;                  case UARTMode.Mode4:                      colorMode = ColorMode.RGB;                      break;  			}
Missing Default,MonoBrickFirmware.Sensors,EV3UltrasonicSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\EV3UltraSonicSensor.cs,ReadAsString,The following switch statement is missing a default case: switch ((UltraSonicMode)base.uartMode)  			{  			    case UltraSonicMode.Centimeter:  			        s = Read().ToString() + " cm";  			        break;  			   	case UltraSonicMode.Inch:  			        s = Read().ToString() +  " inch";  			        break;  			    case UltraSonicMode.Listen:  			        s = Read().ToString();  			        break;  			}
Missing Default,MonoBrickFirmware.Sensors,MSDistanceSensor,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Sensors\MSDistanceSensor.cs,GetRange,The following switch statement is missing a default case: switch (deviceId) {  				case "DIST-S":  					range = Range.Short;  					break;	  				case "DIST-M":  					range = Range.Medium;  					break;	  				case "DIST-L":  					range = Range.Long;  					break;	  				}
Missing Default,MonoBrickFirmware.UserInput,ButtonEvents,C:\repos\Larsjep_monoev3\MonoBrickFirmware\UserInput\ButtonEvents.cs,ButtonPollThread,The following switch statement is missing a default case: switch (pressed) {  					case Buttons.ButtonStates.Down:  						queue.Enqueue (DownPressed);  						break;  					case Buttons.ButtonStates.Enter:  						queue.Enqueue (EnterPressed);  						break;  					case Buttons.ButtonStates.Escape:  						queue.Enqueue (EscapePressed);  						break;  					case Buttons.ButtonStates.Left:  						queue.Enqueue (LeftPressed);  						break;  					case Buttons.ButtonStates.Right:  						queue.Enqueue (RightPressed);  						break;  					case Buttons.ButtonStates.Up:  						queue.Enqueue (UpPressed);  						break;  					}
Missing Default,MonoBrickFirmware.UserInput,ButtonEvents,C:\repos\Larsjep_monoev3\MonoBrickFirmware\UserInput\ButtonEvents.cs,ButtonPollThread,The following switch statement is missing a default case: switch (released) {  					case Buttons.ButtonStates.Down:  						queue.Enqueue (DownReleased);  						break;  					case Buttons.ButtonStates.Enter:  						queue.Enqueue (EnterReleased);  						break;  					case Buttons.ButtonStates.Escape:  						queue.Enqueue (EscapeReleased);  						break;  					case Buttons.ButtonStates.Left:  						queue.Enqueue (LeftReleased);  						break;  					case Buttons.ButtonStates.Right:  						queue.Enqueue (RightReleased);  						break;  					case Buttons.ButtonStates.Up:  						queue.Enqueue (UpReleased);  						break;  					}
Missing Default,MonoBrickFirmware.Display.Menus,ProgramItem,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Menus\ItemWithProgramList.cs,OnSelectDialogExit,The following switch statement is missing a default case: switch (dialog.GetSelectionIndex ()) {  				case 0:  					var startDialog = new ExecuteProgramDialog (this.programInformation' false' useEscToStop);  					startDialog.Start (Parent);  					break;  				case 1:  					if (!programInformation.IsAOTCompiled)  					{  						compileBeforeExecution.SetFocus (Parent' OnCompileInfoDialogExit);   					}   					else   					{  						var start = new ExecuteProgramDialog (this.programInformation' true' useEscToStop);  						start.Start (Parent);  					}  					break;  				case 2:  					if (programInformation.IsAOTCompiled)  					{  						aotQuestionDialog.SetFocus (Parent'OnCompileDialogExit);  					}   					else   					{  						compileDialog.SetFocus (Parent);  					}  					break;  				case 3:  					deleteQuestionDialog.SetFocus (Parent'OnDeleteDialogExit);  					break;  				}
Missing Default,MonoBrickFirmware.Display.Dialogs,Dialog,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\Dialog.cs,Show,The following switch statement is missing a default case: switch (Buttons.GetKeypress (cancelSource.Token)) {  				case Buttons.ButtonStates.Down:   					OnDownPressed ();  					break;  				case Buttons.ButtonStates.Up:  					OnUpPressed ();  					break;  				case Buttons.ButtonStates.Escape:  					OnEscPressed ();  					break;  				case Buttons.ButtonStates.Enter:  					OnEnterPressed ();  					break;  				case Buttons.ButtonStates.Left:  					OnLeftPressed ();  					break;  				case Buttons.ButtonStates.Right:  					OnRightPressed ();  					break;  				}
Missing Default,MonoBrickFirmware.Display.Dialogs.UserInput,ButtonContainer,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\ButtonContainer.cs,UpdateXOnUpDown,The following switch statement is missing a default case: switch (selectedButton.ExitType)   			{  			case ExitType.Left:  				x = selectedButton.Position.X;  				break;  			case ExitType.Center:  				x = selectedButton.Position.X + selectedButton.Size.X / 2;  				break;  			case ExitType.Right:  				x = selectedButton.Position.X + selectedButton.Size.X-1;  				break;  			}
Missing Default,MonoBrickFirmware.Display.Dialogs.UserInput,Keyboard,C:\repos\Larsjep_monoev3\MonoBrickFirmware\Display\Dialogs\UserInput\Keyboard.cs,Enter,The following switch statement is missing a default case: switch (SelectedButton.Id)  			{  			case "Letter":  				textButton.AddSelectedCharacter ();  				break;  			case "SelectNext":  				OnSelectNext();  				break;  			case "SelectPrev":  				OnSelectPrev ();  				break;  			case "Shift":  				OnShift ();  				break;  			case "Ok":  				OnOk();  				break;  			case "Enter":  				textButton.AddLine ();  				break;  			case "Space":  				textButton.AddSpace ();  				break;  			}
