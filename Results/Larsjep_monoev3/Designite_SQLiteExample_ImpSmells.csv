Implementation smell,Namespace,Class,File,Method,Description
Long Method,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The method has 148 lines of code.
Complex Method,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CreateTable,Cyclomatic complexity of the method is 9
Complex Method,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Insert,Cyclomatic complexity of the method is 8
Complex Method,SQLite,Orm,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,SqlType,Cyclomatic complexity of the method is 11
Complex Method,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,Cyclomatic complexity of the method is 15
Complex Method,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ReadCol,Cyclomatic complexity of the method is 21
Complex Method,SQLite,PreparedSqlLiteInsertCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ExecuteNonQuery,Cyclomatic complexity of the method is 8
Complex Method,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,Cyclomatic complexity of the method is 27
Complex Method,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,GetSqlName,Cyclomatic complexity of the method is 10
Long Parameter List,SQLite,SQLite3,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Prepare2,The method has 5 parameters.
Long Parameter List,SQLite,SQLite3,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindText,The method has 5 parameters.
Long Parameter List,SQLite,SQLite3,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindBlob,The method has 5 parameters.
Long Statement,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The length of the statement  "	var joinQuery = db.Query<SensorReading> ("select V.* from SensorReading V inner join Sensor S" + " on V.SensorId = S.Id where S.Port =?"' "In1"); " is 145.
Long Statement,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Execute,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ExecuteScalar,The length of the statement  "		Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0)); " is 129.
Long Statement,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,DoSavePointExecute,The length of the statement  "	throw new ArgumentException ("savePoint is not valid' and should be the result of a call to SaveTransactionPoint."' "savePoint"); " is 129.
Long Statement,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Update,The length of the statement  "		if (ex.Result == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (this.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 130.
Long Statement,SQLite,Orm,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,SqlType,The length of the statement  "	if (clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)) { " is 173.
Long Statement,SQLite,PreparedSqlLiteInsertCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ExecuteNonQuery,The length of the statement  "	} else if (r == SQLite3.Result.Constraint && SQLite3.ExtendedErrCode (Connection.Handle) == SQLite3.ExtendedResult.ConstraintNotNull) { " is 135.
Long Statement,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,GenerateCommand,The length of the statement  "			var t = string.Join ("' "' _orderBys.Select (o => "\"" + o.ColumnName + "\"" + (o.Ascending ? "" : " desc")).ToArray ()); " is 121.
Long Statement,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The length of the statement  "			if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) { " is 137.
Complex Conditional,SQLite,Orm,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,SqlType,The conditional expression  "clrType == typeof(Boolean) || clrType == typeof(Byte) || clrType == typeof(UInt16) || clrType == typeof(SByte) || clrType == typeof(Int16) || clrType == typeof(Int32)"  is complex.
Complex Conditional,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The conditional expression  "value is Byte || value is UInt16 || value is SByte || value is Int16"  is complex.
Complex Conditional,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The conditional expression  "val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)"  is complex.
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: for (int i = 0; i < NumberOfReadings; i++) {  	System.Threading.Thread.Sleep (1000);  	Console.WriteLine ("Reading and storing sensor reading (" + (i + 1) + " out of " + NumberOfReadings + ")");  	foreach (KeyValuePair<int' ISensor> keyPair in sensorsDictionary) {  		AddSensorValueToDb (keyPair.Key' keyPair.Value.ReadAsString ());  	}  }  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: System.Threading.Thread.Sleep (1000);  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: foreach (var val in timeQuery) {  	Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  }  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: foreach (var val in portQuery) {  	Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  }  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: foreach (var val in joinQuery) {  	Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  }  
Magic Number,SQLiteExample,MainClass,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\Program.cs,Main,The following statement contains a magic number: Console.WriteLine (val.Time.ToLongTimeString ().PadRight (20) + val.Value);  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,SQLiteConnection,The following statement contains a magic number: BusyTimeout = TimeSpan.FromSeconds (0.1);  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Execute,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,Execute,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ExecuteScalar,The following statement contains a magic number: if (TimeExecution) {  	_sw.Stop ();  	_elapsedMilliseconds += _sw.ElapsedMilliseconds;  	Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  }  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,ExecuteScalar,The following statement contains a magic number: Debug.WriteLine (string.Format ("Finished in {0} ms ({1:0.0} s total)"' _sw.ElapsedMilliseconds' _elapsedMilliseconds / 1000.0));  
Magic Number,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,DoSavePointExecute,The following statement contains a magic number: if (firstLen >= 2 && savepoint.Length > firstLen + 1) {  	int depth;  	if (Int32.TryParse (savepoint.Substring (firstLen + 1)' out depth)) {  		// TODO: Mild race here' but inescapable without locking almost everywhere.  		if (0 <= depth && depth < _transactionDepth) {  			#if NETFX_CORE  			                        Volatile.Write (ref _transactionDepth' depth); #elif SILVERLIGHT  			#						_transactionDepth = depth; #else  			Thread.VolatileWrite (ref _transactionDepth' depth);  			#endif  			Execute (cmd + savepoint);  			return;  		}  	}  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value == null) {  	SQLite3.BindNull (stmt' index);  } else {  	if (value is Int32) {  		SQLite3.BindInt (stmt' index' (int)value);  	} else if (value is String) {  		SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  	} else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  		SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  	} else if (value is Boolean) {  		SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  	} else if (value is UInt32 || value is Int64) {  		SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  	} else if (value is Single || value is Double || value is Decimal) {  		SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  	} else if (value is TimeSpan) {  		SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  	} else if (value is DateTime) {  		if (storeDateTimeAsTicks) {  			SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  		} else {  			SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  		}  	} else if (value is DateTimeOffset) {  		SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  		#if !NETFX_CORE  	} else if (value.GetType ().IsEnum) {  		#else  						} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  		SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  	} else if (value is byte[]) {  		SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  	} else if (value is Guid) {  		SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  	} else {  		throw new NotSupportedException ("Cannot store type: " + value.GetType ());  	}  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Int32) {  	SQLite3.BindInt (stmt' index' (int)value);  } else if (value is String) {  	SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  } else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  } else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  } else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is String) {  	SQLite3.BindText (stmt' index' (string)value' -1' NegativePointer);  } else if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  } else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  } else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Byte || value is UInt16 || value is SByte || value is Int16) {  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  } else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  } else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Boolean) {  	SQLite3.BindInt (stmt' index' (bool)value ? 1 : 0);  } else if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  } else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is UInt32 || value is Int64) {  	SQLite3.BindInt64 (stmt' index' Convert.ToInt64 (value));  } else if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Single || value is Double || value is Decimal) {  	SQLite3.BindDouble (stmt' index' Convert.ToDouble (value));  } else if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is TimeSpan) {  	SQLite3.BindInt64 (stmt' index' ((TimeSpan)value).Ticks);  } else if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is DateTime) {  	if (storeDateTimeAsTicks) {  		SQLite3.BindInt64 (stmt' index' ((DateTime)value).Ticks);  	} else {  		SQLite3.BindText (stmt' index' ((DateTime)value).ToString ("yyyy-MM-dd HH:mm:ss")' -1' NegativePointer);  	}  } else if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is DateTimeOffset) {  	SQLite3.BindInt64 (stmt' index' ((DateTimeOffset)value).UtcTicks);  	#if !NETFX_CORE  } else if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value.GetType ().IsEnum) {  	#else  					} else if (value.GetType().GetTypeInfo().IsEnum) { #endif  	SQLite3.BindInt (stmt' index' Convert.ToInt32 (value));  } else if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is byte[]) {  	SQLite3.BindBlob (stmt' index' (byte[])value' ((byte[])value).Length' NegativePointer);  } else if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: if (value is Guid) {  	SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  } else {  	throw new NotSupportedException ("Cannot store type: " + value.GetType ());  }  
Magic Number,SQLite,SQLiteCommand,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BindParameter,The following statement contains a magic number: SQLite3.BindText (stmt' index' ((Guid)value).ToString ()' 72' NegativePointer);  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  } else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  } else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr == null) {  	throw new NotSupportedException ("Expression is NULL");  } else if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  } else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  } else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr is BinaryExpression) {  	var bin = (BinaryExpression)expr;  	var leftr = CompileExpr (bin.Left' queryArgs);  	var rightr = CompileExpr (bin.Right' queryArgs);  	//If either side is a parameter and is null' then handle the other side specially (for "is null"/"is not null")  	string text;  	if (leftr.CommandText == "?" && leftr.Value == null)  		text = CompileNullBinaryExpression (bin' rightr);  	else if (rightr.CommandText == "?" && rightr.Value == null)  		text = CompileNullBinaryExpression (bin' leftr);  	else  		text = "(" + leftr.CommandText + " " + GetSqlName (bin) + " " + rightr.CommandText + ")";  	return new CompileResult {  		CommandText = text  	};  } else if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (expr.NodeType == ExpressionType.Call) {  	var call = (MethodCallExpression)expr;  	var args = new CompileResult[call.Arguments.Count];  	var obj = call.Object != null ? CompileExpr (call.Object' queryArgs) : null;  	for (var i = 0; i < args.Length; i++) {  		args [i] = CompileExpr (call.Arguments [i]' queryArgs);  	}  	var sqlCall = "";  	if (call.Method.Name == "Like" && args.Length == 2) {  		sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 2) {  		sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  	} else if (call.Method.Name == "Contains" && args.Length == 1) {  		if (call.Object != null && call.Object.Type == typeof(string)) {  			sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  		} else {  			sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  		}  	} else if (call.Method.Name == "StartsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  	} else if (call.Method.Name == "EndsWith" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  	} else if (call.Method.Name == "Equals" && args.Length == 1) {  		sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  	} else if (call.Method.Name == "ToLower") {  		sqlCall = "(lower(" + obj.CommandText + "))";  	} else if (call.Method.Name == "ToUpper") {  		sqlCall = "(upper(" + obj.CommandText + "))";  	} else {  		sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  	}  	return new CompileResult {  		CommandText = sqlCall  	};  } else if (expr.NodeType == ExpressionType.Constant) {  	var c = (ConstantExpression)expr;  	queryArgs.Add (c.Value);  	return new CompileResult {  		CommandText = "?"'  		Value = c.Value  	};  } else if (expr.NodeType == ExpressionType.Convert) {  	var u = (UnaryExpression)expr;  	var ty = u.Type;  	var valr = CompileExpr (u.Operand' queryArgs);  	return new CompileResult {  		CommandText = valr.CommandText'  		Value = valr.Value != null ? ConvertTo (valr.Value' ty) : null  	};  } else if (expr.NodeType == ExpressionType.MemberAccess) {  	var mem = (MemberExpression)expr;  	if (mem.Expression != null && mem.Expression.NodeType == ExpressionType.Parameter) {  		//  		// This is a column of our table' output just the column name  		// Need to translate it if that column name is mapped  		//  		var columnName = Table.FindColumnWithPropertyName (mem.Member.Name).Name;  		return new CompileResult {  			CommandText = "\"" + columnName + "\""  		};  	} else {  		object obj = null;  		if (mem.Expression != null) {  			var r = CompileExpr (mem.Expression' queryArgs);  			if (r.Value == null) {  				throw new NotSupportedException ("Member access failed to compile expression");  			}  			if (r.CommandText == "?") {  				queryArgs.RemoveAt (queryArgs.Count - 1);  			}  			obj = r.Value;  		}  		//  		// Get the member value  		//  		object val = null;  		#if !NETFX_CORE  		if (mem.Member.MemberType == MemberTypes.Property) {  			#else  								if (mem.Member is PropertyInfo) { #endif  			var m = (PropertyInfo)mem.Member;  			val = m.GetValue (obj' null);  			#if !NETFX_CORE  		} else if (mem.Member.MemberType == MemberTypes.Field) {  			#else  								} else if (mem.Member is FieldInfo) { #endif  			#if SILVERLIGHT  									val = Expression.Lambda (expr).Compile ().DynamicInvoke (); #else  			var m = (FieldInfo)mem.Member;  			val = m.GetValue (obj);  			#endif  		} else {  			#if !NETFX_CORE  			throw new NotSupportedException ("MemberExpr: " + mem.Member.MemberType);  			#else  									throw new NotSupportedException ("MemberExpr: " + mem.Member.DeclaringType); #endif  		}  		//  		// Work special magic for enumerables  		//  		if (val != null && val is System.Collections.IEnumerable && !(val is string) && !(val is System.Collections.Generic.IEnumerable<byte>)) {  			var sb = new System.Text.StringBuilder ();  			sb.Append ("(");  			var head = "";  			foreach (var a in (System.Collections.IEnumerable)val) {  				queryArgs.Add (a);  				sb.Append (head);  				sb.Append ("?");  				head = "'";  			}  			sb.Append (")");  			return new CompileResult {  				CommandText = sb.ToString ()'  				Value = val  			};  		} else {  			queryArgs.Add (val);  			return new CompileResult {  				CommandText = "?"'  				Value = val  			};  		}  	}  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  } else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  } else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	} else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  } else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  } else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  } else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  } else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  } else if (call.Method.Name == "ToUpper") {  	sqlCall = "(upper(" + obj.CommandText + "))";  } else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Like" && args.Length == 2) {  	sqlCall = "(" + args [0].CommandText + " like " + args [1].CommandText + ")";  } else if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  } else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	} else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  } else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  } else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  } else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  } else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  } else if (call.Method.Name == "ToUpper") {  	sqlCall = "(upper(" + obj.CommandText + "))";  } else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Magic Number,SQLite,TableQuery,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,CompileExpr,The following statement contains a magic number: if (call.Method.Name == "Contains" && args.Length == 2) {  	sqlCall = "(" + args [1].CommandText + " in " + args [0].CommandText + ")";  } else if (call.Method.Name == "Contains" && args.Length == 1) {  	if (call.Object != null && call.Object.Type == typeof(string)) {  		sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + " || '%'))";  	} else {  		sqlCall = "(" + args [0].CommandText + " in " + obj.CommandText + ")";  	}  } else if (call.Method.Name == "StartsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like (" + args [0].CommandText + " || '%'))";  } else if (call.Method.Name == "EndsWith" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " like ('%' || " + args [0].CommandText + "))";  } else if (call.Method.Name == "Equals" && args.Length == 1) {  	sqlCall = "(" + obj.CommandText + " = (" + args [0].CommandText + "))";  } else if (call.Method.Name == "ToLower") {  	sqlCall = "(lower(" + obj.CommandText + "))";  } else if (call.Method.Name == "ToUpper") {  	sqlCall = "(upper(" + obj.CommandText + "))";  } else {  	sqlCall = call.Method.Name.ToLower () + "(" + string.Join ("'"' args.Select (a => a.CommandText).ToArray ()) + ")";  }  
Missing Default,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,BeginTransaction,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
Missing Default,SQLite,SQLiteConnection,F:\newReposMay17\Larsjep_monoev3\SQLiteExample\SQLite.cs,SaveTransactionPoint,The following switch statement is missing a default case: switch (sqlExp.Result) {  case SQLite3.Result.IOError:  case SQLite3.Result.Full:  case SQLite3.Result.Busy:  case SQLite3.Result.NoMem:  case SQLite3.Result.Interrupt:  	RollbackTo (null' true);  	break;  }  
