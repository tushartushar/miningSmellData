Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The method has 124 lines of code.
Long Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The method has 123 lines of code.
Long Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The method has 147 lines of code.
Long Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The method has 127 lines of code.
Complex Method,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,Cyclomatic complexity of the method is 43
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,Cyclomatic complexity of the method is 70
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,Cyclomatic complexity of the method is 70
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,Cyclomatic complexity of the method is 70
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,Cyclomatic complexity of the method is 70
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesKeys,Cyclomatic complexity of the method is 25
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesValues,Cyclomatic complexity of the method is 25
Complex Method,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesEnumerable,Cyclomatic complexity of the method is 25
Complex Method,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,Cyclomatic complexity of the method is 12
Complex Method,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,Cyclomatic complexity of the method is 18
Complex Method,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Create,Cyclomatic complexity of the method is 12
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessRequestHeader,Cyclomatic complexity of the method is 17
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,Cyclomatic complexity of the method is 17
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,Cyclomatic complexity of the method is 13
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,Cyclomatic complexity of the method is 33
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,Cyclomatic complexity of the method is 15
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SendHttpResponseAndPrepareForNext,Cyclomatic complexity of the method is 8
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,Cyclomatic complexity of the method is 9
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WriteAsync,Cyclomatic complexity of the method is 11
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FinishReceive,Cyclomatic complexity of the method is 8
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,Cyclomatic complexity of the method is 19
Complex Method,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FinishSend,Cyclomatic complexity of the method is 9
Complex Method,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,IoCompleted,Cyclomatic complexity of the method is 20
Long Parameter List,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The method has 5 parameters.
Long Parameter List,Nowin,SslTransportHandler,F:\newReposMay17\Bobris_Nowin\Nowin\SslTransportHandler.cs,FinishAccept,The method has 5 parameters.
Long Parameter List,Nowin,Transport2HttpFactory,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpFactory.cs,Transport2HttpFactory,The method has 5 parameters.
Long Parameter List,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,Transport2HttpHandler,The method has 11 parameters.
Long Parameter List,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The method has 5 parameters.
Long Parameter List,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,OptimallyMergeTwoRegions,The method has 5 parameters.
Long Parameter List,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FinishAccept,The method has 5 parameters.
Long Parameter List,Nowin,ITransportLayerHandler,F:\newReposMay17\Bobris_Nowin\Nowin\ITransportLayerHandler.cs,FinishAccept,The method has 5 parameters.
Long Parameter List,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,SaeaLayerCallback,The method has 5 parameters.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The length of the statement  "	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} WebSocketSendAsyncMethod Len:{1} MessageType:{2} EndOfMessage:{3}"' _handlerId' data.Count' messageType' endOfMessage); " is 170.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The length of the statement  "			data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize); " is 138.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The length of the statement  "		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Ignoring WebSocketCloseAsync closeStatus:{1} desc:{2}"' _handlerId' closeStatus' closeDescription); " is 150.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The length of the statement  "	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} WebSocketCloseAsync closeStatus:{1} desc:{2}"' _handlerId' closeStatus' closeDescription); " is 141.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "				_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2))); " is 134.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]); " is 208.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "		Unmask (Callback.Buffer' Callback.ReceiveDataOffset' _webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset' len); " is 123.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "		_webSocketReceiveSegment = new ArraySegment<byte> (_webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset + len' _webSocketReceiveSegment.Count - len); " is 160.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "				TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount); " is 188.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The length of the statement  "				TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' false' _webSocketReceiveCount); " is 174.
Long Statement,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The length of the statement  "		_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]); " is 259.
Long Statement,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Initialize,The length of the statement  "	var capabilities = properties.Get<IDictionary<string' object>> (OwinKeys.ServerCapabilitiesKey) ?? new Dictionary<string' object> (); " is 133.
Long Statement,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Create,The length of the statement  "	var capabilities = properties.Get<IDictionary<string' object>> (OwinKeys.ServerCapabilitiesKey) ?? new Dictionary<string' object> (); " is 133.
Long Statement,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Create,The length of the statement  "	var addresses = properties.Get<IList<IDictionary<string' object>>> ("host.Addresses") ?? new List<IDictionary<string' object>> (); " is 130.
Long Statement,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Create,The length of the statement  "			if (!string.IsNullOrEmpty (clientCertificateRequired) && bool.TryParse (clientCertificateRequired' out required) && required) " is 125.
Long Statement,Nowin,OwinServerFactory,F:\newReposMay17\Bobris_Nowin\Nowin\OwinServerFactory.cs,Create,The length of the statement  "		// This is workaround to Windows Server 2012 issue by calling ReadLine after AcceptAsync' by making one bogus connection this problem goes away " is 143.
Long Statement,Nowin,SslTransportHandler,F:\newReposMay17\Bobris_Nowin\Nowin\SslTransportHandler.cs,FinishAccept,The length of the statement  "		_authenticateTask = _ssl.AuthenticateAsServerAsync (_serverParameters.Certificate' _serverParameters.ClientCertificateRequired' _serverParameters.Protocols' false).ContinueWith ((t' selfObject) => { " is 198.
Long Statement,Nowin,Transport2HttpFactory,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpFactory.cs,Create,The length of the statement  "	var nextHandler = (IHttpLayerHandler)_next.Create (buffer' offset + MyPerConnectionBufferSize ()' commonOffset + MyCommonBufferSize ()' handlerId); " is 147.
Long Statement,Nowin,Transport2HttpFactory,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpFactory.cs,Create,The length of the statement  "	return new Transport2HttpHandler (nextHandler' _isSsl' _serverName' _dateProvider' _ipIsLocalChecker' buffer' offset' _receiveBufferSize' commonOffset' _charBuffer' handlerId); " is 176.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The length of the statement  "	if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) { " is 214.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The length of the statement  "		if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') { " is 153.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The length of the statement  "		if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') { " is 128.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The length of the statement  "		if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') { " is 178.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SendInternalServerError,The length of the statement  "		response = "HTTP/1.1 " + response + "\r\nServer: " + _serverName + "\r\nDate: " + _dateProvider.DateHeaderValue + "\r\nContent-Length: 0\r\n\r\n"; " is 146.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WriteAsync,The length of the statement  "		OptimallyMergeTwoRegions (_buffer' StartBufferOffset + ReceiveBufferSize' _responseHeaderPos' ref startOffset' ref len); " is 120.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WriteAsync,The length of the statement  "	if (!_isMethodHead && _responseContentLength != ulong.MaxValue && _reqRespStream.ResponseLength > _responseContentLength) { " is 123.
Long Statement,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,UpgradeToWebSocket,The length of the statement  "	HeaderAppend ("HTTP/1.1 101 Switching Protocols\r\nUpgrade: websocket\r\nConnection: Upgrade\r\nSec-WebSocket-Accept: "); " is 121.
Long Statement,Nowin,ReqRespStream,F:\newReposMay17\Bobris_Nowin\Nowin\ReqRespStream.cs,ProcessDataInternal,The length of the statement  "		Array.Copy (_buf' _transport2HttpHandler.StartBufferOffset + _transport2HttpHandler.ReceiveBufferPos' _asyncBuffer' _asyncOffset' len); " is 135.
Long Statement,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,IoCompleted,The length of the statement  "	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} IoCompleted {1} {2} {3} {4}"' self._handlerId' e.LastOperation' e.Offset' e.BytesTransferred' e.SocketError); " is 160.
Long Statement,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,StartAccept,The length of the statement  "		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Sync Accept {1} {2} {3} {4}"' _handlerId' e.LastOperation' e.Offset' e.BytesTransferred' e.SocketError); " is 155.
Long Statement,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,StartReceive,The length of the statement  "		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Sync Receive {1} {2} {3} {4}"' _handlerId' e.LastOperation' e.Offset' e.BytesTransferred' e.SocketError); " is 156.
Long Statement,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,StartSend,The length of the statement  "		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Sync Send {1} {2} {3} {4}"' _handlerId' e.LastOperation' e.Offset' e.BytesTransferred' e.SocketError); " is 153.
Long Statement,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,StartDisconnect,The length of the statement  "		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Sync Disconnect {1} {2} {3} {4}"' _handlerId' e.LastOperation' e.Offset' e.BytesTransferred' e.SocketError); " is 159.
Long Statement,Nowin,Server,F:\newReposMay17\Bobris_Nowin\Nowin\Server.cs,Start,The length of the statement  "	_layerFactory = new Transport2HttpFactory (_parameters.BufferSize' isSsl' _parameters.ServerHeader' _ipIsLocalChecker' _layerFactory); " is 134.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The conditional expression  "buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13"  is complex.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The conditional expression  "buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' '"  is complex.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The conditional expression  "buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' '"  is complex.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The conditional expression  "buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' '"  is complex.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The conditional expression  "buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' '"  is complex.
Complex Conditional,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The conditional expression  "buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' '"  is complex.
Empty Catch Block,Nowin,SaeaLayerCallback,F:\newReposMay17\Bobris_Nowin\Nowin\SaeaLayerCallback.cs,ProcessAccept,The method has an empty catch block.
Empty Catch Block,Nowin,Server,F:\newReposMay17\Bobris_Nowin\Nowin\Server.cs,Start,The method has an empty catch block.
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: switch (_state) {  case State.InHex:  	var h = Transport2HttpHandler.ParseHexChar (b);  	if (h < 0) {  		_state = State.AfterHex;  		goto case State.AfterHex;  	}  	_nextAvail = _nextAvail * 16 + h;  	break;  case State.AfterHex:  	if (b == 13) {  		_state = State.AfterCR;  	}  	break;  case State.AfterCR:  	if (b == 10) {  		_state = State.InData;  		_dataAvail = _nextAvail;  		break;  	}  	_state = State.AfterHex;  	break;  case State.InData:  	if (b == 13)  		_state = State.AfterCR2;  	else {  		Debug.Assert (_nextAvail == 0);  		_state = State.InTrailer;  	}  	break;  case State.AfterCR2:  	Debug.Assert (b == 10);  	if (_nextAvail == 0) {  		_state = State.End;  		_dataAvail = -1;  		return true;  	}  	_state = State.InHex;  	_nextAvail = 0;  	break;  case State.AfterLF2:  	_state = b == 13 ? State.AfterCR3 : State.InTrailer;  	break;  case State.InTrailer:  	if (b == 13) {  		_state = State.AfterTrailerCR;  	}  	break;  case State.AfterTrailerCR:  	Debug.Assert (b == 10);  	_state = State.AfterLF2;  	break;  case State.AfterCR3:  	Debug.Assert (b == 10);  	_state = State.End;  	_dataAvail = -1;  	return true;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: _nextAvail = _nextAvail * 16 + h;  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: if (b == 13) {  	_state = State.AfterCR;  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: if (b == 10) {  	_state = State.InData;  	_dataAvail = _nextAvail;  	break;  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: if (b == 13)  	_state = State.AfterCR2;  else {  	Debug.Assert (_nextAvail == 0);  	_state = State.InTrailer;  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: Debug.Assert (b == 10);  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: _state = b == 13 ? State.AfterCR3 : State.InTrailer;  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: if (b == 13) {  	_state = State.AfterTrailerCR;  }  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: Debug.Assert (b == 10);  
Magic Number,Nowin,ChunkedDecoder,F:\newReposMay17\Bobris_Nowin\Nowin\ChunkedDecoder.cs,ProcessByte,The following statement contains a magic number: Debug.Assert (b == 10);  
Magic Number,Nowin,TimeBasedService,F:\newReposMay17\Bobris_Nowin\Nowin\TimeBasedService.cs,TimeBasedService,The following statement contains a magic number: _timer = new Timer (Update' null' 1000' 1000);  
Magic Number,Nowin,TimeBasedService,F:\newReposMay17\Bobris_Nowin\Nowin\TimeBasedService.cs,TimeBasedService,The following statement contains a magic number: _timer = new Timer (Update' null' 1000' 1000);  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following statement contains a magic number: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: Callback.ResponseStatusCode = 200;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: try {  	var task = _app (_environment);  	if (task.IsCompleted) {  		if (_disconnected || _inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		SetReponseStatusCodeForFails (task' Callback);  		Callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  		return;  	}  	task.ContinueWith ((t' o) => {  		if (((OwinHandler)o)._disconnected || ((OwinHandler)o)._inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		var callback = ((OwinHandler)o).Callback;  		SetReponseStatusCodeForFails (t' callback);  		callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  	}' this);  } catch (Exception) {  	if (_disconnected || _inWebSocket) {  		ReportFinishOfAppFunc ();  		return;  	}  	if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  		Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  	Callback.ResponseReasonPhase = null;  	Callback.ResponseFinished ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: try {  	var task = _app (_environment);  	if (task.IsCompleted) {  		if (_disconnected || _inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		SetReponseStatusCodeForFails (task' Callback);  		Callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  		return;  	}  	task.ContinueWith ((t' o) => {  		if (((OwinHandler)o)._disconnected || ((OwinHandler)o)._inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		var callback = ((OwinHandler)o).Callback;  		SetReponseStatusCodeForFails (t' callback);  		callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  	}' this);  } catch (Exception) {  	if (_disconnected || _inWebSocket) {  		ReportFinishOfAppFunc ();  		return;  	}  	if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  		Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  	Callback.ResponseReasonPhase = null;  	Callback.ResponseFinished ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: try {  	var task = _app (_environment);  	if (task.IsCompleted) {  		if (_disconnected || _inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		SetReponseStatusCodeForFails (task' Callback);  		Callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  		return;  	}  	task.ContinueWith ((t' o) => {  		if (((OwinHandler)o)._disconnected || ((OwinHandler)o)._inWebSocket) {  			ReportFinishOfAppFunc ();  			return;  		}  		var callback = ((OwinHandler)o).Callback;  		SetReponseStatusCodeForFails (t' callback);  		callback.ResponseFinished ();  		ReportFinishOfAppFunc ();  	}' this);  } catch (Exception) {  	if (_disconnected || _inWebSocket) {  		ReportFinishOfAppFunc ();  		return;  	}  	if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  		Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  	Callback.ResponseReasonPhase = null;  	Callback.ResponseFinished ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  	Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  	Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: if (!Callback.HeadersSend || Callback.ResponseStatusCode != 500)  	Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,HandleRequest,The following statement contains a magic number: Callback.ResponseStatusCode = Callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (t.IsFaulted || t.IsCanceled) {  	if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  		callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  	callback.ResponseReasonPhase = null;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (t.IsFaulted || t.IsCanceled) {  	if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  		callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  	callback.ResponseReasonPhase = null;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (t.IsFaulted || t.IsCanceled) {  	if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  		callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  	callback.ResponseReasonPhase = null;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  	callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  	callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: if (!t.IsFaulted || !callback.HeadersSend || callback.ResponseStatusCode != 500)  	callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,SetReponseStatusCodeForFails,The following statement contains a magic number: callback.ResponseStatusCode = callback.HeadersSend ? 599 : 5000;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (headers.TryGetValue ("Connection"' out connectionValues)) {  	headers.Remove ("Connection");  	if (connectionValues.Length != 1) {  		Callback.ResponseStatusCode = 500;  		return;  	}  	var v = connectionValues [0];  	if (v.Equals ("Close"' StringComparison.InvariantCultureIgnoreCase))  		Callback.KeepAlive = false;  	else if (v.Equals ("Keep-alive"' StringComparison.InvariantCultureIgnoreCase))  		Callback.KeepAlive = true;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (connectionValues.Length != 1) {  	Callback.ResponseStatusCode = 500;  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: Callback.ResponseStatusCode = 500;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (headers.TryGetValue ("Content-Length"' out contentLengthValues)) {  	headers.Remove ("Content-Length");  	if (contentLengthValues.Length != 1) {  		Callback.ResponseStatusCode = 500;  		return;  	}  	ulong temp;  	if (!ulong.TryParse (contentLengthValues [0]' out temp)) {  		Callback.ResponseStatusCode = 500;  		return;  	}  	Callback.ResponseContentLength = temp;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (headers.TryGetValue ("Content-Length"' out contentLengthValues)) {  	headers.Remove ("Content-Length");  	if (contentLengthValues.Length != 1) {  		Callback.ResponseStatusCode = 500;  		return;  	}  	ulong temp;  	if (!ulong.TryParse (contentLengthValues [0]' out temp)) {  		Callback.ResponseStatusCode = 500;  		return;  	}  	Callback.ResponseContentLength = temp;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (contentLengthValues.Length != 1) {  	Callback.ResponseStatusCode = 500;  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: Callback.ResponseStatusCode = 500;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: if (!ulong.TryParse (contentLengthValues [0]' out temp)) {  	Callback.ResponseStatusCode = 500;  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,PrepareResponseHeaders,The following statement contains a magic number: Callback.ResponseStatusCode = 500;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,UpgradedToWebSocket,The following statement contains a magic number: if (!success) {  	Callback.ResponseStatusCode = 500;  	Callback.ResponseFinished ();  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,UpgradedToWebSocket,The following statement contains a magic number: Callback.ResponseStatusCode = 500;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var last = false;  	var o = Callback.SendDataOffset + 4;  	do {  		if (_webSocketReceiveState == WebSocketReceiveState.Close) {  			throw new OperationCanceledException ("Connection is already closed");  		}  		var l = _webSocketSendBufferUsedSize + data.Count;  		if (l > maxlen)  			l = maxlen;  		else  			last = true;  		Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  		data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  		if (data.Count == 0 && last && !endOfMessage) {  			_webSocketSendBufferUsedSize = l;  			return;  		}  		_webSocketSendBufferUsedSize = 0;  		int headerSize;  		if (l < 126) {  			buf [o - 1] = (byte)l;  			headerSize = 2;  		} else {  			buf [o - 3] = 126;  			buf [o - 2] = (byte)(l / 256);  			buf [o - 1] = (byte)(l % 256);  			headerSize = 4;  		}  		buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  		messageType = 0;  		await Callback.SendData (buf' o - headerSize' headerSize + l);  	} while (!last);  	_webSocketNextSendIsStartOfMessage = endOfMessage;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: do {  	if (_webSocketReceiveState == WebSocketReceiveState.Close) {  		throw new OperationCanceledException ("Connection is already closed");  	}  	var l = _webSocketSendBufferUsedSize + data.Count;  	if (l > maxlen)  		l = maxlen;  	else  		last = true;  	Array.Copy (data.Array' data.Offset' buf' o + _webSocketSendBufferUsedSize' l - _webSocketSendBufferUsedSize);  	data = new ArraySegment<byte> (data.Array' data.Offset + l - _webSocketSendBufferUsedSize' data.Count - l + _webSocketSendBufferUsedSize);  	if (data.Count == 0 && last && !endOfMessage) {  		_webSocketSendBufferUsedSize = l;  		return;  	}  	_webSocketSendBufferUsedSize = 0;  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = (byte)(((last & endOfMessage) ? 0x80 : 0) + messageType);  	messageType = 0;  	await Callback.SendData (buf' o - headerSize' headerSize + l);  } while (!last);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: headerSize = 2;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: buf [o - 3] = 126;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: buf [o - 3] = 126;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: buf [o - 2] = (byte)(l / 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: buf [o - 2] = (byte)(l / 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: buf [o - 1] = (byte)(l % 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketSendAsyncMethod,The following statement contains a magic number: headerSize = 4;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: try {  	var buf = Callback.Buffer;  	var maxlen = Math.Min (Callback.SendDataLength - 4' 65535);  	var l = 2;  	var o = Callback.SendDataOffset + 4;  	buf [o] = (byte)(closeStatus / 256);  	buf [o + 1] = (byte)(closeStatus % 256);  	if (Encoding.UTF8.GetByteCount (closeDescription) > maxlen) {  		closeDescription = "";  	}  	l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  	int headerSize;  	if (l < 126) {  		buf [o - 1] = (byte)l;  		headerSize = 2;  	} else {  		buf [o - 3] = 126;  		buf [o - 2] = (byte)(l / 256);  		buf [o - 1] = (byte)(l % 256);  		headerSize = 4;  	}  	buf [o - headerSize] = 0x88;  	_webSocketTcsReceivedClose = new TaskCompletionSource<object> ();  	await Callback.SendData (buf' o - headerSize' headerSize + l);  	if (_webSocketReceiveState == WebSocketReceiveState.Close || _webSocketReceiveState == WebSocketReceiveState.Closing) {  		_webSocketTcsReceivedClose.TrySetResult (null);  	}  	await _webSocketTcsReceivedClose.Task;  } finally {  	_sendLock.Release ();  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o] = (byte)(closeStatus / 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o + 1] = (byte)(closeStatus % 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: l += Encoding.UTF8.GetBytes (closeDescription' 0' closeDescription.Length' buf' o + 2);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: if (l < 126) {  	buf [o - 1] = (byte)l;  	headerSize = 2;  } else {  	buf [o - 3] = 126;  	buf [o - 2] = (byte)(l / 256);  	buf [o - 1] = (byte)(l % 256);  	headerSize = 4;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: headerSize = 2;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o - 3] = 126;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o - 3] = 126;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o - 2] = (byte)(l / 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o - 2] = (byte)(l / 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: buf [o - 1] = (byte)(l % 256);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,WebSocketCloseAsyncMethod,The following statement contains a magic number: headerSize = 4;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketReceiveState == WebSocketReceiveState.Body) {  	if (_webSocketFrameOpcode == 0x8) {  		if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  			StartReciveDataIfNotAlreadyReceiving ();  			return;  		}  		var buf = Callback.Buffer;  		var o = Callback.ReceiveDataOffset;  		Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  		if (_webSocketFrameLen >= 2) {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  		} else {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  		}  		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  		Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  		_webSocketReceiveState = WebSocketReceiveState.Closing;  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  		}  		_webSocketTcsReceivedClose.TrySetResult (null);  		return;  	}  	var len = (int)Math.Min (_webSocketFrameLen' (ulong)_webSocketReceiveSegment.Count);  	if (Callback.ReceiveDataLength < len)  		len = Callback.ReceiveDataLength;  	Unmask (Callback.Buffer' Callback.ReceiveDataOffset' _webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset' len);  	Callback.ConsumeReceiveData (len);  	_webSocketFrameLen -= (ulong)len;  	_webSocketReceiveCount += len;  	_webSocketReceiveSegment = new ArraySegment<byte> (_webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset + len' _webSocketReceiveSegment.Count - len);  	if (_webSocketFrameLen == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount));  		}  		_webSocketReceiveState = WebSocketReceiveState.Header;  	} else if (_webSocketReceiveSegment.Count == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' false' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' false' _webSocketReceiveCount));  		}  	}  	if (Callback.ReceiveDataLength == 0) {  		StartReciveDataIfNotAlreadyReceiving ();  	}  } else if (_webSocketReceiveState == WebSocketReceiveState.Error) {  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetCanceled ();  	}  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketReceiveState == WebSocketReceiveState.Body) {  	if (_webSocketFrameOpcode == 0x8) {  		if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  			StartReciveDataIfNotAlreadyReceiving ();  			return;  		}  		var buf = Callback.Buffer;  		var o = Callback.ReceiveDataOffset;  		Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  		if (_webSocketFrameLen >= 2) {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  		} else {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  		}  		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  		Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  		_webSocketReceiveState = WebSocketReceiveState.Closing;  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  		}  		_webSocketTcsReceivedClose.TrySetResult (null);  		return;  	}  	var len = (int)Math.Min (_webSocketFrameLen' (ulong)_webSocketReceiveSegment.Count);  	if (Callback.ReceiveDataLength < len)  		len = Callback.ReceiveDataLength;  	Unmask (Callback.Buffer' Callback.ReceiveDataOffset' _webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset' len);  	Callback.ConsumeReceiveData (len);  	_webSocketFrameLen -= (ulong)len;  	_webSocketReceiveCount += len;  	_webSocketReceiveSegment = new ArraySegment<byte> (_webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset + len' _webSocketReceiveSegment.Count - len);  	if (_webSocketFrameLen == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount));  		}  		_webSocketReceiveState = WebSocketReceiveState.Header;  	} else if (_webSocketReceiveSegment.Count == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' false' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' false' _webSocketReceiveCount));  		}  	}  	if (Callback.ReceiveDataLength == 0) {  		StartReciveDataIfNotAlreadyReceiving ();  	}  } else if (_webSocketReceiveState == WebSocketReceiveState.Error) {  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetCanceled ();  	}  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketReceiveState == WebSocketReceiveState.Body) {  	if (_webSocketFrameOpcode == 0x8) {  		if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  			StartReciveDataIfNotAlreadyReceiving ();  			return;  		}  		var buf = Callback.Buffer;  		var o = Callback.ReceiveDataOffset;  		Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  		if (_webSocketFrameLen >= 2) {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  		} else {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  		}  		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  		Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  		_webSocketReceiveState = WebSocketReceiveState.Closing;  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  		}  		_webSocketTcsReceivedClose.TrySetResult (null);  		return;  	}  	var len = (int)Math.Min (_webSocketFrameLen' (ulong)_webSocketReceiveSegment.Count);  	if (Callback.ReceiveDataLength < len)  		len = Callback.ReceiveDataLength;  	Unmask (Callback.Buffer' Callback.ReceiveDataOffset' _webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset' len);  	Callback.ConsumeReceiveData (len);  	_webSocketFrameLen -= (ulong)len;  	_webSocketReceiveCount += len;  	_webSocketReceiveSegment = new ArraySegment<byte> (_webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset + len' _webSocketReceiveSegment.Count - len);  	if (_webSocketFrameLen == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount));  		}  		_webSocketReceiveState = WebSocketReceiveState.Header;  	} else if (_webSocketReceiveSegment.Count == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' false' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' false' _webSocketReceiveCount));  		}  	}  	if (Callback.ReceiveDataLength == 0) {  		StartReciveDataIfNotAlreadyReceiving ();  	}  } else if (_webSocketReceiveState == WebSocketReceiveState.Error) {  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetCanceled ();  	}  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketReceiveState == WebSocketReceiveState.Body) {  	if (_webSocketFrameOpcode == 0x8) {  		if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  			StartReciveDataIfNotAlreadyReceiving ();  			return;  		}  		var buf = Callback.Buffer;  		var o = Callback.ReceiveDataOffset;  		Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  		if (_webSocketFrameLen >= 2) {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  		} else {  			_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  			_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  		}  		TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  		Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  		_webSocketReceiveState = WebSocketReceiveState.Closing;  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  		}  		_webSocketTcsReceivedClose.TrySetResult (null);  		return;  	}  	var len = (int)Math.Min (_webSocketFrameLen' (ulong)_webSocketReceiveSegment.Count);  	if (Callback.ReceiveDataLength < len)  		len = Callback.ReceiveDataLength;  	Unmask (Callback.Buffer' Callback.ReceiveDataOffset' _webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset' len);  	Callback.ConsumeReceiveData (len);  	_webSocketFrameLen -= (ulong)len;  	_webSocketReceiveCount += len;  	_webSocketReceiveSegment = new ArraySegment<byte> (_webSocketReceiveSegment.Array' _webSocketReceiveSegment.Offset + len' _webSocketReceiveSegment.Count - len);  	if (_webSocketFrameLen == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' _webSocketFrameLast' _webSocketReceiveCount));  		}  		_webSocketReceiveState = WebSocketReceiveState.Header;  	} else if (_webSocketReceiveSegment.Count == 0) {  		var tcs = _webSocketReceiveTcs;  		if (tcs != null) {  			_webSocketReceiveTcs = null;  			TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketFrame Opcode:{1} Last:{2} Length:{3}"' _handlerId' _webSocketFrameOpcode' false' _webSocketReceiveCount);  			tcs.SetResult (new WebSocketReceiveTuple (_webSocketFrameOpcode' false' _webSocketReceiveCount));  		}  	}  	if (Callback.ReceiveDataLength == 0) {  		StartReciveDataIfNotAlreadyReceiving ();  	}  } else if (_webSocketReceiveState == WebSocketReceiveState.Error) {  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetCanceled ();  	}  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameOpcode == 0x8) {  	if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  		StartReciveDataIfNotAlreadyReceiving ();  		return;  	}  	var buf = Callback.Buffer;  	var o = Callback.ReceiveDataOffset;  	Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  	if (_webSocketFrameLen >= 2) {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  	} else {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  	}  	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  	Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  	_webSocketReceiveState = WebSocketReceiveState.Closing;  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  	}  	_webSocketTcsReceivedClose.TrySetResult (null);  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameOpcode == 0x8) {  	if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  		StartReciveDataIfNotAlreadyReceiving ();  		return;  	}  	var buf = Callback.Buffer;  	var o = Callback.ReceiveDataOffset;  	Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  	if (_webSocketFrameLen >= 2) {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  	} else {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  	}  	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  	Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  	_webSocketReceiveState = WebSocketReceiveState.Closing;  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  	}  	_webSocketTcsReceivedClose.TrySetResult (null);  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameOpcode == 0x8) {  	if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  		StartReciveDataIfNotAlreadyReceiving ();  		return;  	}  	var buf = Callback.Buffer;  	var o = Callback.ReceiveDataOffset;  	Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  	if (_webSocketFrameLen >= 2) {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  	} else {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  	}  	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  	Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  	_webSocketReceiveState = WebSocketReceiveState.Closing;  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  	}  	_webSocketTcsReceivedClose.TrySetResult (null);  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameOpcode == 0x8) {  	if (Callback.ReceiveDataLength < (int)_webSocketFrameLen) {  		StartReciveDataIfNotAlreadyReceiving ();  		return;  	}  	var buf = Callback.Buffer;  	var o = Callback.ReceiveDataOffset;  	Unmask (buf' o' buf' o' (int)_webSocketFrameLen);  	if (_webSocketFrameLen >= 2) {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  	} else {  		_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  		_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  	}  	TraceSources.CoreDebug.TraceInformation ("ID{0'-5} Received WebSocketClose Status:{1} Desc:{2}"' _handlerId' _webSocketEnv ["websocket.ClientCloseStatus"]' _webSocketEnv ["websocket.ClientCloseDescription"]);  	Callback.ConsumeReceiveData ((int)_webSocketFrameLen);  	_webSocketReceiveState = WebSocketReceiveState.Closing;  	var tcs = _webSocketReceiveTcs;  	if (tcs != null) {  		_webSocketReceiveTcs = null;  		tcs.SetResult (new WebSocketReceiveTuple (0x8' true' 0));  	}  	_webSocketTcsReceivedClose.TrySetResult (null);  	return;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameLen >= 2) {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  } else {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameLen >= 2) {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  } else {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameLen >= 2) {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  } else {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: if (_webSocketFrameLen >= 2) {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  } else {  	_webSocketEnv.Add ("websocket.ClientCloseStatus"' 0);  	_webSocketEnv.Add ("websocket.ClientCloseDescription"' "");  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: _webSocketEnv.Add ("websocket.ClientCloseStatus"' buf [o] * 256 + buf [o + 1]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: _webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseWebSocketReceivedData,The following statement contains a magic number: _webSocketEnv.Add ("websocket.ClientCloseDescription"' new String (Encoding.UTF8.GetChars (buf' o + 2' (int)_webSocketFrameLen - 2)));  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: while (len-- > 0) {  	byte b;  	if (_maskIndex == 0)  		b = _webSocketMask0;  	else if (_maskIndex == 1)  		b = _webSocketMask1;  	else if (_maskIndex == 2)  		b = _webSocketMask2;  	else  		b = _webSocketMask3;  	dst [dstOfs] = (byte)(src [srcOfs] ^ b);  	srcOfs++;  	dstOfs++;  	_maskIndex = (_maskIndex + 1) & 3;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: while (len-- > 0) {  	byte b;  	if (_maskIndex == 0)  		b = _webSocketMask0;  	else if (_maskIndex == 1)  		b = _webSocketMask1;  	else if (_maskIndex == 2)  		b = _webSocketMask2;  	else  		b = _webSocketMask3;  	dst [dstOfs] = (byte)(src [srcOfs] ^ b);  	srcOfs++;  	dstOfs++;  	_maskIndex = (_maskIndex + 1) & 3;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: if (_maskIndex == 0)  	b = _webSocketMask0;  else if (_maskIndex == 1)  	b = _webSocketMask1;  else if (_maskIndex == 2)  	b = _webSocketMask2;  else  	b = _webSocketMask3;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: if (_maskIndex == 1)  	b = _webSocketMask1;  else if (_maskIndex == 2)  	b = _webSocketMask2;  else  	b = _webSocketMask3;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: if (_maskIndex == 2)  	b = _webSocketMask2;  else  	b = _webSocketMask3;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,Unmask,The following statement contains a magic number: _maskIndex = (_maskIndex + 1) & 3;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (length < 2)  	return 0;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 126) {  	if (length < 8)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  	ReadMask (buffer' offset + 4);  	return 8;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (length < 8)  	return 0;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 8) + buffer [offset + 3]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: ReadMask (buffer' offset + 4);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: return 8;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (b == 127) {  	if (length < 14)  		return 0;  	_webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  	ReadMask (buffer' offset + 10);  	return 14;  }  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (length < 14)  	return 0;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: _webSocketFrameLen = (ulong)((buffer [offset + 2] << 56) + (buffer [offset + 3] << 48) + (buffer [offset + 4] << 40) + (buffer [offset + 5] << 32) + (buffer [offset + 6] << 24) + (buffer [offset + 7] << 16) + (buffer [offset + 8] << 8) + buffer [offset + 9]);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: ReadMask (buffer' offset + 10);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: return 14;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: if (length < 6)  	return 0;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: ReadMask (buffer' offset + 2);  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ParseHeader,The following statement contains a magic number: return 6;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ReadMask,The following statement contains a magic number: _webSocketMask2 = buffer [offset + 2];  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ReadMask,The following statement contains a magic number: _webSocketMask3 = buffer [offset + 3];  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ValidWebSocketOpcode,The following statement contains a magic number: return i <= 2 || i >= 8 && i <= 10;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ValidWebSocketOpcode,The following statement contains a magic number: return i <= 2 || i >= 8 && i <= 10;  
Magic Number,Nowin,OwinHandler,F:\newReposMay17\Bobris_Nowin\Nowin\OwinHandler.cs,ValidWebSocketOpcode,The following statement contains a magic number: return i <= 2 || i >= 8 && i <= 10;  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,InitEndPointIfNullByDefault,The following statement contains a magic number: if (_endPoint == null)  	_endPoint = new IPEndPoint (IPAddress.Any' _certificate != null ? 443 : 8080);  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,InitEndPointIfNullByDefault,The following statement contains a magic number: if (_endPoint == null)  	_endPoint = new IPEndPoint (IPAddress.Any' _certificate != null ? 443 : 8080);  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,InitEndPointIfNullByDefault,The following statement contains a magic number: _endPoint = new IPEndPoint (IPAddress.Any' _certificate != null ? 443 : 8080);  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,InitEndPointIfNullByDefault,The following statement contains a magic number: _endPoint = new IPEndPoint (IPAddress.Any' _certificate != null ? 443 : 8080);  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,SetBufferSize,The following statement contains a magic number: if (size < 1024 || size > 65536)  	throw new ArgumentOutOfRangeException (nameof (size)' size' "Must be in range <1024'65536>");  
Magic Number,Nowin,ServerBuilder,F:\newReposMay17\Bobris_Nowin\Nowin\ServerBuilder.cs,SetBufferSize,The following statement contains a magic number: if (size < 1024 || size > 65536)  	throw new ArgumentOutOfRangeException (nameof (size)' size' "Must be in range <1024'65536>");  
Magic Number,Nowin,Transport2HttpFactory,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpFactory.cs,MyPerConnectionBufferSize,The following statement contains a magic number: return _receiveBufferSize * 3 + AdditionalSpace;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,Transport2HttpHandler,The following statement contains a magic number: ResponseBodyBufferOffset = StartBufferOffset + ReceiveBufferSize * 2 + 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,Transport2HttpHandler,The following statement contains a magic number: ResponseBodyBufferOffset = StartBufferOffset + ReceiveBufferSize * 2 + 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseRequest,The following statement contains a magic number: posOfReqEnd -= 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipToCR,The following statement contains a magic number: while (buffer [pos] != 13)  	pos++;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipTokenChars,The following statement contains a magic number: while (true) {  	var ch = buffer [pos];  	if (ch <= 32)  		break;  	if (ch == ':')  		break;  	pos++;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipTokenChars,The following statement contains a magic number: if (ch <= 32)  	break;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,IsSpaceOrTab,The following statement contains a magic number: return ch == 32 || ch == 9;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,IsSpaceOrTab,The following statement contains a magic number: return ch == 32 || ch == 9;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipCrLf,The following statement contains a magic number: if (buffer [pos] == 13 && buffer [pos + 1] == 10) {  	pos += 2;  	return true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipCrLf,The following statement contains a magic number: if (buffer [pos] == 13 && buffer [pos + 1] == 10) {  	pos += 2;  	return true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipCrLf,The following statement contains a magic number: if (buffer [pos] == 13 && buffer [pos + 1] == 10) {  	pos += 2;  	return true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SkipCrLf,The following statement contains a magic number: pos += 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: if (buffer [pos] == 'H' && buffer [pos + 1] == 'T' && buffer [pos + 2] == 'T' && buffer [pos + 3] == 'P' && buffer [pos + 4] == '/' && buffer [pos + 5] == '1' && buffer [pos + 6] == '.' && buffer [pos + 8] == 13) {  	switch (buffer [pos + 7]) {  	case (byte)'0': {  		reqProtocol = "HTTP/1.0";  		pos += 8;  		_isHttp10 = true;  		return;  	}  	case (byte)'1': {  		reqProtocol = "HTTP/1.1";  		pos += 8;  		_isHttp10 = false;  		return;  	}  	}  	reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  	pos += 8;  	_isHttp10 = false;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: switch (buffer [pos + 7]) {  case (byte)'0': {  	reqProtocol = "HTTP/1.0";  	pos += 8;  	_isHttp10 = true;  	return;  }  case (byte)'1': {  	reqProtocol = "HTTP/1.1";  	pos += 8;  	_isHttp10 = false;  	return;  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: switch (buffer [pos + 7]) {  case (byte)'0': {  	reqProtocol = "HTTP/1.0";  	pos += 8;  	_isHttp10 = true;  	return;  }  case (byte)'1': {  	reqProtocol = "HTTP/1.1";  	pos += 8;  	_isHttp10 = false;  	return;  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: switch (buffer [pos + 7]) {  case (byte)'0': {  	reqProtocol = "HTTP/1.0";  	pos += 8;  	_isHttp10 = true;  	return;  }  case (byte)'1': {  	reqProtocol = "HTTP/1.1";  	pos += 8;  	_isHttp10 = false;  	return;  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: pos += 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: pos += 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: reqProtocol = StringFromLatin1 (buffer' pos' pos + 8);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following statement contains a magic number: pos += 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: if (buffer [p] == '/') {  	p++;  	switch (SearchForFirstSpaceOrQuestionMarkOrEndOfLine (buffer' ref p)) {  	case (byte)' ':  		reqPath = ParsePath (buffer' start' p);  		reqQueryString = "";  		pos = p + 1;  		return;  	case 13:  		reqPath = ParsePath (buffer' start' p);  		reqQueryString = "";  		pos = p;  		return;  	case (byte)'?':  		reqPath = ParsePath (buffer' start' p);  		p++;  		start = p;  		switch (SearchForFirstSpaceOrEndOfLine (buffer' ref p)) {  		case (byte)' ':  			reqQueryString = ParsePath (buffer' start' p);  			pos = p + 1;  			return;  		case 13:  			reqQueryString = ParsePath (buffer' start' p);  			pos = p;  			return;  		default:  			throw new InvalidOperationException ();  		}  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: if (buffer [p] == '/') {  	p++;  	switch (SearchForFirstSpaceOrQuestionMarkOrEndOfLine (buffer' ref p)) {  	case (byte)' ':  		reqPath = ParsePath (buffer' start' p);  		reqQueryString = "";  		pos = p + 1;  		return;  	case 13:  		reqPath = ParsePath (buffer' start' p);  		reqQueryString = "";  		pos = p;  		return;  	case (byte)'?':  		reqPath = ParsePath (buffer' start' p);  		p++;  		start = p;  		switch (SearchForFirstSpaceOrEndOfLine (buffer' ref p)) {  		case (byte)' ':  			reqQueryString = ParsePath (buffer' start' p);  			pos = p + 1;  			return;  		case 13:  			reqQueryString = ParsePath (buffer' start' p);  			pos = p;  			return;  		default:  			throw new InvalidOperationException ();  		}  	default:  		throw new InvalidOperationException ();  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: switch (SearchForFirstSpaceOrQuestionMarkOrEndOfLine (buffer' ref p)) {  case (byte)' ':  	reqPath = ParsePath (buffer' start' p);  	reqQueryString = "";  	pos = p + 1;  	return;  case 13:  	reqPath = ParsePath (buffer' start' p);  	reqQueryString = "";  	pos = p;  	return;  case (byte)'?':  	reqPath = ParsePath (buffer' start' p);  	p++;  	start = p;  	switch (SearchForFirstSpaceOrEndOfLine (buffer' ref p)) {  	case (byte)' ':  		reqQueryString = ParsePath (buffer' start' p);  		pos = p + 1;  		return;  	case 13:  		reqQueryString = ParsePath (buffer' start' p);  		pos = p;  		return;  	default:  		throw new InvalidOperationException ();  	}  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: switch (SearchForFirstSpaceOrQuestionMarkOrEndOfLine (buffer' ref p)) {  case (byte)' ':  	reqPath = ParsePath (buffer' start' p);  	reqQueryString = "";  	pos = p + 1;  	return;  case 13:  	reqPath = ParsePath (buffer' start' p);  	reqQueryString = "";  	pos = p;  	return;  case (byte)'?':  	reqPath = ParsePath (buffer' start' p);  	p++;  	start = p;  	switch (SearchForFirstSpaceOrEndOfLine (buffer' ref p)) {  	case (byte)' ':  		reqQueryString = ParsePath (buffer' start' p);  		pos = p + 1;  		return;  	case 13:  		reqQueryString = ParsePath (buffer' start' p);  		pos = p;  		return;  	default:  		throw new InvalidOperationException ();  	}  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: switch (SearchForFirstSpaceOrEndOfLine (buffer' ref p)) {  case (byte)' ':  	reqQueryString = ParsePath (buffer' start' p);  	pos = p + 1;  	return;  case 13:  	reqQueryString = ParsePath (buffer' start' p);  	pos = p;  	return;  default:  	throw new InvalidOperationException ();  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: if (buffer [p] == '*' && buffer [p + 1] == ' ') {  	reqPath = "*";  	reqQueryString = "";  	pos = p + 2;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpPath,The following statement contains a magic number: pos = p + 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: while (start < end) {  	var ch = buffer [start++];  	int cch;  	if (ch == '%') {  		ch = buffer [start++];  		var v1 = ParseHexChar (ch);  		if (v1 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			continue;  		}  		var v2 = ParseHexChar (buffer [start++]);  		if (v2 < 0) {  			chs [used++] = '%';  			chs [used++] = (char)ch;  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		if (v1 < 8)// Leave ASCII encoded  		 {  			chs [used++] = '%';  			chs [used++] = (char)buffer [start - 2];  			chs [used++] = (char)buffer [start - 1];  			continue;  		}  		cch = ((byte)v1 << 4) + v2;  	} else {  		cch = ch;  	}  	if (cchlen == 0) {  		if (cch < 194 || cch >= 245) {  			chs [used++] = (char)cch;  		} else if (cch < 224) {  			cchlen = 1;  			cchacc = cch - 192;  		} else if (cch < 240) {  			cchlen = 2;  			cchacc = cch - 224;  		} else {  			cchlen = 3;  			cchacc = cch - 240;  		}  	} else {  		cchlen--;  		cchacc = cchacc * 64 + (cch & 63);  		if (cchlen == 0) {  			if (cchacc < 0x10000) {  				chs [used++] = (char)cchacc;  			} else {  				cchacc -= 0x10000;  				chs [used++] = (char)(0xD800 + (cchacc >> 10));  				chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  			}  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (ch == '%') {  	ch = buffer [start++];  	var v1 = ParseHexChar (ch);  	if (v1 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		continue;  	}  	var v2 = ParseHexChar (buffer [start++]);  	if (v2 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	if (v1 < 8)// Leave ASCII encoded  	 {  		chs [used++] = '%';  		chs [used++] = (char)buffer [start - 2];  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	cch = ((byte)v1 << 4) + v2;  } else {  	cch = ch;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (ch == '%') {  	ch = buffer [start++];  	var v1 = ParseHexChar (ch);  	if (v1 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		continue;  	}  	var v2 = ParseHexChar (buffer [start++]);  	if (v2 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	if (v1 < 8)// Leave ASCII encoded  	 {  		chs [used++] = '%';  		chs [used++] = (char)buffer [start - 2];  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	cch = ((byte)v1 << 4) + v2;  } else {  	cch = ch;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (ch == '%') {  	ch = buffer [start++];  	var v1 = ParseHexChar (ch);  	if (v1 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		continue;  	}  	var v2 = ParseHexChar (buffer [start++]);  	if (v2 < 0) {  		chs [used++] = '%';  		chs [used++] = (char)ch;  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	if (v1 < 8)// Leave ASCII encoded  	 {  		chs [used++] = '%';  		chs [used++] = (char)buffer [start - 2];  		chs [used++] = (char)buffer [start - 1];  		continue;  	}  	cch = ((byte)v1 << 4) + v2;  } else {  	cch = ch;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (v1 < 8)// Leave ASCII encoded   {  	chs [used++] = '%';  	chs [used++] = (char)buffer [start - 2];  	chs [used++] = (char)buffer [start - 1];  	continue;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (v1 < 8)// Leave ASCII encoded   {  	chs [used++] = '%';  	chs [used++] = (char)buffer [start - 2];  	chs [used++] = (char)buffer [start - 1];  	continue;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: chs [used++] = (char)buffer [start - 2];  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cch = ((byte)v1 << 4) + v2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cch < 194 || cch >= 245) {  		chs [used++] = (char)cch;  	} else if (cch < 224) {  		cchlen = 1;  		cchacc = cch - 192;  	} else if (cch < 240) {  		cchlen = 2;  		cchacc = cch - 224;  	} else {  		cchlen = 3;  		cchacc = cch - 240;  	}  } else {  	cchlen--;  	cchacc = cchacc * 64 + (cch & 63);  	if (cchlen == 0) {  		if (cchacc < 0x10000) {  			chs [used++] = (char)cchacc;  		} else {  			cchacc -= 0x10000;  			chs [used++] = (char)(0xD800 + (cchacc >> 10));  			chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 194 || cch >= 245) {  	chs [used++] = (char)cch;  } else if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 224) {  	cchlen = 1;  	cchacc = cch - 192;  } else if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchacc = cch - 192;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cch < 240) {  	cchlen = 2;  	cchacc = cch - 224;  } else {  	cchlen = 3;  	cchacc = cch - 240;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchlen = 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchacc = cch - 224;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchlen = 3;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchacc = cch - 240;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchacc = cchacc * 64 + (cch & 63);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: cchacc = cchacc * 64 + (cch & 63);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchlen == 0) {  	if (cchacc < 0x10000) {  		chs [used++] = (char)cchacc;  	} else {  		cchacc -= 0x10000;  		chs [used++] = (char)(0xD800 + (cchacc >> 10));  		chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: if (cchacc < 0x10000) {  	chs [used++] = (char)cchacc;  } else {  	cchacc -= 0x10000;  	chs [used++] = (char)(0xD800 + (cchacc >> 10));  	chs [used++] = (char)(0xDC00 + (cchacc & 0x3ff));  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParsePath,The following statement contains a magic number: chs [used++] = (char)(0xD800 + (cchacc >> 10));  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHexChar,The following statement contains a magic number: if (ch >= 'A' && ch <= 'F')  	return ch - 'A' + 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHexChar,The following statement contains a magic number: return ch - 'A' + 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHexChar,The following statement contains a magic number: if (ch >= 'a' && ch <= 'f')  	return ch - 'a' + 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHexChar,The following statement contains a magic number: return ch - 'a' + 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SearchForFirstSpaceOrEndOfLine,The following statement contains a magic number: while (true) {  	var ch = buffer [p];  	if (ch == ' ' || ch == 13)  		return ch;  	p++;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SearchForFirstSpaceOrEndOfLine,The following statement contains a magic number: if (ch == ' ' || ch == 13)  	return ch;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SearchForFirstSpaceOrQuestionMarkOrEndOfLine,The following statement contains a magic number: while (true) {  	var ch = buffer [p];  	if (ch == ' ' || ch == '?' || ch == 13)  		return ch;  	p++;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,SearchForFirstSpaceOrQuestionMarkOrEndOfLine,The following statement contains a magic number: if (ch == ' ' || ch == '?' || ch == 13)  	return ch;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  	return "GET";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  	return "GET";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  	return "GET";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 4;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  	pos = p + 5;  	return "POST";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  	pos = p + 5;  	return "POST";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  	pos = p + 5;  	return "POST";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  	pos = p + 5;  	return "POST";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 5;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	return "PUT";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	return "PUT";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  	pos = p + 4;  	return "PUT";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 4;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  	pos = p + 5;  	_isMethodHead = true;  	return "HEAD";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  	pos = p + 5;  	_isMethodHead = true;  	return "HEAD";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  	pos = p + 5;  	_isMethodHead = true;  	return "HEAD";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  	pos = p + 5;  	_isMethodHead = true;  	return "HEAD";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 5;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  	pos = p + 7;  	return "DELETE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 7;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  	pos = p + 6;  	return "TRACE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  	pos = p + 6;  	return "TRACE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  	pos = p + 6;  	return "TRACE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  	pos = p + 6;  	return "TRACE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  	pos = p + 6;  	return "TRACE";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 6;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  	pos = p + 8;  	return "OPTIONS";  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: pos = p + 8;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: while (true) {  	var b = buffer [p];  	if (b == ' ') {  		pos = p + 1;  		break;  	}  	if (b == 13) {  		pos = p;  		break;  	}  	p++;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following statement contains a magic number: if (b == 13) {  	pos = p;  	break;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (status < 200 || status > 999) {  	status = 500;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (status < 200 || status > 999) {  	status = 500;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (status < 200 || status > 999) {  	status = 500;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: status = 500;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (finished && !_isMethodHead) {  	if (_responseContentLength != ulong.MaxValue && _responseContentLength != _reqRespStream.ResponseLength) {  		status = 500;  	}  	_responseContentLength = _reqRespStream.ResponseLength;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (_responseContentLength != ulong.MaxValue && _responseContentLength != _reqRespStream.ResponseLength) {  	status = 500;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: status = 500;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FillResponse,The following statement contains a magic number: if (status == 500) {  	_isKeepAlive = false;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendHttpStatus,The following statement contains a magic number: _buffer [j++] = (byte)('0' + status / 100);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendHttpStatus,The following statement contains a magic number: _buffer [j++] = (byte)('0' + status / 10 % 10);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendHttpStatus,The following statement contains a magic number: _buffer [j++] = (byte)('0' + status / 10 % 10);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendHttpStatus,The following statement contains a magic number: _buffer [j] = (byte)('0' + status % 10);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendHttpStatus,The following statement contains a magic number: _responseHeaderPos += 3;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: if (_responseHeaderPos > ReceiveBufferSize - 2) {  	_responseHeaderPos += 2;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: if (_responseHeaderPos > ReceiveBufferSize - 2) {  	_responseHeaderPos += 2;  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: _responseHeaderPos += 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: _buffer [i] = 13;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: _buffer [i + 1] = 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,HeaderAppendCrLf,The following statement contains a magic number: _responseHeaderPos += 2;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,AppendZeroChunk,The following statement contains a magic number: buffer [offset++] = 13;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,AppendZeroChunk,The following statement contains a magic number: buffer [offset++] = 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,AppendZeroChunk,The following statement contains a magic number: buffer [offset++] = 13;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,AppendZeroChunk,The following statement contains a magic number: buffer [offset] = 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,AppendZeroChunk,The following statement contains a magic number: len += 5;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: while (pos < end) {  	var ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	return pos;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: while (pos < end) {  	var ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	return pos;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: while (pos < end) {  	var ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	return pos;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: while (pos < end) {  	var ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 13)  		continue;  	if (pos >= end)  		break;  	ch = buffer [pos++];  	if (ch != 10)  		continue;  	return pos;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: if (ch != 13)  	continue;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: if (ch != 10)  	continue;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: if (ch != 13)  	continue;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,FindRequestEnd,The following statement contains a magic number: if (ch != 10)  	continue;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: buffer [o + l] = 13;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: buffer [o + l + 1] = 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: buffer [--o] = 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: buffer [--o] = 13;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: len += 4;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: do {  	var h = l & 15;  	if (h < 10)  		h += '0';  	else  		h += 'A' - 10;  	buffer [--o] = (byte)h;  	len++;  	l /= 16;  } while (l > 0);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: do {  	var h = l & 15;  	if (h < 10)  		h += '0';  	else  		h += 'A' - 10;  	buffer [--o] = (byte)h;  	len++;  	l /= 16;  } while (l > 0);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: do {  	var h = l & 15;  	if (h < 10)  		h += '0';  	else  		h += 'A' - 10;  	buffer [--o] = (byte)h;  	len++;  	l /= 16;  } while (l > 0);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: do {  	var h = l & 15;  	if (h < 10)  		h += '0';  	else  		h += 'A' - 10;  	buffer [--o] = (byte)h;  	len++;  	l /= 16;  } while (l > 0);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: if (h < 10)  	h += '0';  else  	h += 'A' - 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: if (h < 10)  	h += '0';  else  	h += 'A' - 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: h += 'A' - 10;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,WrapInChunk,The following statement contains a magic number: l /= 16;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: while (ReceiveDataLength > 0) {  	if (_waitingForRequest) {  		var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  		if (posOfReqEnd < 0) {  			NormalizeReceiveBuffer ();  			var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  			if (count == 0) {  				SendInternalServerError ("400 Bad Request (Request Header too long)");  				return false;  			}  			break;  		} else {  			_waitingForRequest = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  				ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  				ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  				var startRealReceive = false;  				if (ReceiveDataLength == 0 && !_receiving) {  					_receiving = true;  					ReceiveBufferPos = 0;  					_receiveBufferFullness = StartBufferOffset;  					startRealReceive = true;  				}  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (startRealReceive) {  					RealStartNextReceive ();  				}  				_next.HandleRequest ();  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		}  	} else {  		if (_startedReceiveData) {  			_startedReceiveData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				_next.FinishReceiveData (true);  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else if (_startedReceiveRequestData) {  			_startedReceiveRequestData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  					_startedReceiveRequestData = true;  				}  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else {  			break;  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: while (ReceiveDataLength > 0) {  	if (_waitingForRequest) {  		var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  		if (posOfReqEnd < 0) {  			NormalizeReceiveBuffer ();  			var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  			if (count == 0) {  				SendInternalServerError ("400 Bad Request (Request Header too long)");  				return false;  			}  			break;  		} else {  			_waitingForRequest = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  				ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  				ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  				var startRealReceive = false;  				if (ReceiveDataLength == 0 && !_receiving) {  					_receiving = true;  					ReceiveBufferPos = 0;  					_receiveBufferFullness = StartBufferOffset;  					startRealReceive = true;  				}  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (startRealReceive) {  					RealStartNextReceive ();  				}  				_next.HandleRequest ();  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		}  	} else {  		if (_startedReceiveData) {  			_startedReceiveData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				_next.FinishReceiveData (true);  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else if (_startedReceiveRequestData) {  			_startedReceiveRequestData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  					_startedReceiveRequestData = true;  				}  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else {  			break;  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: while (ReceiveDataLength > 0) {  	if (_waitingForRequest) {  		var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  		if (posOfReqEnd < 0) {  			NormalizeReceiveBuffer ();  			var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  			if (count == 0) {  				SendInternalServerError ("400 Bad Request (Request Header too long)");  				return false;  			}  			break;  		} else {  			_waitingForRequest = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  				ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  				ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  				var startRealReceive = false;  				if (ReceiveDataLength == 0 && !_receiving) {  					_receiving = true;  					ReceiveBufferPos = 0;  					_receiveBufferFullness = StartBufferOffset;  					startRealReceive = true;  				}  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (startRealReceive) {  					RealStartNextReceive ();  				}  				_next.HandleRequest ();  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		}  	} else {  		if (_startedReceiveData) {  			_startedReceiveData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				_next.FinishReceiveData (true);  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else if (_startedReceiveRequestData) {  			_startedReceiveRequestData = false;  			var reenter = false;  			var currentAcceptCounter = _acceptCounter;  			try {  				Monitor.Exit (_receiveProcessingLock);  				reenter = true;  				if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  					_startedReceiveRequestData = true;  				}  				reenter = false;  				Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  			} catch (Exception) {  				if (reenter)  					Monitor.Enter (_receiveProcessingLock);  				if (currentAcceptCounter != _acceptCounter) {  					// Delayed thread different connection already running this one needs to stop ASAP  					return false;  				}  				ResponseStatusCode = 5000;  				// Means hardcoded 500 Internal Server Error  				ResponseReasonPhase = null;  				ResponseFinished ();  				return false;  			}  		} else {  			break;  		}  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_waitingForRequest) {  	var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  	if (posOfReqEnd < 0) {  		NormalizeReceiveBuffer ();  		var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  		if (count == 0) {  			SendInternalServerError ("400 Bad Request (Request Header too long)");  			return false;  		}  		break;  	} else {  		_waitingForRequest = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  			ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  			ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  			var startRealReceive = false;  			if (ReceiveDataLength == 0 && !_receiving) {  				_receiving = true;  				ReceiveBufferPos = 0;  				_receiveBufferFullness = StartBufferOffset;  				startRealReceive = true;  			}  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (startRealReceive) {  				RealStartNextReceive ();  			}  			_next.HandleRequest ();  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	}  } else {  	if (_startedReceiveData) {  		_startedReceiveData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			_next.FinishReceiveData (true);  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else if (_startedReceiveRequestData) {  		_startedReceiveRequestData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  				_startedReceiveRequestData = true;  			}  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else {  		break;  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_waitingForRequest) {  	var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  	if (posOfReqEnd < 0) {  		NormalizeReceiveBuffer ();  		var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  		if (count == 0) {  			SendInternalServerError ("400 Bad Request (Request Header too long)");  			return false;  		}  		break;  	} else {  		_waitingForRequest = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  			ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  			ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  			var startRealReceive = false;  			if (ReceiveDataLength == 0 && !_receiving) {  				_receiving = true;  				ReceiveBufferPos = 0;  				_receiveBufferFullness = StartBufferOffset;  				startRealReceive = true;  			}  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (startRealReceive) {  				RealStartNextReceive ();  			}  			_next.HandleRequest ();  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	}  } else {  	if (_startedReceiveData) {  		_startedReceiveData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			_next.FinishReceiveData (true);  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else if (_startedReceiveRequestData) {  		_startedReceiveRequestData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  				_startedReceiveRequestData = true;  			}  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else {  		break;  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_waitingForRequest) {  	var posOfReqEnd = FindRequestEnd (_buffer' StartBufferOffset + ReceiveBufferPos' _receiveBufferFullness);  	if (posOfReqEnd < 0) {  		NormalizeReceiveBuffer ();  		var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  		if (count == 0) {  			SendInternalServerError ("400 Bad Request (Request Header too long)");  			return false;  		}  		break;  	} else {  		_waitingForRequest = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  			ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  			ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  			var startRealReceive = false;  			if (ReceiveDataLength == 0 && !_receiving) {  				_receiving = true;  				ReceiveBufferPos = 0;  				_receiveBufferFullness = StartBufferOffset;  				startRealReceive = true;  			}  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (startRealReceive) {  				RealStartNextReceive ();  			}  			_next.HandleRequest ();  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	}  } else {  	if (_startedReceiveData) {  		_startedReceiveData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			_next.FinishReceiveData (true);  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else if (_startedReceiveRequestData) {  		_startedReceiveRequestData = false;  		var reenter = false;  		var currentAcceptCounter = _acceptCounter;  		try {  			Monitor.Exit (_receiveProcessingLock);  			reenter = true;  			if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  				_startedReceiveRequestData = true;  			}  			reenter = false;  			Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  		} catch (Exception) {  			if (reenter)  				Monitor.Enter (_receiveProcessingLock);  			if (currentAcceptCounter != _acceptCounter) {  				// Delayed thread different connection already running this one needs to stop ASAP  				return false;  			}  			ResponseStatusCode = 5000;  			// Means hardcoded 500 Internal Server Error  			ResponseReasonPhase = null;  			ResponseFinished ();  			return false;  		}  	} else {  		break;  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (posOfReqEnd < 0) {  	NormalizeReceiveBuffer ();  	var count = StartBufferOffset + ReceiveBufferSize - _receiveBufferFullness;  	if (count == 0) {  		SendInternalServerError ("400 Bad Request (Request Header too long)");  		return false;  	}  	break;  } else {  	_waitingForRequest = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  		ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  		ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  		var startRealReceive = false;  		if (ReceiveDataLength == 0 && !_receiving) {  			_receiving = true;  			ReceiveBufferPos = 0;  			_receiveBufferFullness = StartBufferOffset;  			startRealReceive = true;  		}  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		if (startRealReceive) {  			RealStartNextReceive ();  		}  		_next.HandleRequest ();  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: try {  	var peqStartBufferOffset = StartBufferOffset + ReceiveBufferPos;  	ReceiveBufferPos = posOfReqEnd - StartBufferOffset;  	ParseRequest (_buffer' peqStartBufferOffset' posOfReqEnd);  	var startRealReceive = false;  	if (ReceiveDataLength == 0 && !_receiving) {  		_receiving = true;  		ReceiveBufferPos = 0;  		_receiveBufferFullness = StartBufferOffset;  		startRealReceive = true;  	}  	Monitor.Exit (_receiveProcessingLock);  	reenter = true;  	if (startRealReceive) {  		RealStartNextReceive ();  	}  	_next.HandleRequest ();  	reenter = false;  	Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  } catch (Exception) {  	if (reenter)  		Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  	ResponseStatusCode = 5000;  	// Means hardcoded 500 Internal Server Error  	ResponseReasonPhase = null;  	ResponseFinished ();  	return false;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: ResponseStatusCode = 5000;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_startedReceiveData) {  	_startedReceiveData = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		_next.FinishReceiveData (true);  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  } else if (_startedReceiveRequestData) {  	_startedReceiveRequestData = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  			_startedReceiveRequestData = true;  		}  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  } else {  	break;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_startedReceiveData) {  	_startedReceiveData = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		_next.FinishReceiveData (true);  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  } else if (_startedReceiveRequestData) {  	_startedReceiveRequestData = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  			_startedReceiveRequestData = true;  		}  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  } else {  	break;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: try {  	Monitor.Exit (_receiveProcessingLock);  	reenter = true;  	_next.FinishReceiveData (true);  	reenter = false;  	Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  } catch (Exception) {  	if (reenter)  		Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  	ResponseStatusCode = 5000;  	// Means hardcoded 500 Internal Server Error  	ResponseReasonPhase = null;  	ResponseFinished ();  	return false;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: ResponseStatusCode = 5000;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: if (_startedReceiveRequestData) {  	_startedReceiveRequestData = false;  	var reenter = false;  	var currentAcceptCounter = _acceptCounter;  	try {  		Monitor.Exit (_receiveProcessingLock);  		reenter = true;  		if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  			_startedReceiveRequestData = true;  		}  		reenter = false;  		Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  	} catch (Exception) {  		if (reenter)  			Monitor.Enter (_receiveProcessingLock);  		if (currentAcceptCounter != _acceptCounter) {  			// Delayed thread different connection already running this one needs to stop ASAP  			return false;  		}  		ResponseStatusCode = 5000;  		// Means hardcoded 500 Internal Server Error  		ResponseReasonPhase = null;  		ResponseFinished ();  		return false;  	}  } else {  	break;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: try {  	Monitor.Exit (_receiveProcessingLock);  	reenter = true;  	if (_reqRespStream.ProcessDataAndShouldReadMore ()) {  		_startedReceiveRequestData = true;  	}  	reenter = false;  	Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  } catch (Exception) {  	if (reenter)  		Monitor.Enter (_receiveProcessingLock);  	if (currentAcceptCounter != _acceptCounter) {  		// Delayed thread different connection already running this one needs to stop ASAP  		return false;  	}  	ResponseStatusCode = 5000;  	// Means hardcoded 500 Internal Server Error  	ResponseReasonPhase = null;  	ResponseFinished ();  	return false;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ProcessReceive,The following statement contains a magic number: ResponseStatusCode = 5000;  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,CheckForHeaderOverwrite,The following statement contains a magic number: if (name.Length == 4 && name.Equals ("Date"' StringComparison.OrdinalIgnoreCase)) {  	_dateOverwrite = true;  } else if (name.Length == 6 && name.Equals ("Server"' StringComparison.OrdinalIgnoreCase)) {  	_serverNameOverwrite = true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,CheckForHeaderOverwrite,The following statement contains a magic number: if (name.Length == 4 && name.Equals ("Date"' StringComparison.OrdinalIgnoreCase)) {  	_dateOverwrite = true;  } else if (name.Length == 6 && name.Equals ("Server"' StringComparison.OrdinalIgnoreCase)) {  	_serverNameOverwrite = true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,CheckForHeaderOverwrite,The following statement contains a magic number: if (name.Length == 6 && name.Equals ("Server"' StringComparison.OrdinalIgnoreCase)) {  	_serverNameOverwrite = true;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: if (_statusCode == 599) {  	_cancellation.Cancel ();  	_isKeepAlive = false;  	CloseConnection ();  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: if (_statusCode == 5000 || _cancellation.IsCancellationRequested) {  	_cancellation.Cancel ();  	if (!_responseHeadersSend) {  		SendInternalServerError ();  	} else {  		CloseConnection ();  	}  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: if (_reqRespStream.RequestPosition != RequestContentLength) {  	DrainRequestStreamAsync ().ContinueWith ((t' o) => {  		if (t.IsFaulted || t.IsCanceled) {  			ResponseStatusCode = 500;  			((Transport2HttpHandler)o).ResponseFinished ();  			return;  		}  		((Transport2HttpHandler)o).SendHttpResponseAndPrepareForNext ();  	}' this);  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: DrainRequestStreamAsync ().ContinueWith ((t' o) => {  	if (t.IsFaulted || t.IsCanceled) {  		ResponseStatusCode = 500;  		((Transport2HttpHandler)o).ResponseFinished ();  		return;  	}  	((Transport2HttpHandler)o).SendHttpResponseAndPrepareForNext ();  }' this);  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: if (t.IsFaulted || t.IsCanceled) {  	ResponseStatusCode = 500;  	((Transport2HttpHandler)o).ResponseFinished ();  	return;  }  
Magic Number,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ResponseFinished,The following statement contains a magic number: ResponseStatusCode = 500;  
Magic Number,Nowin,Server,F:\newReposMay17\Bobris_Nowin\Nowin\Server.cs,Start,The following statement contains a magic number: while (true) {  	try {  		ListenSocket.Bind (_parameters.EndPoint);  		break;  	} catch {  	}  	Thread.Sleep (50);  }  
Magic Number,Nowin,Server,F:\newReposMay17\Bobris_Nowin\Nowin\Server.cs,Start,The following statement contains a magic number: Thread.Sleep (50);  
Magic Number,Nowin,Server,F:\newReposMay17\Bobris_Nowin\Nowin\Server.cs,Start,The following statement contains a magic number: ListenSocket.Listen (100);  
Missing Default,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesContainsKey,The following switch statement is missing a default case: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		return true;  	}  	break;  }  
Missing Default,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryGetValue,The following switch statement is missing a default case: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		value = OwinVersion;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		value = CallCancelled;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		value = RequestMethod;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		value = RequestScheme;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		value = RequestProtocol;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		value = RequestPathBase;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		value = ResponseHeaders;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		value = RequestPath;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		value = RequestBody;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		value = ServerLocalPort;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		value = WebSocketAcceptFunc;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		value = RequestQueryString;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		value = ResponseStatusCode;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		value = OnSendingHeaders;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		value = RequestHeaders;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		value = ServerCapabilities;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		value = ResponseReasonPhrase;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		value = ResponseBody;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		value = Disconnect;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		value = ServerRemotePort;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		value = ClientCertificate;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		value = ServerLocalIpAddress;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		value = ServerRemoteIpAddress;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		value = ServerIsLocal;  		return true;  	}  	break;  }  
Missing Default,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTrySetValue,The following switch statement is missing a default case: switch (key.Length) {  case 12:  	if (key == "owin.Version") {  		OwinVersion = value;  		return true;  	}  	break;  case 18:  	if (key == "owin.CallCancelled") {  		CallCancelled = value;  		return true;  	}  	if (key == "owin.RequestMethod") {  		RequestMethod = value;  		return true;  	}  	if (key == "owin.RequestScheme") {  		RequestScheme = value;  		return true;  	}  	break;  case 20:  	if (key == "owin.RequestProtocol") {  		RequestProtocol = value;  		return true;  	}  	if (key == "owin.RequestPathBase") {  		RequestPathBase = value;  		return true;  	}  	if (key == "owin.ResponseHeaders") {  		ResponseHeaders = value;  		return true;  	}  	break;  case 16:  	if (key == "owin.RequestPath") {  		RequestPath = value;  		return true;  	}  	if (key == "owin.RequestBody") {  		RequestBody = value;  		return true;  	}  	if (key == "server.LocalPort") {  		ServerLocalPort = value;  		return true;  	}  	if (key == "websocket.Accept") {  		WebSocketAcceptFunc = value;  		return true;  	}  	break;  case 23:  	if (key == "owin.RequestQueryString") {  		RequestQueryString = value;  		return true;  	}  	if (key == "owin.ResponseStatusCode") {  		ResponseStatusCode = value;  		return true;  	}  	if (key == "server.OnSendingHeaders") {  		OnSendingHeaders = value;  		return true;  	}  	break;  case 19:  	if (key == "owin.RequestHeaders") {  		RequestHeaders = value;  		return true;  	}  	if (key == "server.Capabilities") {  		ServerCapabilities = value;  		return true;  	}  	break;  case 25:  	if (key == "owin.ResponseReasonPhrase") {  		ResponseReasonPhrase = value;  		return true;  	}  	break;  case 17:  	if (key == "owin.ResponseBody") {  		ResponseBody = value;  		return true;  	}  	if (key == "common.Disconnect") {  		Disconnect = value;  		return true;  	}  	if (key == "server.RemotePort") {  		ServerRemotePort = value;  		return true;  	}  	break;  case 21:  	if (key == "ssl.ClientCertificate") {  		ClientCertificate = value;  		return true;  	}  	if (key == "server.LocalIpAddress") {  		ServerLocalIpAddress = value;  		return true;  	}  	break;  case 22:  	if (key == "server.RemoteIpAddress") {  		ServerRemoteIpAddress = value;  		return true;  	}  	break;  case 14:  	if (key == "server.IsLocal") {  		ServerIsLocal = value;  		return true;  	}  	break;  }  
Missing Default,Nowin,OwinEnvironment,F:\newReposMay17\Bobris_Nowin\Nowin\OwinEnvironment.cs,PropertiesTryRemove,The following switch statement is missing a default case: switch (key.Length) {  case 12:  	if (((_flag0 & 0x1u) != 0) && key == "owin.Version") {  		_flag0 &= ~0x1u;  		_OwinVersion = null;  		return true;  	}  	break;  case 18:  	if (((_flag0 & 0x2u) != 0) && key == "owin.CallCancelled") {  		_flag0 &= ~0x2u;  		_CallCancelled = null;  		return true;  	}  	if (((_flag0 & 0x8u) != 0) && key == "owin.RequestMethod") {  		_flag0 &= ~0x8u;  		_RequestMethod = null;  		return true;  	}  	if (((_flag0 & 0x10u) != 0) && key == "owin.RequestScheme") {  		_flag0 &= ~0x10u;  		_RequestScheme = null;  		return true;  	}  	break;  case 20:  	if (((_flag0 & 0x4u) != 0) && key == "owin.RequestProtocol") {  		_flag0 &= ~0x4u;  		_RequestProtocol = null;  		return true;  	}  	if (((_flag0 & 0x20u) != 0) && key == "owin.RequestPathBase") {  		_flag0 &= ~0x20u;  		_RequestPathBase = null;  		return true;  	}  	if (((_flag0 & 0x1000u) != 0) && key == "owin.ResponseHeaders") {  		_flag0 &= ~0x1000u;  		_ResponseHeaders = null;  		return true;  	}  	break;  case 16:  	if (((_flag0 & 0x40u) != 0) && key == "owin.RequestPath") {  		_flag0 &= ~0x40u;  		_RequestPath = null;  		return true;  	}  	if (((_flag0 & 0x200u) != 0) && key == "owin.RequestBody") {  		_flag0 &= ~0x200u;  		_RequestBody = null;  		return true;  	}  	if (((_flag0 & 0x200000u) != 0) && key == "server.LocalPort") {  		_flag0 &= ~0x200000u;  		_ServerLocalPort = null;  		return true;  	}  	if (((_flag0 & 0x800000u) != 0) && key == "websocket.Accept") {  		_flag0 &= ~0x800000u;  		_WebSocketAcceptFunc = null;  		return true;  	}  	break;  case 23:  	if (((_flag0 & 0x80u) != 0) && key == "owin.RequestQueryString") {  		_flag0 &= ~0x80u;  		_RequestQueryString = null;  		return true;  	}  	if (((_flag0 & 0x400u) != 0) && key == "owin.ResponseStatusCode") {  		_flag0 &= ~0x400u;  		_ResponseStatusCode = null;  		return true;  	}  	if (((_flag0 & 0x20000u) != 0) && key == "server.OnSendingHeaders") {  		_flag0 &= ~0x20000u;  		_OnSendingHeaders = null;  		return true;  	}  	break;  case 19:  	if (((_flag0 & 0x100u) != 0) && key == "owin.RequestHeaders") {  		_flag0 &= ~0x100u;  		_RequestHeaders = null;  		return true;  	}  	if (((_flag0 & 0x10000u) != 0) && key == "server.Capabilities") {  		_flag0 &= ~0x10000u;  		_ServerCapabilities = null;  		return true;  	}  	break;  case 25:  	if (((_flag0 & 0x800u) != 0) && key == "owin.ResponseReasonPhrase") {  		_flag0 &= ~0x800u;  		_ResponseReasonPhrase = null;  		return true;  	}  	break;  case 17:  	if (((_flag0 & 0x2000u) != 0) && key == "owin.ResponseBody") {  		_flag0 &= ~0x2000u;  		_ResponseBody = null;  		return true;  	}  	if (((_flag0 & 0x4000u) != 0) && key == "common.Disconnect") {  		_flag0 &= ~0x4000u;  		_Disconnect = null;  		return true;  	}  	if (((_flag0 & 0x80000u) != 0) && key == "server.RemotePort") {  		_flag0 &= ~0x80000u;  		_ServerRemotePort = null;  		return true;  	}  	break;  case 21:  	if (((_flag0 & 0x8000u) != 0) && key == "ssl.ClientCertificate") {  		_flag0 &= ~0x8000u;  		_ClientCertificate = null;  		return true;  	}  	if (((_flag0 & 0x100000u) != 0) && key == "server.LocalIpAddress") {  		_flag0 &= ~0x100000u;  		_ServerLocalIpAddress = null;  		return true;  	}  	break;  case 22:  	if (((_flag0 & 0x40000u) != 0) && key == "server.RemoteIpAddress") {  		_flag0 &= ~0x40000u;  		_ServerRemoteIpAddress = null;  		return true;  	}  	break;  case 14:  	if (((_flag0 & 0x400000u) != 0) && key == "server.IsLocal") {  		_flag0 &= ~0x400000u;  		_ServerIsLocal = null;  		return true;  	}  	break;  }  
Missing Default,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpProtocol,The following switch statement is missing a default case: switch (buffer [pos + 7]) {  case (byte)'0': {  	reqProtocol = "HTTP/1.0";  	pos += 8;  	_isHttp10 = true;  	return;  }  case (byte)'1': {  	reqProtocol = "HTTP/1.1";  	pos += 8;  	_isHttp10 = false;  	return;  }  }  
Missing Default,Nowin,Transport2HttpHandler,F:\newReposMay17\Bobris_Nowin\Nowin\Transport2HttpHandler.cs,ParseHttpMethod,The following switch statement is missing a default case: switch (buffer [p]) {  case (byte)'G':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		_webSocketReqCondition |= WebSocketReqConditions.GetMethod;  		return "GET";  	}  	break;  case (byte)'P':  	if (buffer [p + 1] == 'O' && buffer [p + 2] == 'S' && buffer [p + 3] == 'T' && buffer [p + 4] == ' ') {  		pos = p + 5;  		return "POST";  	}  	if (buffer [p + 1] == 'U' && buffer [p + 2] == 'T' && buffer [p + 3] == ' ') {  		pos = p + 4;  		return "PUT";  	}  	break;  case (byte)'H':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'A' && buffer [p + 3] == 'D' && buffer [p + 4] == ' ') {  		pos = p + 5;  		_isMethodHead = true;  		return "HEAD";  	}  	break;  case (byte)'D':  	if (buffer [p + 1] == 'E' && buffer [p + 2] == 'L' && buffer [p + 3] == 'E' && buffer [p + 4] == 'T' && buffer [p + 5] == 'E' && buffer [p + 6] == ' ') {  		pos = p + 7;  		return "DELETE";  	}  	break;  case (byte)'T':  	if (buffer [p + 1] == 'R' && buffer [p + 2] == 'A' && buffer [p + 3] == 'C' && buffer [p + 4] == 'E' && buffer [p + 5] == ' ') {  		pos = p + 6;  		return "TRACE";  	}  	break;  case (byte)'O':  	if (buffer [p + 1] == 'P' && buffer [p + 2] == 'T' && buffer [p + 3] == 'I' && buffer [p + 4] == 'O' && buffer [p + 5] == 'N' && buffer [p + 6] == 'S' && buffer [p + 7] == ' ') {  		pos = p + 8;  		return "OPTIONS";  	}  	break;  case (byte)' ': {  	pos = p + 1;  	return "";  }  case 13: {  	return "";  }  }  
