Implementation smell,Namespace,Class,File,Method,Description
Long Statement,SemVerHarvester,HgLogRunner,C:\repos\jennings_SemVerHarvester\SemVerHarvester\HgLogRunner.cs,Run,The length of the statement  "            var changedFiles = this.ResultFromMercurial(mercurialPath' @"status --added --modified --removed --deleted --subrepos"); " is 120.
Magic Number,SemVerHarvester,GitDescribeRunner,C:\repos\jennings_SemVerHarvester\SemVerHarvester\GitDescribeRunner.cs,Run,The following statement contains a magic number: if (!process.WaitForExit(10000))              {                  throw new Exception("Git-describe did not return within 10 seconds.");              }
Magic Number,SemVerHarvester,HgLogRunner,C:\repos\jennings_SemVerHarvester\SemVerHarvester\HgLogRunner.cs,ResultFromMercurial,The following statement contains a magic number: if (!process.WaitForExit(10000))              {                  throw new Exception("Hg-log did not return within 10 seconds.");              }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerGitHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerGitHarvester.cs,SetPropertiesFromGitDescribe,The following statement contains a magic number: if (emptyCleanRx.IsMatch(gitDescribeResult))             {                 var match = emptyCleanRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = false;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (emptyDirtyRx.IsMatch(gitDescribeResult))             {                 var match = emptyDirtyRx.Match(gitDescribeResult);                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "0";                 this.Modified = true;                 this.CommitId = match.Groups[1].Value.ToString();             }             else if (cleanRx.IsMatch(gitDescribeResult))             {                 var match = cleanRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = false;                 this.CommitId = match.Groups[5].Value.ToString();             }             else if (dirtyRx.IsMatch(gitDescribeResult))             {                 var match = dirtyRx.Match(gitDescribeResult);                 this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                 this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                 this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                 this.RevisionVersion = Convert.ToInt32(match.Groups[4].Value).ToString();                 this.Modified = true;                 this.CommitId = match.Groups[5].Value.ToString();             }             else             {                 this.MajorVersion = "0";                 this.MinorVersion = "0";                 this.PatchVersion = "0";                 this.RevisionVersion = "1";                 this.Modified = true;                 this.CommitId = String.Empty;             }
Magic Number,SemVerHarvester,SemVerHgHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerHgHarvester.cs,SetPropertiesFromHgDescribe,The following statement contains a magic number: if (tagRx.IsMatch(this.mercurialLogRunner.LatestTag))              {                  var match = tagRx.Match(this.mercurialLogRunner.LatestTag);                  this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                  this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                  this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                    // Reduce revision number by 1 to account for tags in Mercurial                  // creating a new changeset.                  this.RevisionVersion = (Convert.ToInt32(this.mercurialLogRunner.LatestTagDistance) - 1).ToString();              }              else              {                  this.MajorVersion = "0";                  this.MinorVersion = "0";                  this.PatchVersion = "0";                  this.RevisionVersion = "0";              }
Magic Number,SemVerHarvester,SemVerHgHarvester,C:\repos\jennings_SemVerHarvester\SemVerHarvester\SemVerHgHarvester.cs,SetPropertiesFromHgDescribe,The following statement contains a magic number: if (tagRx.IsMatch(this.mercurialLogRunner.LatestTag))              {                  var match = tagRx.Match(this.mercurialLogRunner.LatestTag);                  this.MajorVersion = Convert.ToInt32(match.Groups[1].Value).ToString();                  this.MinorVersion = Convert.ToInt32(match.Groups[2].Value).ToString();                  this.PatchVersion = Convert.ToInt32(match.Groups[3].Value).ToString();                    // Reduce revision number by 1 to account for tags in Mercurial                  // creating a new changeset.                  this.RevisionVersion = (Convert.ToInt32(this.mercurialLogRunner.LatestTagDistance) - 1).ToString();              }              else              {                  this.MajorVersion = "0";                  this.MinorVersion = "0";                  this.PatchVersion = "0";                  this.RevisionVersion = "0";              }
