Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Eto.Parse.TestSpeed.Tests.Json.Gold,GoldJsonParser,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\Gold\GoldJsonParser.cs,Parse,Cyclomatic complexity of the method is 10
Complex Method,Eto.Parse.TestSpeed.Tests.Json.Gold,GoldJsonParser,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\Gold\GoldJsonParser.cs,CreateNewObject,Cyclomatic complexity of the method is 18
Long Statement,Eto.Parse.TestSpeed,TestSuite,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\TestSuite.cs,Run,The length of the statement  "					Console.WriteLine("{0} | {1'6:0.000}s | {2'6:0.000}s"' result.Test.Name.PadRight(nameLength)' result.Speed' result.WarmupSpeed); " is 128.
Long Statement,Eto.Parse.TestSpeed.Tests.Json,TestIrony,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\TestIrony.cs,PerformTest,The length of the statement  "					var id = item.ChildNodes.First(r => r.Term.Name == "Property" && r.ChildNodes.Any(s => s.Term.Name == "string" && s.Token.ValueString == suite.CompareProperty)).ChildNodes.First(r => r.Term.Name == "number").Token.Value; " is 220.
Long Statement,Eto.Parse.TestSpeed.Tests.Json,TestBsnGold,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\TestBsnGold.cs,Warmup,The length of the statement  "			grammar = CompiledGrammar.Load(new BinaryReader(GetType().Assembly.GetManifestResourceStream("Eto.Parse.TestSpeed.Tests.Json.Gold.JSON.egt"))); " is 143.
Long Statement,Eto.Parse.TestSpeed.Tests.Xml,TestBsnGold,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Xml\TestBsnGold.cs,Warmup,The length of the statement  "			grammar = CompiledGrammar.Load(new BinaryReader(GetType().Assembly.GetManifestResourceStream("Eto.Parse.TestSpeed.Tests.Xml.Gold.XML.egt"))); " is 141.
Long Statement,Eto.Parse.TestSpeed.Tests.Xml,TestEtoFromGold,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Xml\TestEtoFromGold.cs,Warmup,The length of the statement  "			var grm = new StreamReader(GetType().Assembly.GetManifestResourceStream("Eto.Parse.TestSpeed.Tests.Xml.Gold.XML.grm")).ReadToEnd(); " is 131.
Long Statement,Eto.Parse.TestSpeed.Tests.Xml,TestEtoFromEbnf,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Xml\TestEtoFromEbnf.cs,Warmup,The length of the statement  "			grammar.SetTerminals("Letter"' "BaseChar"' "Ideographic"' "CombiningChar"' "Digit"' "Extender"' "PubidChar"' "Char"' "S"' "EnumeratedType"' "NameChar"' "Eq"); " is 158.
Magic Number,Eto.Parse.TestSpeed,MainClass,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Program.cs,TestSuites,The following statement contains a magic number: yield return new Tests.Json.JsonTestSuite("(small file)"' "sample-small.json") { Iterations = 10000 };
Magic Number,Eto.Parse.TestSpeed,TestSuite,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\TestSuite.cs,PerformTests,The following statement contains a magic number: Thread.Sleep(500);
Magic Number,Eto.Parse.TestSpeed.Tests.Json,JsonTestSuite,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\JsonTestSuite.cs,JsonTestSuite,The following statement contains a magic number: Iterations = 1000;
Magic Number,Eto.Parse.TestSpeed.Tests.Markdown,MarkdownTestSuite,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Markdown\MarkdownTestSuite.cs,MarkdownTestSuite,The following statement contains a magic number: Iterations = 1000;
Magic Number,Eto.Parse.TestSpeed.Tests.Xml,XmlTestSuite,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Xml\XmlTestSuite.cs,XmlTestSuite,The following statement contains a magic number: Iterations = 10;
Missing Default,Eto.Parse.TestSpeed.Tests.Json.Gold,GoldJsonParser,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\Gold\GoldJsonParser.cs,Parse,The following switch statement is missing a default case: switch (response)  				{  					case GOLD.ParseMessage.LexicalError:  						//Cannot recognize token  						done = true;  						break;    					case GOLD.ParseMessage.SyntaxError:  						//Expecting a different token  						done = true;  						break;    					case GOLD.ParseMessage.Reduction:  						//Create a customized object to store the reduction    						parser.CurrentReduction = CreateNewObject(parser.CurrentReduction as GOLD.Reduction);  						break;    					case GOLD.ParseMessage.Accept:  						//Accepted!  						//program = parser.CurrentReduction   //The root node!                   						done = true;  						accepted = true;  						break;    					case GOLD.ParseMessage.TokenRead:  						//You don't have to do anything here.  						break;    					case GOLD.ParseMessage.InternalError:  						//INTERNAL ERROR! Something is horribly wrong.  						done = true;  						break;    					case GOLD.ParseMessage.NotLoadedError:  						//This error occurs if the CGT was not loaded.                     						done = true;  						break;    					case GOLD.ParseMessage.GroupError:   						//GROUP ERROR! Unexpected end of file  						done = true;  						break;  				}
Missing Default,Eto.Parse.TestSpeed.Tests.Json.Gold,GoldJsonParser,C:\research\architectureSmells\repos\picoe_Eto.Parse\Eto.Parse.TestSpeed\Tests\Json\Gold\GoldJsonParser.cs,CreateNewObject,The following switch statement is missing a default case: switch( (ProductionIndex) r.Parent.TableIndex())  			{  				case ProductionIndex.Json:                   					// <Json> ::= <Object>  					break;    					case ProductionIndex.Json2:                   					// <Json> ::= <Array>  					break;    					case ProductionIndex.Object_Lbrace_Rbrace:                   					// <Object> ::= '{' '}'  					break;    					case ProductionIndex.Object_Lbrace_Rbrace2:                   					// <Object> ::= '{' <Members> '}'  					break;    					case ProductionIndex.Members:                   					// <Members> ::= <Pair>  					break;    					case ProductionIndex.Members_Comma:                   					// <Members> ::= <Pair> ''' <Members>  					break;    					case ProductionIndex.Pair_String_Colon:                   					// <Pair> ::= String ':' <Value>  					break;    					case ProductionIndex.Array_Lbracket_Rbracket:                   					// <Array> ::= '[' ']'  					break;    					case ProductionIndex.Array_Lbracket_Rbracket2:                   					// <Array> ::= '[' <Elements> ']'  					break;    					case ProductionIndex.Elements:                   					// <Elements> ::= <Value>  					break;    					case ProductionIndex.Elements_Comma:                   					// <Elements> ::= <Value> ''' <Elements>  					break;    					case ProductionIndex.Value_String:                   					// <Value> ::= String  					break;    					case ProductionIndex.Value_Number:                   					// <Value> ::= Number  					break;    					case ProductionIndex.Value:                   					// <Value> ::= <Object>  					break;    					case ProductionIndex.Value2:                   					// <Value> ::= <Array>  					break;    					case ProductionIndex.Value_True:                   					// <Value> ::= true  					break;    					case ProductionIndex.Value_False:                   					// <Value> ::= false  					break;    					case ProductionIndex.Value_Null:                   					// <Value> ::= null  					break;    			}
