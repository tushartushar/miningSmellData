Implementation smell,Namespace,Class,File,Method,Description
Long Method,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The method has 190 lines of code.
Long Method,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,SaveToFile,The method has 180 lines of code.
Complex Method,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseWReg,Cyclomatic complexity of the method is 15
Complex Method,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,Cyclomatic complexity of the method is 9
Complex Method,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,Cyclomatic complexity of the method is 12
Complex Method,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,SaveToFile,Cyclomatic complexity of the method is 9
Long Parameter List,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The method has 8 parameters.
Long Parameter List,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The method has 11 parameters.
Long Statement,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The length of the statement  "		return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11)); " is 183.
Long Statement,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The length of the statement  "		return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11)); " is 183.
Long Statement,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The length of the statement  "		return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11)); " is 183.
Long Statement,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The length of the statement  "		return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11)); " is 183.
Long Statement,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,CheckOk,The length of the statement  "	if (cbDeviceFamily.SelectedIndex >= 0 && cbBasePart.SelectedIndex >= 0 && txtPartName.Text != "" && txtDeviceId.Text != "" && txtFlashSize.Text != "") { " is 152.
Long Statement,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The length of the statement  "	// Configuration registers are in reverse order' ie. { CONFIG4' CONFIG3' CONFIG2' CONFIG1 }' with the CONFIG4 at the LOWEST address. " is 132.
Long Statement,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The length of the statement  "				var DeviceFileVersion = string.Format ("{0:D1}.{1:D2}.{2:D2}"' DevFile.Info.VersionMajor' DevFile.Info.VersionMinor' DevFile.Info.VersionDot); " is 142.
Complex Conditional,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,CheckOk,The conditional expression  "cbDeviceFamily.SelectedIndex >= 0 && cbBasePart.SelectedIndex >= 0 && txtPartName.Text != "" && txtDeviceId.Text != "" && txtFlashSize.Text != """  is complex.
Empty Catch Block,PicKit2_Script_Editor,ScriptConverter,C:\repos\jorticus_pickit2-editor\Property Editor\ScriptEditor.cs,ConvertFrom,The method has an empty catch block.
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseData,The following statement contains a magic number: if (data.Length == 2)  	return string.Format ("0x{0:X4}"' data [0] << 8 | data [1]);  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseData,The following statement contains a magic number: if (data.Length == 2)  	return string.Format ("0x{0:X4}"' data [0] << 8 | data [1]);  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseData,The following statement contains a magic number: return string.Format ("0x{0:X4}"' data [0] << 8 | data [1]);  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseMOV,The following statement contains a magic number: if ((operand & 0xF80000) == 0x880000)  	return string.Format ("MOV {0}' {1}"' ParseWReg ((byte)(operand & 0xF))' ParseF ((operand & 0x7FFF0) >> 4));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseMOV,The following statement contains a magic number: return string.Format ("MOV {0}' {1}"' ParseWReg ((byte)(operand & 0xF))' ParseF ((operand & 0x7FFF0) >> 4));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseMOV,The following statement contains a magic number: if ((operand & 0xF00000) == 0x200000)  	return string.Format ("MOV #0x{0:X4}' W{1}"' (operand & 0xFFFF0) >> 4' (operand & 0xF));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseMOV,The following statement contains a magic number: return string.Format ("MOV #0x{0:X4}' W{1}"' (operand & 0xFFFF0) >> 4' (operand & 0xF));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA8000)  	return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA8000)  	return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA8000)  	return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA0000)  	return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA0000)  	return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBA0000)  	return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLRDL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB8000)  	return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB8000)  	return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB8000)  	return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTH{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB0000)  	return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB0000)  	return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: if ((operand & 0xFF8000) == 0xBB0000)  	return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseTBL,The following statement contains a magic number: return string.Format ("TBLWTL{0} {1}' {2}"' ParseByteMode (operand)' ParseWReg ((operand & 0xF)' (operand & 0x70) >> 4)' ParseWReg ((operand & 0x780) >> 7' (operand & 0x3800) >> 11));  
Magic Number,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,SwitchHelpPane,The following statement contains a magic number: iconArrow.Top = focusedControl.Top + 5;  
Magic Number,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,cbDeviceFamily_SelectedIndexChanged,The following statement contains a magic number: step = 2;  
Magic Number,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,cbBasePart_SelectedIndexChanged,The following statement contains a magic number: step = 3;  
Magic Number,PicKit2_Script_Editor,fmPartWizard,C:\repos\jorticus_pickit2-editor\fmPartWizard.cs,cbBasePart_SelectedIndexChanged,The following statement contains a magic number: txtFlashSize.Text = string.Format ("{0:X4}"' (selectedDevice.ProgramMem + 1) * 2);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DeviceFileLoaded,The following statement contains a magic number: LoadScript (21);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DisplayRawScript,The following statement contains a magic number: for (int i = 0; i < 8; i++) {  	dataGridHex.Columns [i].Width = columnWidth;  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DisplayScript,The following statement contains a magic number: dataGridViewScript.Columns [0].MinimumWidth = 80;  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DisplayScript,The following statement contains a magic number: dataGridViewScript.Columns [2].AutoSizeMode = DataGridViewAutoSizeColumnMode.AllCells;  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DisplayScript,The following statement contains a magic number: foreach (var opcode in opcodes) {  	dataGridViewScript [0' row].Value = opcode;  	dataGridViewScript [1' row].Value = opcode.Parse ();  	dataGridViewScript [2' row].Value = opcode.ParseInst ();  	row++;  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,DisplayScript,The following statement contains a magic number: dataGridViewScript [2' row].Value = opcode.ParseInst ();  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,newPartWizardToolStripMenuItem_Click,The following statement contains a magic number: using (var fm = new fmPartWizard (DevFile)) {  	if (fm.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  		var newPart = DevFile.PartsList [fm.SelectedPart];  		newPart.PartName = fm.PartName;  		newPart.DeviceID = (uint)fm.DeviceId;  		newPart.ProgramMem = (uint)(fm.FlashSize / 2 + 1);  		//newPart.ConfigAddr = 0;  		DevFile.AddPart (newPart);  		// Reload GUI  		DeviceFileLoaded ();  	}  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,newPartWizardToolStripMenuItem_Click,The following statement contains a magic number: if (fm.ShowDialog () == System.Windows.Forms.DialogResult.OK) {  	var newPart = DevFile.PartsList [fm.SelectedPart];  	newPart.PartName = fm.PartName;  	newPart.DeviceID = (uint)fm.DeviceId;  	newPart.ProgramMem = (uint)(fm.FlashSize / 2 + 1);  	//newPart.ConfigAddr = 0;  	DevFile.AddPart (newPart);  	// Reload GUI  	DeviceFileLoaded ();  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,newPartWizardToolStripMenuItem_Click,The following statement contains a magic number: newPart.ProgramMem = (uint)(fm.FlashSize / 2 + 1);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,treeViewDevices_AfterSelect,The following statement contains a magic number: if (e.Node.Tag != null) {  	var part = DevFile.PartsList [(int)e.Node.Tag];  	var family = DevFile.Families [part.Family];  	groupBoxDeviceInfo.Text = part.PartName;  	lblDeviceFamily.Text = family.FamilyName;  	lblDeviceId.Text = string.Format ("0x{0:X4}"' part.DeviceID);  	lblDeviceVdd.Text = string.Format ("{0}V - {1}V"' part.VddMin' part.VddMax);  	// Note: This could represent either words or bytes' depending on the architecture (eg. PIC24 will be in words)  	uint progmem = part.ProgramMem;  	if (progmem < 1024)  		lblFlashSize.Text = string.Format ("{0}"' progmem);  	else  		lblFlashSize.Text = string.Format ("{0}K ({1})"' progmem / 1000' progmem);  	propertyGridDevice.PropertySort = PropertySort.Categorized;  	propertyGridDevice.SelectedObject = part;  	propertyGridDevice.Tag = (int)e.Node.Tag;  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,treeViewDevices_AfterSelect,The following statement contains a magic number: if (e.Node.Tag != null) {  	var part = DevFile.PartsList [(int)e.Node.Tag];  	var family = DevFile.Families [part.Family];  	groupBoxDeviceInfo.Text = part.PartName;  	lblDeviceFamily.Text = family.FamilyName;  	lblDeviceId.Text = string.Format ("0x{0:X4}"' part.DeviceID);  	lblDeviceVdd.Text = string.Format ("{0}V - {1}V"' part.VddMin' part.VddMax);  	// Note: This could represent either words or bytes' depending on the architecture (eg. PIC24 will be in words)  	uint progmem = part.ProgramMem;  	if (progmem < 1024)  		lblFlashSize.Text = string.Format ("{0}"' progmem);  	else  		lblFlashSize.Text = string.Format ("{0}K ({1})"' progmem / 1000' progmem);  	propertyGridDevice.PropertySort = PropertySort.Categorized;  	propertyGridDevice.SelectedObject = part;  	propertyGridDevice.Tag = (int)e.Node.Tag;  }  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,treeViewDevices_AfterSelect,The following statement contains a magic number: if (progmem < 1024)  	lblFlashSize.Text = string.Format ("{0}"' progmem);  else  	lblFlashSize.Text = string.Format ("{0}K ({1})"' progmem / 1000' progmem);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,treeViewDevices_AfterSelect,The following statement contains a magic number: if (progmem < 1024)  	lblFlashSize.Text = string.Format ("{0}"' progmem);  else  	lblFlashSize.Text = string.Format ("{0}K ({1})"' progmem / 1000' progmem);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,treeViewDevices_AfterSelect,The following statement contains a magic number: lblFlashSize.Text = string.Format ("{0}K ({1})"' progmem / 1000' progmem);  
Magic Number,PicKit2_Script_Editor,fmMain,C:\repos\jorticus_pickit2-editor\fmMain.cs,dataGridHex_CellValueChanged,The following statement contains a magic number: if (dataGridHex.Focused) {  	int idx = e.ColumnIndex + e.RowIndex * dataGridHex.ColumnCount;  	ushort val = (ushort)Convert.ToInt32 ((string)dataGridHex [e.ColumnIndex' e.RowIndex].Value' 16);  	ushort oldval = DevFile.Scripts [currentScriptIndex].Script [idx];  	if (oldval != val) {  		DevFile.Scripts [currentScriptIndex].Script [idx] = val;  		LoadScript (currentScriptIndex);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24r2_")).Count () == 0) {  	// Get the PIC24 scripts  	var PIC24Scripts = DevFile.Scripts.Where (s => s.ScriptName.StartsWith ("24_"));  	var newScripts = new List<DeviceFile.DeviceScripts> ();  	ushort sidx = (ushort)DevFile.Scripts.Length;  	foreach (var script in PIC24Scripts) {  		DeviceFile.DeviceScripts newScript = script;  		// Rename and re-index  		sidx++;  		newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  		newScript.ScriptNumber = sidx;  		newScript.Script = (ushort[])newScript.Script.Clone ();  		// Patch the opcodes:  		// TBLPAG address has changed from 0x32 to 0x54  		// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  		List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  		foreach (DeviceFile.Opcode opcode in opcodes) {  			if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  				uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  				// MOV W0' TBLPAG  				// 88 01 90 -> 99 02 A0  				if (operand == 0x880190) {  					int idx = opcode.index;  					newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  					newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  				}  			}  		}  		newScripts.Add (newScript);  	}  	// Update DeviceFile  	DevFile.Scripts = DevFile.Scripts.Concat (newScripts).ToArray ();  	DevFile.Info.NumberScripts += newScripts.Count;  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (var script in PIC24Scripts) {  	DeviceFile.DeviceScripts newScript = script;  	// Rename and re-index  	sidx++;  	newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  	newScript.ScriptNumber = sidx;  	newScript.Script = (ushort[])newScript.Script.Clone ();  	// Patch the opcodes:  	// TBLPAG address has changed from 0x32 to 0x54  	// eg. MOV W0' TBLPAG instruction has changed from 0x880190 to 0x8802A0  	List<DeviceFile.Opcode> opcodes = newScript.ParseScript ();  	foreach (DeviceFile.Opcode opcode in opcodes) {  		if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  			uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  			// MOV W0' TBLPAG  			// 88 01 90 -> 99 02 A0  			if (operand == 0x880190) {  				int idx = opcode.index;  				newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  				newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  			}  		}  	}  	newScripts.Add (newScript);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: newScript.ScriptName = "24r2_" + newScript.ScriptName.Substring (3);  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (DeviceFile.Opcode opcode in opcodes) {  	if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  		uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  		// MOV W0' TBLPAG  		// 88 01 90 -> 99 02 A0  		if (operand == 0x880190) {  			int idx = opcode.index;  			newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  			newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  		}  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (DeviceFile.Opcode opcode in opcodes) {  	if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  		uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  		// MOV W0' TBLPAG  		// 88 01 90 -> 99 02 A0  		if (operand == 0x880190) {  			int idx = opcode.index;  			newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  			newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  		}  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (DeviceFile.Opcode opcode in opcodes) {  	if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  		uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  		// MOV W0' TBLPAG  		// 88 01 90 -> 99 02 A0  		if (operand == 0x880190) {  			int idx = opcode.index;  			newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  			newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  		}  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (DeviceFile.Opcode opcode in opcodes) {  	if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  		uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  		// MOV W0' TBLPAG  		// 88 01 90 -> 99 02 A0  		if (operand == 0x880190) {  			int idx = opcode.index;  			newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  			newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  		}  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: foreach (DeviceFile.Opcode opcode in opcodes) {  	if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  		uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  		// MOV W0' TBLPAG  		// 88 01 90 -> 99 02 A0  		if (operand == 0x880190) {  			int idx = opcode.index;  			newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  			newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  		}  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  	uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  	// MOV W0' TBLPAG  	// 88 01 90 -> 99 02 A0  	if (operand == 0x880190) {  		int idx = opcode.index;  		newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  		newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  	uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  	// MOV W0' TBLPAG  	// 88 01 90 -> 99 02 A0  	if (operand == 0x880190) {  		int idx = opcode.index;  		newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  		newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  	uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  	// MOV W0' TBLPAG  	// 88 01 90 -> 99 02 A0  	if (operand == 0x880190) {  		int idx = opcode.index;  		newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  		newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  	uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  	// MOV W0' TBLPAG  	// 88 01 90 -> 99 02 A0  	if (operand == 0x880190) {  		int idx = opcode.index;  		newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  		newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if ((OPCODES)opcode.opcode == OPCODES._COREINST24) {  	uint operand = (uint)(((uint)opcode.data [0] << 16) | ((uint)opcode.data [1] << 8) | opcode.data [2]);  	// MOV W0' TBLPAG  	// 88 01 90 -> 99 02 A0  	if (operand == 0x880190) {  		int idx = opcode.index;  		newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  		newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  	}  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (operand == 0x880190) {  	int idx = opcode.index;  	newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  	newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: if (operand == 0x880190) {  	int idx = opcode.index;  	newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  	newScript.Script [idx + 1] = (ushort)((newScript.Script [idx + 1] & 0xFF00) | 0xA0);  }  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,PatchDeviceFile,The following statement contains a magic number: newScript.Script [idx + 2] = (ushort)((newScript.Script [idx + 2] & 0xFF00) | 0x02);  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.ProgramMem = template.family.programSize / 2 + 1;  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.ConfigAddr = template.family.configAddr * 2;  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.ConfigWords = 4;  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.ConfigMasks = new ushort[8] {  	0x0000'  	0xFFFF'  	0xFFF3'  	0x7BFF'  	0'  	0'  	0'  	0  };  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.ConfigBlank = new ushort[8] {  	0xFFFF'  	0xFFFF'  	0xFFF3'  	0x7BFF'  	0'  	0'  	0'  	0  };  
Magic Number,PicKit2_Script_Editor,Patcher24r2,C:\repos\jorticus_pickit2-editor\Patcher24r2.cs,NewPart24r2,The following statement contains a magic number: newPart.CPConfig = 4;  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertTo,The following statement contains a magic number: if (destinationType == typeof(string)) {  	int size = System.Runtime.InteropServices.Marshal.SizeOf (value) * 2;  	return string.Format ("0x{0:X" + size.ToString () + "}"' value);  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: if (value is string) {  	var type = context.PropertyDescriptor.PropertyType;  	string v = (value as string);  	int n = 10;  	// Hexadecimal  	if (v.StartsWith ("0x")) {  		v = v.Substring (2);  		n = 16;  	}  	// Convert number  	Int64 val = Convert.ToInt64 (v' n);  	return Convert.ChangeType (val' type);  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: if (value is string) {  	var type = context.PropertyDescriptor.PropertyType;  	string v = (value as string);  	int n = 10;  	// Hexadecimal  	if (v.StartsWith ("0x")) {  		v = v.Substring (2);  		n = 16;  	}  	// Convert number  	Int64 val = Convert.ToInt64 (v' n);  	return Convert.ChangeType (val' type);  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: if (value is string) {  	var type = context.PropertyDescriptor.PropertyType;  	string v = (value as string);  	int n = 10;  	// Hexadecimal  	if (v.StartsWith ("0x")) {  		v = v.Substring (2);  		n = 16;  	}  	// Convert number  	Int64 val = Convert.ToInt64 (v' n);  	return Convert.ChangeType (val' type);  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: if (v.StartsWith ("0x")) {  	v = v.Substring (2);  	n = 16;  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: if (v.StartsWith ("0x")) {  	v = v.Substring (2);  	n = 16;  }  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: v = v.Substring (2);  
Magic Number,PicKit2_Script_Editor,HexConverter,C:\repos\jorticus_pickit2-editor\Property Editor\HexEditor.cs,ConvertFrom,The following statement contains a magic number: n = 16;  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: if (fileExists) {  	//try  	{  		//FileStream fsDevFile = File.Open(DeviceFileName' FileMode.Open);  		FileStream fsDevFile = File.OpenRead (DeviceFileName);  		using (BinaryReader binRead = new BinaryReader (fsDevFile)) {  			//  			DevFile.Info.VersionMajor = binRead.ReadInt32 ();  			DevFile.Info.VersionMinor = binRead.ReadInt32 ();  			DevFile.Info.VersionDot = binRead.ReadInt32 ();  			DevFile.Info.VersionNotes = binRead.ReadString ();  			DevFile.Info.NumberFamilies = binRead.ReadInt32 ();  			DevFile.Info.NumberParts = binRead.ReadInt32 ();  			DevFile.Info.NumberScripts = binRead.ReadInt32 ();  			DevFile.Info.Compatibility = binRead.ReadByte ();  			DevFile.Info.UNUSED1A = binRead.ReadByte ();  			DevFile.Info.UNUSED1B = binRead.ReadUInt16 ();  			DevFile.Info.UNUSED2 = binRead.ReadUInt32 ();  			// create a version string  			var DeviceFileVersion = string.Format ("{0:D1}.{1:D2}.{2:D2}"' DevFile.Info.VersionMajor' DevFile.Info.VersionMinor' DevFile.Info.VersionDot);  			//  			// Declare arrays  			//  			DevFile.Families = new DeviceFile.DeviceFamilyParams[DevFile.Info.NumberFamilies];  			DevFile.PartsList = new DeviceFile.DevicePartParams[DevFile.Info.NumberParts];  			DevFile.Scripts = new DeviceFile.DeviceScripts[DevFile.Info.NumberScripts];  			//  			// now read all families if they are there  			//  			for (int l_x = 0; l_x < DevFile.Info.NumberFamilies; l_x++) {  				DevFile.Families [l_x].FamilyID = binRead.ReadUInt16 ();  				DevFile.Families [l_x].FamilyType = binRead.ReadUInt16 ();  				DevFile.Families [l_x].SearchPriority = binRead.ReadUInt16 ();  				DevFile.Families [l_x].FamilyName = binRead.ReadString ();  				DevFile.Families [l_x].ProgEntryScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].ProgExitScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].ReadDevIDScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].DeviceIDMask = binRead.ReadUInt32 ();  				DevFile.Families [l_x].BlankValue = binRead.ReadUInt32 ();  				DevFile.Families [l_x].BytesPerLocation = binRead.ReadByte ();  				DevFile.Families [l_x].AddressIncrement = binRead.ReadByte ();  				DevFile.Families [l_x].PartDetect = binRead.ReadBoolean ();  				DevFile.Families [l_x].ProgEntryVPPScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].UNUSED1 = binRead.ReadUInt16 ();  				DevFile.Families [l_x].EEMemBytesPerWord = binRead.ReadByte ();  				DevFile.Families [l_x].EEMemAddressIncrement = binRead.ReadByte ();  				DevFile.Families [l_x].UserIDHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].UserIDBytes = binRead.ReadByte ();  				DevFile.Families [l_x].ProgMemHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].EEMemHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].ProgMemShift = binRead.ReadByte ();  				DevFile.Families [l_x].TestMemoryStart = binRead.ReadUInt32 ();  				DevFile.Families [l_x].TestMemoryLength = binRead.ReadUInt16 ();  				DevFile.Families [l_x].Vpp = binRead.ReadSingle ();  			}  			// Create family search table based on priority  			var familySearchTable = new int[DevFile.Info.NumberFamilies];  			for (int familyIdx = 0; familyIdx < DevFile.Info.NumberFamilies; familyIdx++) {  				familySearchTable [DevFile.Families [familyIdx].SearchPriority] = familyIdx;  			}  			//  			// now read all parts if they are there  			//  			for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  				DevFile.PartsList [l_x].PartName = binRead.ReadString ();  				DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  				// Init config arrays  				DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  				DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  				for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  					DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  				}  				for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  					DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  				}  				DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  				DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  				DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  				DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  				DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  				DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  				DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  				//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  				DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  				DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  				DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  				//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         				DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  			}  			//  			// now read all scripts if they are there  			//                      			for (int l_x = 0; l_x < DevFile.Info.NumberScripts; l_x++) {  				DevFile.Scripts [l_x].ScriptNumber = binRead.ReadUInt16 ();  				DevFile.Scripts [l_x].ScriptName = binRead.ReadString ();  				DevFile.Scripts [l_x].ScriptVersion = binRead.ReadUInt16 ();  				DevFile.Scripts [l_x].UNUSED1 = binRead.ReadUInt32 ();  				DevFile.Scripts [l_x].ScriptLength = binRead.ReadUInt16 ();  				// init script array  				DevFile.Scripts [l_x].Script = new ushort[DevFile.Scripts [l_x].ScriptLength];  				for (int l_index = 0; l_index < DevFile.Scripts [l_x].ScriptLength; l_index++) {  					DevFile.Scripts [l_x].Script [l_index] = binRead.ReadUInt16 ();  				}  				DevFile.Scripts [l_x].Comment = binRead.ReadString ();  			}  			binRead.Close ();  		}  		fsDevFile.Close ();  	/*catch                 {                     return false;                 }*/}  	return true;  }  else {  	return false;  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: if (fileExists) {  	//try  	{  		//FileStream fsDevFile = File.Open(DeviceFileName' FileMode.Open);  		FileStream fsDevFile = File.OpenRead (DeviceFileName);  		using (BinaryReader binRead = new BinaryReader (fsDevFile)) {  			//  			DevFile.Info.VersionMajor = binRead.ReadInt32 ();  			DevFile.Info.VersionMinor = binRead.ReadInt32 ();  			DevFile.Info.VersionDot = binRead.ReadInt32 ();  			DevFile.Info.VersionNotes = binRead.ReadString ();  			DevFile.Info.NumberFamilies = binRead.ReadInt32 ();  			DevFile.Info.NumberParts = binRead.ReadInt32 ();  			DevFile.Info.NumberScripts = binRead.ReadInt32 ();  			DevFile.Info.Compatibility = binRead.ReadByte ();  			DevFile.Info.UNUSED1A = binRead.ReadByte ();  			DevFile.Info.UNUSED1B = binRead.ReadUInt16 ();  			DevFile.Info.UNUSED2 = binRead.ReadUInt32 ();  			// create a version string  			var DeviceFileVersion = string.Format ("{0:D1}.{1:D2}.{2:D2}"' DevFile.Info.VersionMajor' DevFile.Info.VersionMinor' DevFile.Info.VersionDot);  			//  			// Declare arrays  			//  			DevFile.Families = new DeviceFile.DeviceFamilyParams[DevFile.Info.NumberFamilies];  			DevFile.PartsList = new DeviceFile.DevicePartParams[DevFile.Info.NumberParts];  			DevFile.Scripts = new DeviceFile.DeviceScripts[DevFile.Info.NumberScripts];  			//  			// now read all families if they are there  			//  			for (int l_x = 0; l_x < DevFile.Info.NumberFamilies; l_x++) {  				DevFile.Families [l_x].FamilyID = binRead.ReadUInt16 ();  				DevFile.Families [l_x].FamilyType = binRead.ReadUInt16 ();  				DevFile.Families [l_x].SearchPriority = binRead.ReadUInt16 ();  				DevFile.Families [l_x].FamilyName = binRead.ReadString ();  				DevFile.Families [l_x].ProgEntryScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].ProgExitScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].ReadDevIDScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].DeviceIDMask = binRead.ReadUInt32 ();  				DevFile.Families [l_x].BlankValue = binRead.ReadUInt32 ();  				DevFile.Families [l_x].BytesPerLocation = binRead.ReadByte ();  				DevFile.Families [l_x].AddressIncrement = binRead.ReadByte ();  				DevFile.Families [l_x].PartDetect = binRead.ReadBoolean ();  				DevFile.Families [l_x].ProgEntryVPPScript = binRead.ReadUInt16 ();  				DevFile.Families [l_x].UNUSED1 = binRead.ReadUInt16 ();  				DevFile.Families [l_x].EEMemBytesPerWord = binRead.ReadByte ();  				DevFile.Families [l_x].EEMemAddressIncrement = binRead.ReadByte ();  				DevFile.Families [l_x].UserIDHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].UserIDBytes = binRead.ReadByte ();  				DevFile.Families [l_x].ProgMemHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].EEMemHexBytes = binRead.ReadByte ();  				DevFile.Families [l_x].ProgMemShift = binRead.ReadByte ();  				DevFile.Families [l_x].TestMemoryStart = binRead.ReadUInt32 ();  				DevFile.Families [l_x].TestMemoryLength = binRead.ReadUInt16 ();  				DevFile.Families [l_x].Vpp = binRead.ReadSingle ();  			}  			// Create family search table based on priority  			var familySearchTable = new int[DevFile.Info.NumberFamilies];  			for (int familyIdx = 0; familyIdx < DevFile.Info.NumberFamilies; familyIdx++) {  				familySearchTable [DevFile.Families [familyIdx].SearchPriority] = familyIdx;  			}  			//  			// now read all parts if they are there  			//  			for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  				DevFile.PartsList [l_x].PartName = binRead.ReadString ();  				DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  				// Init config arrays  				DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  				DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  				for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  					DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  				}  				for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  					DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  				}  				DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  				DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  				DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  				DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  				DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  				DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  				DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  				DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  				DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  				//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  				DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  				DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  				DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  				DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  				DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  				//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         				DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  			}  			//  			// now read all scripts if they are there  			//                      			for (int l_x = 0; l_x < DevFile.Info.NumberScripts; l_x++) {  				DevFile.Scripts [l_x].ScriptNumber = binRead.ReadUInt16 ();  				DevFile.Scripts [l_x].ScriptName = binRead.ReadString ();  				DevFile.Scripts [l_x].ScriptVersion = binRead.ReadUInt16 ();  				DevFile.Scripts [l_x].UNUSED1 = binRead.ReadUInt32 ();  				DevFile.Scripts [l_x].ScriptLength = binRead.ReadUInt16 ();  				// init script array  				DevFile.Scripts [l_x].Script = new ushort[DevFile.Scripts [l_x].ScriptLength];  				for (int l_index = 0; l_index < DevFile.Scripts [l_x].ScriptLength; l_index++) {  					DevFile.Scripts [l_x].Script [l_index] = binRead.ReadUInt16 ();  				}  				DevFile.Scripts [l_x].Comment = binRead.ReadString ();  			}  			binRead.Close ();  		}  		fsDevFile.Close ();  	/*catch                 {                     return false;                 }*/}  	return true;  }  else {  	return false;  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: using (BinaryReader binRead = new BinaryReader (fsDevFile)) {  	//  	DevFile.Info.VersionMajor = binRead.ReadInt32 ();  	DevFile.Info.VersionMinor = binRead.ReadInt32 ();  	DevFile.Info.VersionDot = binRead.ReadInt32 ();  	DevFile.Info.VersionNotes = binRead.ReadString ();  	DevFile.Info.NumberFamilies = binRead.ReadInt32 ();  	DevFile.Info.NumberParts = binRead.ReadInt32 ();  	DevFile.Info.NumberScripts = binRead.ReadInt32 ();  	DevFile.Info.Compatibility = binRead.ReadByte ();  	DevFile.Info.UNUSED1A = binRead.ReadByte ();  	DevFile.Info.UNUSED1B = binRead.ReadUInt16 ();  	DevFile.Info.UNUSED2 = binRead.ReadUInt32 ();  	// create a version string  	var DeviceFileVersion = string.Format ("{0:D1}.{1:D2}.{2:D2}"' DevFile.Info.VersionMajor' DevFile.Info.VersionMinor' DevFile.Info.VersionDot);  	//  	// Declare arrays  	//  	DevFile.Families = new DeviceFile.DeviceFamilyParams[DevFile.Info.NumberFamilies];  	DevFile.PartsList = new DeviceFile.DevicePartParams[DevFile.Info.NumberParts];  	DevFile.Scripts = new DeviceFile.DeviceScripts[DevFile.Info.NumberScripts];  	//  	// now read all families if they are there  	//  	for (int l_x = 0; l_x < DevFile.Info.NumberFamilies; l_x++) {  		DevFile.Families [l_x].FamilyID = binRead.ReadUInt16 ();  		DevFile.Families [l_x].FamilyType = binRead.ReadUInt16 ();  		DevFile.Families [l_x].SearchPriority = binRead.ReadUInt16 ();  		DevFile.Families [l_x].FamilyName = binRead.ReadString ();  		DevFile.Families [l_x].ProgEntryScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].ProgExitScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].ReadDevIDScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].DeviceIDMask = binRead.ReadUInt32 ();  		DevFile.Families [l_x].BlankValue = binRead.ReadUInt32 ();  		DevFile.Families [l_x].BytesPerLocation = binRead.ReadByte ();  		DevFile.Families [l_x].AddressIncrement = binRead.ReadByte ();  		DevFile.Families [l_x].PartDetect = binRead.ReadBoolean ();  		DevFile.Families [l_x].ProgEntryVPPScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].UNUSED1 = binRead.ReadUInt16 ();  		DevFile.Families [l_x].EEMemBytesPerWord = binRead.ReadByte ();  		DevFile.Families [l_x].EEMemAddressIncrement = binRead.ReadByte ();  		DevFile.Families [l_x].UserIDHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].UserIDBytes = binRead.ReadByte ();  		DevFile.Families [l_x].ProgMemHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].EEMemHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].ProgMemShift = binRead.ReadByte ();  		DevFile.Families [l_x].TestMemoryStart = binRead.ReadUInt32 ();  		DevFile.Families [l_x].TestMemoryLength = binRead.ReadUInt16 ();  		DevFile.Families [l_x].Vpp = binRead.ReadSingle ();  	}  	// Create family search table based on priority  	var familySearchTable = new int[DevFile.Info.NumberFamilies];  	for (int familyIdx = 0; familyIdx < DevFile.Info.NumberFamilies; familyIdx++) {  		familySearchTable [DevFile.Families [familyIdx].SearchPriority] = familyIdx;  	}  	//  	// now read all parts if they are there  	//  	for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  		DevFile.PartsList [l_x].PartName = binRead.ReadString ();  		DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  		// Init config arrays  		DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  		DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  		for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  			DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  		}  		for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  			DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  		}  		DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  		DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  		DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  		DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  		DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  		DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  		DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  		//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  		DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  		DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  		DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  		//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         		DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  	}  	//  	// now read all scripts if they are there  	//                      	for (int l_x = 0; l_x < DevFile.Info.NumberScripts; l_x++) {  		DevFile.Scripts [l_x].ScriptNumber = binRead.ReadUInt16 ();  		DevFile.Scripts [l_x].ScriptName = binRead.ReadString ();  		DevFile.Scripts [l_x].ScriptVersion = binRead.ReadUInt16 ();  		DevFile.Scripts [l_x].UNUSED1 = binRead.ReadUInt32 ();  		DevFile.Scripts [l_x].ScriptLength = binRead.ReadUInt16 ();  		// init script array  		DevFile.Scripts [l_x].Script = new ushort[DevFile.Scripts [l_x].ScriptLength];  		for (int l_index = 0; l_index < DevFile.Scripts [l_x].ScriptLength; l_index++) {  			DevFile.Scripts [l_x].Script [l_index] = binRead.ReadUInt16 ();  		}  		DevFile.Scripts [l_x].Comment = binRead.ReadString ();  	}  	binRead.Close ();  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: using (BinaryReader binRead = new BinaryReader (fsDevFile)) {  	//  	DevFile.Info.VersionMajor = binRead.ReadInt32 ();  	DevFile.Info.VersionMinor = binRead.ReadInt32 ();  	DevFile.Info.VersionDot = binRead.ReadInt32 ();  	DevFile.Info.VersionNotes = binRead.ReadString ();  	DevFile.Info.NumberFamilies = binRead.ReadInt32 ();  	DevFile.Info.NumberParts = binRead.ReadInt32 ();  	DevFile.Info.NumberScripts = binRead.ReadInt32 ();  	DevFile.Info.Compatibility = binRead.ReadByte ();  	DevFile.Info.UNUSED1A = binRead.ReadByte ();  	DevFile.Info.UNUSED1B = binRead.ReadUInt16 ();  	DevFile.Info.UNUSED2 = binRead.ReadUInt32 ();  	// create a version string  	var DeviceFileVersion = string.Format ("{0:D1}.{1:D2}.{2:D2}"' DevFile.Info.VersionMajor' DevFile.Info.VersionMinor' DevFile.Info.VersionDot);  	//  	// Declare arrays  	//  	DevFile.Families = new DeviceFile.DeviceFamilyParams[DevFile.Info.NumberFamilies];  	DevFile.PartsList = new DeviceFile.DevicePartParams[DevFile.Info.NumberParts];  	DevFile.Scripts = new DeviceFile.DeviceScripts[DevFile.Info.NumberScripts];  	//  	// now read all families if they are there  	//  	for (int l_x = 0; l_x < DevFile.Info.NumberFamilies; l_x++) {  		DevFile.Families [l_x].FamilyID = binRead.ReadUInt16 ();  		DevFile.Families [l_x].FamilyType = binRead.ReadUInt16 ();  		DevFile.Families [l_x].SearchPriority = binRead.ReadUInt16 ();  		DevFile.Families [l_x].FamilyName = binRead.ReadString ();  		DevFile.Families [l_x].ProgEntryScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].ProgExitScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].ReadDevIDScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].DeviceIDMask = binRead.ReadUInt32 ();  		DevFile.Families [l_x].BlankValue = binRead.ReadUInt32 ();  		DevFile.Families [l_x].BytesPerLocation = binRead.ReadByte ();  		DevFile.Families [l_x].AddressIncrement = binRead.ReadByte ();  		DevFile.Families [l_x].PartDetect = binRead.ReadBoolean ();  		DevFile.Families [l_x].ProgEntryVPPScript = binRead.ReadUInt16 ();  		DevFile.Families [l_x].UNUSED1 = binRead.ReadUInt16 ();  		DevFile.Families [l_x].EEMemBytesPerWord = binRead.ReadByte ();  		DevFile.Families [l_x].EEMemAddressIncrement = binRead.ReadByte ();  		DevFile.Families [l_x].UserIDHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].UserIDBytes = binRead.ReadByte ();  		DevFile.Families [l_x].ProgMemHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].EEMemHexBytes = binRead.ReadByte ();  		DevFile.Families [l_x].ProgMemShift = binRead.ReadByte ();  		DevFile.Families [l_x].TestMemoryStart = binRead.ReadUInt32 ();  		DevFile.Families [l_x].TestMemoryLength = binRead.ReadUInt16 ();  		DevFile.Families [l_x].Vpp = binRead.ReadSingle ();  	}  	// Create family search table based on priority  	var familySearchTable = new int[DevFile.Info.NumberFamilies];  	for (int familyIdx = 0; familyIdx < DevFile.Info.NumberFamilies; familyIdx++) {  		familySearchTable [DevFile.Families [familyIdx].SearchPriority] = familyIdx;  	}  	//  	// now read all parts if they are there  	//  	for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  		DevFile.PartsList [l_x].PartName = binRead.ReadString ();  		DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  		// Init config arrays  		DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  		DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  		for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  			DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  		}  		for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  			DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  		}  		DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  		DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  		DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  		DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  		DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  		DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  		DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  		DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  		DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  		//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  		DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  		DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  		DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  		DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  		DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  		//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         		DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  	}  	//  	// now read all scripts if they are there  	//                      	for (int l_x = 0; l_x < DevFile.Info.NumberScripts; l_x++) {  		DevFile.Scripts [l_x].ScriptNumber = binRead.ReadUInt16 ();  		DevFile.Scripts [l_x].ScriptName = binRead.ReadString ();  		DevFile.Scripts [l_x].ScriptVersion = binRead.ReadUInt16 ();  		DevFile.Scripts [l_x].UNUSED1 = binRead.ReadUInt32 ();  		DevFile.Scripts [l_x].ScriptLength = binRead.ReadUInt16 ();  		// init script array  		DevFile.Scripts [l_x].Script = new ushort[DevFile.Scripts [l_x].ScriptLength];  		for (int l_index = 0; l_index < DevFile.Scripts [l_x].ScriptLength; l_index++) {  			DevFile.Scripts [l_x].Script [l_index] = binRead.ReadUInt16 ();  		}  		DevFile.Scripts [l_x].Comment = binRead.ReadString ();  	}  	binRead.Close ();  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  	DevFile.PartsList [l_x].PartName = binRead.ReadString ();  	DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  	// Init config arrays  	DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  	DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  	for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  		DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  	}  	for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  		DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  	}  	DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  	DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  	DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  	DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  	DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  	DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  	DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  	//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  	DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  	DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  	DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  	//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         	DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: for (int l_x = 0; l_x < DevFile.Info.NumberParts; l_x++) {  	DevFile.PartsList [l_x].PartName = binRead.ReadString ();  	DevFile.PartsList [l_x].Family = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DeviceID = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].ProgramMem = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].EEMem = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].ConfigWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].ConfigAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].UserIDWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].UserIDAddr = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].BandGapMask = binRead.ReadUInt32 ();  	// Init config arrays  	DevFile.PartsList [l_x].ConfigMasks = new ushort[KONST.NumConfigMasks];  	DevFile.PartsList [l_x].ConfigBlank = new ushort[KONST.NumConfigMasks];  	for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  		DevFile.PartsList [l_x].ConfigMasks [l_index] = binRead.ReadUInt16 ();  	}  	for (int l_index = 0; l_index < KONST.MaxReadCfgMasks; l_index++) {  		DevFile.PartsList [l_x].ConfigBlank [l_index] = binRead.ReadUInt16 ();  	}  	DevFile.PartsList [l_x].CPMask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].CPConfig = binRead.ReadByte ();  	DevFile.PartsList [l_x].OSSCALSave = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].IgnoreAddress = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].VddMin = binRead.ReadSingle ();  	DevFile.PartsList [l_x].VddMax = binRead.ReadSingle ();  	DevFile.PartsList [l_x].VddErase = binRead.ReadSingle ();  	DevFile.PartsList [l_x].CalibrationWords = binRead.ReadByte ();  	DevFile.PartsList [l_x].ChipEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemAddrSetScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemAddrBytes = binRead.ReadByte ();  	DevFile.PartsList [l_x].ProgMemRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemRdWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERdLocations = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDRdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigRdPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemWrWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ProgMemPanelBufs = binRead.ReadByte ();  	DevFile.PartsList [l_x].ProgMemPanelOffset = binRead.ReadUInt32 ();  	DevFile.PartsList [l_x].EEWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEWrLocations = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].UserIDWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigWrPrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].OSCCALRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].OSCCALWrScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DPMask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].WriteCfgOnErase = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].BlankCheckSkipUsrIDs = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].IgnoreBytes = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ChipErasePrepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].BootFlash = binRead.ReadUInt32 ();  	//DevFile.PartsList[l_x].UNUSED4 = binRead.ReadUInt32();  	DevFile.PartsList [l_x].Config9Mask = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  	DevFile.PartsList [l_x].Config9Blank = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  	DevFile.PartsList [l_x].ProgMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EEMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ConfigMemEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].reserved1EraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].reserved2EraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].TestMemoryRdScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].TestMemoryRdWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERowEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].EERowEraseWords = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].ExportToMPLAB = binRead.ReadBoolean ();  	DevFile.PartsList [l_x].DebugHaltScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRunScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugStatusScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReadExecVerScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugSingleStepScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugBulkWrDataScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugBulkRdDataScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugWriteVectorScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReadVectorScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRowEraseScript = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugRowEraseSize = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved5Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved6Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved7Script = binRead.ReadUInt16 ();  	DevFile.PartsList [l_x].DebugReserved8Script = binRead.ReadUInt16 ();  	//DevFile.PartsList[l_x].DebugReserved9Script = binRead.ReadUInt16();                                                         	DevFile.PartsList [l_x].LVPScript = binRead.ReadUInt16 ();  }  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: DevFile.PartsList [l_x].ConfigMasks [8] = DevFile.PartsList [l_x].Config9Mask;  
Magic Number,PICkit2V2,DeviceFile,C:\repos\jorticus_pickit2-editor\DeviceFile.cs,LoadFromFile,The following statement contains a magic number: DevFile.PartsList [l_x].ConfigBlank [8] = DevFile.PartsList [l_x].Config9Blank;  
Missing Default,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseF,The following switch statement is missing a default case: switch (f) {  case 0x3B0:  	return "NVMCON";  case 0x019:  	return "TBLPAG";  case 0x02A:  	return "TBLPAG-r2";  }  
Missing Default,PicKit2_Script_Editor,CoreInst24,C:\repos\jorticus_pickit2-editor\CoreInst24.cs,ParseWReg,The following switch statement is missing a default case: switch (addr) {  //case 0x0: fmt = "W{0}"; break;      // Register direct  case 0x1:  	fmt = "[W{0}]";  	break;  // Indirect  case 0x2:  	fmt = "[W{0}--]";  	break;  // Indirect post-dec  case 0x3:  	fmt = "[W{0}++]";  	break;  // Indirect post-inc  case 0x4:  	fmt = "[--W{0}]";  	break;  // Indirect pre-dec  case 0x5:  	fmt = "[++W{0}]";  	break;  // Indirect pre-inc  }  
