Implementation smell,Namespace,Class,File,Method,Description
Long Identifier,Microsoft.AspNet.SignalR.Client,HubProxy<TServerHubInterface;TClientInterface>,C:\repos\Gandalis_SignalR.Client.TypedHubProxy\src\SignalR.Client.TypedHubProxy\HubProxy.cs,CreatePredicateWrapperDelegate,The length of the parameter invokeCallbackIfWherePredicateIsTrue is 36.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxy<TServerHubInterface;TClientInterface>,C:\repos\Gandalis_SignalR.Client.TypedHubProxy\src\SignalR.Client.TypedHubProxy\HubProxy.cs,SubscribeOnAll,The length of the statement  "                        $"Only interface methods with less or equal 7 parameters are supported: {declaringType}.{methodInfo.Name}({methodParameters})!"); " is 129.
Long Statement,Microsoft.AspNet.SignalR.Client,HubProxy<TServerHubInterface;TClientInterface>,C:\repos\Gandalis_SignalR.Client.TypedHubProxy\src\SignalR.Client.TypedHubProxy\HubProxy.cs,CreatePredicateWrapperDelegate,The length of the statement  "            // Create conditional-expression to evaluate the where-predicate. If the result is true' the original callback will be invoked " is 126.
Magic Number,Microsoft.AspNet.SignalR.Client,HubProxy<TServerHubInterface;TClientInterface>,C:\repos\Gandalis_SignalR.Client.TypedHubProxy\src\SignalR.Client.TypedHubProxy\HubProxy.cs,SubscribeOnAll,The following statement contains a magic number: foreach (var methodInfo in methodInfos)              {                  var parameterInfos = methodInfo.GetParameters();                    if (parameterInfos.Count() > 7)                  {                      var declaringType = methodInfo.DeclaringType?.FullName.Replace("+"' ".");                      var methodParameters = string.Join("' "'                          methodInfo.GetParameters().Select(p => $"{p.ParameterType.Name} {p.Name}"));                      throw new NotSupportedException(                          $"Only interface methods with less or equal 7 parameters are supported: {declaringType}.{methodInfo.Name}({methodParameters})!");                  }                    var actionType = Expression.GetActionType(parameterInfos.Select(p => p.ParameterType).ToArray());                  var actionDelegate = Delegate.CreateDelegate(actionType' instance' methodInfo);                    yield return CreateSubscription(methodInfo.Name' actionDelegate);              }
