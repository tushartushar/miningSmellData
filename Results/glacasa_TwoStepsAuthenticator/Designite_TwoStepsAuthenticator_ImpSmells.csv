Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TwoStepsAuthenticator,TimeAuthenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\TimeAuthenticator.cs,CheckCode,The length of the statement  "                if (ConstantTimeEquals(GetCode(secret' checkTime)' code) && (user == null || !UsedCodeManager.IsCodeUsed(checkInterval' code' user))) " is 133.
Long Statement,TwoStepsAuthenticator,UsedCode,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator\UsedCodesManager.cs,Equals,The length of the statement  "                return (other != null) && this.Code.Equals(other.Code) && this.Timestamp.Equals(other.Timestamp) && this.User.Equals(other.User); " is 129.
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: byte[] challenge = new byte[8];
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: for (int j = 7; j >= 0; j--) {                  challenge[j] = (byte)((int)chlg & 0xff);                  chlg >>= 8;              }
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: for (int j = 7; j >= 0; j--) {                  challenge[j] = (byte)((int)chlg & 0xff);                  chlg >>= 8;              }
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: for (int j = 0; j < 4; j++) {                  truncatedHash <<= 8;                  truncatedHash |= hash[offset + j];              }
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: for (int j = 0; j < 4; j++) {                  truncatedHash <<= 8;                  truncatedHash |= hash[offset + j];              }
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: truncatedHash %= 1000000;
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,GetCodeInternal,The following statement contains a magic number: return code.PadLeft(6' '0');
Magic Number,TwoStepsAuthenticator,Authenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Authenticator.cs,RandomInt,The following statement contains a magic number: var randomBytes = new byte[4];
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: int byteCount = input.Length * 5 / 8;
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: byte curByte = 0' bitsRemaining = 8;
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToBytes,The following statement contains a magic number: foreach (char c in input)              {                  int cValue = CharToValue(c);                    if (bitsRemaining > 5)                  {                      mask = cValue << (bitsRemaining - 5);                      curByte = (byte)(curByte | mask);                      bitsRemaining -= 5;                  }                  else                  {                      mask = cValue >> (5 - bitsRemaining);                      curByte = (byte)(curByte | mask);                      returnArray[arrayIndex++] = curByte;                      curByte = (byte)(cValue << (3 + bitsRemaining));                      bitsRemaining += 3;                  }              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: int charCount = (int)Math.Ceiling(input.Length / 5d) * 8;
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: byte nextChar = 0' bitsRemaining = 5;
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ToString,The following statement contains a magic number: foreach (byte b in input)              {                  nextChar = (byte)(nextChar | (b >> (8 - bitsRemaining)));                  returnArray[arrayIndex++] = ValueToChar(nextChar);                    if (bitsRemaining < 4)                  {                      nextChar = (byte)((b >> (3 - bitsRemaining)) & 31);                      returnArray[arrayIndex++] = ValueToChar(nextChar);                      bitsRemaining += 5;                  }                    bitsRemaining -= 3;                  nextChar = (byte)((b << bitsRemaining) & 31);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 91 && value > 64)              {                  return value - 65;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 56 && value > 49)              {                  return value - 24;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,CharToValue,The following statement contains a magic number: if (value < 123 && value > 96)              {                  return value - 97;              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 26)              {                  return (char)(b + 65);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,TwoStepsAuthenticator,Base32Encoding,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\Base32Encoding.cs,ValueToChar,The following statement contains a magic number: if (b < 32)              {                  return (char)(b + 24);              }
Magic Number,TwoStepsAuthenticator,TimeAuthenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\TimeAuthenticator.cs,CheckCode,The following statement contains a magic number: for (int i = -2; i <= 1; i++)              {                  var checkTime = baseTime.AddSeconds(IntervalSeconds * i);                  var checkInterval = GetInterval(checkTime);                    if (ConstantTimeEquals(GetCode(secret' checkTime)' code) && (user == null || !UsedCodeManager.IsCodeUsed(checkInterval' code' user)))                  {                      codeMatch = true;                      successfulTime = checkTime;                        UsedCodeManager.AddCode(checkInterval' code' user);                  }              }
Magic Number,TwoStepsAuthenticator,TimeAuthenticator,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator.DotnetCore\TimeAuthenticator.cs,GetInterval,The following statement contains a magic number: TimeSpan ts = (dateTime.ToUniversalTime() - new DateTime(1970' 1' 1' 0' 0' 0' DateTimeKind.Utc));
Magic Number,TwoStepsAuthenticator,UsedCodesManager,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator\UsedCodesManager.cs,UsedCodesManager,The following statement contains a magic number: cleaner = new Timer(TimeSpan.FromMinutes(5).TotalMilliseconds);
Magic Number,TwoStepsAuthenticator,UsedCodesManager,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator\UsedCodesManager.cs,cleaner_Elapsed,The following statement contains a magic number: var timeToClean = DateTime.Now.AddMinutes(-5);
Magic Number,TwoStepsAuthenticator,UsedCode,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator\UsedCodesManager.cs,GetHashCode,The following statement contains a magic number: return Code.GetHashCode() + (Timestamp.GetHashCode() + User.GetHashCode() * 17) * 17;
Magic Number,TwoStepsAuthenticator,UsedCode,C:\repos\glacasa_TwoStepsAuthenticator\TwoStepsAuthenticator\UsedCodesManager.cs,GetHashCode,The following statement contains a magic number: return Code.GetHashCode() + (Timestamp.GetHashCode() + User.GetHashCode() * 17) * 17;
