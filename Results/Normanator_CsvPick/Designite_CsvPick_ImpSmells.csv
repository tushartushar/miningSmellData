Implementation smell,Namespace,Class,File,Method,Description
Long Method,CsvPick,MyProgramArguments,C:\repos\Normanator_CsvPick\src\Program.cs,MyProgramArguments,The method has 101 lines of code.
Complex Method,CsvPick,DelimParser,C:\repos\Normanator_CsvPick\src\DelimParser.cs,Parse,Cyclomatic complexity of the method is 8
Complex Method,CsvPick,DelimParser,C:\repos\Normanator_CsvPick\src\DelimParser.cs,TrimCruft,Cyclomatic complexity of the method is 9
Complex Method,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,Cyclomatic complexity of the method is 12
Complex Method,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,AddValue,Cyclomatic complexity of the method is 10
Complex Method,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,ValidateDefinitions,Cyclomatic complexity of the method is 12
Long Parameter List,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateSkipTake,The method has 7 parameters.
Long Parameter List,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateTokenizer,The method has 6 parameters.
Long Parameter List,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateProjector,The method has 8 parameters.
Long Parameter List,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateFormatter,The method has 12 parameters.
Long Parameter List,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreatePostSkipTake,The method has 5 parameters.
Long Parameter List,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,GetTransform,The method has 6 parameters.
Long Parameter List,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,ReduceColumns,The method has 5 parameters.
Long Parameter List,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,ComposePipeline,The method has 17 parameters.
Long Parameter List,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,CreateSimpleFilter,The method has 8 parameters.
Long Parameter List,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,The method has 10 parameters.
Long Statement,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateTokenizer,The length of the statement  "	Func<IEnumerable<NumberedLine>' IEnumerable<NumberedRecord>> tokenizer = lst => GenerateParsedLines (dp' errHandler' lst); " is 122.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,GetFilter,The length of the statement  "	Func<IEnumerable<NumberedRecord>' IEnumerable<NumberedRecord>> filter = lst => lst.Where (r => this.Filter (r' errHandler)); " is 124.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,ParseForArgs,The length of the statement  "		addnParams = scriptParam.Substring (idxLparen + 1' Math.Max (0' idxRparen - idxLparen - 1)).Split (''').Select (s => s.Trim ()).Where (s => !string.IsNullOrWhiteSpace (s)).ToArray (); " is 183.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,GetScriptSource,The length of the statement  "	var obviousUsings = "using System;\r\n" + "using System.Collections.Generic;\r\n" + "using System.Linq;\r\n" + "#line 1 \"" + scriptFile + "\"\r\n"; " is 148.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,IsMultiProcessType,The length of the statement  "	var hasMethod = methods.Any (m => m.Name == methodNameMulti && m.IsPublic && m.ReturnType == outTypeMulti && m.GetParameters ().FirstOrDefault ().ParameterType == requiredInType); " is 179.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,IsSingleProcessType,The length of the statement  "	var hasMethod = methods.Any (m => m.Name == methodNameSingle && m.IsPublic && m.ReturnType == outTypeSingle && m.GetParameters ().FirstOrDefault ().ParameterType == requiredInType); " is 181.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,IsFilterType,The length of the statement  "	var hasMethod = methods.Any (m => m.Name == methodNameFilter && m.IsPublic && m.ReturnType == outTypeFilter && m.GetParameters ().FirstOrDefault ().ParameterType == requiredInType); " is 181.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,BindProcessType,The length of the statement  "		this.processInstance = scriptArgs != null ? Activator.CreateInstance (multiPT' scriptArgs) : Activator.CreateInstance (multiPT); " is 128.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,BindProcessType,The length of the statement  "			this.processInstance = scriptArgs != null ? Activator.CreateInstance (singlePT' scriptArgs) : Activator.CreateInstance (singlePT); " is 130.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,BindProcessType,The length of the statement  "		this.filterInstance = scriptArgs != null ? Activator.CreateInstance (filtT' scriptArgs) : Activator.CreateInstance (filtT); " is 123.
Long Statement,CsvPick,FieldScript,C:\repos\Normanator_CsvPick\src\FieldScript.cs,BindProcessType,The length of the statement  "		throw new InvalidOperationException ("Failed finding a type with public Process or MultiProcess " + "method with correct signature"); " is 133.
Long Statement,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,RunPipeline,The length of the statement  "		var outDelim = progArgs.OutDelimiter != default(char) ? new string (progArgs.OutDelimiter' 1) : new string (inDelim' 1); " is 120.
Long Statement,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,RunPipeline,The length of the statement  "		var pipeline = ComposePipeline (inDelim' progArgs.SkipLines' take' progArgs.CommentString' progArgs.SamplePercent' progArgs.SampleSeed' progArgs.FieldParseType' progArgs.Columns' outDelim' progArgs.Trim' progArgs.ScriptFile' progArgs.WithFilter' endOfLineMark' addOutIndices' preWrite' progArgs.ContinueOnError); " is 312.
Long Statement,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,OpenOutput,The length of the statement  "		var fs = new System.IO.FileStream (outFile' openMode' System.IO.FileAccess.ReadWrite' System.IO.FileShare.ReadWrite' 8192); " is 123.
Long Statement,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,OpenInput,The length of the statement  "		var fs = new System.IO.FileStream (inFile' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite' 32767); " is 133.
Long Statement,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,GetHelp,The length of the statement  "		sb.AppendFormat ("  {0'3}   {1'-11}   {2}"' (def.ShortSwitch != Unassigned ? def.ShortSwitch : string.Empty)' (def.LongSwitch != Unassigned ? def.LongSwitch : string.Empty)' descLines [0]); " is 189.
Long Statement,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,ValidateDefinitions,The length of the statement  "	if (definitions.Any (d => (def.ShortSwitch != Unassigned && (string.Compare (def.ShortSwitch' d.ShortSwitch' scmode) == 0 || string.Compare (def.ShortSwitch' d.LongSwitch' scmode) == 0)) || (def.LongSwitch != Unassigned && (string.Compare (def.ShortSwitch' d.ShortSwitch' scmode) == 0 || string.Compare (def.LongSwitch' d.LongSwitch' scmode) == 0)))) { " is 352.
Complex Conditional,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,CreateSimpleFilter,The conditional expression  "(last >= 0) && ((s [0] == '\'' && s [last] == '\'') || (s [0] == '"' && s [last] == '"'))"  is complex.
Complex Conditional,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,ValidateDefinitions,The conditional expression  "definitions.Any (d => (def.ShortSwitch != Unassigned && (string.Compare (def.ShortSwitch' d.ShortSwitch' scmode) == 0 || string.Compare (def.ShortSwitch' d.LongSwitch' scmode) == 0)) || (def.LongSwitch != Unassigned && (string.Compare (def.ShortSwitch' d.ShortSwitch' scmode) == 0 || string.Compare (def.LongSwitch' d.LongSwitch' scmode) == 0)))"  is complex.
Magic Number,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateFormatter,The following statement contains a magic number: if (prependOutIndex) {  	hack = (n' s) => n.ToString ().PadRight (8) + s;  }  
Magic Number,CsvPick,AbstractProcess,C:\repos\Normanator_CsvPick\src\AbstractProcess.cs,CreateFormatter,The following statement contains a magic number: hack = (n' s) => n.ToString ().PadRight (8) + s;  
Magic Number,CsvPick,Program,C:\repos\Normanator_CsvPick\src\Program.cs,CreateSimpleFilter,The following statement contains a magic number: if (parts.Length != 2 || !hasField)  	throw new ArgumentException ("with filter expected to be <int>==<str>");  
Magic Number,CsvPick,MyProgramArguments,C:\repos\Normanator_CsvPick\src\Program.cs,CrackPercentValue,The following statement contains a magic number: percent = double.TryParse (pctPortion' out percent) ? percent : 100.0;  
Magic Number,CsvPick,Sampler,C:\repos\Normanator_CsvPick\src\Sampler.cs,Sampler,The following statement contains a magic number: if (percent > 0.0)  	this._prob = Math.Min (1.0' (0.01 * percent) + bump);  
Magic Number,CsvPick,Sampler,C:\repos\Normanator_CsvPick\src\Sampler.cs,Sampler,The following statement contains a magic number: this._prob = Math.Min (1.0' (0.01 * percent) + bump);  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,GuessFromStream,The following statement contains a magic number: try {  	stream.Seek (0L' System.IO.SeekOrigin.Begin);  	var reader = new System.IO.StreamReader (stream' Encoding.UTF8' true' 4096);  	const int bufLen = 512;  	char[] buf = new char[bufLen];  	int offset = 0;  	int ctRead = bufLen;  	for (int i = 0; (i < 20) && (ctRead == (bufLen - offset)); ++i) {  		buf [0] = buf [bufLen - 1];  		ctRead = reader.Read (buf' offset' bufLen - offset);  		offset = 1;  		var guess = finder (buf);  		if (!guess.Item1)  			continue;  		ans = guess.Item2;  		break;  	}  }  finally {  	stream.Seek (pos' System.IO.SeekOrigin.Begin);  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,GuessFromStream,The following statement contains a magic number: try {  	stream.Seek (0L' System.IO.SeekOrigin.Begin);  	var reader = new System.IO.StreamReader (stream' Encoding.UTF8' true' 4096);  	const int bufLen = 512;  	char[] buf = new char[bufLen];  	int offset = 0;  	int ctRead = bufLen;  	for (int i = 0; (i < 20) && (ctRead == (bufLen - offset)); ++i) {  		buf [0] = buf [bufLen - 1];  		ctRead = reader.Read (buf' offset' bufLen - offset);  		offset = 1;  		var guess = finder (buf);  		if (!guess.Item1)  			continue;  		ans = guess.Item2;  		break;  	}  }  finally {  	stream.Seek (pos' System.IO.SeekOrigin.Begin);  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,GuessFromStream,The following statement contains a magic number: try {  	stream.Seek (0L' System.IO.SeekOrigin.Begin);  	var reader = new System.IO.StreamReader (stream' Encoding.UTF8' true' 4096);  	const int bufLen = 512;  	char[] buf = new char[bufLen];  	int offset = 0;  	int ctRead = bufLen;  	for (int i = 0; (i < 20) && (ctRead == (bufLen - offset)); ++i) {  		buf [0] = buf [bufLen - 1];  		ctRead = reader.Read (buf' offset' bufLen - offset);  		offset = 1;  		var guess = finder (buf);  		if (!guess.Item1)  			continue;  		ans = guess.Item2;  		break;  	}  }  finally {  	stream.Seek (pos' System.IO.SeekOrigin.Begin);  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,GuessFromStream,The following statement contains a magic number: for (int i = 0; (i < 20) && (ctRead == (bufLen - offset)); ++i) {  	buf [0] = buf [bufLen - 1];  	ctRead = reader.Read (buf' offset' bufLen - offset);  	offset = 1;  	var guess = finder (buf);  	if (!guess.Item1)  		continue;  	ans = guess.Item2;  	break;  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,OpenOutput,The following statement contains a magic number: if (string.IsNullOrEmpty (outFile)) {  	writer = Console.Out;  }  else {  	System.IO.FileMode openMode = append ? System.IO.FileMode.OpenOrCreate : System.IO.FileMode.Create;  	var fs = new System.IO.FileStream (outFile' openMode' System.IO.FileAccess.ReadWrite' System.IO.FileShare.ReadWrite' 8192);  	if (append && fs.CanSeek) {  		var altstream = new FileStream (outFile' FileMode.Open' FileAccess.Read' FileShare.ReadWrite);  		using (var sr = new StreamReader (altstream' outEncoding' true)) {  			sr.Read ();  			outEncoding = sr.CurrentEncoding;  		}  		fs.Seek (0L' System.IO.SeekOrigin.End);  	}  	writer = new System.IO.StreamWriter (fs' outEncoding);  	needsNewline = append && !StreamEndsWithNewLine (fs);  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,OpenInput,The following statement contains a magic number: if (string.IsNullOrEmpty (inFile)) {  	reader = Console.In;  	//TODO: Detect stdin encoding.  Cmd /U should open Unicode pipes.  }  else if (inFile.StartsWith ("http:") || inFile.StartsWith ("https:")) {  	var webreq = System.Net.HttpWebRequest.Create (inFile) as System.Net.HttpWebRequest;  	webreq.UseDefaultCredentials = true;  	webreq.Headers.Add (System.Net.HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webreq.Headers.Add ("Content-Encoding"' "UTF-8");  	webreq.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip;  	var webresp = webreq.GetResponse ();  	//TODO: extract encoding from webresp.Headers(?)  StreamReader?  	encoding = Encoding.UTF8;  	var fs = webresp.GetResponseStream ();  	reader = new System.IO.StreamReader (fs' true);  }  else {  	var fs = new System.IO.FileStream (inFile' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite' 32767);  	StreamReader sr = new System.IO.StreamReader (fs' true);  	encoding = sr.CurrentEncoding;  	endOfLineMark = GuessFromStream (fs' EoLFinder' endOfLineMark);  	delimiterGuess = GuessFromStream (fs' DelimFinder' delimiterGuess);  	reader = sr;  }  
Magic Number,My.Utilities,FileOps,C:\repos\Normanator_CsvPick\src\FileOps.cs,OpenInput,The following statement contains a magic number: if (inFile.StartsWith ("http:") || inFile.StartsWith ("https:")) {  	var webreq = System.Net.HttpWebRequest.Create (inFile) as System.Net.HttpWebRequest;  	webreq.UseDefaultCredentials = true;  	webreq.Headers.Add (System.Net.HttpRequestHeader.AcceptEncoding' "gzip'deflate");  	webreq.Headers.Add ("Content-Encoding"' "UTF-8");  	webreq.AutomaticDecompression = System.Net.DecompressionMethods.Deflate | System.Net.DecompressionMethods.GZip;  	var webresp = webreq.GetResponse ();  	//TODO: extract encoding from webresp.Headers(?)  StreamReader?  	encoding = Encoding.UTF8;  	var fs = webresp.GetResponseStream ();  	reader = new System.IO.StreamReader (fs' true);  }  else {  	var fs = new System.IO.FileStream (inFile' System.IO.FileMode.Open' System.IO.FileAccess.Read' System.IO.FileShare.ReadWrite' 32767);  	StreamReader sr = new System.IO.StreamReader (fs' true);  	encoding = sr.CurrentEncoding;  	endOfLineMark = GuessFromStream (fs' EoLFinder' endOfLineMark);  	delimiterGuess = GuessFromStream (fs' DelimFinder' delimiterGuess);  	reader = sr;  }  
Magic Number,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,The following statement contains a magic number: for (; argnum < args.Length; ++argnum) {  	// Already found a switch' now get its value  	if (current != null) {  		AddValue (current' args [argnum]);  		current = null;  		currSwitch = null;  		continue;  	}  	string argToTest = args [argnum];  	// In search of a switch' what test should we use?  	Func<string' ArgDef' bool> test = (s' _) => false;  	if (args [argnum].StartsWith ("/")) {  		test = etest;  		argToTest = argToTest.Substring (1);  	}  	else if (args [argnum].StartsWith ("--")) {  		test = ltest;  		argToTest = argToTest.Substring (2);  	}  	else if (args [argnum].StartsWith ("-")) {  		test = stest;  		argToTest = argToTest.Substring (1);  	}  	// Is there a def that matches?  	bool unmatched = true;  	foreach (var def in definitions) {  		if (test (argToTest' def)) {  			unmatched = false;  			current = def;  			currSwitch = args [argnum];  			if (def.ArgKind == ArgDef.Kind.Bool) {  				// Bools never need a follow-on parse  				AddValue (def' (object)true);  				current = null;  			}  			break;  		}  	}  	// end foreach def  	if (unmatched) {  		current = definitions.SingleOrDefault (d => d.UnSwitched);  		if (current != null) {  			AddValue (current' args [argnum]);  		}  		current = null;  	}  }  
Magic Number,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,The following statement contains a magic number: if (args [argnum].StartsWith ("/")) {  	test = etest;  	argToTest = argToTest.Substring (1);  }  else if (args [argnum].StartsWith ("--")) {  	test = ltest;  	argToTest = argToTest.Substring (2);  }  else if (args [argnum].StartsWith ("-")) {  	test = stest;  	argToTest = argToTest.Substring (1);  }  
Magic Number,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,The following statement contains a magic number: if (args [argnum].StartsWith ("--")) {  	test = ltest;  	argToTest = argToTest.Substring (2);  }  else if (args [argnum].StartsWith ("-")) {  	test = stest;  	argToTest = argToTest.Substring (1);  }  
Magic Number,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,Parse,The following statement contains a magic number: argToTest = argToTest.Substring (2);  
Missing Default,My.Utilities,ProgramArguments,C:\repos\Normanator_CsvPick\src\Handy\ProgramArguments.cs,AddValue,The following switch statement is missing a default case: switch (def.ArgKind) {  case ArgDef.Kind.Bool:  	av.Value = (bool)Convert.ChangeType (val' typeof(bool));  	break;  case ArgDef.Kind.Int:  	av.Value = (int)Convert.ChangeType (val' typeof(int));  	break;  case ArgDef.Kind.String:  	av.Value = (string)val;  	break;  }  
