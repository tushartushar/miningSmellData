Implementation smell,Namespace,Class,File,Method,Description
Long Statement,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The length of the statement  "		Console.WriteLine ("Usage: <ProgId> <Register in HKCU: true|false> <AppId> <OpenWithSwitch> <Unregister: true|false> <Ext1> [Ext2 [Ext3] ...]"); " is 144.
Empty Catch Block,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,UnregisterProgId,The method has an empty catch block.
Magic Number,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The following statement contains a magic number: if (args.Length < 6) {  	Console.WriteLine ("Usage: <ProgId> <Register in HKCU: true|false> <AppId> <OpenWithSwitch> <Unregister: true|false> <Ext1> [Ext2 [Ext3] ...]");  	Console.ReadLine ();  	return;  }  
Magic Number,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The following statement contains a magic number: try {  	string progId = args [0];  	bool registerInHKCU = bool.Parse (args [1]);  	string appId = args [2];  	string openWith = args [3];  	bool unregister = bool.Parse (args [4]);  	string[] associationsToRegister = args.Skip (5).ToArray ();  	if (registerInHKCU)  		classesRoot = Registry.CurrentUser.OpenSubKey (@"Software\Classes");  	else  		classesRoot = Registry.ClassesRoot;  	//First of all' unregister:  	Array.ForEach (associationsToRegister' assoc => UnregisterFileAssociation (progId' assoc));  	UnregisterProgId (progId);  	if (!unregister) {  		RegisterProgId (progId' appId' openWith);  		Array.ForEach (associationsToRegister' assoc => RegisterFileAssociation (progId' assoc));  	}  }  catch (Exception e) {  	Console.WriteLine (e);  	Console.ReadLine ();  }  
Magic Number,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The following statement contains a magic number: try {  	string progId = args [0];  	bool registerInHKCU = bool.Parse (args [1]);  	string appId = args [2];  	string openWith = args [3];  	bool unregister = bool.Parse (args [4]);  	string[] associationsToRegister = args.Skip (5).ToArray ();  	if (registerInHKCU)  		classesRoot = Registry.CurrentUser.OpenSubKey (@"Software\Classes");  	else  		classesRoot = Registry.ClassesRoot;  	//First of all' unregister:  	Array.ForEach (associationsToRegister' assoc => UnregisterFileAssociation (progId' assoc));  	UnregisterProgId (progId);  	if (!unregister) {  		RegisterProgId (progId' appId' openWith);  		Array.ForEach (associationsToRegister' assoc => RegisterFileAssociation (progId' assoc));  	}  }  catch (Exception e) {  	Console.WriteLine (e);  	Console.ReadLine ();  }  
Magic Number,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The following statement contains a magic number: try {  	string progId = args [0];  	bool registerInHKCU = bool.Parse (args [1]);  	string appId = args [2];  	string openWith = args [3];  	bool unregister = bool.Parse (args [4]);  	string[] associationsToRegister = args.Skip (5).ToArray ();  	if (registerInHKCU)  		classesRoot = Registry.CurrentUser.OpenSubKey (@"Software\Classes");  	else  		classesRoot = Registry.ClassesRoot;  	//First of all' unregister:  	Array.ForEach (associationsToRegister' assoc => UnregisterFileAssociation (progId' assoc));  	UnregisterProgId (progId);  	if (!unregister) {  		RegisterProgId (progId' appId' openWith);  		Array.ForEach (associationsToRegister' assoc => RegisterFileAssociation (progId' assoc));  	}  }  catch (Exception e) {  	Console.WriteLine (e);  	Console.ReadLine ();  }  
Magic Number,TaskbarDemo,RegistrationHelperMain,C:\repos\taurenshaman_psp\PSP.Run.2010\RegistrationHelper\RegistrationHelperMain.cs,Main,The following statement contains a magic number: try {  	string progId = args [0];  	bool registerInHKCU = bool.Parse (args [1]);  	string appId = args [2];  	string openWith = args [3];  	bool unregister = bool.Parse (args [4]);  	string[] associationsToRegister = args.Skip (5).ToArray ();  	if (registerInHKCU)  		classesRoot = Registry.CurrentUser.OpenSubKey (@"Software\Classes");  	else  		classesRoot = Registry.ClassesRoot;  	//First of all' unregister:  	Array.ForEach (associationsToRegister' assoc => UnregisterFileAssociation (progId' assoc));  	UnregisterProgId (progId);  	if (!unregister) {  		RegisterProgId (progId' appId' openWith);  		Array.ForEach (associationsToRegister' assoc => RegisterFileAssociation (progId' assoc));  	}  }  catch (Exception e) {  	Console.WriteLine (e);  	Console.ReadLine ();  }  
