Implementation smell,Namespace,Class,File,Method,Description
Magic Number,OrchardCore.Lucene,LuceneQueryService,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Lucene.Core\LuceneQueryService.cs,SearchAsync,The following statement contains a magic number: var size = sizeProperty?.Value<int>() ?? 50;
Magic Number,OrchardCore.Lucene.QueryProviders,FuzzyQueryProvider,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Lucene.Core\QueryProviders\FuzzyQueryProvider.cs,CreateQuery,The following statement contains a magic number: switch (first.Value.Type)              {                  case JTokenType.String:                      return new FuzzyQuery(new Term(first.Name' first.Value.ToString()));                  case JTokenType.Object:                      var obj = (JObject)first.Value;                        if (!obj.TryGetValue("value"' out var value))                      {                          throw new ArgumentException("Missing value in fuzzy query");                      }                        obj.TryGetValue("fuzziness"' out var fuzziness);                      obj.TryGetValue("prefix_length"' out var prefixLength);                      obj.TryGetValue("max_expansions"' out var maxExpansions);                        var fuzzyQuery = new FuzzyQuery(                          new Term(first.Name' value.Value<string>())'                          fuzziness?.Value<int>() ?? LevenshteinAutomata.MAXIMUM_SUPPORTED_DISTANCE'                          prefixLength?.Value<int>() ?? 0'                          maxExpansions?.Value<int>() ?? 50'                          true);                        if (obj.TryGetValue("boost"' out var boost))                      {                          fuzzyQuery.Boost = boost.Value<float>();                      }                        return fuzzyQuery;                  default: throw new ArgumentException("Invalid fuzzy query");              }
Missing Default,OrchardCore.Lucene.QueryProviders,RangeQueryProvider,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Lucene.Core\QueryProviders\RangeQueryProvider.cs,CreateQuery,The following switch statement is missing a default case: switch (element.Name.ToLowerInvariant())                          {                              case "gt":                                  gt = element.Value;                                  tokenType = gt.Type;                                  break;                              case "gte":                                  gt = element.Value;                                  tokenType = gt.Type;                                  includeLower = true;                                  break;                              case "lt":                                  lt = element.Value;                                  tokenType = lt.Type;                                  break;                              case "lte":                                  lt = element.Value;                                  tokenType = lt.Type;                                  includeUpper = true;                                  break;                              case "boost":                                  boost = element.Value.Value<float>();                                  break;                          }
