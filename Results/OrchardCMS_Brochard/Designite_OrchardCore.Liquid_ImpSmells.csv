Implementation smell,Namespace,Class,File,Method,Description
Complex Method,OrchardCore.Liquid.Services,SlugService,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Services\SlugService.cs,Slugify,Cyclomatic complexity of the method is 11
Long Statement,OrchardCore.Liquid.Drivers,LiquidPartDisplay,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Drivers\LiquidPartDisplay.cs,UpdateAsync,The length of the statement  "                    updater.ModelState.AddModelError(nameof(model.Liquid)' T["The Liquid Body doesn't contain a valid Liquid expression. Details: {0}"' string.Join(" "' errors)]); " is 159.
Long Statement,OrchardCore.Liquid.Filters,JsonFilter,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Filters\JsonFilter.cs,ProcessAsync,The length of the statement  "                    return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(input.Enumerate().Select(o => o.ToObjectValue())))); " is 129.
Magic Number,OrchardCore.Liquid.Services,LiquidTemplateManager,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Services\LiquidTemplateManager.cs,GetCachedTemplate,The following statement contains a magic number: var result = _memoryCache.GetOrCreate(source' (ICacheEntry e) =>              {                  if (!LiquidViewTemplate.TryParse(source' out var parsed' out errors))                  {                      // If the source string cannot be parsed' create a template that contains the parser errors                      LiquidViewTemplate.TryParse(String.Join(System.Environment.NewLine' errors)' out parsed' out errors);                  }                    // Define a default sliding expiration to prevent the                   // cache from being filled and still apply some micro-caching                  // in case the template is use commonly                  e.SetSlidingExpiration(TimeSpan.FromSeconds(30));                  return parsed;              });
Magic Number,OrchardCore.Liquid.Services,SlugService,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Services\SlugService.cs,Slugify,The following statement contains a magic number: slug = slug.Substring(0' 1000);
Magic Number,OrchardCore.Liquid.Services,SlugService,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Services\SlugService.cs,Slugify,The following statement contains a magic number: slug.Length > 1000
Missing Default,OrchardCore.Liquid.Filters,JsonFilter,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Liquid\Filters\JsonFilter.cs,ProcessAsync,The following switch statement is missing a default case: switch (input.Type)              {                  case FluidValues.Array:                      return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(input.Enumerate().Select(o => o.ToObjectValue()))));                    case FluidValues.Boolean:                      return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(input.ToBooleanValue())));                    case FluidValues.Nil:                      return new ValueTask<FluidValue>(StringValue.Create("null"));                    case FluidValues.Number:                      return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(input.ToNumberValue())));                    case FluidValues.DateTime:                  case FluidValues.Dictionary:                  case FluidValues.Object:                      return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(input.ToObjectValue())));                    case FluidValues.String:                      var stringValue = input.ToStringValue();                        if (string.IsNullOrWhiteSpace(stringValue))                      {                          return new ValueTask<FluidValue>(input);                      }                        return new ValueTask<FluidValue>(new StringValue(JsonConvert.SerializeObject(stringValue)));              }
