Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OrchardCore.FileStorage.AzureBlob,BlobFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs,TryCreateDirectoryAsync,The length of the statement  "            await placeholderBlob.UploadTextAsync("This is a directory marker file created by Orchard Core. It is safe to delete it."); " is 123.
Long Statement,OrchardCore.FileStorage.AzureBlob,BlobFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs,CopyFileAsync,The length of the statement  "                throw new FileStoreException($"Cannot copy file '{srcPath}' because a file already exists in the new path '{dstPath}'."); " is 121.
Long Statement,OrchardCore.FileStorage.AzureBlob,BlobFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs,CopyFileAsync,The length of the statement  "                throw new FileStoreException($"Error while copying file '{srcPath}'; copy operation failed with status {newBlob.CopyState.Status} and description {newBlob.CopyState.StatusDescription}."); " is 187.
Magic Number,OrchardCore.FileStorage.AzureBlob,BlobFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs,CopyFileAsync,The following statement contains a magic number: while (newBlob.CopyState.Status == CopyStatus.Pending)                  await Task.Delay(250);
Missing Default,OrchardCore.FileStorage.AzureBlob,BlobFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.FileStorage.AzureBlob\BlobFileStore.cs,GetDirectoryContentAsync,The following switch statement is missing a default case: switch (item)                      {                          case CloudBlobDirectory directoryItem:                              results.Add(new BlobDirectory(itemPath' _clock.UtcNow));                              break;                          case CloudBlockBlob blobItem:                              // Ignore directory marker files.                              if (itemName != _directoryMarkerFileName)                                  results.Add(new BlobFile(itemPath' blobItem.Properties));                              break;                      }
