Implementation smell,Namespace,Class,File,Method,Description
Long Method,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The method has 133 lines of code.
Long Parameter List,OrchardCore.Queries.Controllers,AdminController,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Controllers\AdminController.cs,AdminController,The method has 10 parameters. Parameters: displayManager' authorizationService' siteService' shapeFactory' stringLocalizer' htmlLocalizer' notifier' queryManager' querySources' session
Long Parameter List,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,TryParse,The method has 6 parameters. Parameters: sql' dialect' tablePrefix' query' parameters' messages
Long Statement,OrchardCore.Queries.Sql,SqlQuerySource,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlQuerySource.cs,ExecuteQueryAsync,The length of the statement  "            if (!SqlParser.TryParse(tokenizedQuery' dialect' _store.Configuration.TablePrefix' out var rawQuery' out var rawParameters' out var messages)) " is 142.
Long Statement,OrchardCore.Queries.Sql.Controllers,AdminController,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\Controllers\AdminController.cs,Query,The length of the statement  "            if (SqlParser.TryParse(tokenizedQuery' dialect' _store.Configuration.TablePrefix' out var rawQuery' out var rawParameters' out var messages)) " is 141.
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "!<"' "!>"' "LIKE"' "IN");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(7' "^"' "&"' "|");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(6' NOT);
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(5' "AND");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(4' "OR");
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateSelectorList(selectStatement.ChildNodes[2]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateFromClause(selectStatement.ChildNodes[3]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateWhereClause(selectStatement.ChildNodes[4]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateGroupClause(selectStatement.ChildNodes[5]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateHavingClause(selectStatement.ChildNodes[6]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateOrderClause(selectStatement.ChildNodes[7]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateOrderClause,The following statement contains a magic number: var idList = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateGroupClause,The following statement contains a magic number: var idList = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(AddParameter(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(AddParameter(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(AddParameter(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      EvaluateSelectStatement(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(AddParameter(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(AddParameter(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(AddParameter(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      EvaluateSelectStatement(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(AddParameter(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(AddParameter(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(AddParameter(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      EvaluateSelectStatement(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(AddParameter(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(AddParameter(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(AddParameter(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      EvaluateSelectStatement(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: var joins = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: if (joins.ChildNodes.Count != 0)              {                  _builder.AppendLine();                    var jointKindOpt = joins.ChildNodes[0];                    if (jointKindOpt.ChildNodes.Count > 0)                  {                      _builder.Append(jointKindOpt.ChildNodes[0].Term.Name);                  }                    _builder.Append(" JOIN ");                    EvaluateAliasList(joins.ChildNodes[2]);                    _builder.Append(" ON ");                  _modes.Push(FormattingModes.SelectClause);                    EvaluateId(joins.ChildNodes[4]);                    _builder.Append(" = ");                    EvaluateId(joins.ChildNodes[6]);              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: if (joins.ChildNodes.Count != 0)              {                  _builder.AppendLine();                    var jointKindOpt = joins.ChildNodes[0];                    if (jointKindOpt.ChildNodes.Count > 0)                  {                      _builder.Append(jointKindOpt.ChildNodes[0].Term.Name);                  }                    _builder.Append(" JOIN ");                    EvaluateAliasList(joins.ChildNodes[2]);                    _builder.Append(" ON ");                  _modes.Push(FormattingModes.SelectClause);                    EvaluateId(joins.ChildNodes[4]);                    _builder.Append(" = ");                    EvaluateId(joins.ChildNodes[6]);              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: if (joins.ChildNodes.Count != 0)              {                  _builder.AppendLine();                    var jointKindOpt = joins.ChildNodes[0];                    if (jointKindOpt.ChildNodes.Count > 0)                  {                      _builder.Append(jointKindOpt.ChildNodes[0].Term.Name);                  }                    _builder.Append(" JOIN ");                    EvaluateAliasList(joins.ChildNodes[2]);                    _builder.Append(" ON ");                  _modes.Push(FormattingModes.SelectClause);                    EvaluateId(joins.ChildNodes[4]);                    _builder.Append(" = ");                    EvaluateId(joins.ChildNodes[6]);              }
Missing Default,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following switch statement is missing a default case: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(AddParameter(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(AddParameter(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(AddParameter(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      EvaluateSelectStatement(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "*":                      _builder.Append("*");                      break;              }
Missing Default,OrchardCore.Queries.Sql,SqlParser,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateId,The following switch statement is missing a default case: switch (_modes.Peek())              {                  case FormattingModes.SelectClause:                      EvaluateSelectId(id);                      break;                  case FormattingModes.FromClause:                      EvaluateFromId(id);                      break;              }
