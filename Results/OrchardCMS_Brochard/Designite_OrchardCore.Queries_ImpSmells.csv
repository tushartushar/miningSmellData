Implementation smell,Namespace,Class,File,Method,Description
Long Method,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The method has 141 lines of code.
Complex Method,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,Cyclomatic complexity of the method is 9
Complex Method,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,Cyclomatic complexity of the method is 18
Long Parameter List,OrchardCore.Queries.Controllers,AdminController,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Controllers\AdminController.cs,AdminController,The method has 9 parameters. Parameters: displayManager' authorizationService' siteService' shapeFactory' htmlLocalizer' notifier' queryManager' querySources' session
Long Parameter List,OrchardCore.Queries.Services,QueryManager,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Services\QueryManager.cs,QueryManager,The method has 5 parameters. Parameters: signal' session' sessionHelper' memoryCache' querySources
Long Parameter List,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,TryParse,The method has 6 parameters. Parameters: sql' dialect' tablePrefix' parameters' query' messages
Long Statement,OrchardCore.Queries,Startup,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Startup.cs,Configure,The length of the statement  "                defaults: new { controller = typeof(Sql.Controllers.AdminController).ControllerName()' action = nameof(Sql.Controllers.AdminController.Query) } " is 143.
Long Statement,OrchardCore.Queries.Liquid,QueriesLiquidTemplateEventHandler,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Liquid\QueriesLiquidTemplateEventHandler.cs,RenderingAsync,The length of the statement  "            context.SetValue("Queries"' new LiquidPropertyAccessor(async name => FluidValue.Create(await _queryManager.GetQueryAsync(name)))); " is 130.
Long Statement,OrchardCore.Queries.Recipes,QueryStep,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Recipes\QueryStep.cs,ExecuteAsync,The length of the statement  "                    _logger.LogError("Could not find query source: '{QuerySource}'. The query '{QueryName}' will not be imported."' sourceName' token[nameof(Query.Name)].ToString()); " is 162.
Long Statement,OrchardCore.Queries.Sql,SqlQuerySource,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlQuerySource.cs,ExecuteQueryAsync,The length of the statement  "            if (!SqlParser.TryParse(tokenizedQuery' dialect' _session.Store.Configuration.TablePrefix' parameters' out var rawQuery' out var messages)) " is 139.
Long Statement,OrchardCore.Queries.Sql.Controllers,AdminController,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\Controllers\AdminController.cs,Query,The length of the statement  "            var tokenizedQuery = await _liquidTemplateManager.RenderAsync(model.DecodedQuery' NullEncoder.Default' templateContext); " is 120.
Long Statement,OrchardCore.Queries.Sql.Controllers,AdminController,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\Controllers\AdminController.cs,Query,The length of the statement  "            if (SqlParser.TryParse(tokenizedQuery' dialect' _store.Configuration.TablePrefix' parameters' out var rawQuery' out var messages)) " is 130.
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(10' "*"' "/"' "%");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(9' "+"' "-");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(8' "="' ">"' "<"' ">="' "<="' "<>"' "!="' "!<"' "!>"' "LIKE"' "IN");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(7' "^"' "&"' "|");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(6' NOT);
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(5' "AND");
Magic Number,OrchardCore.Queries.Sql,SqlGrammar,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlGrammar.cs,SqlGrammar,The following statement contains a magic number: RegisterOperators(4' "OR");
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateSelectorList(selectStatement.ChildNodes[2]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateFromClause(selectStatement.ChildNodes[3]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateWhereClause(selectStatement.ChildNodes[4]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateGroupClause(selectStatement.ChildNodes[5]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateHavingClause(selectStatement.ChildNodes[6]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateOrderClause(selectStatement.ChildNodes[7]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateLimitClause(selectStatement.ChildNodes[8]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateSelectStatement,The following statement contains a magic number: EvaluateOffsetClause(selectStatement.ChildNodes[9]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateOrderClause,The following statement contains a magic number: var idList = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateGroupClause,The following statement contains a magic number: var idList = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following statement contains a magic number: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: var joins = parseTreeNode.ChildNodes[2];
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: EvaluateAliasList(joinStatement.ChildNodes[2]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: EvaluateId(joinStatement.ChildNodes[4]);
Magic Number,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateFromClause,The following statement contains a magic number: EvaluateId(joinStatement.ChildNodes[6]);
Magic Number,OrchardCore.Queries.Sql.GraphQL.Queries,SqlQueryFieldTypeProvider,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\GraphQL\SqlQueryFieldTypeProvider.cs,BuildAsync,The following statement contains a magic number: var contentType = type.Remove(0' 12);
Missing Default,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateExpression,The following switch statement is missing a default case: switch (parseTreeNode.Term.Name)              {                  case "unExpr":                      _builder.Append(parseTreeNode.ChildNodes[0].Term.Name);                      EvaluateExpression(parseTreeNode.ChildNodes[1]);                      break;                  case "binExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      _builder.Append(parseTreeNode.ChildNodes[1].ChildNodes[0].Term.Name).Append(" ");                      EvaluateExpression(parseTreeNode.ChildNodes[2]);                      break;                  case "betweenExpr":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" ");                      if (parseTreeNode.ChildNodes[1].ChildNodes.Count > 0)                      {                          _builder.Append("NOT ");                      }                      _builder.Append("BETWEEN ");                      EvaluateExpression(parseTreeNode.ChildNodes[3]);                      _builder.Append(" ");                      _builder.Append("AND ");                      EvaluateExpression(parseTreeNode.ChildNodes[5]);                      break;                  // Term and Tuple are transient' to they appear directly                  case "Id":                      EvaluateId(parseTreeNode);                      break;                  case "boolean":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.ChildNodes[0].Term.Name == "TRUE"));                      break;                  case "string":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.ValueString));                      break;                  case "number":                      _builder.Append(_dialect.GetSqlValue(parseTreeNode.Token.Value));                      break;                  case "funCall":                      EvaluateFunCall(parseTreeNode);                      break;                  case "exprList":                      _builder.Append("(");                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(")");                      break;                  case "parSelectStmt":                      _builder.Append("(");                      _builder.Append(EvaluateSelectStatement(parseTreeNode.ChildNodes[0]));                      _builder.Append(")");                      break;                  case "inStmt":                      EvaluateExpression(parseTreeNode.ChildNodes[0]);                      _builder.Append(" IN (");                      EvaluateExpressionList(parseTreeNode.ChildNodes[2]);                      _builder.Append(")");                      break;                  case "parameter":                      var name = parseTreeNode.ChildNodes[1].ChildNodes[0].Token.ValueString;                        _builder.Append("@" + name);                                            if (_parameters != null && !_parameters.ContainsKey(name))                      {                          // If a parameter is not set and there is no default value' report it                          if (parseTreeNode.ChildNodes.Count < 3)                          {                              throw new SqlParserException("Missing parameters: " + name);                          }                          else                          {                              if (parseTreeNode.ChildNodes[3].Token != null)                              {                                  _parameters[name] = parseTreeNode.ChildNodes[3].Token.Value;                              }                              else                              {                                  // example: true                                  if (parseTreeNode.ChildNodes[3].ChildNodes[0].Token != null)                                  {                                      _parameters[name] = parseTreeNode.ChildNodes[3].ChildNodes[0].Token.Value;                                  }                                  else                                  {                                      throw new SqlParserException("Unsupported syntax for parameter: " + name);                                  }                              }                          }                      }                        break;                  case "*":                      _builder.Append("*");                      break;              }
Missing Default,OrchardCore.Queries.Sql,SqlParser,C:\research\architectureSmells\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Queries\Sql\SqlParser.cs,EvaluateId,The following switch statement is missing a default case: switch (_modes.Peek())              {                  case FormattingModes.SelectClause:                      EvaluateSelectId(id);                      break;                  case FormattingModes.FromClause:                      EvaluateFromId(id);                      break;              }
