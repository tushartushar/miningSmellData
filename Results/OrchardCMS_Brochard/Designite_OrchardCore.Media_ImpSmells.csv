Implementation smell,Namespace,Class,File,Method,Description
Long Statement,OrchardCore.Media,Startup,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Startup.cs,GetMediaPath,The length of the statement  "            return Path.Combine(shellOptions.ShellsApplicationDataPath' shellOptions.ShellsContainerName' shellSettings.Name' AssetsPath); " is 126.
Long Statement,OrchardCore.Media.Controllers,AdminController,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Controllers\AdminController.cs,CreateFolder,The length of the statement  "                return StatusCode(StatusCodes.Status403Forbidden' "Cannot create folder because a file already exists with the same name"); " is 123.
Long Statement,OrchardCore.Media.Drivers,MediaFieldDisplayDriver,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Drivers\MediaFieldDriver.cs,UpdateAsync,The length of the statement  "                    updater.ModelState.AddModelError(Prefix' S["{0}: Selecting multiple media is forbidden."' context.PartFieldDefinition.DisplayName()]); " is 134.
Long Statement,OrchardCore.Media.Services,MediaFileStore,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Services\MediaFileStore.cs,MapPublicUrlToPath,The length of the statement  "                throw new ArgumentOutOfRangeException(nameof(publicUrl)' "The specified URL is not inside the URL scope of the file store."); " is 125.
Magic Number,OrchardCore.Media,Startup,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Startup.cs,ConfigureServices,The following statement contains a magic number: services.AddImageSharpCore(                      options =>                      {                          options.Configuration = Configuration.Default;                          options.MaxBrowserCacheDays = 7;                          options.MaxCacheDays = 365;                          options.OnValidate = validation =>                          {                              // Force some parameters to prevent disk filling.                              // For more advanced resize parameters the usage of profiles will be necessary.                              // This can be done with a custom IImageWebProcessor implementation that would                               // accept profile names.                                validation.Commands.Remove(ResizeWebProcessor.Compand);                              validation.Commands.Remove(ResizeWebProcessor.Sampler);                              validation.Commands.Remove(ResizeWebProcessor.Xy);                              validation.Commands.Remove(ResizeWebProcessor.Anchor);                              validation.Commands.Remove(BackgroundColorWebProcessor.Color);                                if (validation.Commands.Count > 0)                              {                                  if (!validation.Commands.ContainsKey(ResizeWebProcessor.Mode))                                  {                                      validation.Commands[ResizeWebProcessor.Mode] = "max";                                  }                                    if (validation.Commands.TryGetValue(ResizeWebProcessor.Width' out var width))                                  {                                      if (Int32.TryParse(width' out var parsedWidth))                                      {                                          if (Array.BinarySearch<int>(Sizes' parsedWidth) == -1)                                          {                                              validation.Commands.Clear();                                          }                                      }                                      else                                      {                                          validation.Commands.Remove(ResizeWebProcessor.Width);                                      }                                  }                                    if (validation.Commands.TryGetValue(ResizeWebProcessor.Height' out var height))                                  {                                      if (Int32.TryParse(height' out var parsedHeight))                                      {                                          if (Array.BinarySearch<int>(Sizes' parsedHeight) == -1)                                          {                                              validation.Commands.Clear();                                          }                                      }                                      else                                      {                                          validation.Commands.Remove(ResizeWebProcessor.Height);                                      }                                  }                              }                          };                          options.OnProcessed = _ => { };                          options.OnPrepareResponse = _ => { };                      })                      .SetUriParser<QueryCollectionUriParser>()                      .SetCache<PhysicalFileSystemCache>()                      .SetAsyncKeyLock<AsyncKeyLock>()                      .AddResolver<MediaFileSystemResolver>()                      .AddProcessor<ResizeWebProcessor>();
Magic Number,OrchardCore.Media,Startup,C:\repos\OrchardCMS_Brochard\src\OrchardCore.Modules\OrchardCore.Media\Startup.cs,ConfigureServices,The following statement contains a magic number: services.AddImageSharpCore(                      options =>                      {                          options.Configuration = Configuration.Default;                          options.MaxBrowserCacheDays = 7;                          options.MaxCacheDays = 365;                          options.OnValidate = validation =>                          {                              // Force some parameters to prevent disk filling.                              // For more advanced resize parameters the usage of profiles will be necessary.                              // This can be done with a custom IImageWebProcessor implementation that would                               // accept profile names.                                validation.Commands.Remove(ResizeWebProcessor.Compand);                              validation.Commands.Remove(ResizeWebProcessor.Sampler);                              validation.Commands.Remove(ResizeWebProcessor.Xy);                              validation.Commands.Remove(ResizeWebProcessor.Anchor);                              validation.Commands.Remove(BackgroundColorWebProcessor.Color);                                if (validation.Commands.Count > 0)                              {                                  if (!validation.Commands.ContainsKey(ResizeWebProcessor.Mode))                                  {                                      validation.Commands[ResizeWebProcessor.Mode] = "max";                                  }                                    if (validation.Commands.TryGetValue(ResizeWebProcessor.Width' out var width))                                  {                                      if (Int32.TryParse(width' out var parsedWidth))                                      {                                          if (Array.BinarySearch<int>(Sizes' parsedWidth) == -1)                                          {                                              validation.Commands.Clear();                                          }                                      }                                      else                                      {                                          validation.Commands.Remove(ResizeWebProcessor.Width);                                      }                                  }                                    if (validation.Commands.TryGetValue(ResizeWebProcessor.Height' out var height))                                  {                                      if (Int32.TryParse(height' out var parsedHeight))                                      {                                          if (Array.BinarySearch<int>(Sizes' parsedHeight) == -1)                                          {                                              validation.Commands.Clear();                                          }                                      }                                      else                                      {                                          validation.Commands.Remove(ResizeWebProcessor.Height);                                      }                                  }                              }                          };                          options.OnProcessed = _ => { };                          options.OnPrepareResponse = _ => { };                      })                      .SetUriParser<QueryCollectionUriParser>()                      .SetCache<PhysicalFileSystemCache>()                      .SetAsyncKeyLock<AsyncKeyLock>()                      .AddResolver<MediaFileSystemResolver>()                      .AddProcessor<ResizeWebProcessor>();
