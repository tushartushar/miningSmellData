Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,OrchardCore.Recipes.Services,RecipeExecutor,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Recipes.Implementations\Services\RecipeExecutor.cs,RecipeExecutor,The method has 8 parameters. Parameters: recipeEventHandlers' recipeStore' recipeOptions' applicationLifetime' shellSettings' orchardHost' logger' localizer
Magic Number,OrchardCore.Recipes.Services,RecipeExecutor,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Recipes.Implementations\Services\RecipeExecutor.cs,ExecuteAsync,The following statement contains a magic number: try              {                  _environmentMethodProvider = new ParametersMethodProvider(environment);                    var result = new RecipeResult { ExecutionId = executionId };                    await _recipeStore.CreateAsync(result);                    using (StreamReader file = File.OpenText(recipeDescriptor.RecipeFileInfo.PhysicalPath))                  {                      using (var reader = new JsonTextReader(file))                      {                          // Go to Steps' then iterate.                          while (reader.Read())                          {                              if (reader.Path == "variables")                              {                                  reader.Read();                                    var variables = JObject.Load(reader);                                  _variablesMethodProvider = new VariablesMethodProvider(variables);                              }                                if (reader.Path == "steps" && reader.TokenType == JsonToken.StartArray)                              {                                  while (reader.Read() && reader.Depth > 1)                                  {                                      if (reader.Depth == 2)                                      {                                          var child = JObject.Load(reader);                                            var recipeStep = new RecipeExecutionContext                                          {                                              Name = child.Value<string>("name")'                                              Step = child'                                              ExecutionId = executionId'                                              Environment = environment                                          };                                            var stepResult = new RecipeStepResult { StepName = recipeStep.Name };                                          result.Steps.Add(stepResult);                                          await _recipeStore.UpdateAsync(result);                                            ExceptionDispatchInfo capturedException = null;                                          try                                          {                                              await ExecuteStepAsync(recipeStep);                                              stepResult.IsSuccessful = true;                                          }                                          catch(Exception e)                                          {                                              stepResult.IsSuccessful = false;                                              stepResult.ErrorMessage = e.ToString();                                                // Because we can't do some async processing the in catch or finally                                              // blocks' we store the exception to throw it later.                                                capturedException = ExceptionDispatchInfo.Capture(e);                                          }                                            stepResult.IsCompleted = true;                                          await _recipeStore.UpdateAsync(result);                                            if (stepResult.IsSuccessful == false)                                          {                                              capturedException.Throw();                                          }                                      }                                  }                              }                          }                      }                  }                    await _recipeEventHandlers.InvokeAsync(x => x.RecipeExecutedAsync(executionId' recipeDescriptor)' Logger);                    return executionId;              }              catch (Exception)              {                  await _recipeEventHandlers.InvokeAsync(x => x.ExecutionFailedAsync(executionId' recipeDescriptor)' Logger);                    throw;              }
Missing Default,OrchardCore.Recipes.Services,RecipeExecutor,C:\repos\OrchardCMS_Brochard\src\OrchardCore\OrchardCore.Recipes.Implementations\Services\RecipeExecutor.cs,EvaluateJsonTree,The following switch statement is missing a default case: switch (node.Type)              {                  case JTokenType.Array:                      var array = (JArray)node;                      for (var i=0; i < array.Count; i++)                      {                          EvaluateJsonTree(scriptingManager' array[i]);                      }                      break;                  case JTokenType.Object:                      foreach (var property in (JObject)node)                      {                          EvaluateJsonTree(scriptingManager' property.Value);                      }                      break;                    case JTokenType.String:                        var value = node.Value<string>();                        // Evaluate the expression while the result is another expression                      while (value.StartsWith("[") && value.EndsWith("]"))                      {                          value = value.Trim('['' ']');                          value = (scriptingManager.Evaluate(value) ?? "").ToString();                          ((JValue)node).Value = value;                      }                      break;              }
