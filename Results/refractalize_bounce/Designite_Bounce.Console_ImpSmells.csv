Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Bounce.Console,BounceAssemblyRunner,C:\repos\refractalize_bounce\Bounce.Console\BounceAssemblyRunner.cs,Run,Cyclomatic complexity of the method is 8
Long Statement,Bounce.Console,BounceAssemblyRunner,C:\repos\refractalize_bounce\Bounce.Console\BounceAssemblyRunner.cs,RunBounce,The length of the statement  "				var exitCode = (int) runnerType.GetMethod("Run").Invoke(runner' new object[] {bounceDirectory' workingDirectory' arguments}); " is 125.
Long Statement,Bounce.Console,TargetsAssemblyNotFoundException,C:\repos\refractalize_bounce\Bounce.Console\TargetsAssemblyNotFoundException.cs,Explain,The length of the statement  "            writer.WriteLine(String.Format(@"unable to find {0} assembly in this or any parent directory"' TargetsAssemblyFinder.TargetsDllPath)); " is 134.
Magic Number,Bounce.Console,TargetsAssemblyArgumentsParser,C:\repos\refractalize_bounce\Bounce.Console\TargetsAssemblyArgumentsParser.cs,TryGetTargetsFromArguments,The following statement contains a magic number: if (args.Length > 0)              {                  var firstArg = args[0];                  _bounceDir = "bounceDir";                  if (firstArg.StartsWith("/" + _bounceDir + ":"))                  {                      var remainingArgs = new string[args.Length - 1];                      Array.Copy(args' 1' remainingArgs' 0' remainingArgs.Length);                      optionsAndArguments.BounceDirectory = firstArg.Substring(("/" + _bounceDir + ":").Length);                      optionsAndArguments.RemainingArguments = remainingArgs;                      optionsAndArguments.WorkingDirectory = Directory.GetCurrentDirectory();                  }                  else if (firstArg == "/" + _bounceDir)                  {                      var remainingArgs = new string[args.Length - 2];                      Array.Copy(args' 2' remainingArgs' 0' remainingArgs.Length);                      optionsAndArguments.BounceDirectory = args[1];                      optionsAndArguments.RemainingArguments = remainingArgs;                      optionsAndArguments.WorkingDirectory = Directory.GetCurrentDirectory();                  }              }
Magic Number,Bounce.Console,TargetsAssemblyArgumentsParser,C:\repos\refractalize_bounce\Bounce.Console\TargetsAssemblyArgumentsParser.cs,TryGetTargetsFromArguments,The following statement contains a magic number: if (args.Length > 0)              {                  var firstArg = args[0];                  _bounceDir = "bounceDir";                  if (firstArg.StartsWith("/" + _bounceDir + ":"))                  {                      var remainingArgs = new string[args.Length - 1];                      Array.Copy(args' 1' remainingArgs' 0' remainingArgs.Length);                      optionsAndArguments.BounceDirectory = firstArg.Substring(("/" + _bounceDir + ":").Length);                      optionsAndArguments.RemainingArguments = remainingArgs;                      optionsAndArguments.WorkingDirectory = Directory.GetCurrentDirectory();                  }                  else if (firstArg == "/" + _bounceDir)                  {                      var remainingArgs = new string[args.Length - 2];                      Array.Copy(args' 2' remainingArgs' 0' remainingArgs.Length);                      optionsAndArguments.BounceDirectory = args[1];                      optionsAndArguments.RemainingArguments = remainingArgs;                      optionsAndArguments.WorkingDirectory = Directory.GetCurrentDirectory();                  }              }
