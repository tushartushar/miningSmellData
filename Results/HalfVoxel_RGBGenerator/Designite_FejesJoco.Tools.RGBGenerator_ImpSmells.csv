Implementation smell,Namespace,Class,File,Method,Description
Long Method,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The method has 127 lines of code.
Long Method,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The method has 182 lines of code.
Long Method,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The method has 200 lines of code.
Long Method,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,changeQueue,The method has 105 lines of code.
Complex Method,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,Cyclomatic complexity of the method is 17
Complex Method,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,Cyclomatic complexity of the method is 23
Complex Method,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,Cyclomatic complexity of the method is 17
Long Statement,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The length of the statement  "            //var checkpoints = Enumerable.Range(1' NumFrames).ToDictionary(i => (long)i * colors.Count / NumFrames - 1' i => i - 1); " is 121.
Long Statement,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The length of the statement  "					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough " is 128.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The length of the statement  "				RGB rounded = new RGB ((c.R >> BlockOffset) & BlockMask' (c.G >> BlockOffset) & BlockMask' (c.B >> BlockOffset) & BlockMask); " is 125.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The length of the statement  "					RGB mx = new RGB ((expanded.R << BlockOffset) + BlockMask' (expanded.G << BlockOffset) + BlockMask' (expanded.B << BlockOffset) + BlockMask); " is 141.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The length of the statement  "								bestAfterFirstIndex = (int)Math.Ceiling(System.Math.Pow ((System.Math.Pow (count' 1.0 / 3) + 1)' 3));//count + st.Count; " is 120.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The length of the statement  "					throw new System.Exception ("Could not remove pixel from " + bestBlock.ToString() + " (was found in " + bestBlock.ToString()+")"); " is 130.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The length of the statement  "					//System.Console.WriteLine (count + " its " + bestAfter + " " + tot + " " + queue.Count + " " + pixelBlocks [bestPixel.block.R' bestPixel.block.G' bestPixel.block.B].Count); " is 173.
Long Statement,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,changeQueue,The length of the statement  "						pixelBlocks [(r / np.Neighbors.Length) & 0x1F' (g / np.Neighbors.Length) & 0x1F' (b / np.Neighbors.Length) & 0x1F].Add (p); " is 123.
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args.Length != 10)              {                  Console.WriteLine("There must be exactly 10 arguments given!");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: for (var i = 0; i <= 24; i++)              {                  twopows.Add(p.ToString());                  p *= 2;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: for (var i = 0; i <= 24; i++)              {                  twopows.Add(p.ToString());                  p *= 2;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (/*!twopows.Contains(args[0]) ||*/ !int.TryParse(args[0]' out NumColors) || NumColors > 256)              {                  Console.WriteLine("[colors] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (/*!twopows.Contains(args[2]) ||*/ !int.TryParse(args[2]' out Height))              {                  Console.WriteLine("[height] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (!int.TryParse(args[3]' out StartX))              {                  Console.WriteLine("[startx] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (!int.TryParse(args[4]' out StartY))              {                  Console.WriteLine("[starty] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (!int.TryParse(args[5]' out NumFrames))              {                  Console.WriteLine("[frames] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (!int.TryParse(args[6]' out seed))              {                  Console.WriteLine("[seed] is an invalid number");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (!Regex.IsMatch(args[7]' "^[01]{8}$"))              {                  Console.WriteLine("[neighbors] is not given according to the rules");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: NeighX = Enumerable.Range(0' 8).Where(i => args[7][i] == '1').Select(i => nx[i]).ToArray();
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: NeighX = Enumerable.Range(0' 8).Where(i => args[7][i] == '1').Select(i => nx[i]).ToArray();
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: NeighY = Enumerable.Range(0' 8).Where(i => args[7][i] == '1').Select(i => ny[i]).ToArray();
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: NeighY = Enumerable.Range(0' 8).Where(i => args[7][i] == '1').Select(i => ny[i]).ToArray();
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[8] == "rnd")                  Sorter = new RandomComparer();              else if (args[8].StartsWith("hue-"))              {                  int hueshift;                  if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)                  {                      Console.WriteLine("[sorting] has an invalid hue parameter");                      return false;                  }                  Sorter = new HueComparer(hueshift);  			}else if (args[8].StartsWith("lum-"))  			{  				int hueshift;  				if (!int.TryParse(args[8].Substring(4)' out hueshift) || hueshift < 0 || hueshift > 360)  				{  					Console.WriteLine("[sorting] has an invalid hue parameter");  					return false;  				}  				Sorter = new LumComparer(hueshift);  			} else              {                  Console.WriteLine("[sorting] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[9] == "one")                  Algorithm = new OneNeighborSqAlgorithm();              else if (args[9] == "avg")                  Algorithm = new AverageNeighborAlgorithm();              else if (args[9] == "avgsq")                  Algorithm = new AverageNeighborSqAlgorithm();              else              {                  Console.WriteLine("[algo] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[9] == "one")                  Algorithm = new OneNeighborSqAlgorithm();              else if (args[9] == "avg")                  Algorithm = new AverageNeighborAlgorithm();              else if (args[9] == "avgsq")                  Algorithm = new AverageNeighborSqAlgorithm();              else              {                  Console.WriteLine("[algo] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,parseArgs,The following statement contains a magic number: if (args[9] == "one")                  Algorithm = new OneNeighborSqAlgorithm();              else if (args[9] == "avg")                  Algorithm = new AverageNeighborAlgorithm();              else if (args[9] == "avgsq")                  Algorithm = new AverageNeighborSqAlgorithm();              else              {                  Console.WriteLine("[algo] is not one of the allowed values");                  return false;              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var r = 0; r < NumColors; r++) {  				byte R = (byte)(r * 255 / (NumColors - 1));  				for (var g = 0; g < NumColors; g++) {  					byte G = (byte)(g * 255 / (NumColors - 1));  					for (var b = 0; b < NumColors; b++) {  						colors[r*NumColors*NumColors + g*NumColors + b] = new RGB {  							R = R'  							G = G'  							B = (byte)(b * 255 / (NumColors - 1))  						};  					}  				}  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var r = 0; r < NumColors; r++) {  				byte R = (byte)(r * 255 / (NumColors - 1));  				for (var g = 0; g < NumColors; g++) {  					byte G = (byte)(g * 255 / (NumColors - 1));  					for (var b = 0; b < NumColors; b++) {  						colors[r*NumColors*NumColors + g*NumColors + b] = new RGB {  							R = R'  							G = G'  							B = (byte)(b * 255 / (NumColors - 1))  						};  					}  				}  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var r = 0; r < NumColors; r++) {  				byte R = (byte)(r * 255 / (NumColors - 1));  				for (var g = 0; g < NumColors; g++) {  					byte G = (byte)(g * 255 / (NumColors - 1));  					for (var b = 0; b < NumColors; b++) {  						colors[r*NumColors*NumColors + g*NumColors + b] = new RGB {  							R = R'  							G = G'  							B = (byte)(b * 255 / (NumColors - 1))  						};  					}  				}  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < colors.Length; i++)              {                  // give progress report to the impatient user                  if (i % 4096 == 0)                  {                      //Algorithm.Queue.Compress();  					Console.WriteLine ("{0:P}' queue size {1}"' (double)i / Width / Height' Algorithm.Count);                  }                    // run the algorithm                  Algorithm.Place(colors[i]);                    // save a checkpoint if needed    				if (checkpointIndex < checkpoints.Count && checkpoints[checkpointIndex] == i) //checkpoints.TryGetValue(i' out chkidx))                  {  					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough  					PNGDoneEvent.WaitOne ();    					pngImageIndex = checkpointIndex;  					checkpointIndex++;                        // create the image                      if (img == null) img = new Bitmap(Width' Height' PixelFormat.Format24bppRgb);                      bitmapData = img.LockBits(new Rectangle(0' 0' Width' Height)' ImageLockMode.WriteOnly' PixelFormat.Format24bppRgb);    					int stride = bitmapData.Stride;  					if (ibytes == null) {  						ibytes = new byte[stride * bitmapData.Height];  					}                          for (var y = 0; y < Height; y++)                      {                          for (var x = 0; x < Width; x++)                          {                              var c = Image[y * Width + x].Color;  							ibytes[y * stride + x * 3 + 2] = c.R;  							ibytes[y * stride + x * 3 + 1] = c.G;  							ibytes[y * stride + x * 3 + 0] = c.B;                          }                      }    					runPNGEvent.Set ();                  }              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < colors.Length; i++)              {                  // give progress report to the impatient user                  if (i % 4096 == 0)                  {                      //Algorithm.Queue.Compress();  					Console.WriteLine ("{0:P}' queue size {1}"' (double)i / Width / Height' Algorithm.Count);                  }                    // run the algorithm                  Algorithm.Place(colors[i]);                    // save a checkpoint if needed    				if (checkpointIndex < checkpoints.Count && checkpoints[checkpointIndex] == i) //checkpoints.TryGetValue(i' out chkidx))                  {  					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough  					PNGDoneEvent.WaitOne ();    					pngImageIndex = checkpointIndex;  					checkpointIndex++;                        // create the image                      if (img == null) img = new Bitmap(Width' Height' PixelFormat.Format24bppRgb);                      bitmapData = img.LockBits(new Rectangle(0' 0' Width' Height)' ImageLockMode.WriteOnly' PixelFormat.Format24bppRgb);    					int stride = bitmapData.Stride;  					if (ibytes == null) {  						ibytes = new byte[stride * bitmapData.Height];  					}                          for (var y = 0; y < Height; y++)                      {                          for (var x = 0; x < Width; x++)                          {                              var c = Image[y * Width + x].Color;  							ibytes[y * stride + x * 3 + 2] = c.R;  							ibytes[y * stride + x * 3 + 1] = c.G;  							ibytes[y * stride + x * 3 + 0] = c.B;                          }                      }    					runPNGEvent.Set ();                  }              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < colors.Length; i++)              {                  // give progress report to the impatient user                  if (i % 4096 == 0)                  {                      //Algorithm.Queue.Compress();  					Console.WriteLine ("{0:P}' queue size {1}"' (double)i / Width / Height' Algorithm.Count);                  }                    // run the algorithm                  Algorithm.Place(colors[i]);                    // save a checkpoint if needed    				if (checkpointIndex < checkpoints.Count && checkpoints[checkpointIndex] == i) //checkpoints.TryGetValue(i' out chkidx))                  {  					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough  					PNGDoneEvent.WaitOne ();    					pngImageIndex = checkpointIndex;  					checkpointIndex++;                        // create the image                      if (img == null) img = new Bitmap(Width' Height' PixelFormat.Format24bppRgb);                      bitmapData = img.LockBits(new Rectangle(0' 0' Width' Height)' ImageLockMode.WriteOnly' PixelFormat.Format24bppRgb);    					int stride = bitmapData.Stride;  					if (ibytes == null) {  						ibytes = new byte[stride * bitmapData.Height];  					}                          for (var y = 0; y < Height; y++)                      {                          for (var x = 0; x < Width; x++)                          {                              var c = Image[y * Width + x].Color;  							ibytes[y * stride + x * 3 + 2] = c.R;  							ibytes[y * stride + x * 3 + 1] = c.G;  							ibytes[y * stride + x * 3 + 0] = c.B;                          }                      }    					runPNGEvent.Set ();                  }              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < colors.Length; i++)              {                  // give progress report to the impatient user                  if (i % 4096 == 0)                  {                      //Algorithm.Queue.Compress();  					Console.WriteLine ("{0:P}' queue size {1}"' (double)i / Width / Height' Algorithm.Count);                  }                    // run the algorithm                  Algorithm.Place(colors[i]);                    // save a checkpoint if needed    				if (checkpointIndex < checkpoints.Count && checkpoints[checkpointIndex] == i) //checkpoints.TryGetValue(i' out chkidx))                  {  					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough  					PNGDoneEvent.WaitOne ();    					pngImageIndex = checkpointIndex;  					checkpointIndex++;                        // create the image                      if (img == null) img = new Bitmap(Width' Height' PixelFormat.Format24bppRgb);                      bitmapData = img.LockBits(new Rectangle(0' 0' Width' Height)' ImageLockMode.WriteOnly' PixelFormat.Format24bppRgb);    					int stride = bitmapData.Stride;  					if (ibytes == null) {  						ibytes = new byte[stride * bitmapData.Height];  					}                          for (var y = 0; y < Height; y++)                      {                          for (var x = 0; x < Width; x++)                          {                              var c = Image[y * Width + x].Color;  							ibytes[y * stride + x * 3 + 2] = c.R;  							ibytes[y * stride + x * 3 + 1] = c.G;  							ibytes[y * stride + x * 3 + 0] = c.B;                          }                      }    					runPNGEvent.Set ();                  }              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var i = 0; i < colors.Length; i++)              {                  // give progress report to the impatient user                  if (i % 4096 == 0)                  {                      //Algorithm.Queue.Compress();  					Console.WriteLine ("{0:P}' queue size {1}"' (double)i / Width / Height' Algorithm.Count);                  }                    // run the algorithm                  Algorithm.Place(colors[i]);                    // save a checkpoint if needed    				if (checkpointIndex < checkpoints.Count && checkpoints[checkpointIndex] == i) //checkpoints.TryGetValue(i' out chkidx))                  {  					// png compression uses only one processor' so push it into the background' limiting to one thread at a time is more than enough  					PNGDoneEvent.WaitOne ();    					pngImageIndex = checkpointIndex;  					checkpointIndex++;                        // create the image                      if (img == null) img = new Bitmap(Width' Height' PixelFormat.Format24bppRgb);                      bitmapData = img.LockBits(new Rectangle(0' 0' Width' Height)' ImageLockMode.WriteOnly' PixelFormat.Format24bppRgb);    					int stride = bitmapData.Stride;  					if (ibytes == null) {  						ibytes = new byte[stride * bitmapData.Height];  					}                          for (var y = 0; y < Height; y++)                      {                          for (var x = 0; x < Width; x++)                          {                              var c = Image[y * Width + x].Color;  							ibytes[y * stride + x * 3 + 2] = c.R;  							ibytes[y * stride + x * 3 + 1] = c.G;  							ibytes[y * stride + x * 3 + 0] = c.B;                          }                      }    					runPNGEvent.Set ();                  }              }
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: bool[] used = new bool[256*256*256];
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: bool[] used = new bool[256*256*256];
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: bool[] used = new bool[256*256*256];
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,Program,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Main,The following statement contains a magic number: for (var y = 0; y < Height; y++) {                  for (var x = 0; x < Width; x++)                  {  					var pix = Image [y * Width + x].Color;//img2.GetPixel(x' y);  					if (used [pix.R * 256 * 256 + pix.G * 256 + pix.B]) {  						Console.WriteLine ("Color {0}/{1}/{2} is added more than once!!!!!!"' pix.R' pix.G' pix.B);  					} else {  						used [pix.R * 256 * 256 + pix.G * 256 + pix.B] = true;  					}                  }  			}
Magic Number,FejesJoco.Tools.RGBGenerator,RandomComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: return RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,RandomComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: return RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,HueComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: var c = ((xc.GetHue() + shift) % 360).CompareTo((yc.GetHue() + shift) % 360);
Magic Number,FejesJoco.Tools.RGBGenerator,HueComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: var c = ((xc.GetHue() + shift) % 360).CompareTo((yc.GetHue() + shift) % 360);
Magic Number,FejesJoco.Tools.RGBGenerator,HueComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)                      c = RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,HueComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)                      c = RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,LumComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)  						c = ((xc.GetHue() + shift) % 360).CompareTo((yc.GetHue() + shift) % 360);
Magic Number,FejesJoco.Tools.RGBGenerator,LumComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)  						c = ((xc.GetHue() + shift) % 360).CompareTo((yc.GetHue() + shift) % 360);
Magic Number,FejesJoco.Tools.RGBGenerator,LumComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)  					c = RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,LumComparer,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compare,The following statement contains a magic number: if (c == 0)  					c = RndGen.Next(11) - 5;
Magic Number,FejesJoco.Tools.RGBGenerator,PixelQueue,C:\repos\HalfVoxel_RGBGenerator\Program.cs,PixelQueue,The following statement contains a magic number: Pixels = new Pixel[1024];
Magic Number,FejesJoco.Tools.RGBGenerator,PixelQueue,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Add,The following statement contains a magic number: if (UsedUntil == Pixels.Length)                      Array.Resize(ref Pixels' Pixels.Length * 2);
Magic Number,FejesJoco.Tools.RGBGenerator,PixelQueue,C:\repos\HalfVoxel_RGBGenerator\Program.cs,Compress,The following statement contains a magic number: if ((double)UsedUntil / Count < 1.05)                      return;
Magic Number,FejesJoco.Tools.RGBGenerator,OneNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The following statement contains a magic number: var best = Partitioner.Create(0' queue.UsedUntil' Math.Max(256' queue.UsedUntil / Threads)).AsParallel().Min(range =>                  {                      var bestdiff = int.MaxValue;                      Pixel bestpixel = null;                      for (var i = range.Item1; i < range.Item2; i++)                      {                          var qp = q[i];                          if (qp != null)                          {                              var rd = (int)qp.Color.R - c.R;                              var gd = (int)qp.Color.G - c.G;                              var bd = (int)qp.Color.B - c.B;                              var diff = rd * rd + gd * gd + bd * bd;                              // we have to use the same comparison as PixelWithValue!                              if (diff < bestdiff || (diff == bestdiff && qp.Weight < bestpixel.Weight))                              {                                  bestdiff = diff;                                  bestpixel = qp;                              }                          }                      }                      return new PixelWithValue                      {                          Pixel = bestpixel'                          Value = bestdiff                      };                  }).Pixel;
Magic Number,FejesJoco.Tools.RGBGenerator,AverageNeighborAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The following statement contains a magic number: var best = Partitioner.Create(0' queue.UsedUntil' Math.Max(256' queue.UsedUntil / Threads)).AsParallel().Min(range =>                  {                      var bestdiff = int.MaxValue;                      Pixel bestpixel = null;                      for (var i = range.Item1; i < range.Item2; i++)                      {                          var qp = q[i];                          if (qp != null)                          {                              var avg = queue.Data[qp.QueueIndex];                              var rd = (int)avg.R - c.R;                              var gd = (int)avg.G - c.G;                              var bd = (int)avg.B - c.B;                              var diff = rd * rd + gd * gd + bd * bd;                              // we have to use the same comparison as PixelWithValue!                              if (diff < bestdiff || (diff == bestdiff && qp.Weight < bestpixel.Weight))                              {                                  bestdiff = diff;                                  bestpixel = qp;                              }                          }                      }                      return new PixelWithValue                      {                          Pixel = bestpixel'                          Value = bestdiff                      };                  }).Pixel;
Magic Number,FejesJoco.Tools.RGBGenerator,AverageNeighborSqAlgorithm,C:\repos\HalfVoxel_RGBGenerator\Program.cs,placeImpl,The following statement contains a magic number: while ( st.Count > 0 ) {  					count++;  					int coord = st.Dequeue ();  					undoStack.Push (coord);    					RGB expanded = new RGB ();  					expanded.R = (byte)((coord >> (BlockSizeLog2*2)) & BlockMask);  					expanded.G = (byte)((coord >> (BlockSizeLog2*1)) & BlockMask);  					expanded.B = (byte)((coord >> (BlockSizeLog2*0)) & BlockMask);    					RGB mn = new RGB (expanded.R << BlockOffset' expanded.G << BlockOffset' expanded.B << BlockOffset);  					RGB mx = new RGB ((expanded.R << BlockOffset) + BlockMask' (expanded.G << BlockOffset) + BlockMask' (expanded.B << BlockOffset) + BlockMask);    					RGB closest = new RGB(c.R < mn.R ? mn.R : (c.R > mx.R ? mx.R : c.R)'  					                      c.G < mn.G ? mn.G : (c.G > mx.G ? mx.G : c.G)'  					                      c.B < mn.B ? mn.B : (c.B > mx.B ? mx.B : c.B));    					int dr = (closest.R - c.R);  					int dg = (closest.G - c.G);  					int db = (closest.B - c.B);  					int diff = dr*dr + dg*dg + db*db;    					if ( diff > bestDiff ) continue;    					if (expanded.R > 0 && !pixelBlocksVisited [coord - ROffset]) {  						pixelBlocksVisited [coord - ROffset] = true;  						st.Enqueue (coord - ROffset);  					}    					if (expanded.G > 0 && !pixelBlocksVisited [coord - BOffset]) {  						pixelBlocksVisited [coord - GOffset] = true;  						st.Enqueue (coord - GOffset);  					}    					if (expanded.B > 0 && !pixelBlocksVisited [coord - BOffset]) {  						pixelBlocksVisited [coord - BOffset] = true;  						st.Enqueue (coord - BOffset);  					}    					if (expanded.R < BlockMask && !pixelBlocksVisited [coord + ROffset]) {  						pixelBlocksVisited [coord + ROffset] = true;  						st.Enqueue (coord + ROffset);  					}    					if (expanded.G < BlockMask && !pixelBlocksVisited [coord + GOffset]) {  						pixelBlocksVisited [coord + GOffset] = true;  						st.Enqueue (coord + GOffset);  					}    					if (expanded.B < BlockMask && !pixelBlocksVisited [coord + BOffset]) {  						pixelBlocksVisited [coord + BOffset] = true;  						st.Enqueue (coord + BOffset);  					}    					List<Pixel> pxl = pixelBlocks[coord];    					if (pxl.Count > 0) {  						//System.Console.WriteLine ("Block " + coord.ToString ());  					}    					//tot += pxl.Count;    					for ( int i = 0; i < pxl.Count; i++ ) {  						//System.Console.WriteLine (pxl [i].QueueIndex);  						var avg = pxl [i].avg;//queue.Data[pxl[i].QueueIndex];  						var rd = (int)avg.R - c.R;  						var gd = (int)avg.G - c.G;  						var bd = (int)avg.B - c.B;  						diff = rd * rd + gd * gd + bd * bd;    						// Bias towards filling out small empty areas which look bad in the resulting image  						//if ( pxl[i].nonEmptyNeigh > 5 ) diff /= 2;  						//if (pxl[i].nonEmptyNeigh > 0) diff /= pxl[i].nonEmptyNeigh*pxl[i].nonEmptyNeigh;    						// we have to use the same comparison as PixelWithValue!  						if (diff < bestDiff || (diff == bestDiff && pxl[i].Weight < bestPixel.Weight))  						{  							bestDiff = diff;  							bestPixel = pxl[i];  							bestBlock = coord;  							bestAfter = count;  							bestIndexInBlock = i;    							/*if ( bestAfterFirstIndex == int.MaxValue ) {  								bestAfterFirstIndex = (int)Math.Ceiling(System.Math.Pow ((System.Math.Pow (count' 1.0 / 3) + 1)' 3));//count + st.Count;  							} else if ( count >= bestAfterFirstIndex ) {  								bestAfterFirst++;  							}*/  						}  					}  				}
Magic Number,FejesJoco.Tools.RGBGenerator,RGB,C:\repos\HalfVoxel_RGBGenerator\RGB.cs,GetHashCode,The following statement contains a magic number: return R * 256 * 256 + G * 256 + B;
Magic Number,FejesJoco.Tools.RGBGenerator,RGB,C:\repos\HalfVoxel_RGBGenerator\RGB.cs,GetHashCode,The following statement contains a magic number: return R * 256 * 256 + G * 256 + B;
Magic Number,FejesJoco.Tools.RGBGenerator,RGB,C:\repos\HalfVoxel_RGBGenerator\RGB.cs,GetHashCode,The following statement contains a magic number: return R * 256 * 256 + G * 256 + B;
