Implementation smell,Namespace,Class,File,Method,Description
Long Method,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The method has 384 lines of code.
Long Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The method has 172 lines of code.
Complex Method,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,Cyclomatic complexity of the method is 110
Complex Method,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LoadSettings,Cyclomatic complexity of the method is 8
Complex Method,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,Cyclomatic complexity of the method is 13
Complex Method,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,editor_HelpRequested,Cyclomatic complexity of the method is 17
Complex Method,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,layerControl_GoToLayerText,Cyclomatic complexity of the method is 9
Complex Method,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,Cyclomatic complexity of the method is 9
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,Cyclomatic complexity of the method is 15
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,Cyclomatic complexity of the method is 12
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,Cyclomatic complexity of the method is 50
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,Cyclomatic complexity of the method is 8
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,SaveTileSettings,Cyclomatic complexity of the method is 10
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,Cyclomatic complexity of the method is 8
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,Cyclomatic complexity of the method is 12
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,Cyclomatic complexity of the method is 12
Complex Method,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,Cyclomatic complexity of the method is 15
Long Parameter List,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The method has 10 parameters.
Long Parameter List,DMS.MapManager,TileSettings,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,TileSettings,The method has 12 parameters.
Long Parameter List,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GetDiskFreeSpace,The method has 5 parameters.
Long Statement,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The length of the statement  "			else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) { " is 120.
Long Statement,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The length of the statement  "			else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] { " is 125.
Long Statement,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The length of the statement  "			else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") { " is 163.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LocateDependencies,The length of the statement  "	//if (File.Exists(Path.Combine(Environment.CurrentDirectory' "gdalplugins\\ogr_OCI.dll")) && !MapUtils.FindLibrary("oci.dll")) " is 126.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LocateDependencies,The length of the statement  "		ScintillaNet.Configuration.Configuration config = new ScintillaNet.Configuration.Configuration (Environment.CurrentDirectory + "\\MapfileConfig.xml"' "user"' true); " is 164.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LocateDependencies,The length of the statement  "		MessageBox.Show ("The MapManager application failed to load' " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LoadSettings,The length of the statement  "	string appdataFile = Environment.GetFolderPath (Environment.SpecialFolder.ApplicationData) + "\\MapManager20\\MapManager.xml"; " is 126.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LoadRecentMap,The length of the statement  "		MessageBox.Show ("Unable to load the recent map: " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 123.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	zoomOutToolStripMenuItem.Checked = toolStripButtonZoomOut.Checked = (mapControl.InputMode == MapControl.InputModes.ZoomOut); " is 124.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	selectItemToolStripMenuItem.Checked = toolStripButtonSelect.Checked = (mapControl.InputMode == MapControl.InputModes.Select); " is 125.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	selectByRectangleToolStripMenuItem.Checked = toolStripButtonSelectRect.Checked = (mapControl.InputMode == MapControl.InputModes.TrackRectangle); " is 144.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	selectByPolygonToolStripMenuItem.Checked = toolStripButtonSelectPoly.Checked = (mapControl.InputMode == MapControl.InputModes.TrackPolygon); " is 140.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	selectByLineToolStripMenuItem.Checked = toolStripButtonSelectLine.Checked = (mapControl.InputMode == MapControl.InputModes.TrackLine); " is 134.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	zoomToolStripMenuItem.Enabled = toolStripButtonZoomIn.Enabled = zoomOutToolStripMenuItem.Enabled = toolStripButtonZoomOut.Enabled = panToolStripMenuItem.Enabled = toolStripButtonPan.Enabled = redrawMapToolStripMenuItem.Enabled = toolStripButtonRedraw.Enabled = saveMapImageToolStripMenuItem.Enabled = mapPropertiesToolStripMenuItem.Enabled = (mapControl.Target != null); " is 370.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "	selectItemToolStripMenuItem.Enabled = toolStripButtonSelect.Enabled = selectByRectangleToolStripMenuItem.Enabled = toolStripButtonSelectRect.Enabled = selectByPolygonToolStripMenuItem.Enabled = toolStripButtonSelectPoly.Enabled = selectByLineToolStripMenuItem.Enabled = toolStripButtonSelectLine.Enabled = true; " is 311.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "		zoomToolStripMenuItem.Enabled = toolStripButtonZoomIn.Enabled = zoomOutToolStripMenuItem.Enabled = toolStripButtonZoomOut.Enabled = panToolStripMenuItem.Enabled = toolStripButtonPan.Enabled = redrawMapToolStripMenuItem.Enabled = toolStripButtonRedraw.Enabled = mapPropertiesToolStripMenuItem.Enabled = false; " is 308.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,UpdateMenuState,The length of the statement  "		selectItemToolStripMenuItem.Enabled = toolStripButtonSelect.Enabled = selectByRectangleToolStripMenuItem.Enabled = toolStripButtonSelectRect.Enabled = selectByPolygonToolStripMenuItem.Enabled = toolStripButtonSelectPoly.Enabled = selectByLineToolStripMenuItem.Enabled = toolStripButtonSelectLine.Enabled = false; " is 312.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The length of the statement  "		DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 173.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The length of the statement  "			MessageBox.Show ("Duplicated layer names detected in this mapfile' which is not supported by IntraMaps. The layers will be renamed to unique names."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 210.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The length of the statement  "		MessageBox.Show (ex.Message + ". Please correct the issue in the text tab."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,MRUMenuItem_Click,The length of the statement  "		MessageBox.Show ("Error opening file: " + fileName + "' " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The length of the statement  "				DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 173.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,openToolStripMenuItem_Click,The length of the statement  "		MessageBox.Show ("Error opening file: " + fileName + "' " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 130.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,CopyDependentFiles,The length of the statement  "	if (file != null && !File.Exists (file) && !File.Exists (Path.Combine (newPath' file)) && File.Exists (Path.Combine (oldPath' file))) " is 133.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,CopyDependentFiles,The length of the statement  "	if (file != null && !File.Exists (file) && !File.Exists (Path.Combine (newPath' file)) && File.Exists (Path.Combine (oldPath' file))) { " is 135.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,selectByShapeToolStripMenuItem_Click,The length of the statement  "		selectShapeForm.Location = new Point (this.Left + this.Width - selectShapeForm.Width' this.Bottom - selectShapeForm.Height - 40); " is 129.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,MainForm_FormClosing,The length of the statement  "		DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question); " is 173.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,ConfirmChanges,The length of the statement  "			if (MessageBox.Show ("Do you wish to Apply the changes you have made to the layer settings?"' "MapManager"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 178.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,ConfirmChanges,The length of the statement  "			if (MessageBox.Show ("Do you wish to Apply the changes you have made to the map settings?"' "MapManager"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) " is 176.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,layerControl_ItemSelect,The length of the statement  "	else if (target.GetType () == typeof(layerObj) || target.GetType () == typeof(classObj) || target.GetType () == typeof(styleObj) || target.GetType () == typeof(labelObj)) { " is 172.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,MainForm_Activated,The length of the statement  "		if (MessageBox.Show (msg.ToString ()' "MapManager"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 124.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,openFileExternalToolStripMenuItem_Click,The length of the statement  "	if (dirtyFlag && MessageBox.Show ("Would you like to save the changes before opening the file in the external editor?"' "MapManager"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 206.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,SetMargins,The length of the statement  "	scintillaControl.Margins.Margin0.Width = scintillaControl.NativeInterface.TextWidth (33' scintillaControl.Lines.Count.ToString ()) + 6; " is 135.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,ApplyTextContents,The length of the statement  "		MessageBox.Show ("Duplicated layer names detected in this mapfile' which is not supported by IntraMaps. The layers will be renamed to unique names."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 210.
Long Statement,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,ValidateTextContents,The length of the statement  "			MessageBox.Show (ex.Message + ". Please correct the issue in the text tab."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 135.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("FONTSET \"font.list\""' "FONTSET \"" + (Application.StartupPath + "\\templates\\font.list\"").Replace ("\\"' "\\\\")); " is 146.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("SYMBOLSET \"symbols.sym\""' "SYMBOLSET \"" + (Application.StartupPath + "\\templates\\symbols.sym\"").Replace ("\\"' "\\\\")); " is 154.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("FONTSET \"font.list\""' "FONTSET \"" + (Application.StartupPath + "\\templates\\font.list\"").Replace ("\\"' "\\\\")); " is 146.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("SYMBOLSET \"symbols.sym\""' "SYMBOLSET \"" + (Application.StartupPath + "\\templates\\symbols.sym\"").Replace ("\\"' "\\\\")); " is 154.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("FONTSET \"font.list\""' "FONTSET \"" + (Application.StartupPath + "\\templates\\font.list\"").Replace ("\\"' "\\\\")); " is 146.
Long Statement,DMS.MapManager,Program,C:\repos\DMS-Aus_MapManager\MapManager\Program.cs,ReplaceFiles,The length of the statement  "	strFile = strFile.Replace ("SYMBOLSET \"symbols.sym\""' "SYMBOLSET \"" + (Application.StartupPath + "\\templates\\symbols.sym\"").Replace ("\\"' "\\\\")); " is 154.
Long Statement,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,ProcessTileList,The length of the statement  "				GenerateTile (tileSettings.startX' tileSettings.startY' tileSettings.initTileGap' tileSettings.imageSize' tileSettings.imageBuffer' tileSettings.savePath' bsreader.ReadInt32 ()' bsreader.ReadInt32 ()' bsreader.ReadInt32 ()' tileSettings.imageFormat); " is 250.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The length of the statement  "			MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 163.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The length of the statement  "		MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 161.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The length of the statement  "			map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap); " is 165.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The length of the statement  "		MessageBox.Show ("Error creating preview image: " + Environment.NewLine + ex.ToString ()' "Preview Image Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 157.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The length of the statement  "			map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap); " is 165.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The length of the statement  "	cellStyle.Font = new System.Drawing.Font ("Segoe UI"' 9F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 137.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,The length of the statement  "		MessageBox.Show ("Please select a folder for saving tiles"' "Select Save Folder"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 132.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,The length of the statement  "		if (mapControl.GetInitialExtent ().minx != map.extent.minx || mapControl.GetInitialExtent ().miny != map.extent.miny || mapControl.GetInitialExtent ().maxx != map.extent.maxx || mapControl.GetInitialExtent ().maxy != map.extent.maxy) " is 233.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,The length of the statement  "			if (MessageBox.Show ("The map must be saved before running the tile generation tool." + Environment.NewLine + "Do you wish to save the map now and continue running?"' "Save Map"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 251.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,The length of the statement  "		MessageBox.Show ("Tile generation process has been aborted"' "Tile Generation Aborted"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 138.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The length of the statement  "		MessageBox.Show ("Error generating the complete TilingList file: " + Environment.NewLine + ex.ToString ()' "Tile List Generation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 181.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The length of the statement  "		MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 196.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateSettingsFile,The length of the statement  "		MessageBox.Show ("Error generating TilingSettings file: " + Environment.NewLine + ex.ToString ()' "Tile Settings File Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 170.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateBaselayerText,The length of the statement  "			configManager = ("{" + Environment.NewLine + "    \"layers\": [{" + Environment.NewLine + "        \"type\": \"tile\"'" + Environment.NewLine + "            \"url\": \"<enter your hosted tile folder here>\"'" + Environment.NewLine + "            \"tilesExtent\": {" + Environment.NewLine + "                \"x1\": " + loadedSettings.startX + "'" + Environment.NewLine + "                \"y1\": " + loadedSettings.startY + "'" + Environment.NewLine + "                \"x2\": " + (loadedSettings.startX + loadedSettings.initTileGap) + "'" + Environment.NewLine + "                \"y2\": " + (loadedSettings.startY + loadedSettings.initTileGap) + "'" + Environment.NewLine + "                \"projection\": \"EPSG:" + epsg + "\"" + Environment.NewLine + "            }'" + Environment.NewLine + "            \"numZoomLevels\": " + depth + "'" + Environment.NewLine + "            \"zoomOffset\": " + z0 + "'" + Environment.NewLine + "            \"imageFormat\": \"" + imageFormat + "\"'" + Environment.NewLine + "            \"tileSize\": " + imageSize + "'" + Environment.NewLine + "            \"opacity\": 1'" + Environment.NewLine + "            \"buffer\": 1" + Environment.NewLine + "        }" + Environment.NewLine + "    ]" + Environment.NewLine + "}"); " is 1265.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateBaselayerText,The length of the statement  "			configManager = ("{" + Environment.NewLine + "    \"layers\": [{" + Environment.NewLine + "        \"type\": \"tile\"'" + Environment.NewLine + "            \"url\": \"<enter your hosted tile folder here>\"'" + Environment.NewLine + "            \"tilesExtent\": {" + Environment.NewLine + "                \"x1\": " + loadedSettings.startX + "'" + Environment.NewLine + "                \"y1\": " + loadedSettings.startY + "'" + Environment.NewLine + "                \"x2\": " + (loadedSettings.startX + loadedSettings.initTileGap) + "'" + Environment.NewLine + "                \"y2\": " + (loadedSettings.startY + loadedSettings.initTileGap) + "'" + Environment.NewLine + "                \"projection\": \"EPSG:" + epsg + "\"" + Environment.NewLine + "            }'" + Environment.NewLine + "            \"numZoomLevels\": " + depth + "'" + Environment.NewLine + "            \"imageFormat\": \"" + imageFormat + "\"'" + Environment.NewLine + "            \"tileSize\": " + imageSize + "'" + Environment.NewLine + "            \"opacity\": 1'" + Environment.NewLine + "            \"buffer\": 1" + Environment.NewLine + "        }" + Environment.NewLine + "    ]" + Environment.NewLine + "}"); " is 1199.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateBaselayerText,The length of the statement  "		MessageBox.Show ("Error generating base layer text for config manager: " + Environment.NewLine + ex.ToString ()' "Base Layer Text Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 182.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,SplitTileList,The length of the statement  "		MessageBox.Show ("Error splitting the TilingList file: " + Environment.NewLine + ex.ToString ()' "Split Tile List Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 166.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StartTileGeneration,The length of the statement  "			Process.Start (Application.StartupPath + "\\TileGenerator.exe"' " /tile " + "\"" + mapfilepath + "\" " + "\"" + savePath + "\" " + id); " is 135.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StartTileGeneration,The length of the statement  "		MessageBox.Show ("Error starting new MapManager processes for tile generation: " + Environment.NewLine + ex.ToString ()' "Start Tile Generation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 196.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerateStats_Click,The length of the statement  "		MessageBox.Show ("Please save or select a configuration before calculating statistics"' "Save Configuration First"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 166.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerateStats_Click,The length of the statement  "		MessageBox.Show ("Please select a folder for saving tiles"' "Select Save Folder"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 132.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The length of the statement  "		MessageBox.Show ("Error running calculate statistics function: " + Environment.NewLine + ex.ToString ()' "Statistics Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error); " is 181.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,getDirectorySize,The length of the statement  "		GetDiskFreeSpace (lpRootPathName' out lpSectorsPerCluster' out lpBytesPerSector' out lpNumberOfFreeClusters' out lpTotalNumberOfClusters); " is 138.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,getDirectorySize,The length of the statement  "		MessageBox.Show ("Using default value of 4000 bytes because there was an error calculating precise tile size in directory" + Environment.NewLine + ex.ToString ()' "Tile Size Calculation Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 242.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnBaseLayerText_Click,The length of the statement  "	GenerateBaselayerText (loadedSettings.snapWorld' loadedSettings.depth' loadedSettings.imageFormat' loadedSettings.imageSize); " is 125.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnSaveConfig_Click,The length of the statement  "					MessageBox.Show ("Cancelled save as the name already exists"' "Name Exists Warning"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 135.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbSnapWorldChanged,The length of the statement  "			MessageBox.Show ("Your map must be set to google projection EPSG:3785 to use this function"' "Invalid Map Projection"' MessageBoxButtons.OK' MessageBoxIcon.Information); " is 169.
Long Statement,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnStopGen_Click,The length of the statement  "		if (MessageBox.Show ("Are you sure you want to end all tile generation processes?"' "End Generation"' MessageBoxButtons.YesNo' MessageBoxIcon.Question) == DialogResult.Yes) { " is 174.
Complex Conditional,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The conditional expression  "!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")"  is complex.
Complex Conditional,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The conditional expression  "(key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL""  is complex.
Complex Conditional,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The conditional expression  "map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1"  is complex.
Complex Conditional,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The conditional expression  "map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1"  is complex.
Complex Conditional,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,CopyDependentFiles,The conditional expression  "file != null && !File.Exists (file) && !File.Exists (Path.Combine (newPath' file)) && File.Exists (Path.Combine (oldPath' file))"  is complex.
Complex Conditional,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,CopyDependentFiles,The conditional expression  "file != null && !File.Exists (file) && !File.Exists (Path.Combine (newPath' file)) && File.Exists (Path.Combine (oldPath' file))"  is complex.
Complex Conditional,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,layerControl_ItemSelect,The conditional expression  "target.GetType () == typeof(layerObj) || target.GetType () == typeof(classObj) || target.GetType () == typeof(styleObj) || target.GetType () == typeof(labelObj)"  is complex.
Complex Conditional,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerate_Click,The conditional expression  "mapControl.GetInitialExtent ().minx != map.extent.minx || mapControl.GetInitialExtent ().miny != map.extent.miny || mapControl.GetInitialExtent ().maxx != map.extent.maxx || mapControl.GetInitialExtent ().maxy != map.extent.maxy"  is complex.
Empty Catch Block,DMS.MapManager,AboutBox,C:\repos\DMS-Aus_MapManager\MapManager\AboutBox.cs,CollectVersionInfo,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,AboutBox,C:\repos\DMS-Aus_MapManager\MapManager\AboutBox.cs,CollectVersionInfo,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,AboutBox,C:\repos\DMS-Aus_MapManager\MapManager\AboutBox.cs,CollectVersionInfo,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,AboutBox,C:\repos\DMS-Aus_MapManager\MapManager\AboutBox.cs,CollectVersionInfo,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,LoadSettings,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,SaveMetadata,The method has an empty catch block.
Empty Catch Block,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerateStats_Click,The method has an empty catch block.
Magic Number,DMS.MapManager,AboutBox,C:\repos\DMS-Aus_MapManager\MapManager\AboutBox.cs,AboutBox,The following statement contains a magic number: date = date.AddDays (int.Parse (aver [2]));  
Magic Number,DMS.MapManager,AppSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,AppSettings,The following statement contains a magic number: MRUSize = 10;  
Magic Number,DMS.MapManager,AppSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,AppSettings,The following statement contains a magic number: LayerControlBackColor = Color.FromArgb (255' 255' 255);  
Magic Number,DMS.MapManager,AppSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,AppSettings,The following statement contains a magic number: LayerControlBackColor = Color.FromArgb (255' 255' 255);  
Magic Number,DMS.MapManager,AppSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,AppSettings,The following statement contains a magic number: LayerControlBackColor = Color.FromArgb (255' 255' 255);  
Magic Number,DMS.MapManager,FormSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,Load,The following statement contains a magic number: form.Width = Width < 800 ? 800 : Width;  
Magic Number,DMS.MapManager,FormSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,Load,The following statement contains a magic number: form.Width = Width < 800 ? 800 : Width;  
Magic Number,DMS.MapManager,FormSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,Load,The following statement contains a magic number: form.Height = Height < 600 ? 600 : Height;  
Magic Number,DMS.MapManager,FormSettings,C:\repos\DMS-Aus_MapManager\MapManager\AppSettings.cs,Load,The following statement contains a magic number: form.Height = Height < 600 ? 600 : Height;  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: using (StringReader r = new StringReader (contents)) {  	string line;  	int lineNumber = 0;  	int groupStartLineNumber = 0;  	while ((line = r.ReadLine ()) != null) {  		++lineNumber;  		// replace trailing \" with \\"  		if (line != Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"")) {  			line = Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"");  			AppendLog ("Escape trailing \\\" chars "' lineNumber);  		}  		string[] values = line.Split (new char[] {  			' ''  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		string key;  		if (values.Length > 0)  			key = values [0].ToUpper ();  		else  			key = "";  		if (!IsExpressionKeyword (path + "\\" + key)) {  			if (Regex.IsMatch (line' "[^\\\\]\\\\[^\\\\]")) {  				// escape single backslashes for non expressions  				line = line.Replace ("\\"' "\\\\");  				AppendLog ("Escape \\ characters "' lineNumber);  			}  		}  		else if (IsTextExpressionKeyword (path + "\\" + key)) {  			int pos = line.IndexOf (key) + key.Length + 1;  			string val = line.Substring (pos).Trim ();  			AppendLog ("Review Class Text/Expression: " + val' lineNumber);  			// trying to identify the expression  			//if (Regex.IsMatch(val' @"\(.*\)"))  			//{  			//    // MS_EXPRESSION  			//    AppendLog("Modify expression to string (please review!): " + val' lineNumber);  			//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  			//}  			//else if (Regex.IsMatch(val' @"\/[^\/]*\/"))  			//{  			//    // MS_REGEX  			//    AppendLog("Modify regex expression to string (please review!): " + val' lineNumber);  			//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  			//}  		}  		// set up path of the node  		foreach (string s in groupkeywords) {  			if ((path + "\\" + key) == s) {  				groupStartLineNumber = lineNumber;  				path = s;  				break;  			}  		}  		if (key == "END" && path.LastIndexOf ('\\') > 0) {  			if (path == "\\MAP\\OUTPUTFORMAT") {  				if (outputformat.ToString ().Contains ("PC256")) {  					AppendLog ("Remove deprecated outputformat with IMAGEMODE PC256"' groupStartLineNumber' lineNumber);  				}  				else {  					output.AppendLine (outputformat.ToString ());  					output.AppendLine (line);  				}  				path = path.Substring (0' path.LastIndexOf ('\\'));  				continue;  			}  			path = path.Substring (0' path.LastIndexOf ('\\'));  		}  		// Test elements  		if (path == "\\MAP\\OUTPUTFORMAT") {  			if (key == "OUTPUTFORMAT")  				outputformat.Length = 0;  			outputformat.AppendLine (line);  		}  		else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  			'\'''  			'\"''  			' '  		}) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  			AppendLog ("Upgrade fontset location"' lineNumber);  			output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  		}  		else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  			'\'''  			'\"''  			' '  		}) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  			AppendLog ("Upgrade symbolset location"' lineNumber);  			output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  		}  		else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  			output.AppendLine (line);  			AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  			output.AppendLine ("  DEFRESOLUTION " + values [1]);  		}  		else if (key == "MAP") {  			output.AppendLine (line);  			// add MAP  		}  		else if (key == "IMAGETYPE") {  			List<string> f = new List<string> (new string[] {  				"png"'  				"jpeg"'  				"gif"'  				"png8"'  				"png24"'  				"pdf"'  				"svg"'  				"cairopng"'  				"gtiff"'  				"kml"'  				"kmz"  			});  			//outputFormatObj[] formats = template.outputformatlist;  			//for (int i = 0; i < formats.Length; i++)  			//{  			//    if (!f.Contains(formats[i].name))  			//        f.Add(formats[i].name);  			//}  			for (int i = 0; i < template.numoutputformats; i++) {  				outputFormatObj format = template.getOutputFormat (i);  				if (!f.Contains (format.name))  					f.Add (format.name);  			}  			string imageType = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ();  			if (!f.Contains (imageType)) {  				AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  				output.AppendLine ("  IMAGETYPE png");  			}  			else  				output.AppendLine (line);  		}  		else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  		}  		else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  		}  		else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  		}  		else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  			'\'''  			'\"'  		}).StartsWith ("1.0")) {  			changelog.Length = 0;  			// no upgrading required  			return;  		}  		else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  			List<string> drivers = new List<string> (new string[] {  				"GD/PC256"'  				"GD/GIF"'  				"GD/PNG"'  				"AGG/PNG8"'  				"AGG/PNG"'  				"AGG/JPEG"'  				"CAIRO/PNG"'  				"CAIRO/JPEG"'  				"CAIRO/PDF"'  				"CAIRO/SVG"'  				"OGL/PNG"'  				"KML"'  				"KMZ"  			});  			string driverName = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToUpper ();  			if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  				output.AppendLine (line);  			else {  				AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  				output.AppendLine ("  DRIVER \"AGG/PNG\"");  			}  		}  		else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  			AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  		}  		else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  			if (!fonts.Contains (values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ())) {  				AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  				output.AppendLine ("  FONT \"arial\"");  			}  			else  				output.AppendLine (line);  			// no change done  		}  		else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  			AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  		}  		else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  			AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  		}  		else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  			string symbolName = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ();  			String newSymbolName = symbolName;  			if (symbolName == "grenze2")  				newSymbolName = "Rectangle";  			else if (symbolName == "ellipse-flach")  				newSymbolName = "Ellipse";  			else if (symbolName == "dreieck")  				newSymbolName = "Triangle";  			else if (symbolName == "zelt")  				newSymbolName = "Tent";  			else if (symbolName == "quadrat")  				newSymbolName = "Square";  			else if (symbolName == "kreuz1")  				newSymbolName = "Cross";  			else if (symbolName == "kreuz1")  				newSymbolName = "Cross";  			else if (symbolName == "kreuz2")  				newSymbolName = "Cross-2";  			else if (symbolName == "kreuz4")  				newSymbolName = "Cross-3";  			else if (symbolName == "haus")  				newSymbolName = "House";  			else if (symbolName == "sechseck")  				newSymbolName = "Hexagon";  			else if (symbolName == "stern")  				newSymbolName = "Star";  			else if (symbolName == "MapInfo-Pen-3")  				newSymbolName = "Dot-1";  			else if (symbolName == "MapInfo-Pen-4")  				newSymbolName = "Dash-1";  			else if (symbolName == "MapInfo-Pen-5")  				newSymbolName = "Dash-2";  			else if (symbolName == "MapInfo-Pen-6")  				newSymbolName = "Dash-3";  			else if (symbolName == "MapInfo-Pen-7")  				newSymbolName = "Dash-5";  			else if (symbolName == "MapInfo-Pen-9")  				newSymbolName = "Dash-7";  			else if (symbolName == "MapInfo-Pen-10")  				newSymbolName = "Dash-6";  			else if (symbolName == "MapInfo-Pen-11")  				newSymbolName = "Dash-7";  			else if (symbolName == "MapInfo-Pen-12")  				newSymbolName = "Dash-8";  			else if (symbolName == "MapInfo-Pen-13")  				newSymbolName = "Dash-9";  			else if (symbolName == "MapInfo-Pen-14")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-15")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-16")  				newSymbolName = "DashDash-1";  			else if (symbolName == "MapInfo-Pen-18")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-19")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-20")  				newSymbolName = "DoubleDotDash-1";  			else if (symbolName == "MapInfo-Pen-21")  				newSymbolName = "DoubleDotDash-2";  			else if (symbolName == "MapInfo-Pen-22")  				newSymbolName = "DoubleDotDash-2";  			else if (symbolName == "MapInfo-Pen-23")  				newSymbolName = "DotDash-1";  			else if (symbolName == "MapInfo-Pen-24")  				newSymbolName = "DoubleDotDash-1";  			else if (symbolName == "MapInfo-Pen-25")  				newSymbolName = "DotDash-1";  			else if (symbolName == "MapInfo-Brush-3")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-4")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-5")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-6")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-7")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-8")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-15")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-19")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-20")  				newSymbolName = "Horizontal-2";  			else if (symbolName == "MapInfo-Brush-21")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-22")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-23")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-26")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-27")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-28")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-29")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-30")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-31")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-32")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-34")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-35")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-36")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-37")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-39")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-40")  				newSymbolName = "Grid-2";  			else if (symbolName == "MapInfo-Brush-41")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-42")  				newSymbolName = "Grid-2";  			else if (symbolName == "MapInfo-Brush-43")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-44")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-45")  				newSymbolName = "GridDiag-2";  			else if (symbolName == "MapInfo-Brush-46")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-47")  				newSymbolName = "Ticks-1";  			else if (symbolName == "MapInfo-Brush-51")  				newSymbolName = "Ticks-1";  			else if (symbolName == "MapInfo-Brush-63")  				newSymbolName = "Dots-2";  			else if (symbolName == "MapInfo-Brush-70")  				newSymbolName = "Dots-1";  			else if (symbolName == "MapInfo-Brush-137")  				newSymbolName = "Dots-2";  			if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  				int symbolIndex;  				if (int.TryParse (newSymbolName' out symbolIndex)) {  					// remove symbol when symbol was 0 - no symbol  					if (symbolIndex == 0) {  						AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  						continue;  					}  				}  				newSymbolName = "default-marker";  			}  			if (symbolName != newSymbolName) {  				AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  				output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  			}  		}  		else  			output.AppendLine (line);  		// not change done  	}  }  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: using (StringReader r = new StringReader (contents)) {  	string line;  	int lineNumber = 0;  	int groupStartLineNumber = 0;  	while ((line = r.ReadLine ()) != null) {  		++lineNumber;  		// replace trailing \" with \\"  		if (line != Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"")) {  			line = Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"");  			AppendLog ("Escape trailing \\\" chars "' lineNumber);  		}  		string[] values = line.Split (new char[] {  			' ''  			'\t'  		}' StringSplitOptions.RemoveEmptyEntries);  		string key;  		if (values.Length > 0)  			key = values [0].ToUpper ();  		else  			key = "";  		if (!IsExpressionKeyword (path + "\\" + key)) {  			if (Regex.IsMatch (line' "[^\\\\]\\\\[^\\\\]")) {  				// escape single backslashes for non expressions  				line = line.Replace ("\\"' "\\\\");  				AppendLog ("Escape \\ characters "' lineNumber);  			}  		}  		else if (IsTextExpressionKeyword (path + "\\" + key)) {  			int pos = line.IndexOf (key) + key.Length + 1;  			string val = line.Substring (pos).Trim ();  			AppendLog ("Review Class Text/Expression: " + val' lineNumber);  			// trying to identify the expression  			//if (Regex.IsMatch(val' @"\(.*\)"))  			//{  			//    // MS_EXPRESSION  			//    AppendLog("Modify expression to string (please review!): " + val' lineNumber);  			//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  			//}  			//else if (Regex.IsMatch(val' @"\/[^\/]*\/"))  			//{  			//    // MS_REGEX  			//    AppendLog("Modify regex expression to string (please review!): " + val' lineNumber);  			//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  			//}  		}  		// set up path of the node  		foreach (string s in groupkeywords) {  			if ((path + "\\" + key) == s) {  				groupStartLineNumber = lineNumber;  				path = s;  				break;  			}  		}  		if (key == "END" && path.LastIndexOf ('\\') > 0) {  			if (path == "\\MAP\\OUTPUTFORMAT") {  				if (outputformat.ToString ().Contains ("PC256")) {  					AppendLog ("Remove deprecated outputformat with IMAGEMODE PC256"' groupStartLineNumber' lineNumber);  				}  				else {  					output.AppendLine (outputformat.ToString ());  					output.AppendLine (line);  				}  				path = path.Substring (0' path.LastIndexOf ('\\'));  				continue;  			}  			path = path.Substring (0' path.LastIndexOf ('\\'));  		}  		// Test elements  		if (path == "\\MAP\\OUTPUTFORMAT") {  			if (key == "OUTPUTFORMAT")  				outputformat.Length = 0;  			outputformat.AppendLine (line);  		}  		else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  			'\'''  			'\"''  			' '  		}) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  			AppendLog ("Upgrade fontset location"' lineNumber);  			output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  		}  		else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  			'\'''  			'\"''  			' '  		}) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  			AppendLog ("Upgrade symbolset location"' lineNumber);  			output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  		}  		else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  			output.AppendLine (line);  			AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  			output.AppendLine ("  DEFRESOLUTION " + values [1]);  		}  		else if (key == "MAP") {  			output.AppendLine (line);  			// add MAP  		}  		else if (key == "IMAGETYPE") {  			List<string> f = new List<string> (new string[] {  				"png"'  				"jpeg"'  				"gif"'  				"png8"'  				"png24"'  				"pdf"'  				"svg"'  				"cairopng"'  				"gtiff"'  				"kml"'  				"kmz"  			});  			//outputFormatObj[] formats = template.outputformatlist;  			//for (int i = 0; i < formats.Length; i++)  			//{  			//    if (!f.Contains(formats[i].name))  			//        f.Add(formats[i].name);  			//}  			for (int i = 0; i < template.numoutputformats; i++) {  				outputFormatObj format = template.getOutputFormat (i);  				if (!f.Contains (format.name))  					f.Add (format.name);  			}  			string imageType = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ();  			if (!f.Contains (imageType)) {  				AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  				output.AppendLine ("  IMAGETYPE png");  			}  			else  				output.AppendLine (line);  		}  		else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  		}  		else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  		}  		else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  			AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  		}  		else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  			'\'''  			'\"'  		}).StartsWith ("1.0")) {  			changelog.Length = 0;  			// no upgrading required  			return;  		}  		else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  			List<string> drivers = new List<string> (new string[] {  				"GD/PC256"'  				"GD/GIF"'  				"GD/PNG"'  				"AGG/PNG8"'  				"AGG/PNG"'  				"AGG/JPEG"'  				"CAIRO/PNG"'  				"CAIRO/JPEG"'  				"CAIRO/PDF"'  				"CAIRO/SVG"'  				"OGL/PNG"'  				"KML"'  				"KMZ"  			});  			string driverName = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToUpper ();  			if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  				output.AppendLine (line);  			else {  				AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  				output.AppendLine ("  DRIVER \"AGG/PNG\"");  			}  		}  		else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  			AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  		}  		else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  			if (!fonts.Contains (values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ())) {  				AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  				output.AppendLine ("  FONT \"arial\"");  			}  			else  				output.AppendLine (line);  			// no change done  		}  		else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  			AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  		}  		else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  			AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  		}  		else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  			string symbolName = values [1].Trim (new char[] {  				'\'''  				'\"'  			}).ToLower ();  			String newSymbolName = symbolName;  			if (symbolName == "grenze2")  				newSymbolName = "Rectangle";  			else if (symbolName == "ellipse-flach")  				newSymbolName = "Ellipse";  			else if (symbolName == "dreieck")  				newSymbolName = "Triangle";  			else if (symbolName == "zelt")  				newSymbolName = "Tent";  			else if (symbolName == "quadrat")  				newSymbolName = "Square";  			else if (symbolName == "kreuz1")  				newSymbolName = "Cross";  			else if (symbolName == "kreuz1")  				newSymbolName = "Cross";  			else if (symbolName == "kreuz2")  				newSymbolName = "Cross-2";  			else if (symbolName == "kreuz4")  				newSymbolName = "Cross-3";  			else if (symbolName == "haus")  				newSymbolName = "House";  			else if (symbolName == "sechseck")  				newSymbolName = "Hexagon";  			else if (symbolName == "stern")  				newSymbolName = "Star";  			else if (symbolName == "MapInfo-Pen-3")  				newSymbolName = "Dot-1";  			else if (symbolName == "MapInfo-Pen-4")  				newSymbolName = "Dash-1";  			else if (symbolName == "MapInfo-Pen-5")  				newSymbolName = "Dash-2";  			else if (symbolName == "MapInfo-Pen-6")  				newSymbolName = "Dash-3";  			else if (symbolName == "MapInfo-Pen-7")  				newSymbolName = "Dash-5";  			else if (symbolName == "MapInfo-Pen-9")  				newSymbolName = "Dash-7";  			else if (symbolName == "MapInfo-Pen-10")  				newSymbolName = "Dash-6";  			else if (symbolName == "MapInfo-Pen-11")  				newSymbolName = "Dash-7";  			else if (symbolName == "MapInfo-Pen-12")  				newSymbolName = "Dash-8";  			else if (symbolName == "MapInfo-Pen-13")  				newSymbolName = "Dash-9";  			else if (symbolName == "MapInfo-Pen-14")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-15")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-16")  				newSymbolName = "DashDash-1";  			else if (symbolName == "MapInfo-Pen-18")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-19")  				newSymbolName = "DotDash-2";  			else if (symbolName == "MapInfo-Pen-20")  				newSymbolName = "DoubleDotDash-1";  			else if (symbolName == "MapInfo-Pen-21")  				newSymbolName = "DoubleDotDash-2";  			else if (symbolName == "MapInfo-Pen-22")  				newSymbolName = "DoubleDotDash-2";  			else if (symbolName == "MapInfo-Pen-23")  				newSymbolName = "DotDash-1";  			else if (symbolName == "MapInfo-Pen-24")  				newSymbolName = "DoubleDotDash-1";  			else if (symbolName == "MapInfo-Pen-25")  				newSymbolName = "DotDash-1";  			else if (symbolName == "MapInfo-Brush-3")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-4")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-5")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-6")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-7")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-8")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-15")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-19")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-20")  				newSymbolName = "Horizontal-2";  			else if (symbolName == "MapInfo-Brush-21")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-22")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-23")  				newSymbolName = "Horizontal-1";  			else if (symbolName == "MapInfo-Brush-26")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-27")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-28")  				newSymbolName = "Vertical-1";  			else if (symbolName == "MapInfo-Brush-29")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-30")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-31")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-32")  				newSymbolName = "RightDiag-1";  			else if (symbolName == "MapInfo-Brush-34")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-35")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-36")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-37")  				newSymbolName = "LeftDiag-1";  			else if (symbolName == "MapInfo-Brush-39")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-40")  				newSymbolName = "Grid-2";  			else if (symbolName == "MapInfo-Brush-41")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-42")  				newSymbolName = "Grid-2";  			else if (symbolName == "MapInfo-Brush-43")  				newSymbolName = "Grid-1";  			else if (symbolName == "MapInfo-Brush-44")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-45")  				newSymbolName = "GridDiag-2";  			else if (symbolName == "MapInfo-Brush-46")  				newSymbolName = "GridDiag-1";  			else if (symbolName == "MapInfo-Brush-47")  				newSymbolName = "Ticks-1";  			else if (symbolName == "MapInfo-Brush-51")  				newSymbolName = "Ticks-1";  			else if (symbolName == "MapInfo-Brush-63")  				newSymbolName = "Dots-2";  			else if (symbolName == "MapInfo-Brush-70")  				newSymbolName = "Dots-1";  			else if (symbolName == "MapInfo-Brush-137")  				newSymbolName = "Dots-2";  			if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  				int symbolIndex;  				if (int.TryParse (newSymbolName' out symbolIndex)) {  					// remove symbol when symbol was 0 - no symbol  					if (symbolIndex == 0) {  						AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  						continue;  					}  				}  				newSymbolName = "default-marker";  			}  			if (symbolName != newSymbolName) {  				AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  				output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  			}  		}  		else  			output.AppendLine (line);  		// not change done  	}  }  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: while ((line = r.ReadLine ()) != null) {  	++lineNumber;  	// replace trailing \" with \\"  	if (line != Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"")) {  		line = Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"");  		AppendLog ("Escape trailing \\\" chars "' lineNumber);  	}  	string[] values = line.Split (new char[] {  		' ''  		'\t'  	}' StringSplitOptions.RemoveEmptyEntries);  	string key;  	if (values.Length > 0)  		key = values [0].ToUpper ();  	else  		key = "";  	if (!IsExpressionKeyword (path + "\\" + key)) {  		if (Regex.IsMatch (line' "[^\\\\]\\\\[^\\\\]")) {  			// escape single backslashes for non expressions  			line = line.Replace ("\\"' "\\\\");  			AppendLog ("Escape \\ characters "' lineNumber);  		}  	}  	else if (IsTextExpressionKeyword (path + "\\" + key)) {  		int pos = line.IndexOf (key) + key.Length + 1;  		string val = line.Substring (pos).Trim ();  		AppendLog ("Review Class Text/Expression: " + val' lineNumber);  		// trying to identify the expression  		//if (Regex.IsMatch(val' @"\(.*\)"))  		//{  		//    // MS_EXPRESSION  		//    AppendLog("Modify expression to string (please review!): " + val' lineNumber);  		//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  		//}  		//else if (Regex.IsMatch(val' @"\/[^\/]*\/"))  		//{  		//    // MS_REGEX  		//    AppendLog("Modify regex expression to string (please review!): " + val' lineNumber);  		//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  		//}  	}  	// set up path of the node  	foreach (string s in groupkeywords) {  		if ((path + "\\" + key) == s) {  			groupStartLineNumber = lineNumber;  			path = s;  			break;  		}  	}  	if (key == "END" && path.LastIndexOf ('\\') > 0) {  		if (path == "\\MAP\\OUTPUTFORMAT") {  			if (outputformat.ToString ().Contains ("PC256")) {  				AppendLog ("Remove deprecated outputformat with IMAGEMODE PC256"' groupStartLineNumber' lineNumber);  			}  			else {  				output.AppendLine (outputformat.ToString ());  				output.AppendLine (line);  			}  			path = path.Substring (0' path.LastIndexOf ('\\'));  			continue;  		}  		path = path.Substring (0' path.LastIndexOf ('\\'));  	}  	// Test elements  	if (path == "\\MAP\\OUTPUTFORMAT") {  		if (key == "OUTPUTFORMAT")  			outputformat.Length = 0;  		outputformat.AppendLine (line);  	}  	else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  		'\'''  		'\"''  		' '  	}) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  		AppendLog ("Upgrade fontset location"' lineNumber);  		output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  	}  	else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  		'\'''  		'\"''  		' '  	}) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  		AppendLog ("Upgrade symbolset location"' lineNumber);  		output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  	}  	else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  		output.AppendLine (line);  		AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  		output.AppendLine ("  DEFRESOLUTION " + values [1]);  	}  	else if (key == "MAP") {  		output.AppendLine (line);  		// add MAP  	}  	else if (key == "IMAGETYPE") {  		List<string> f = new List<string> (new string[] {  			"png"'  			"jpeg"'  			"gif"'  			"png8"'  			"png24"'  			"pdf"'  			"svg"'  			"cairopng"'  			"gtiff"'  			"kml"'  			"kmz"  		});  		//outputFormatObj[] formats = template.outputformatlist;  		//for (int i = 0; i < formats.Length; i++)  		//{  		//    if (!f.Contains(formats[i].name))  		//        f.Add(formats[i].name);  		//}  		for (int i = 0; i < template.numoutputformats; i++) {  			outputFormatObj format = template.getOutputFormat (i);  			if (!f.Contains (format.name))  				f.Add (format.name);  		}  		string imageType = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ();  		if (!f.Contains (imageType)) {  			AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  			output.AppendLine ("  IMAGETYPE png");  		}  		else  			output.AppendLine (line);  	}  	else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  	}  	else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  	}  	else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  	}  	else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  		'\'''  		'\"'  	}).StartsWith ("1.0")) {  		changelog.Length = 0;  		// no upgrading required  		return;  	}  	else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  		List<string> drivers = new List<string> (new string[] {  			"GD/PC256"'  			"GD/GIF"'  			"GD/PNG"'  			"AGG/PNG8"'  			"AGG/PNG"'  			"AGG/JPEG"'  			"CAIRO/PNG"'  			"CAIRO/JPEG"'  			"CAIRO/PDF"'  			"CAIRO/SVG"'  			"OGL/PNG"'  			"KML"'  			"KMZ"  		});  		string driverName = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToUpper ();  		if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  			output.AppendLine (line);  		else {  			AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  			output.AppendLine ("  DRIVER \"AGG/PNG\"");  		}  	}  	else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  		AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  	}  	else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  		if (!fonts.Contains (values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ())) {  			AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  			output.AppendLine ("  FONT \"arial\"");  		}  		else  			output.AppendLine (line);  		// no change done  	}  	else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  		AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  	}  	else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  		AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  	}  	else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  		string symbolName = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ();  		String newSymbolName = symbolName;  		if (symbolName == "grenze2")  			newSymbolName = "Rectangle";  		else if (symbolName == "ellipse-flach")  			newSymbolName = "Ellipse";  		else if (symbolName == "dreieck")  			newSymbolName = "Triangle";  		else if (symbolName == "zelt")  			newSymbolName = "Tent";  		else if (symbolName == "quadrat")  			newSymbolName = "Square";  		else if (symbolName == "kreuz1")  			newSymbolName = "Cross";  		else if (symbolName == "kreuz1")  			newSymbolName = "Cross";  		else if (symbolName == "kreuz2")  			newSymbolName = "Cross-2";  		else if (symbolName == "kreuz4")  			newSymbolName = "Cross-3";  		else if (symbolName == "haus")  			newSymbolName = "House";  		else if (symbolName == "sechseck")  			newSymbolName = "Hexagon";  		else if (symbolName == "stern")  			newSymbolName = "Star";  		else if (symbolName == "MapInfo-Pen-3")  			newSymbolName = "Dot-1";  		else if (symbolName == "MapInfo-Pen-4")  			newSymbolName = "Dash-1";  		else if (symbolName == "MapInfo-Pen-5")  			newSymbolName = "Dash-2";  		else if (symbolName == "MapInfo-Pen-6")  			newSymbolName = "Dash-3";  		else if (symbolName == "MapInfo-Pen-7")  			newSymbolName = "Dash-5";  		else if (symbolName == "MapInfo-Pen-9")  			newSymbolName = "Dash-7";  		else if (symbolName == "MapInfo-Pen-10")  			newSymbolName = "Dash-6";  		else if (symbolName == "MapInfo-Pen-11")  			newSymbolName = "Dash-7";  		else if (symbolName == "MapInfo-Pen-12")  			newSymbolName = "Dash-8";  		else if (symbolName == "MapInfo-Pen-13")  			newSymbolName = "Dash-9";  		else if (symbolName == "MapInfo-Pen-14")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-15")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-16")  			newSymbolName = "DashDash-1";  		else if (symbolName == "MapInfo-Pen-18")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-19")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-20")  			newSymbolName = "DoubleDotDash-1";  		else if (symbolName == "MapInfo-Pen-21")  			newSymbolName = "DoubleDotDash-2";  		else if (symbolName == "MapInfo-Pen-22")  			newSymbolName = "DoubleDotDash-2";  		else if (symbolName == "MapInfo-Pen-23")  			newSymbolName = "DotDash-1";  		else if (symbolName == "MapInfo-Pen-24")  			newSymbolName = "DoubleDotDash-1";  		else if (symbolName == "MapInfo-Pen-25")  			newSymbolName = "DotDash-1";  		else if (symbolName == "MapInfo-Brush-3")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-4")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-5")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-6")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-7")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-8")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-15")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-19")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-20")  			newSymbolName = "Horizontal-2";  		else if (symbolName == "MapInfo-Brush-21")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-22")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-23")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-26")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-27")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-28")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-29")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-30")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-31")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-32")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-34")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-35")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-36")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-37")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-39")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-40")  			newSymbolName = "Grid-2";  		else if (symbolName == "MapInfo-Brush-41")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-42")  			newSymbolName = "Grid-2";  		else if (symbolName == "MapInfo-Brush-43")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-44")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-45")  			newSymbolName = "GridDiag-2";  		else if (symbolName == "MapInfo-Brush-46")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-47")  			newSymbolName = "Ticks-1";  		else if (symbolName == "MapInfo-Brush-51")  			newSymbolName = "Ticks-1";  		else if (symbolName == "MapInfo-Brush-63")  			newSymbolName = "Dots-2";  		else if (symbolName == "MapInfo-Brush-70")  			newSymbolName = "Dots-1";  		else if (symbolName == "MapInfo-Brush-137")  			newSymbolName = "Dots-2";  		if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  			int symbolIndex;  			if (int.TryParse (newSymbolName' out symbolIndex)) {  				// remove symbol when symbol was 0 - no symbol  				if (symbolIndex == 0) {  					AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  					continue;  				}  			}  			newSymbolName = "default-marker";  		}  		if (symbolName != newSymbolName) {  			AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  			output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  		}  	}  	else  		output.AppendLine (line);  	// not change done  }  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: while ((line = r.ReadLine ()) != null) {  	++lineNumber;  	// replace trailing \" with \\"  	if (line != Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"")) {  		line = Regex.Replace (line' "(?<=[^\\\\])\\\\\"\\s*\\Z"' "\\\\\"");  		AppendLog ("Escape trailing \\\" chars "' lineNumber);  	}  	string[] values = line.Split (new char[] {  		' ''  		'\t'  	}' StringSplitOptions.RemoveEmptyEntries);  	string key;  	if (values.Length > 0)  		key = values [0].ToUpper ();  	else  		key = "";  	if (!IsExpressionKeyword (path + "\\" + key)) {  		if (Regex.IsMatch (line' "[^\\\\]\\\\[^\\\\]")) {  			// escape single backslashes for non expressions  			line = line.Replace ("\\"' "\\\\");  			AppendLog ("Escape \\ characters "' lineNumber);  		}  	}  	else if (IsTextExpressionKeyword (path + "\\" + key)) {  		int pos = line.IndexOf (key) + key.Length + 1;  		string val = line.Substring (pos).Trim ();  		AppendLog ("Review Class Text/Expression: " + val' lineNumber);  		// trying to identify the expression  		//if (Regex.IsMatch(val' @"\(.*\)"))  		//{  		//    // MS_EXPRESSION  		//    AppendLog("Modify expression to string (please review!): " + val' lineNumber);  		//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  		//}  		//else if (Regex.IsMatch(val' @"\/[^\/]*\/"))  		//{  		//    // MS_REGEX  		//    AppendLog("Modify regex expression to string (please review!): " + val' lineNumber);  		//    line = line.Substring(0' pos) + "\"" + val.Substring(1' val.Length - 2) + "\"";  		//}  	}  	// set up path of the node  	foreach (string s in groupkeywords) {  		if ((path + "\\" + key) == s) {  			groupStartLineNumber = lineNumber;  			path = s;  			break;  		}  	}  	if (key == "END" && path.LastIndexOf ('\\') > 0) {  		if (path == "\\MAP\\OUTPUTFORMAT") {  			if (outputformat.ToString ().Contains ("PC256")) {  				AppendLog ("Remove deprecated outputformat with IMAGEMODE PC256"' groupStartLineNumber' lineNumber);  			}  			else {  				output.AppendLine (outputformat.ToString ());  				output.AppendLine (line);  			}  			path = path.Substring (0' path.LastIndexOf ('\\'));  			continue;  		}  		path = path.Substring (0' path.LastIndexOf ('\\'));  	}  	// Test elements  	if (path == "\\MAP\\OUTPUTFORMAT") {  		if (key == "OUTPUTFORMAT")  			outputformat.Length = 0;  		outputformat.AppendLine (line);  	}  	else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  		'\'''  		'\"''  		' '  	}) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  		AppendLog ("Upgrade fontset location"' lineNumber);  		output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  	}  	else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  		'\'''  		'\"''  		' '  	}) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  		AppendLog ("Upgrade symbolset location"' lineNumber);  		output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  	}  	else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  		output.AppendLine (line);  		AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  		output.AppendLine ("  DEFRESOLUTION " + values [1]);  	}  	else if (key == "MAP") {  		output.AppendLine (line);  		// add MAP  	}  	else if (key == "IMAGETYPE") {  		List<string> f = new List<string> (new string[] {  			"png"'  			"jpeg"'  			"gif"'  			"png8"'  			"png24"'  			"pdf"'  			"svg"'  			"cairopng"'  			"gtiff"'  			"kml"'  			"kmz"  		});  		//outputFormatObj[] formats = template.outputformatlist;  		//for (int i = 0; i < formats.Length; i++)  		//{  		//    if (!f.Contains(formats[i].name))  		//        f.Add(formats[i].name);  		//}  		for (int i = 0; i < template.numoutputformats; i++) {  			outputFormatObj format = template.getOutputFormat (i);  			if (!f.Contains (format.name))  				f.Add (format.name);  		}  		string imageType = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ();  		if (!f.Contains (imageType)) {  			AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  			output.AppendLine ("  IMAGETYPE png");  		}  		else  			output.AppendLine (line);  	}  	else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  	}  	else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  	}  	else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  		AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  	}  	else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  		'\'''  		'\"'  	}).StartsWith ("1.0")) {  		changelog.Length = 0;  		// no upgrading required  		return;  	}  	else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  		List<string> drivers = new List<string> (new string[] {  			"GD/PC256"'  			"GD/GIF"'  			"GD/PNG"'  			"AGG/PNG8"'  			"AGG/PNG"'  			"AGG/JPEG"'  			"CAIRO/PNG"'  			"CAIRO/JPEG"'  			"CAIRO/PDF"'  			"CAIRO/SVG"'  			"OGL/PNG"'  			"KML"'  			"KMZ"  		});  		string driverName = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToUpper ();  		if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  			output.AppendLine (line);  		else {  			AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  			output.AppendLine ("  DRIVER \"AGG/PNG\"");  		}  	}  	else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  		AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  	}  	else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  		if (!fonts.Contains (values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ())) {  			AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  			output.AppendLine ("  FONT \"arial\"");  		}  		else  			output.AppendLine (line);  		// no change done  	}  	else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  		AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  	}  	else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  		AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  	}  	else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  		string symbolName = values [1].Trim (new char[] {  			'\'''  			'\"'  		}).ToLower ();  		String newSymbolName = symbolName;  		if (symbolName == "grenze2")  			newSymbolName = "Rectangle";  		else if (symbolName == "ellipse-flach")  			newSymbolName = "Ellipse";  		else if (symbolName == "dreieck")  			newSymbolName = "Triangle";  		else if (symbolName == "zelt")  			newSymbolName = "Tent";  		else if (symbolName == "quadrat")  			newSymbolName = "Square";  		else if (symbolName == "kreuz1")  			newSymbolName = "Cross";  		else if (symbolName == "kreuz1")  			newSymbolName = "Cross";  		else if (symbolName == "kreuz2")  			newSymbolName = "Cross-2";  		else if (symbolName == "kreuz4")  			newSymbolName = "Cross-3";  		else if (symbolName == "haus")  			newSymbolName = "House";  		else if (symbolName == "sechseck")  			newSymbolName = "Hexagon";  		else if (symbolName == "stern")  			newSymbolName = "Star";  		else if (symbolName == "MapInfo-Pen-3")  			newSymbolName = "Dot-1";  		else if (symbolName == "MapInfo-Pen-4")  			newSymbolName = "Dash-1";  		else if (symbolName == "MapInfo-Pen-5")  			newSymbolName = "Dash-2";  		else if (symbolName == "MapInfo-Pen-6")  			newSymbolName = "Dash-3";  		else if (symbolName == "MapInfo-Pen-7")  			newSymbolName = "Dash-5";  		else if (symbolName == "MapInfo-Pen-9")  			newSymbolName = "Dash-7";  		else if (symbolName == "MapInfo-Pen-10")  			newSymbolName = "Dash-6";  		else if (symbolName == "MapInfo-Pen-11")  			newSymbolName = "Dash-7";  		else if (symbolName == "MapInfo-Pen-12")  			newSymbolName = "Dash-8";  		else if (symbolName == "MapInfo-Pen-13")  			newSymbolName = "Dash-9";  		else if (symbolName == "MapInfo-Pen-14")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-15")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-16")  			newSymbolName = "DashDash-1";  		else if (symbolName == "MapInfo-Pen-18")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-19")  			newSymbolName = "DotDash-2";  		else if (symbolName == "MapInfo-Pen-20")  			newSymbolName = "DoubleDotDash-1";  		else if (symbolName == "MapInfo-Pen-21")  			newSymbolName = "DoubleDotDash-2";  		else if (symbolName == "MapInfo-Pen-22")  			newSymbolName = "DoubleDotDash-2";  		else if (symbolName == "MapInfo-Pen-23")  			newSymbolName = "DotDash-1";  		else if (symbolName == "MapInfo-Pen-24")  			newSymbolName = "DoubleDotDash-1";  		else if (symbolName == "MapInfo-Pen-25")  			newSymbolName = "DotDash-1";  		else if (symbolName == "MapInfo-Brush-3")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-4")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-5")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-6")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-7")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-8")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-15")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-19")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-20")  			newSymbolName = "Horizontal-2";  		else if (symbolName == "MapInfo-Brush-21")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-22")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-23")  			newSymbolName = "Horizontal-1";  		else if (symbolName == "MapInfo-Brush-26")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-27")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-28")  			newSymbolName = "Vertical-1";  		else if (symbolName == "MapInfo-Brush-29")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-30")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-31")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-32")  			newSymbolName = "RightDiag-1";  		else if (symbolName == "MapInfo-Brush-34")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-35")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-36")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-37")  			newSymbolName = "LeftDiag-1";  		else if (symbolName == "MapInfo-Brush-39")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-40")  			newSymbolName = "Grid-2";  		else if (symbolName == "MapInfo-Brush-41")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-42")  			newSymbolName = "Grid-2";  		else if (symbolName == "MapInfo-Brush-43")  			newSymbolName = "Grid-1";  		else if (symbolName == "MapInfo-Brush-44")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-45")  			newSymbolName = "GridDiag-2";  		else if (symbolName == "MapInfo-Brush-46")  			newSymbolName = "GridDiag-1";  		else if (symbolName == "MapInfo-Brush-47")  			newSymbolName = "Ticks-1";  		else if (symbolName == "MapInfo-Brush-51")  			newSymbolName = "Ticks-1";  		else if (symbolName == "MapInfo-Brush-63")  			newSymbolName = "Dots-2";  		else if (symbolName == "MapInfo-Brush-70")  			newSymbolName = "Dots-1";  		else if (symbolName == "MapInfo-Brush-137")  			newSymbolName = "Dots-2";  		if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  			int symbolIndex;  			if (int.TryParse (newSymbolName' out symbolIndex)) {  				// remove symbol when symbol was 0 - no symbol  				if (symbolIndex == 0) {  					AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  					continue;  				}  			}  			newSymbolName = "default-marker";  		}  		if (symbolName != newSymbolName) {  			AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  			output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  		}  	}  	else  		output.AppendLine (line);  	// not change done  }  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: if (path == "\\MAP\\OUTPUTFORMAT") {  	if (key == "OUTPUTFORMAT")  		outputformat.Length = 0;  	outputformat.AppendLine (line);  }  else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade fontset location"' lineNumber);  	output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade symbolset location"' lineNumber);  	output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  	output.AppendLine (line);  	AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  	output.AppendLine ("  DEFRESOLUTION " + values [1]);  }  else if (key == "MAP") {  	output.AppendLine (line);  	// add MAP  }  else if (key == "IMAGETYPE") {  	List<string> f = new List<string> (new string[] {  		"png"'  		"jpeg"'  		"gif"'  		"png8"'  		"png24"'  		"pdf"'  		"svg"'  		"cairopng"'  		"gtiff"'  		"kml"'  		"kmz"  	});  	//outputFormatObj[] formats = template.outputformatlist;  	//for (int i = 0; i < formats.Length; i++)  	//{  	//    if (!f.Contains(formats[i].name))  	//        f.Add(formats[i].name);  	//}  	for (int i = 0; i < template.numoutputformats; i++) {  		outputFormatObj format = template.getOutputFormat (i);  		if (!f.Contains (format.name))  			f.Add (format.name);  	}  	string imageType = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	if (!f.Contains (imageType)) {  		AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  		output.AppendLine ("  IMAGETYPE png");  	}  	else  		output.AppendLine (line);  }  else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  }  else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")) {  	changelog.Length = 0;  	// no upgrading required  	return;  }  else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  	List<string> drivers = new List<string> (new string[] {  		"GD/PC256"'  		"GD/GIF"'  		"GD/PNG"'  		"AGG/PNG8"'  		"AGG/PNG"'  		"AGG/JPEG"'  		"CAIRO/PNG"'  		"CAIRO/JPEG"'  		"CAIRO/PDF"'  		"CAIRO/SVG"'  		"OGL/PNG"'  		"KML"'  		"KMZ"  	});  	string driverName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToUpper ();  	if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  		output.AppendLine (line);  	else {  		AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  		output.AppendLine ("  DRIVER \"AGG/PNG\"");  	}  }  else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  	AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  }  else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  	if (!fonts.Contains (values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ())) {  		AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  		output.AppendLine ("  FONT \"arial\"");  	}  	else  		output.AppendLine (line);  	// no change done  }  else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  }  else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  }  else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  	string symbolName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	String newSymbolName = symbolName;  	if (symbolName == "grenze2")  		newSymbolName = "Rectangle";  	else if (symbolName == "ellipse-flach")  		newSymbolName = "Ellipse";  	else if (symbolName == "dreieck")  		newSymbolName = "Triangle";  	else if (symbolName == "zelt")  		newSymbolName = "Tent";  	else if (symbolName == "quadrat")  		newSymbolName = "Square";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz2")  		newSymbolName = "Cross-2";  	else if (symbolName == "kreuz4")  		newSymbolName = "Cross-3";  	else if (symbolName == "haus")  		newSymbolName = "House";  	else if (symbolName == "sechseck")  		newSymbolName = "Hexagon";  	else if (symbolName == "stern")  		newSymbolName = "Star";  	else if (symbolName == "MapInfo-Pen-3")  		newSymbolName = "Dot-1";  	else if (symbolName == "MapInfo-Pen-4")  		newSymbolName = "Dash-1";  	else if (symbolName == "MapInfo-Pen-5")  		newSymbolName = "Dash-2";  	else if (symbolName == "MapInfo-Pen-6")  		newSymbolName = "Dash-3";  	else if (symbolName == "MapInfo-Pen-7")  		newSymbolName = "Dash-5";  	else if (symbolName == "MapInfo-Pen-9")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-10")  		newSymbolName = "Dash-6";  	else if (symbolName == "MapInfo-Pen-11")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-12")  		newSymbolName = "Dash-8";  	else if (symbolName == "MapInfo-Pen-13")  		newSymbolName = "Dash-9";  	else if (symbolName == "MapInfo-Pen-14")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-15")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-16")  		newSymbolName = "DashDash-1";  	else if (symbolName == "MapInfo-Pen-18")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-19")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-20")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-21")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-22")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-23")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Pen-24")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-25")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Brush-3")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-4")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-5")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-6")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-7")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-8")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-15")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-19")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-20")  		newSymbolName = "Horizontal-2";  	else if (symbolName == "MapInfo-Brush-21")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-22")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-23")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-26")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-27")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-28")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-29")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-30")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-31")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-32")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-34")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-35")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-36")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-37")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-39")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-40")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-41")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-42")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-43")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-44")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-45")  		newSymbolName = "GridDiag-2";  	else if (symbolName == "MapInfo-Brush-46")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-47")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-51")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-63")  		newSymbolName = "Dots-2";  	else if (symbolName == "MapInfo-Brush-70")  		newSymbolName = "Dots-1";  	else if (symbolName == "MapInfo-Brush-137")  		newSymbolName = "Dots-2";  	if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  		int symbolIndex;  		if (int.TryParse (newSymbolName' out symbolIndex)) {  			// remove symbol when symbol was 0 - no symbol  			if (symbolIndex == 0) {  				AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  				continue;  			}  		}  		newSymbolName = "default-marker";  	}  	if (symbolName != newSymbolName) {  		AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  		output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  	}  }  else  	output.AppendLine (line);  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: if (path == "\\MAP\\OUTPUTFORMAT") {  	if (key == "OUTPUTFORMAT")  		outputformat.Length = 0;  	outputformat.AppendLine (line);  }  else if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade fontset location"' lineNumber);  	output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade symbolset location"' lineNumber);  	output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  	output.AppendLine (line);  	AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  	output.AppendLine ("  DEFRESOLUTION " + values [1]);  }  else if (key == "MAP") {  	output.AppendLine (line);  	// add MAP  }  else if (key == "IMAGETYPE") {  	List<string> f = new List<string> (new string[] {  		"png"'  		"jpeg"'  		"gif"'  		"png8"'  		"png24"'  		"pdf"'  		"svg"'  		"cairopng"'  		"gtiff"'  		"kml"'  		"kmz"  	});  	//outputFormatObj[] formats = template.outputformatlist;  	//for (int i = 0; i < formats.Length; i++)  	//{  	//    if (!f.Contains(formats[i].name))  	//        f.Add(formats[i].name);  	//}  	for (int i = 0; i < template.numoutputformats; i++) {  		outputFormatObj format = template.getOutputFormat (i);  		if (!f.Contains (format.name))  			f.Add (format.name);  	}  	string imageType = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	if (!f.Contains (imageType)) {  		AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  		output.AppendLine ("  IMAGETYPE png");  	}  	else  		output.AppendLine (line);  }  else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  }  else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")) {  	changelog.Length = 0;  	// no upgrading required  	return;  }  else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  	List<string> drivers = new List<string> (new string[] {  		"GD/PC256"'  		"GD/GIF"'  		"GD/PNG"'  		"AGG/PNG8"'  		"AGG/PNG"'  		"AGG/JPEG"'  		"CAIRO/PNG"'  		"CAIRO/JPEG"'  		"CAIRO/PDF"'  		"CAIRO/SVG"'  		"OGL/PNG"'  		"KML"'  		"KMZ"  	});  	string driverName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToUpper ();  	if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  		output.AppendLine (line);  	else {  		AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  		output.AppendLine ("  DRIVER \"AGG/PNG\"");  	}  }  else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  	AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  }  else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  	if (!fonts.Contains (values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ())) {  		AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  		output.AppendLine ("  FONT \"arial\"");  	}  	else  		output.AppendLine (line);  	// no change done  }  else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  }  else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  }  else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  	string symbolName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	String newSymbolName = symbolName;  	if (symbolName == "grenze2")  		newSymbolName = "Rectangle";  	else if (symbolName == "ellipse-flach")  		newSymbolName = "Ellipse";  	else if (symbolName == "dreieck")  		newSymbolName = "Triangle";  	else if (symbolName == "zelt")  		newSymbolName = "Tent";  	else if (symbolName == "quadrat")  		newSymbolName = "Square";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz2")  		newSymbolName = "Cross-2";  	else if (symbolName == "kreuz4")  		newSymbolName = "Cross-3";  	else if (symbolName == "haus")  		newSymbolName = "House";  	else if (symbolName == "sechseck")  		newSymbolName = "Hexagon";  	else if (symbolName == "stern")  		newSymbolName = "Star";  	else if (symbolName == "MapInfo-Pen-3")  		newSymbolName = "Dot-1";  	else if (symbolName == "MapInfo-Pen-4")  		newSymbolName = "Dash-1";  	else if (symbolName == "MapInfo-Pen-5")  		newSymbolName = "Dash-2";  	else if (symbolName == "MapInfo-Pen-6")  		newSymbolName = "Dash-3";  	else if (symbolName == "MapInfo-Pen-7")  		newSymbolName = "Dash-5";  	else if (symbolName == "MapInfo-Pen-9")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-10")  		newSymbolName = "Dash-6";  	else if (symbolName == "MapInfo-Pen-11")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-12")  		newSymbolName = "Dash-8";  	else if (symbolName == "MapInfo-Pen-13")  		newSymbolName = "Dash-9";  	else if (symbolName == "MapInfo-Pen-14")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-15")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-16")  		newSymbolName = "DashDash-1";  	else if (symbolName == "MapInfo-Pen-18")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-19")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-20")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-21")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-22")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-23")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Pen-24")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-25")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Brush-3")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-4")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-5")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-6")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-7")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-8")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-15")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-19")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-20")  		newSymbolName = "Horizontal-2";  	else if (symbolName == "MapInfo-Brush-21")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-22")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-23")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-26")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-27")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-28")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-29")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-30")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-31")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-32")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-34")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-35")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-36")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-37")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-39")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-40")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-41")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-42")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-43")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-44")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-45")  		newSymbolName = "GridDiag-2";  	else if (symbolName == "MapInfo-Brush-46")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-47")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-51")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-63")  		newSymbolName = "Dots-2";  	else if (symbolName == "MapInfo-Brush-70")  		newSymbolName = "Dots-1";  	else if (symbolName == "MapInfo-Brush-137")  		newSymbolName = "Dots-2";  	if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  		int symbolIndex;  		if (int.TryParse (newSymbolName' out symbolIndex)) {  			// remove symbol when symbol was 0 - no symbol  			if (symbolIndex == 0) {  				AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  				continue;  			}  		}  		newSymbolName = "default-marker";  	}  	if (symbolName != newSymbolName) {  		AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  		output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  	}  }  else  	output.AppendLine (line);  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade fontset location"' lineNumber);  	output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade symbolset location"' lineNumber);  	output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  	output.AppendLine (line);  	AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  	output.AppendLine ("  DEFRESOLUTION " + values [1]);  }  else if (key == "MAP") {  	output.AppendLine (line);  	// add MAP  }  else if (key == "IMAGETYPE") {  	List<string> f = new List<string> (new string[] {  		"png"'  		"jpeg"'  		"gif"'  		"png8"'  		"png24"'  		"pdf"'  		"svg"'  		"cairopng"'  		"gtiff"'  		"kml"'  		"kmz"  	});  	//outputFormatObj[] formats = template.outputformatlist;  	//for (int i = 0; i < formats.Length; i++)  	//{  	//    if (!f.Contains(formats[i].name))  	//        f.Add(formats[i].name);  	//}  	for (int i = 0; i < template.numoutputformats; i++) {  		outputFormatObj format = template.getOutputFormat (i);  		if (!f.Contains (format.name))  			f.Add (format.name);  	}  	string imageType = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	if (!f.Contains (imageType)) {  		AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  		output.AppendLine ("  IMAGETYPE png");  	}  	else  		output.AppendLine (line);  }  else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  }  else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")) {  	changelog.Length = 0;  	// no upgrading required  	return;  }  else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  	List<string> drivers = new List<string> (new string[] {  		"GD/PC256"'  		"GD/GIF"'  		"GD/PNG"'  		"AGG/PNG8"'  		"AGG/PNG"'  		"AGG/JPEG"'  		"CAIRO/PNG"'  		"CAIRO/JPEG"'  		"CAIRO/PDF"'  		"CAIRO/SVG"'  		"OGL/PNG"'  		"KML"'  		"KMZ"  	});  	string driverName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToUpper ();  	if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  		output.AppendLine (line);  	else {  		AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  		output.AppendLine ("  DRIVER \"AGG/PNG\"");  	}  }  else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  	AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  }  else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  	if (!fonts.Contains (values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ())) {  		AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  		output.AppendLine ("  FONT \"arial\"");  	}  	else  		output.AppendLine (line);  	// no change done  }  else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  }  else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  }  else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  	string symbolName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	String newSymbolName = symbolName;  	if (symbolName == "grenze2")  		newSymbolName = "Rectangle";  	else if (symbolName == "ellipse-flach")  		newSymbolName = "Ellipse";  	else if (symbolName == "dreieck")  		newSymbolName = "Triangle";  	else if (symbolName == "zelt")  		newSymbolName = "Tent";  	else if (symbolName == "quadrat")  		newSymbolName = "Square";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz2")  		newSymbolName = "Cross-2";  	else if (symbolName == "kreuz4")  		newSymbolName = "Cross-3";  	else if (symbolName == "haus")  		newSymbolName = "House";  	else if (symbolName == "sechseck")  		newSymbolName = "Hexagon";  	else if (symbolName == "stern")  		newSymbolName = "Star";  	else if (symbolName == "MapInfo-Pen-3")  		newSymbolName = "Dot-1";  	else if (symbolName == "MapInfo-Pen-4")  		newSymbolName = "Dash-1";  	else if (symbolName == "MapInfo-Pen-5")  		newSymbolName = "Dash-2";  	else if (symbolName == "MapInfo-Pen-6")  		newSymbolName = "Dash-3";  	else if (symbolName == "MapInfo-Pen-7")  		newSymbolName = "Dash-5";  	else if (symbolName == "MapInfo-Pen-9")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-10")  		newSymbolName = "Dash-6";  	else if (symbolName == "MapInfo-Pen-11")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-12")  		newSymbolName = "Dash-8";  	else if (symbolName == "MapInfo-Pen-13")  		newSymbolName = "Dash-9";  	else if (symbolName == "MapInfo-Pen-14")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-15")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-16")  		newSymbolName = "DashDash-1";  	else if (symbolName == "MapInfo-Pen-18")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-19")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-20")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-21")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-22")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-23")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Pen-24")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-25")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Brush-3")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-4")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-5")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-6")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-7")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-8")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-15")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-19")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-20")  		newSymbolName = "Horizontal-2";  	else if (symbolName == "MapInfo-Brush-21")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-22")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-23")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-26")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-27")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-28")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-29")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-30")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-31")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-32")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-34")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-35")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-36")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-37")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-39")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-40")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-41")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-42")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-43")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-44")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-45")  		newSymbolName = "GridDiag-2";  	else if (symbolName == "MapInfo-Brush-46")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-47")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-51")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-63")  		newSymbolName = "Dots-2";  	else if (symbolName == "MapInfo-Brush-70")  		newSymbolName = "Dots-1";  	else if (symbolName == "MapInfo-Brush-137")  		newSymbolName = "Dots-2";  	if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  		int symbolIndex;  		if (int.TryParse (newSymbolName' out symbolIndex)) {  			// remove symbol when symbol was 0 - no symbol  			if (symbolIndex == 0) {  				AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  				continue;  			}  		}  		newSymbolName = "default-marker";  	}  	if (symbolName != newSymbolName) {  		AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  		output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  	}  }  else  	output.AppendLine (line);  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: if (key == "FONTSET" && line.Substring (line.IndexOf ("FONTSET") + 8).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != fontsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade fontset location"' lineNumber);  	output.AppendLine ("  FONTSET \"" + fontsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade symbolset location"' lineNumber);  	output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  	output.AppendLine (line);  	AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  	output.AppendLine ("  DEFRESOLUTION " + values [1]);  }  else if (key == "MAP") {  	output.AppendLine (line);  	// add MAP  }  else if (key == "IMAGETYPE") {  	List<string> f = new List<string> (new string[] {  		"png"'  		"jpeg"'  		"gif"'  		"png8"'  		"png24"'  		"pdf"'  		"svg"'  		"cairopng"'  		"gtiff"'  		"kml"'  		"kmz"  	});  	//outputFormatObj[] formats = template.outputformatlist;  	//for (int i = 0; i < formats.Length; i++)  	//{  	//    if (!f.Contains(formats[i].name))  	//        f.Add(formats[i].name);  	//}  	for (int i = 0; i < template.numoutputformats; i++) {  		outputFormatObj format = template.getOutputFormat (i);  		if (!f.Contains (format.name))  			f.Add (format.name);  	}  	string imageType = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	if (!f.Contains (imageType)) {  		AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  		output.AppendLine ("  IMAGETYPE png");  	}  	else  		output.AppendLine (line);  }  else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  }  else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")) {  	changelog.Length = 0;  	// no upgrading required  	return;  }  else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  	List<string> drivers = new List<string> (new string[] {  		"GD/PC256"'  		"GD/GIF"'  		"GD/PNG"'  		"AGG/PNG8"'  		"AGG/PNG"'  		"AGG/JPEG"'  		"CAIRO/PNG"'  		"CAIRO/JPEG"'  		"CAIRO/PDF"'  		"CAIRO/SVG"'  		"OGL/PNG"'  		"KML"'  		"KMZ"  	});  	string driverName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToUpper ();  	if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  		output.AppendLine (line);  	else {  		AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  		output.AppendLine ("  DRIVER \"AGG/PNG\"");  	}  }  else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  	AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  }  else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  	if (!fonts.Contains (values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ())) {  		AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  		output.AppendLine ("  FONT \"arial\"");  	}  	else  		output.AppendLine (line);  	// no change done  }  else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  }  else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  }  else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  	string symbolName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	String newSymbolName = symbolName;  	if (symbolName == "grenze2")  		newSymbolName = "Rectangle";  	else if (symbolName == "ellipse-flach")  		newSymbolName = "Ellipse";  	else if (symbolName == "dreieck")  		newSymbolName = "Triangle";  	else if (symbolName == "zelt")  		newSymbolName = "Tent";  	else if (symbolName == "quadrat")  		newSymbolName = "Square";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz2")  		newSymbolName = "Cross-2";  	else if (symbolName == "kreuz4")  		newSymbolName = "Cross-3";  	else if (symbolName == "haus")  		newSymbolName = "House";  	else if (symbolName == "sechseck")  		newSymbolName = "Hexagon";  	else if (symbolName == "stern")  		newSymbolName = "Star";  	else if (symbolName == "MapInfo-Pen-3")  		newSymbolName = "Dot-1";  	else if (symbolName == "MapInfo-Pen-4")  		newSymbolName = "Dash-1";  	else if (symbolName == "MapInfo-Pen-5")  		newSymbolName = "Dash-2";  	else if (symbolName == "MapInfo-Pen-6")  		newSymbolName = "Dash-3";  	else if (symbolName == "MapInfo-Pen-7")  		newSymbolName = "Dash-5";  	else if (symbolName == "MapInfo-Pen-9")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-10")  		newSymbolName = "Dash-6";  	else if (symbolName == "MapInfo-Pen-11")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-12")  		newSymbolName = "Dash-8";  	else if (symbolName == "MapInfo-Pen-13")  		newSymbolName = "Dash-9";  	else if (symbolName == "MapInfo-Pen-14")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-15")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-16")  		newSymbolName = "DashDash-1";  	else if (symbolName == "MapInfo-Pen-18")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-19")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-20")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-21")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-22")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-23")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Pen-24")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-25")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Brush-3")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-4")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-5")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-6")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-7")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-8")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-15")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-19")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-20")  		newSymbolName = "Horizontal-2";  	else if (symbolName == "MapInfo-Brush-21")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-22")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-23")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-26")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-27")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-28")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-29")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-30")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-31")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-32")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-34")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-35")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-36")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-37")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-39")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-40")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-41")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-42")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-43")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-44")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-45")  		newSymbolName = "GridDiag-2";  	else if (symbolName == "MapInfo-Brush-46")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-47")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-51")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-63")  		newSymbolName = "Dots-2";  	else if (symbolName == "MapInfo-Brush-70")  		newSymbolName = "Dots-1";  	else if (symbolName == "MapInfo-Brush-137")  		newSymbolName = "Dots-2";  	if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  		int symbolIndex;  		if (int.TryParse (newSymbolName' out symbolIndex)) {  			// remove symbol when symbol was 0 - no symbol  			if (symbolIndex == 0) {  				AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  				continue;  			}  		}  		newSymbolName = "default-marker";  	}  	if (symbolName != newSymbolName) {  		AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  		output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  	}  }  else  	output.AppendLine (line);  
Magic Number,DMS.MapManager,MapfileConverter,C:\repos\DMS-Aus_MapManager\MapManager\MapfileConverter.cs,Parse,The following statement contains a magic number: if (key == "SYMBOLSET" && line.Substring (line.IndexOf ("SYMBOLSET") + 10).ToUpper ().Trim (new char[] {  	'\'''  	'\"''  	' '  }) != symbolsetPath.ToUpper ().Replace ("\\"' "\\\\")) {  	AppendLog ("Upgrade symbolset location"' lineNumber);  	output.AppendLine ("  SYMBOLSET \"" + symbolsetPath.Replace ("\\"' "\\\\") + "\"");  }  else if (key == "RESOLUTION" && !mapfileContents.Contains ("DEFRESOLUTION ")) {  	output.AppendLine (line);  	AppendLog ("Add DEFRESOLUTION " + values [1]' lineNumber);  	output.AppendLine ("  DEFRESOLUTION " + values [1]);  }  else if (key == "MAP") {  	output.AppendLine (line);  	// add MAP  }  else if (key == "IMAGETYPE") {  	List<string> f = new List<string> (new string[] {  		"png"'  		"jpeg"'  		"gif"'  		"png8"'  		"png24"'  		"pdf"'  		"svg"'  		"cairopng"'  		"gtiff"'  		"kml"'  		"kmz"  	});  	//outputFormatObj[] formats = template.outputformatlist;  	//for (int i = 0; i < formats.Length; i++)  	//{  	//    if (!f.Contains(formats[i].name))  	//        f.Add(formats[i].name);  	//}  	for (int i = 0; i < template.numoutputformats; i++) {  		outputFormatObj format = template.getOutputFormat (i);  		if (!f.Contains (format.name))  			f.Add (format.name);  	}  	string imageType = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	if (!f.Contains (imageType)) {  		AppendLog ("Change image type: " + imageType + " -> png"' lineNumber);  		output.AppendLine ("  IMAGETYPE png");  	}  	else  		output.AppendLine (line);  }  else if (key == "BACKGROUNDCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWCOLOR" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWCOLOR " + values [1]' lineNumber);  }  else if (key == "BACKGROUNDSHADOWSIZE" && (path == "\\MAP\\LAYER\\CLASS\\LABEL" || path == "\\MAP\\SCALEBAR\\LABEL")) {  	AppendLog ("Remove label BACKGROUNDSHADOWSIZE " + values [1]' lineNumber);  }  else if (!ignoreVersion && key == "\"MAPMANAGER_VERSION\"" && path == "\\MAP\\WEB\\METADATA" && values [1].Trim (new char[] {  	'\'''  	'\"'  }).StartsWith ("1.0")) {  	changelog.Length = 0;  	// no upgrading required  	return;  }  else if (key == "DRIVER" && path == "\\MAP\\OUTPUTFORMAT") {  	List<string> drivers = new List<string> (new string[] {  		"GD/PC256"'  		"GD/GIF"'  		"GD/PNG"'  		"AGG/PNG8"'  		"AGG/PNG"'  		"AGG/JPEG"'  		"CAIRO/PNG"'  		"CAIRO/JPEG"'  		"CAIRO/PDF"'  		"CAIRO/SVG"'  		"OGL/PNG"'  		"KML"'  		"KMZ"  	});  	string driverName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToUpper ();  	if (driverName.StartsWith ("GDAL/") || driverName.StartsWith ("/OGR") || drivers.Contains (driverName))  		output.AppendLine (line);  	else {  		AppendLog ("Change OUTPUTFORMAT/DRIVER " + values [1] + " -> AGG/PNG"' lineNumber);  		output.AppendLine ("  DRIVER \"AGG/PNG\"");  	}  }  else if ((key == "PATTERN" || key == "POSITION" || key == "GAP" || key == "LINECAP" || key == "LINEJOIN" || key == "LINEJOINMAXSIZE") && path == "\\MAP\\SYMBOL") {  	AppendLog ("Remove " + key + " from the SYMBOL section"' lineNumber);  }  else if (key == "FONT" && path == "\\MAP\\LAYER\\CLASS\\LABEL") {  	if (!fonts.Contains (values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ())) {  		AppendLog ("Change missing font " + values [1] + " to arial"' lineNumber);  		output.AppendLine ("  FONT \"arial\"");  	}  	else  		output.AppendLine (line);  	// no change done  }  else if (key == "LABELANGLEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELANGLEITEM " + values [1]' lineNumber);  }  else if (key == "LABELSIZEITEM" && path == "\\MAP\\LAYER") {  	AppendLog ("Remove LABELSIZEITEM " + values [1]' lineNumber);  }  else if (key == "SYMBOL" && path == "\\MAP\\LAYER\\CLASS\\STYLE") {  	string symbolName = values [1].Trim (new char[] {  		'\'''  		'\"'  	}).ToLower ();  	String newSymbolName = symbolName;  	if (symbolName == "grenze2")  		newSymbolName = "Rectangle";  	else if (symbolName == "ellipse-flach")  		newSymbolName = "Ellipse";  	else if (symbolName == "dreieck")  		newSymbolName = "Triangle";  	else if (symbolName == "zelt")  		newSymbolName = "Tent";  	else if (symbolName == "quadrat")  		newSymbolName = "Square";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz1")  		newSymbolName = "Cross";  	else if (symbolName == "kreuz2")  		newSymbolName = "Cross-2";  	else if (symbolName == "kreuz4")  		newSymbolName = "Cross-3";  	else if (symbolName == "haus")  		newSymbolName = "House";  	else if (symbolName == "sechseck")  		newSymbolName = "Hexagon";  	else if (symbolName == "stern")  		newSymbolName = "Star";  	else if (symbolName == "MapInfo-Pen-3")  		newSymbolName = "Dot-1";  	else if (symbolName == "MapInfo-Pen-4")  		newSymbolName = "Dash-1";  	else if (symbolName == "MapInfo-Pen-5")  		newSymbolName = "Dash-2";  	else if (symbolName == "MapInfo-Pen-6")  		newSymbolName = "Dash-3";  	else if (symbolName == "MapInfo-Pen-7")  		newSymbolName = "Dash-5";  	else if (symbolName == "MapInfo-Pen-9")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-10")  		newSymbolName = "Dash-6";  	else if (symbolName == "MapInfo-Pen-11")  		newSymbolName = "Dash-7";  	else if (symbolName == "MapInfo-Pen-12")  		newSymbolName = "Dash-8";  	else if (symbolName == "MapInfo-Pen-13")  		newSymbolName = "Dash-9";  	else if (symbolName == "MapInfo-Pen-14")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-15")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-16")  		newSymbolName = "DashDash-1";  	else if (symbolName == "MapInfo-Pen-18")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-19")  		newSymbolName = "DotDash-2";  	else if (symbolName == "MapInfo-Pen-20")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-21")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-22")  		newSymbolName = "DoubleDotDash-2";  	else if (symbolName == "MapInfo-Pen-23")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Pen-24")  		newSymbolName = "DoubleDotDash-1";  	else if (symbolName == "MapInfo-Pen-25")  		newSymbolName = "DotDash-1";  	else if (symbolName == "MapInfo-Brush-3")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-4")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-5")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-6")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-7")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-8")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-15")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-19")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-20")  		newSymbolName = "Horizontal-2";  	else if (symbolName == "MapInfo-Brush-21")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-22")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-23")  		newSymbolName = "Horizontal-1";  	else if (symbolName == "MapInfo-Brush-26")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-27")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-28")  		newSymbolName = "Vertical-1";  	else if (symbolName == "MapInfo-Brush-29")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-30")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-31")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-32")  		newSymbolName = "RightDiag-1";  	else if (symbolName == "MapInfo-Brush-34")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-35")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-36")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-37")  		newSymbolName = "LeftDiag-1";  	else if (symbolName == "MapInfo-Brush-39")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-40")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-41")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-42")  		newSymbolName = "Grid-2";  	else if (symbolName == "MapInfo-Brush-43")  		newSymbolName = "Grid-1";  	else if (symbolName == "MapInfo-Brush-44")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-45")  		newSymbolName = "GridDiag-2";  	else if (symbolName == "MapInfo-Brush-46")  		newSymbolName = "GridDiag-1";  	else if (symbolName == "MapInfo-Brush-47")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-51")  		newSymbolName = "Ticks-1";  	else if (symbolName == "MapInfo-Brush-63")  		newSymbolName = "Dots-2";  	else if (symbolName == "MapInfo-Brush-70")  		newSymbolName = "Dots-1";  	else if (symbolName == "MapInfo-Brush-137")  		newSymbolName = "Dots-2";  	if (MapLibrary.MapUtils.FindSymbol (template.symbolset' newSymbolName) == null) {  		int symbolIndex;  		if (int.TryParse (newSymbolName' out symbolIndex)) {  			// remove symbol when symbol was 0 - no symbol  			if (symbolIndex == 0) {  				AppendLog ("Remove symbol with name: " + symbolName' lineNumber);  				continue;  			}  		}  		newSymbolName = "default-marker";  	}  	if (symbolName != newSymbolName) {  		AppendLog ("Rename symbol reference: " + symbolName + " -> " + newSymbolName' lineNumber);  		output.AppendLine ("  SYMBOL \'" + newSymbolName + "\'");  	}  }  else  	output.AppendLine (line);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: try {  	c.Parse (File.ReadAllText (file' Encoding.UTF8)' false);  	MapObjectHolder mapH;  	mapObj map;  	if (c.HasToConvert ()) {  		MapFileConvertForm form = new MapFileConvertForm (c.GetChangeLog ());  		if (form.ShowDialog (this) == DialogResult.Yes) {  			map = mapscript.msLoadMapFromString (c.GetMapFile ()' null);  			mapH = new MapObjectHolder (map' null);  		}  		else  			throw new Exception ("Map file conversion aborted");  	}  	else {  		mapH = MapUtils.OpenMap (file);  		map = mapH;  	}  	if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  		map.setExtent (0' 0' 10' 10);  	mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  	mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  	mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  	mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  	mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  	mapControl.Target = mapH;  	layerControl_ItemSelect (this' null);  	layerControl.Target = mapControl.Target;  	selectListForm.selectList.Target = mapControl.Target;  	LoadTextContents ();  	SetDirty (false);  	if (c.HasToConvert ())  		SetDirty (true);  	// conversion happened  	if (map.symbolset.filename != null && !File.Exists (map.symbolset.filename)) {  		// override the symbolset if that points to incorrect location  		map.setSymbolSet (Application.StartupPath + "\\templates\\symbols.sym");  	}  	if (map.fontset.filename != null && !File.Exists (map.fontset.filename)) {  		// override the fontset if that points to incorrect location  		map.setFontSet (Application.StartupPath + "\\templates\\font.list");  	}  	if (MapUtils.RenameDuplicatedNames (map)) {  		MessageBox.Show ("Duplicated layer names detected in this mapfile' which is not supported by IntraMaps. The layers will be renamed to unique names."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  		layerControl.RefreshView ();  		SetDirty (true);  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message + ". Please correct the issue in the text tab."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	SetDirty (false);  	mapControl.Target = null;  	layerControl_ItemSelect (this' null);  	layerControl.Target = null;  	selectListForm.selectList.Target = null;  	if (c.HasToConvert ())  		scintillaControl.Text = c.GetMapFile ();  	else  		scintillaControl.Text = File.ReadAllText (fileName' Encoding.UTF8);  	SetMargins ();  	tabControlContents.SelectedIndex = 1;  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: try {  	c.Parse (File.ReadAllText (file' Encoding.UTF8)' false);  	MapObjectHolder mapH;  	mapObj map;  	if (c.HasToConvert ()) {  		MapFileConvertForm form = new MapFileConvertForm (c.GetChangeLog ());  		if (form.ShowDialog (this) == DialogResult.Yes) {  			map = mapscript.msLoadMapFromString (c.GetMapFile ()' null);  			mapH = new MapObjectHolder (map' null);  		}  		else  			throw new Exception ("Map file conversion aborted");  	}  	else {  		mapH = MapUtils.OpenMap (file);  		map = mapH;  	}  	if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  		map.setExtent (0' 0' 10' 10);  	mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  	mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  	mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  	mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  	mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  	mapControl.Target = mapH;  	layerControl_ItemSelect (this' null);  	layerControl.Target = mapControl.Target;  	selectListForm.selectList.Target = mapControl.Target;  	LoadTextContents ();  	SetDirty (false);  	if (c.HasToConvert ())  		SetDirty (true);  	// conversion happened  	if (map.symbolset.filename != null && !File.Exists (map.symbolset.filename)) {  		// override the symbolset if that points to incorrect location  		map.setSymbolSet (Application.StartupPath + "\\templates\\symbols.sym");  	}  	if (map.fontset.filename != null && !File.Exists (map.fontset.filename)) {  		// override the fontset if that points to incorrect location  		map.setFontSet (Application.StartupPath + "\\templates\\font.list");  	}  	if (MapUtils.RenameDuplicatedNames (map)) {  		MessageBox.Show ("Duplicated layer names detected in this mapfile' which is not supported by IntraMaps. The layers will be renamed to unique names."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  		layerControl.RefreshView ();  		SetDirty (true);  	}  }  catch (Exception ex) {  	MessageBox.Show (ex.Message + ". Please correct the issue in the text tab."' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	SetDirty (false);  	mapControl.Target = null;  	layerControl_ItemSelect (this' null);  	layerControl.Target = null;  	selectListForm.selectList.Target = null;  	if (c.HasToConvert ())  		scintillaControl.Text = c.GetMapFile ();  	else  		scintillaControl.Text = File.ReadAllText (fileName' Encoding.UTF8);  	SetMargins ();  	tabControlContents.SelectedIndex = 1;  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  	map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  	map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,OpenMap,The following statement contains a magic number: map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: try {  	// opening the template file if exists  	if (File.Exists (Application.StartupPath + "\\templates\\new.map")) {  		if (!OpenMap (Application.StartupPath + "\\templates\\new.map"' true))  			return;  	}  	else {  		if (dirtyFlag || buttonApply.Enabled) {  			DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question);  			if (result == DialogResult.Yes)  				SaveMap ();  			else if (result == DialogResult.Cancel)  				return;  		}  		buttonApply.Enabled = false;  		MapObjectHolder mapH = MapUtils.CreateMap ();  		mapObj map = mapH;  		if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  			map.setExtent (0' 0' 10' 10);  		mapControl.Target = mapH;  		mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  		mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  		mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  		mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  		mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  		layerControl_ItemSelect (this' null);  		layerControl.Target = mapControl.Target;  		selectListForm.selectList.Target = mapControl.Target;  		layerControl.InitialExtentSet += new EventHandler (layerControl_InitialExtentSet);  	}  	fileName = "new.map";  	UpdateMenuState ();  	UpdateFileMonitor ();  }  catch (Exception ex) {  	MessageBox.Show ("Error creating map' " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: try {  	// opening the template file if exists  	if (File.Exists (Application.StartupPath + "\\templates\\new.map")) {  		if (!OpenMap (Application.StartupPath + "\\templates\\new.map"' true))  			return;  	}  	else {  		if (dirtyFlag || buttonApply.Enabled) {  			DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question);  			if (result == DialogResult.Yes)  				SaveMap ();  			else if (result == DialogResult.Cancel)  				return;  		}  		buttonApply.Enabled = false;  		MapObjectHolder mapH = MapUtils.CreateMap ();  		mapObj map = mapH;  		if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  			map.setExtent (0' 0' 10' 10);  		mapControl.Target = mapH;  		mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  		mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  		mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  		mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  		mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  		layerControl_ItemSelect (this' null);  		layerControl.Target = mapControl.Target;  		selectListForm.selectList.Target = mapControl.Target;  		layerControl.InitialExtentSet += new EventHandler (layerControl_InitialExtentSet);  	}  	fileName = "new.map";  	UpdateMenuState ();  	UpdateFileMonitor ();  }  catch (Exception ex) {  	MessageBox.Show ("Error creating map' " + ex.Message' "MapManager"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: if (File.Exists (Application.StartupPath + "\\templates\\new.map")) {  	if (!OpenMap (Application.StartupPath + "\\templates\\new.map"' true))  		return;  }  else {  	if (dirtyFlag || buttonApply.Enabled) {  		DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question);  		if (result == DialogResult.Yes)  			SaveMap ();  		else if (result == DialogResult.Cancel)  			return;  	}  	buttonApply.Enabled = false;  	MapObjectHolder mapH = MapUtils.CreateMap ();  	mapObj map = mapH;  	if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  		map.setExtent (0' 0' 10' 10);  	mapControl.Target = mapH;  	mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  	mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  	mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  	mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  	mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  	layerControl_ItemSelect (this' null);  	layerControl.Target = mapControl.Target;  	selectListForm.selectList.Target = mapControl.Target;  	layerControl.InitialExtentSet += new EventHandler (layerControl_InitialExtentSet);  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: if (File.Exists (Application.StartupPath + "\\templates\\new.map")) {  	if (!OpenMap (Application.StartupPath + "\\templates\\new.map"' true))  		return;  }  else {  	if (dirtyFlag || buttonApply.Enabled) {  		DialogResult result = MessageBox.Show ("The map has been edited' would you like to save the changes?"' "MapManager"' MessageBoxButtons.YesNoCancel' MessageBoxIcon.Question);  		if (result == DialogResult.Yes)  			SaveMap ();  		else if (result == DialogResult.Cancel)  			return;  	}  	buttonApply.Enabled = false;  	MapObjectHolder mapH = MapUtils.CreateMap ();  	mapObj map = mapH;  	if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  		map.setExtent (0' 0' 10' 10);  	mapControl.Target = mapH;  	mapH.PropertyChanged += new System.EventHandler (this.MainForm_PropertyChanged);  	mapH.PropertyChanging += new EventHandler (MainForm_PropertyChanging);  	mapH.SelectionChanged += new EventHandler (MainForm_SelectionChanged);  	mapH.ZoomChanged += new MapObjectHolder.ZoomChangedEventHandler (MainForm_ZoomChanged);  	mapH.PositionChanged += new MapObjectHolder.PositionChangedEventHandler (MainForm_PositionChanged);  	layerControl_ItemSelect (this' null);  	layerControl.Target = mapControl.Target;  	selectListForm.selectList.Target = mapControl.Target;  	layerControl.InitialExtentSet += new EventHandler (layerControl_InitialExtentSet);  }  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  	map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: if (map.extent.maxx == -1 && map.extent.minx == -1 && map.extent.maxy == -1 && map.extent.miny == -1)  	map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,NewMap,The following statement contains a magic number: map.setExtent (0' 0' 10' 10);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,selectByShapeToolStripMenuItem_Click,The following statement contains a magic number: if (selectByShapeToolStripMenuItem.Checked) {  	selectShapeForm.Location = new Point (this.Left + this.Width - selectShapeForm.Width' this.Bottom - selectShapeForm.Height - 40);  	selectShapeForm.Show (this);  }  else  	selectShapeForm.Hide ();  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,selectByShapeToolStripMenuItem_Click,The following statement contains a magic number: selectShapeForm.Location = new Point (this.Left + this.Width - selectShapeForm.Width' this.Bottom - selectShapeForm.Height - 40);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,selectedFeaturesToolStripMenuItem_Click,The following statement contains a magic number: if (selectedFeaturesToolStripMenuItem.Checked) {  	selectListForm.Location = new Point (this.Left + this.Width - selectListForm.Width' this.Top + 40);  	selectListForm.Show (this);  }  else  	selectListForm.Hide ();  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,selectedFeaturesToolStripMenuItem_Click,The following statement contains a magic number: selectListForm.Location = new Point (this.Left + this.Width - selectListForm.Width' this.Top + 40);  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,SetMargins,The following statement contains a magic number: scintillaControl.Margins.Margin0.Width = scintillaControl.NativeInterface.TextWidth (33' scintillaControl.Lines.Count.ToString ()) + 6;  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,SetMargins,The following statement contains a magic number: scintillaControl.Margins.Margin0.Width = scintillaControl.NativeInterface.TextWidth (33' scintillaControl.Lines.Count.ToString ()) + 6;  
Magic Number,DMS.MapManager,MainForm,C:\repos\DMS-Aus_MapManager\MapManager\MainForm.cs,SetMargins,The following statement contains a magic number: scintillaControl.Margins.Margin2.Width = 20;  
Magic Number,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The following statement contains a magic number: try {  	// active map variable  	map.setSize (imageSize + (imageBuffer * 2)' imageSize + (imageBuffer * 2));  	// 0/0/0 tile variables  	double startPointX = startX;  	double startPointY = startY;  	double initGap = initTileGap;  	// inital distance between tiles' for level 0 is max meters - min meters  	// meta-buffer to fix labeling as a multiplier  	double buffer = 1 + ((double)imageBuffer / (double)imageSize);  	// find the spacing between each tile for level  	double gap = (initGap / Math.Pow (2' z));  	// buffer in meters for each level  	double buffermeters = (gap * buffer) - gap;  	// set map extents for tile x values  	map.extent.minx = (startPointX + (gap * x)) - buffermeters;  	map.extent.maxx = (startPointX + (gap * x) + gap) + buffermeters;  	// set map extents for tile y values  	map.extent.miny = (startPointY + (gap * y)) - buffermeters;  	map.extent.maxy = (startPointY + (gap * y) + gap) + buffermeters;  	// generate map image  	using (imageObj image = map.draw ()) {  		Image mapImage;  		byte[] img = image.getBytes ();  		using (MemoryStream ms = new MemoryStream (img)) {  			mapImage = Image.FromStream (ms);  			ms.Flush ();  			// clip buffer area off generated image  			if (!(buffer == 0)) {  				Rectangle cropRect = new Rectangle (imageBuffer' imageBuffer' imageSize' imageSize);  				Bitmap bmpImage = new Bitmap (mapImage);  				Bitmap bmpCrop = bmpImage.Clone (cropRect' bmpImage.PixelFormat);  				mapImage = (Image)(bmpCrop);  			}  			// save image to disk in TMS format location  			System.IO.Directory.CreateDirectory (savePath + "\\" + z + "\\" + x);  			if (imageFormat == "png") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Png);  			}  			if (imageFormat == "jpg") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Jpeg);  			}  		}  	}  }  catch (Exception ex) {  	ExceptionDump (ex);  }  
Magic Number,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The following statement contains a magic number: try {  	// active map variable  	map.setSize (imageSize + (imageBuffer * 2)' imageSize + (imageBuffer * 2));  	// 0/0/0 tile variables  	double startPointX = startX;  	double startPointY = startY;  	double initGap = initTileGap;  	// inital distance between tiles' for level 0 is max meters - min meters  	// meta-buffer to fix labeling as a multiplier  	double buffer = 1 + ((double)imageBuffer / (double)imageSize);  	// find the spacing between each tile for level  	double gap = (initGap / Math.Pow (2' z));  	// buffer in meters for each level  	double buffermeters = (gap * buffer) - gap;  	// set map extents for tile x values  	map.extent.minx = (startPointX + (gap * x)) - buffermeters;  	map.extent.maxx = (startPointX + (gap * x) + gap) + buffermeters;  	// set map extents for tile y values  	map.extent.miny = (startPointY + (gap * y)) - buffermeters;  	map.extent.maxy = (startPointY + (gap * y) + gap) + buffermeters;  	// generate map image  	using (imageObj image = map.draw ()) {  		Image mapImage;  		byte[] img = image.getBytes ();  		using (MemoryStream ms = new MemoryStream (img)) {  			mapImage = Image.FromStream (ms);  			ms.Flush ();  			// clip buffer area off generated image  			if (!(buffer == 0)) {  				Rectangle cropRect = new Rectangle (imageBuffer' imageBuffer' imageSize' imageSize);  				Bitmap bmpImage = new Bitmap (mapImage);  				Bitmap bmpCrop = bmpImage.Clone (cropRect' bmpImage.PixelFormat);  				mapImage = (Image)(bmpCrop);  			}  			// save image to disk in TMS format location  			System.IO.Directory.CreateDirectory (savePath + "\\" + z + "\\" + x);  			if (imageFormat == "png") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Png);  			}  			if (imageFormat == "jpg") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Jpeg);  			}  		}  	}  }  catch (Exception ex) {  	ExceptionDump (ex);  }  
Magic Number,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The following statement contains a magic number: try {  	// active map variable  	map.setSize (imageSize + (imageBuffer * 2)' imageSize + (imageBuffer * 2));  	// 0/0/0 tile variables  	double startPointX = startX;  	double startPointY = startY;  	double initGap = initTileGap;  	// inital distance between tiles' for level 0 is max meters - min meters  	// meta-buffer to fix labeling as a multiplier  	double buffer = 1 + ((double)imageBuffer / (double)imageSize);  	// find the spacing between each tile for level  	double gap = (initGap / Math.Pow (2' z));  	// buffer in meters for each level  	double buffermeters = (gap * buffer) - gap;  	// set map extents for tile x values  	map.extent.minx = (startPointX + (gap * x)) - buffermeters;  	map.extent.maxx = (startPointX + (gap * x) + gap) + buffermeters;  	// set map extents for tile y values  	map.extent.miny = (startPointY + (gap * y)) - buffermeters;  	map.extent.maxy = (startPointY + (gap * y) + gap) + buffermeters;  	// generate map image  	using (imageObj image = map.draw ()) {  		Image mapImage;  		byte[] img = image.getBytes ();  		using (MemoryStream ms = new MemoryStream (img)) {  			mapImage = Image.FromStream (ms);  			ms.Flush ();  			// clip buffer area off generated image  			if (!(buffer == 0)) {  				Rectangle cropRect = new Rectangle (imageBuffer' imageBuffer' imageSize' imageSize);  				Bitmap bmpImage = new Bitmap (mapImage);  				Bitmap bmpCrop = bmpImage.Clone (cropRect' bmpImage.PixelFormat);  				mapImage = (Image)(bmpCrop);  			}  			// save image to disk in TMS format location  			System.IO.Directory.CreateDirectory (savePath + "\\" + z + "\\" + x);  			if (imageFormat == "png") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Png);  			}  			if (imageFormat == "jpg") {  				mapImage.Save (savePath + "\\" + z + "\\" + x + "\\" + y + "." + imageFormat' ImageFormat.Jpeg);  			}  		}  	}  }  catch (Exception ex) {  	ExceptionDump (ex);  }  
Magic Number,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The following statement contains a magic number: map.setSize (imageSize + (imageBuffer * 2)' imageSize + (imageBuffer * 2));  
Magic Number,DMS.MapManager,TileGenerator,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileGenerator.cs,GenerateTile,The following statement contains a magic number: map.setSize (imageSize + (imageBuffer * 2)' imageSize + (imageBuffer * 2));  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: try {  	// scan for active TileGenerator instances  	timerProcessScan.Interval = 1000;  	timerProcessScan.Start ();  	// remove scalebar from map if it is enabled warning  	if (map.scalebar.status > 0) {  		MessageBox.Show ("The Scalebar should be turned off else it may appear on every tile generated"' "Scalebar Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	}  	// set base statisics  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	// set custom extent  	cmbSnapWorld.Items.Add ("Yes");  	cmbSnapWorld.Items.Add ("No");  	cmbSnapWorld.SelectedIndex = 1;  	// set number of available processers  	for (int i = 1; i < Environment.ProcessorCount + 1; i++) {  		cmbProcesses.Items.Add (i);  	}  	{  		int defaultProcesses = (int)Math.Round (((double)cmbProcesses.Items.Count * 0.75)' 0) - 1;  		if (defaultProcesses > 0) {  			cmbProcesses.SelectedIndex = defaultProcesses;  		}  		else {  			cmbProcesses.SelectedIndex = 0;  		}  	// set number of levels  	// set image sizes  	// set image buffer  	// set image format  	// set overwrite  	// load pre-configred settings if available  	// load from metadata if available  	// set up datagrid view  	// draw lines correctly on top of preview  	}  	int zoomSelected = 1;  	for (int i = 1; i < 22; i++) {  		cmbLevels.Items.Add (i);  		cmbNumLevels.Items.Add (i);  		if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  			zoomSelected = i;  		}  	}  	cmbLevels.SelectedIndex = zoomSelected;  	cmbImageSize.Items.Add ("256");  	cmbImageSize.SelectedIndex = 0;  	cmbImageBuffer.Items.Add ("Off");  	cmbImageBuffer.Items.Add ("25");  	cmbImageBuffer.Items.Add ("50");  	cmbImageBuffer.Items.Add ("100");  	cmbImageBuffer.SelectedIndex = 2;  	cmbImageFormat.Items.Add ("png");  	cmbImageFormat.Items.Add ("jpg");  	cmbImageFormat.SelectedIndex = 0;  	cmbOverwrite.Items.Add ("True");  	cmbOverwrite.Items.Add ("False");  	cmbOverwrite.SelectedIndex = 0;  	cmbPreConfig.Items.Add ("< unsaved settings >");  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		cmbPreConfig.Items.Add (tileSettings.settingsName);  	}  	btnDeleteConfig.Enabled = false;  	cmbPreConfig.SelectedIndex = 0;  	string key = map.getFirstMetaDataKey ();  	while (key != null) {  		switch (key) {  		case "TileManager_Config":  			int i = 0;  			foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  				i++;  				if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  					cmbPreConfig.SelectedIndex = i;  			}  			break;  		}  		key = map.getNextMetaDataKey (key);  	}  	DataGridViewCellStyle cellStyle = new DataGridViewCellStyle ();  	cellStyle.Alignment = DataGridViewContentAlignment.MiddleCenter;  	dgLevels.ColumnHeadersDefaultCellStyle = cellStyle;  	dgLevels.DefaultCellStyle = cellStyle;  	lineGoogleH.Visible = false;  	lineGoogleV.Visible = false;  	shapeContainer1.BringToFront ();  	loaded = true;  }  catch (Exception ex) {  	MessageBox.Show ("TileManager form could not be loaded: " + Environment.NewLine + ex.ToString ()' "Form Load Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: timerProcessScan.Interval = 1000;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: for (int i = 1; i < 22; i++) {  	cmbLevels.Items.Add (i);  	cmbNumLevels.Items.Add (i);  	if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  		zoomSelected = i;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: for (int i = 1; i < 22; i++) {  	cmbLevels.Items.Add (i);  	cmbNumLevels.Items.Add (i);  	if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  		zoomSelected = i;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: for (int i = 1; i < 22; i++) {  	cmbLevels.Items.Add (i);  	cmbNumLevels.Items.Add (i);  	if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  		zoomSelected = i;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  	zoomSelected = i;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: if ((map.scaledenom / Math.Pow (2' i) < 250) && zoomSelected == 1) {  	zoomSelected = i;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following statement contains a magic number: cmbImageBuffer.SelectedIndex = 2;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The following statement contains a magic number: try {  	if (loadedSettings == null && cmbSnapWorld.SelectedIndex == 0)  		CalculateGoogleExtents ();  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	using (imageObj image = map.draw ()) {  		Image mapImage;  		byte[] img = image.getBytes ();  		using (MemoryStream ms = new MemoryStream (img)) {  			mapImage = Image.FromStream (ms);  			ms.Flush ();  			imagePreview.Image = mapImage;  		}  	}  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	// redraw line  	shapeContainer1.Invalidate ();  	if (cmbSnapWorld.SelectedIndex == 0) {  		lineGoogleV.Visible = true;  		lineGoogleH.Visible = true;  	}  }  catch (Exception ex) {  	MessageBox.Show ("Error creating preview image: " + Environment.NewLine + ex.ToString ()' "Preview Image Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The following statement contains a magic number: try {  	if (loadedSettings == null && cmbSnapWorld.SelectedIndex == 0)  		CalculateGoogleExtents ();  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	using (imageObj image = map.draw ()) {  		Image mapImage;  		byte[] img = image.getBytes ();  		using (MemoryStream ms = new MemoryStream (img)) {  			mapImage = Image.FromStream (ms);  			ms.Flush ();  			imagePreview.Image = mapImage;  		}  	}  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	// redraw line  	shapeContainer1.Invalidate ();  	if (cmbSnapWorld.SelectedIndex == 0) {  		lineGoogleV.Visible = true;  		lineGoogleH.Visible = true;  	}  }  catch (Exception ex) {  	MessageBox.Show ("Error creating preview image: " + Environment.NewLine + ex.ToString ()' "Preview Image Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The following statement contains a magic number: map.setSize (256' 256);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdatePreview,The following statement contains a magic number: map.setSize (256' 256);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	dgLevels.Rows.Add ();  	dgLevels.Rows [i].Cells [0].Value = i;  	// save current map metadata  	int height = map.height;  	int width = map.width;  	double minx = map.extent.minx;  	double miny = map.extent.miny;  	double maxx = map.extent.maxx;  	double maxy = map.extent.maxy;  	// create preview  	map.setSize (256' 256);  	if (loadedSettings == null) {  		if (cmbSnapWorld.SelectedIndex == 0) {  			double tempGap;  			if (Math.Abs (worldSnapMinX - worldSnapMaxX) > Math.Abs (worldSnapMinY - worldSnapMaxY)) {  				tempGap = Math.Abs (worldSnapMinX - worldSnapMaxX);  			}  			else {  				tempGap = Math.Abs (worldSnapMinY - worldSnapMaxY);  			}  			map.setExtent (worldSnapMinX' worldSnapMinY' worldSnapMinX + tempGap' worldSnapMinY + tempGap);  		}  		else {  			double tempGap;  			if (Math.Abs (minx - maxx) > Math.Abs (miny - maxy)) {  				tempGap = Math.Abs (minx - maxx);  			}  			else {  				tempGap = Math.Abs (miny - maxy);  			}  			map.setExtent (minx' miny' minx + tempGap' miny + tempGap);  		}  	}  	else {  		map.setExtent (loadedSettings.startX' loadedSettings.startY' loadedSettings.startX + loadedSettings.initTileGap' loadedSettings.startY + loadedSettings.initTileGap);  	}  	dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  	// restore map metadata  	map.setSize (width' height);  	map.setExtent (minx' miny' maxx' maxy);  	double j = Math.Pow (4' i);  	if (j < 1000)  		dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  	if (j >= 1000 && j < 1000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  	if (j >= 1000000 && j < 1000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  	if (j >= 1000000000 && j < 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  	if (j > 1000000000000)  		dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  	if (statsTileSize != 0) {  		double k = Math.Pow (4' i) * statsTileSize;  		if (k < 1000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  		if (k >= 1000 && k < 1000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  		if (k >= 1000000 && k < 1000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  		if (k >= 1000000000 && k < 1000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  		if (k >= 1000000000000 && k < 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  		if (k >= 1000000000000000)  			dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  	}  	else {  		dgLevels.Rows [i].Cells [3].Value = "...";  	}  	if (statsTPM != 0) {  		double l = Math.Pow (4' i) / (statsTPM / 60);  		if (l < 60)  			dgLevels.Rows [i].Cells [4].Value = "< 1m";  		if (l >= 60 && l < 3600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  		if (l >= 3600 && l < 86400)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  		if (l >= 86400 && l < 604800)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  		if (l >= 604800 && l < 31449600)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  		if (l >= 31449600 && l < 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  		if (l >= 3144960000)  			dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  	}  	else {  		dgLevels.Rows [i].Cells [4].Value = "...";  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: map.setSize (256' 256);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: map.setSize (256' 256);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [1].Value = "1 : " + Math.Floor (map.scaledenom / Math.Pow (2' i));  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j < 1000)  	dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j < 1000)  	dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j < 1000)  	dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000 && j < 1000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000 && j < 1000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000 && j < 1000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000 && j < 1000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000 && j < 1000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000 && j < 1000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000 && j < 1000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000 && j < 1000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000 && j < 1000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000 && j < 1000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000000 && j < 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000000 && j < 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000000 && j < 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000000 && j < 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j >= 1000000000 && j < 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j > 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j > 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j > 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (j > 1000000000000)  	dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [2].Value = Math.Floor (Math.Pow (4' i) / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double k = Math.Pow (4' i) * statsTileSize;  	if (k < 1000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  	if (k >= 1000 && k < 1000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  	if (k >= 1000000 && k < 1000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  	if (k >= 1000000000 && k < 1000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  	if (k >= 1000000000000 && k < 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  	if (k >= 1000000000000000)  		dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [i].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k < 1000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k < 1000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000 && k < 1000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000 && k < 1000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000 && k < 1000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000 && k < 1000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000 && k < 1000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000 && k < 1000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000 && k < 1000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000 && k < 1000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000 && k < 1000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000 && k < 1000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000 && k < 1000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000 && k < 1000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000 && k < 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000 && k < 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000 && k < 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000 && k < 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (k >= 1000000000000000)  	dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = Math.Floor (k / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [3].Value = "...";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double l = Math.Pow (4' i) / (statsTPM / 60);  	if (l < 60)  		dgLevels.Rows [i].Cells [4].Value = "< 1m";  	if (l >= 60 && l < 3600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  	if (l >= 3600 && l < 86400)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  	if (l >= 86400 && l < 604800)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  	if (l >= 604800 && l < 31449600)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  	if (l >= 31449600 && l < 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  	if (l >= 3144960000)  		dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  }  else {  	dgLevels.Rows [i].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l < 60)  	dgLevels.Rows [i].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l < 60)  	dgLevels.Rows [i].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 60 && l < 3600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 60 && l < 3600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 60 && l < 3600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 60 && l < 3600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3600 && l < 86400)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3600 && l < 86400)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3600 && l < 86400)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3600 && l < 86400)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 86400 && l < 604800)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 86400 && l < 604800)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 86400 && l < 604800)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 86400 && l < 604800)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 604800 && l < 31449600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 604800 && l < 31449600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 604800 && l < 31449600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 604800 && l < 31449600)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 31449600 && l < 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 31449600 && l < 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 31449600 && l < 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 31449600 && l < 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (l >= 3144960000)  	dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = Math.Floor (l / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [i].Cells [4].Value = "...";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	totalTiles = totalTiles + Math.Pow (4' i);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: totalTiles = totalTiles + Math.Pow (4' i);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles < 1000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = totalTiles;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles < 1000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = totalTiles;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = totalTiles;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000 && totalTiles < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000 && totalTiles < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000 && totalTiles < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000 && totalTiles < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000) + "K";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000 && totalTiles < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000 && totalTiles < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000 && totalTiles < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000 && totalTiles < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000) + "M";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000000 && totalTiles < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000000 && totalTiles < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000000 && totalTiles < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles >= 1000000000 && totalTiles < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles > 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles > 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTiles > 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [2].Value = Math.Floor (totalTiles / 1000000000000) + "T";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTileSize != 0) {  	double totalSize = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  	}  	if (totalSize < 1000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  	if (totalSize >= 1000 && totalSize < 1000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  	if (totalSize >= 1000000 && totalSize < 1000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  	if (totalSize >= 1000000000 && totalSize < 1000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  	if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  	if (totalSize >= 1000000000000000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: totalSize = totalSize + Math.Pow (4' i) * statsTileSize;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize < 1000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize < 1000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize) + "B";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000 && totalSize < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000 && totalSize < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000 && totalSize < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000 && totalSize < 1000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000) + "KB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000 && totalSize < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000 && totalSize < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000 && totalSize < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000 && totalSize < 1000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000) + "MB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000 && totalSize < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000 && totalSize < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000 && totalSize < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000 && totalSize < 1000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000) + "GB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000 && totalSize < 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000) + "TB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalSize >= 1000000000000000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = Math.Floor (totalSize / 1000000000000000) + "PB";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [3].Value = "...";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (statsTPM != 0) {  	double totalTime = 0;  	for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  		totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  	}  	if (totalTime < 60)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  	if (totalTime >= 60 && totalTime < 3600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  	if (totalTime >= 3600 && totalTime < 86400)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  	if (totalTime >= 86400 && totalTime < 604800)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  	if (totalTime >= 604800 && totalTime < 31449600)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  	if (totalTime >= 31449600 && totalTime < 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  	if (totalTime >= 3144960000)  		dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  }  else {  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: for (int i = 0; i < cmbLevels.SelectedIndex + 1; i++) {  	totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: totalTime = totalTime + Math.Pow (4' i) / (statsTPM / 60);  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime < 60)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime < 60)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "< 1m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 60 && totalTime < 3600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 60 && totalTime < 3600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 60 && totalTime < 3600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 60 && totalTime < 3600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 60) + "m";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3600 && totalTime < 86400)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3600 && totalTime < 86400)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3600 && totalTime < 86400)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3600 && totalTime < 86400)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3600) + "h";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 86400 && totalTime < 604800)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 86400 && totalTime < 604800)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 86400 && totalTime < 604800)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 86400 && totalTime < 604800)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 86400) + "d";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 604800 && totalTime < 31449600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 604800 && totalTime < 31449600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 604800 && totalTime < 31449600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 604800 && totalTime < 31449600)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 604800) + "w";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 31449600 && totalTime < 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 31449600 && totalTime < 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 31449600 && totalTime < 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 31449600 && totalTime < 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 31449600) + "y";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (totalTime >= 3144960000)  	dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = Math.Floor (totalTime / 3144960000) + "c";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Rows [cmbLevels.SelectedIndex + 1].Cells [4].Value = "...";  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: if (cmbLevels.SelectedIndex < 12) {  	dgLevels.Width = 744;  	dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  }  else {  	dgLevels.Width = 764;  	dgLevels.Height = 344;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Width = 744;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Height = 32 + (24 * (cmbLevels.SelectedIndex + 2));  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Width = 764;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,UpdateTable,The following statement contains a magic number: dgLevels.Height = 344;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: try {  	// tile parameter generation loops  	string tileDataFile = tileSavePath + "\\TilingList";  	if (File.Exists (tileDataFile)) {  		File.Delete (tileDataFile);  	}  	BinaryWriter bswriter = new BinaryWriter (File.Open (tileDataFile' FileMode.Create));  	for (int z = 0; z < tileDepth; z++) {  		for (int x = 0; x < Math.Pow (2' z); x++) {  			for (int y = 0; y < Math.Pow (2' z); y++) {  				if (tileOverwrite) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTiles++;  				}  				else {  					// check if file exists if overwrite option is false  					if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  						bswriter.Write (z);  						bswriter.Write (x);  						bswriter.Write (y);  						numTiles++;  					}  				}  			}  		}  	}  	bswriter.Flush ();  	bswriter.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error generating the complete TilingList file: " + Environment.NewLine + ex.ToString ()' "Tile List Generation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: try {  	// tile parameter generation loops  	string tileDataFile = tileSavePath + "\\TilingList";  	if (File.Exists (tileDataFile)) {  		File.Delete (tileDataFile);  	}  	BinaryWriter bswriter = new BinaryWriter (File.Open (tileDataFile' FileMode.Create));  	for (int z = 0; z < tileDepth; z++) {  		for (int x = 0; x < Math.Pow (2' z); x++) {  			for (int y = 0; y < Math.Pow (2' z); y++) {  				if (tileOverwrite) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTiles++;  				}  				else {  					// check if file exists if overwrite option is false  					if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  						bswriter.Write (z);  						bswriter.Write (x);  						bswriter.Write (y);  						numTiles++;  					}  				}  			}  		}  	}  	bswriter.Flush ();  	bswriter.Close ();  }  catch (Exception ex) {  	MessageBox.Show ("Error generating the complete TilingList file: " + Environment.NewLine + ex.ToString ()' "Tile List Generation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: for (int z = 0; z < tileDepth; z++) {  	for (int x = 0; x < Math.Pow (2' z); x++) {  		for (int y = 0; y < Math.Pow (2' z); y++) {  			if (tileOverwrite) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTiles++;  			}  			else {  				// check if file exists if overwrite option is false  				if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTiles++;  				}  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: for (int z = 0; z < tileDepth; z++) {  	for (int x = 0; x < Math.Pow (2' z); x++) {  		for (int y = 0; y < Math.Pow (2' z); y++) {  			if (tileOverwrite) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTiles++;  			}  			else {  				// check if file exists if overwrite option is false  				if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTiles++;  				}  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: for (int x = 0; x < Math.Pow (2' z); x++) {  	for (int y = 0; y < Math.Pow (2' z); y++) {  		if (tileOverwrite) {  			bswriter.Write (z);  			bswriter.Write (x);  			bswriter.Write (y);  			numTiles++;  		}  		else {  			// check if file exists if overwrite option is false  			if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTiles++;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: for (int x = 0; x < Math.Pow (2' z); x++) {  	for (int y = 0; y < Math.Pow (2' z); y++) {  		if (tileOverwrite) {  			bswriter.Write (z);  			bswriter.Write (x);  			bswriter.Write (y);  			numTiles++;  		}  		else {  			// check if file exists if overwrite option is false  			if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTiles++;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,GenerateTileList,The following statement contains a magic number: for (int y = 0; y < Math.Pow (2' z); y++) {  	if (tileOverwrite) {  		bswriter.Write (z);  		bswriter.Write (x);  		bswriter.Write (y);  		numTiles++;  	}  	else {  		// check if file exists if overwrite option is false  		if (!(File.Exists (tileSavePath + "\\" + z + "\\" + x + "\\" + y + "." + tileFormat))) {  			bswriter.Write (z);  			bswriter.Write (x);  			bswriter.Write (y);  			numTiles++;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: try {  	// temp extents  	double minX = 0' minY = 0' maxX = 0' maxY = 0;  	// calculate google min level  	double googleGap = Math.Abs (googleMinX - googleMaxX);  	double initGap;  	if (Math.Abs (map.extent.minx - map.extent.maxx) > (map.extent.miny - map.extent.maxy)) {  		initGap = Math.Abs (map.extent.minx - map.extent.maxx);  	}  	else {  		initGap = Math.Abs (map.extent.miny - map.extent.maxy);  	}  	z0 = 0;  	while (googleGap > initGap) {  		googleGap = googleGap / 2;  		z0++;  	}  	z0--;  	googleGap = Math.Abs (googleMinX - googleMaxX);  	// calculate intersecting tiles at level  	for (int i = 0; i < Math.Pow (2' z0); i++) {  		double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  		double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  		// continue if the tiles left or right edges fall within the inital extent  		if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  			for (int j = 0; j < Math.Pow (2' z0); j++) {  				double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  				double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  				// continue if the tiles top or bottom edges fall within the initial extent  				if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  					// set the new 0/0/0 tile based on tiles found  					if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  						minX = calcMinX;  					if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  						minY = calcMinY;  					if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  						maxX = calcMaxX;  					if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  						maxY = calcMaxY;  				}  			}  		}  	}  	worldSnapMinX = minX;  	worldSnapMinY = minY;  	worldSnapMaxX = maxX;  	worldSnapMaxY = maxY;  }  catch (Exception ex) {  	MessageBox.Show ("Error calculating extents snapped to Google projection: " + Environment.NewLine + ex.ToString ()' "Google Extents Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: while (googleGap > initGap) {  	googleGap = googleGap / 2;  	z0++;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: googleGap = googleGap / 2;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int i = 0; i < Math.Pow (2' z0); i++) {  	double calcMinX = googleMinX + ((googleGap / Math.Pow (2' z0)) * i);  	double calcMaxX = googleMinX + ((googleGap / Math.Pow (2' z0)) * (i + 1));  	// continue if the tiles left or right edges fall within the inital extent  	if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  		for (int j = 0; j < Math.Pow (2' z0); j++) {  			double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  			double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  			// continue if the tiles top or bottom edges fall within the initial extent  			if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  				// set the new 0/0/0 tile based on tiles found  				if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  					minX = calcMinX;  				if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  					minY = calcMinY;  				if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  					maxX = calcMaxX;  				if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  					maxY = calcMaxY;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  	for (int j = 0; j < Math.Pow (2' z0); j++) {  		double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  		double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  		// continue if the tiles top or bottom edges fall within the initial extent  		if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  			// set the new 0/0/0 tile based on tiles found  			if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  				minX = calcMinX;  			if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  				minY = calcMinY;  			if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  				maxX = calcMaxX;  			if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  				maxY = calcMaxY;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  	for (int j = 0; j < Math.Pow (2' z0); j++) {  		double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  		double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  		// continue if the tiles top or bottom edges fall within the initial extent  		if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  			// set the new 0/0/0 tile based on tiles found  			if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  				minX = calcMinX;  			if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  				minY = calcMinY;  			if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  				maxX = calcMaxX;  			if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  				maxY = calcMaxY;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: if (!((calcMinX > map.extent.maxx) || (calcMaxX < map.extent.minx))) {  	for (int j = 0; j < Math.Pow (2' z0); j++) {  		double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  		double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  		// continue if the tiles top or bottom edges fall within the initial extent  		if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  			// set the new 0/0/0 tile based on tiles found  			if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  				minX = calcMinX;  			if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  				minY = calcMinY;  			if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  				maxX = calcMaxX;  			if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  				maxY = calcMaxY;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int j = 0; j < Math.Pow (2' z0); j++) {  	double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  	double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  	// continue if the tiles top or bottom edges fall within the initial extent  	if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  		// set the new 0/0/0 tile based on tiles found  		if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  			minX = calcMinX;  		if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  			minY = calcMinY;  		if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  			maxX = calcMaxX;  		if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  			maxY = calcMaxY;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int j = 0; j < Math.Pow (2' z0); j++) {  	double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  	double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  	// continue if the tiles top or bottom edges fall within the initial extent  	if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  		// set the new 0/0/0 tile based on tiles found  		if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  			minX = calcMinX;  		if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  			minY = calcMinY;  		if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  			maxX = calcMaxX;  		if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  			maxY = calcMaxY;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,CalculateGoogleExtents,The following statement contains a magic number: for (int j = 0; j < Math.Pow (2' z0); j++) {  	double calcMinY = googleMinY + ((googleGap / Math.Pow (2' z0)) * j);  	double calcMaxY = googleMinY + ((googleGap / Math.Pow (2' z0)) * (j + 1));  	// continue if the tiles top or bottom edges fall within the initial extent  	if (!((calcMinY > map.extent.maxy) || (calcMaxY < map.extent.miny))) {  		// set the new 0/0/0 tile based on tiles found  		if ((calcMinX > googleMinX) && (calcMinX < map.extent.minx))  			minX = calcMinX;  		if ((calcMinY > googleMinY) && (calcMinY < map.extent.miny))  			minY = calcMinY;  		if ((calcMaxX < googleMaxX) && (calcMaxX > map.extent.maxx))  			maxX = calcMaxX;  		if ((calcMaxY < googleMaxY) && (calcMaxY > map.extent.maxy))  			maxY = calcMaxY;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerateStats_Click,The following statement contains a magic number: statsNumber = (Convert.ToDouble (cmbNumTest.Text) / 500) * 0.001425;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,btnGenerateStats_Click,The following statement contains a magic number: statsNumber = (Convert.ToDouble (cmbNumTest.Text) / 500) * 0.001425;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: try {  	Random random = new Random ();  	if (loadedSettings.snapWorld)  		CalculateGoogleExtents ();  	string trueSavePath = loadedSettings.savePath;  	loadedSettings.savePath = loadedSettings.savePath + "\\StatsTest";  	Directory.CreateDirectory (loadedSettings.savePath);  	GenerateSettingsFile (loadedSettings.savePath);  	// tile parameter generation loops  	string tileDataFile = loadedSettings.savePath + "\\TilingList";  	if (File.Exists (tileDataFile)) {  		File.Delete (tileDataFile);  	}  	BinaryWriter bswriter = new BinaryWriter (File.Open (tileDataFile' FileMode.Create));  	for (int z = 0; z < 10; z++) {  		for (int x = 0; x < Math.Pow (2' z); x++) {  			for (int y = 0; y < Math.Pow (2' z); y++) {  				if (random.NextDouble () <= testSize) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTestTiles++;  				}  			}  		}  	}  	bswriter.Flush ();  	bswriter.Close ();  	SplitTileList (true' loadedSettings.processes' loadedSettings.savePath);  	StartTileGeneration (loadedSettings.processes' loadedSettings.savePath);  	DateTime startTime = DateTime.Now;  	int procRemaining = loadedSettings.processes;  	while (procRemaining > 0) {  		procRemaining = 0;  		foreach (string file in Directory.GetFiles (loadedSettings.savePath)) {  			if (file.Contains ("TilingList"))  				procRemaining++;  		}  		TimeSpan runTime = DateTime.Now - startTime;  		Application.DoEvents ();  	}  	// save and display stats  	DateTime endTime = DateTime.Now;  	TimeSpan timeTaken = endTime - startTime;  	DirectoryInfo dirInfo = new DirectoryInfo (loadedSettings.savePath);  	statsTPM = Convert.ToInt32 (Math.Floor (((double)numTestTiles / timeTaken.TotalMinutes)));  	double dirSize = (double)getDirectorySize (dirInfo);  	if (dirSize > 0) {  		statsTileSize = Convert.ToInt32 (Math.Floor (dirSize / numTestTiles));  	}  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	Directory.Delete (loadedSettings.savePath' true);  	loadedSettings.savePath = trueSavePath;  }  catch (Exception ex) {  	MessageBox.Show ("Error running calculate statistics function: " + Environment.NewLine + ex.ToString ()' "Statistics Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: try {  	Random random = new Random ();  	if (loadedSettings.snapWorld)  		CalculateGoogleExtents ();  	string trueSavePath = loadedSettings.savePath;  	loadedSettings.savePath = loadedSettings.savePath + "\\StatsTest";  	Directory.CreateDirectory (loadedSettings.savePath);  	GenerateSettingsFile (loadedSettings.savePath);  	// tile parameter generation loops  	string tileDataFile = loadedSettings.savePath + "\\TilingList";  	if (File.Exists (tileDataFile)) {  		File.Delete (tileDataFile);  	}  	BinaryWriter bswriter = new BinaryWriter (File.Open (tileDataFile' FileMode.Create));  	for (int z = 0; z < 10; z++) {  		for (int x = 0; x < Math.Pow (2' z); x++) {  			for (int y = 0; y < Math.Pow (2' z); y++) {  				if (random.NextDouble () <= testSize) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTestTiles++;  				}  			}  		}  	}  	bswriter.Flush ();  	bswriter.Close ();  	SplitTileList (true' loadedSettings.processes' loadedSettings.savePath);  	StartTileGeneration (loadedSettings.processes' loadedSettings.savePath);  	DateTime startTime = DateTime.Now;  	int procRemaining = loadedSettings.processes;  	while (procRemaining > 0) {  		procRemaining = 0;  		foreach (string file in Directory.GetFiles (loadedSettings.savePath)) {  			if (file.Contains ("TilingList"))  				procRemaining++;  		}  		TimeSpan runTime = DateTime.Now - startTime;  		Application.DoEvents ();  	}  	// save and display stats  	DateTime endTime = DateTime.Now;  	TimeSpan timeTaken = endTime - startTime;  	DirectoryInfo dirInfo = new DirectoryInfo (loadedSettings.savePath);  	statsTPM = Convert.ToInt32 (Math.Floor (((double)numTestTiles / timeTaken.TotalMinutes)));  	double dirSize = (double)getDirectorySize (dirInfo);  	if (dirSize > 0) {  		statsTileSize = Convert.ToInt32 (Math.Floor (dirSize / numTestTiles));  	}  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	Directory.Delete (loadedSettings.savePath' true);  	loadedSettings.savePath = trueSavePath;  }  catch (Exception ex) {  	MessageBox.Show ("Error running calculate statistics function: " + Environment.NewLine + ex.ToString ()' "Statistics Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: try {  	Random random = new Random ();  	if (loadedSettings.snapWorld)  		CalculateGoogleExtents ();  	string trueSavePath = loadedSettings.savePath;  	loadedSettings.savePath = loadedSettings.savePath + "\\StatsTest";  	Directory.CreateDirectory (loadedSettings.savePath);  	GenerateSettingsFile (loadedSettings.savePath);  	// tile parameter generation loops  	string tileDataFile = loadedSettings.savePath + "\\TilingList";  	if (File.Exists (tileDataFile)) {  		File.Delete (tileDataFile);  	}  	BinaryWriter bswriter = new BinaryWriter (File.Open (tileDataFile' FileMode.Create));  	for (int z = 0; z < 10; z++) {  		for (int x = 0; x < Math.Pow (2' z); x++) {  			for (int y = 0; y < Math.Pow (2' z); y++) {  				if (random.NextDouble () <= testSize) {  					bswriter.Write (z);  					bswriter.Write (x);  					bswriter.Write (y);  					numTestTiles++;  				}  			}  		}  	}  	bswriter.Flush ();  	bswriter.Close ();  	SplitTileList (true' loadedSettings.processes' loadedSettings.savePath);  	StartTileGeneration (loadedSettings.processes' loadedSettings.savePath);  	DateTime startTime = DateTime.Now;  	int procRemaining = loadedSettings.processes;  	while (procRemaining > 0) {  		procRemaining = 0;  		foreach (string file in Directory.GetFiles (loadedSettings.savePath)) {  			if (file.Contains ("TilingList"))  				procRemaining++;  		}  		TimeSpan runTime = DateTime.Now - startTime;  		Application.DoEvents ();  	}  	// save and display stats  	DateTime endTime = DateTime.Now;  	TimeSpan timeTaken = endTime - startTime;  	DirectoryInfo dirInfo = new DirectoryInfo (loadedSettings.savePath);  	statsTPM = Convert.ToInt32 (Math.Floor (((double)numTestTiles / timeTaken.TotalMinutes)));  	double dirSize = (double)getDirectorySize (dirInfo);  	if (dirSize > 0) {  		statsTileSize = Convert.ToInt32 (Math.Floor (dirSize / numTestTiles));  	}  	txtTPM.Text = statsTPM.ToString ();  	txtTileSize.Text = statsTileSize.ToString ();  	Directory.Delete (loadedSettings.savePath' true);  	loadedSettings.savePath = trueSavePath;  }  catch (Exception ex) {  	MessageBox.Show ("Error running calculate statistics function: " + Environment.NewLine + ex.ToString ()' "Statistics Calculation Error"' MessageBoxButtons.OK' MessageBoxIcon.Error);  	throw;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int z = 0; z < 10; z++) {  	for (int x = 0; x < Math.Pow (2' z); x++) {  		for (int y = 0; y < Math.Pow (2' z); y++) {  			if (random.NextDouble () <= testSize) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTestTiles++;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int z = 0; z < 10; z++) {  	for (int x = 0; x < Math.Pow (2' z); x++) {  		for (int y = 0; y < Math.Pow (2' z); y++) {  			if (random.NextDouble () <= testSize) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTestTiles++;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int z = 0; z < 10; z++) {  	for (int x = 0; x < Math.Pow (2' z); x++) {  		for (int y = 0; y < Math.Pow (2' z); y++) {  			if (random.NextDouble () <= testSize) {  				bswriter.Write (z);  				bswriter.Write (x);  				bswriter.Write (y);  				numTestTiles++;  			}  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int x = 0; x < Math.Pow (2' z); x++) {  	for (int y = 0; y < Math.Pow (2' z); y++) {  		if (random.NextDouble () <= testSize) {  			bswriter.Write (z);  			bswriter.Write (x);  			bswriter.Write (y);  			numTestTiles++;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int x = 0; x < Math.Pow (2' z); x++) {  	for (int y = 0; y < Math.Pow (2' z); y++) {  		if (random.NextDouble () <= testSize) {  			bswriter.Write (z);  			bswriter.Write (x);  			bswriter.Write (y);  			numTestTiles++;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,StatisticsTest,The following statement contains a magic number: for (int y = 0; y < Math.Pow (2' z); y++) {  	if (random.NextDouble () <= testSize) {  		bswriter.Write (z);  		bswriter.Write (x);  		bswriter.Write (y);  		numTestTiles++;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,getDirectorySize,The following statement contains a magic number: try {  	string lpRootPathName = loadedSettings.savePath.Substring (0' 3);  	uint lpSectorsPerCluster;  	uint lpBytesPerSector;  	uint lpNumberOfFreeClusters;  	uint lpTotalNumberOfClusters;  	GetDiskFreeSpace (lpRootPathName' out lpSectorsPerCluster' out lpBytesPerSector' out lpNumberOfFreeClusters' out lpTotalNumberOfClusters);  	uint clusterSize = lpSectorsPerCluster * lpBytesPerSector;  	long total = 0;  	foreach (System.IO.FileInfo file in dirInfo.GetFiles ("*"' SearchOption.AllDirectories)) {  		total += Convert.ToInt64 (Math.Ceiling ((double)file.Length / clusterSize) * clusterSize);  	}  	return total;  }  catch (Exception ex) {  	MessageBox.Show ("Using default value of 4000 bytes because there was an error calculating precise tile size in directory" + Environment.NewLine + ex.ToString ()' "Tile Size Calculation Warning"' MessageBoxButtons.OK' MessageBoxIcon.Warning);  	return -1;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (cmbPreConfig.Text == "< unsaved settings >") {  	loadedSettings = null;  	btnDeleteConfig.Enabled = false;  	btnGenerateTiles.Enabled = false;  	btnBaseLayerText.Enabled = false;  	cmbSnapWorld.Enabled = true;  	txtPreMinX.Text = "";  	txtPreMinY.Text = "";  	txtPreMaxX.Text = "";  	txtPreMaxY.Text = "";  }  else {  	btnDeleteConfig.Enabled = true;  	btnGenerateTiles.Enabled = true;  	btnBaseLayerText.Enabled = true;  	cmbSnapWorld.Enabled = false;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		if (tileSettings.settingsName == cmbPreConfig.Text) {  			txtPreMinX.Text = tileSettings.startX.ToString ();  			txtPreMinY.Text = tileSettings.startY.ToString ();  			txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  			txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  			cmbProcesses.SelectedIndex = tileSettings.processes - 1;  			cmbLevels.SelectedIndex = tileSettings.depth - 1;  			if (tileSettings.overwrite) {  				cmbOverwrite.SelectedIndex = 0;  			}  			else {  				cmbOverwrite.SelectedIndex = 1;  			}  			if (tileSettings.snapWorld) {  				cmbSnapWorld.SelectedIndex = 0;  			}  			else {  				cmbSnapWorld.SelectedIndex = 1;  			}  			if (tileSettings.imageBuffer == 0)  				cmbImageBuffer.SelectedIndex = 0;  			if (tileSettings.imageBuffer == 25)  				cmbImageBuffer.SelectedIndex = 1;  			if (tileSettings.imageBuffer == 50)  				cmbImageBuffer.SelectedIndex = 2;  			if (tileSettings.imageBuffer == 100)  				cmbImageBuffer.SelectedIndex = 3;  			if (tileSettings.imageFormat == "png")  				cmbImageFormat.SelectedIndex = 0;  			if (tileSettings.imageFormat == "jpg")  				cmbImageFormat.SelectedIndex = 1;  			if (tileSettings.imageSize == 256)  				cmbImageSize.SelectedIndex = 0;  			txtSavePath.Text = tileSettings.savePath;  			loadedSettings = tileSettings;  		}  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  	if (tileSettings.settingsName == cmbPreConfig.Text) {  		txtPreMinX.Text = tileSettings.startX.ToString ();  		txtPreMinY.Text = tileSettings.startY.ToString ();  		txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  		txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  		cmbProcesses.SelectedIndex = tileSettings.processes - 1;  		cmbLevels.SelectedIndex = tileSettings.depth - 1;  		if (tileSettings.overwrite) {  			cmbOverwrite.SelectedIndex = 0;  		}  		else {  			cmbOverwrite.SelectedIndex = 1;  		}  		if (tileSettings.snapWorld) {  			cmbSnapWorld.SelectedIndex = 0;  		}  		else {  			cmbSnapWorld.SelectedIndex = 1;  		}  		if (tileSettings.imageBuffer == 0)  			cmbImageBuffer.SelectedIndex = 0;  		if (tileSettings.imageBuffer == 25)  			cmbImageBuffer.SelectedIndex = 1;  		if (tileSettings.imageBuffer == 50)  			cmbImageBuffer.SelectedIndex = 2;  		if (tileSettings.imageBuffer == 100)  			cmbImageBuffer.SelectedIndex = 3;  		if (tileSettings.imageFormat == "png")  			cmbImageFormat.SelectedIndex = 0;  		if (tileSettings.imageFormat == "jpg")  			cmbImageFormat.SelectedIndex = 1;  		if (tileSettings.imageSize == 256)  			cmbImageSize.SelectedIndex = 0;  		txtSavePath.Text = tileSettings.savePath;  		loadedSettings = tileSettings;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.settingsName == cmbPreConfig.Text) {  	txtPreMinX.Text = tileSettings.startX.ToString ();  	txtPreMinY.Text = tileSettings.startY.ToString ();  	txtPreMaxX.Text = (Convert.ToDouble (txtPreMinX.Text) + tileSettings.initTileGap).ToString ();  	txtPreMaxY.Text = (Convert.ToDouble (txtPreMinY.Text) + tileSettings.initTileGap).ToString ();  	cmbProcesses.SelectedIndex = tileSettings.processes - 1;  	cmbLevels.SelectedIndex = tileSettings.depth - 1;  	if (tileSettings.overwrite) {  		cmbOverwrite.SelectedIndex = 0;  	}  	else {  		cmbOverwrite.SelectedIndex = 1;  	}  	if (tileSettings.snapWorld) {  		cmbSnapWorld.SelectedIndex = 0;  	}  	else {  		cmbSnapWorld.SelectedIndex = 1;  	}  	if (tileSettings.imageBuffer == 0)  		cmbImageBuffer.SelectedIndex = 0;  	if (tileSettings.imageBuffer == 25)  		cmbImageBuffer.SelectedIndex = 1;  	if (tileSettings.imageBuffer == 50)  		cmbImageBuffer.SelectedIndex = 2;  	if (tileSettings.imageBuffer == 100)  		cmbImageBuffer.SelectedIndex = 3;  	if (tileSettings.imageFormat == "png")  		cmbImageFormat.SelectedIndex = 0;  	if (tileSettings.imageFormat == "jpg")  		cmbImageFormat.SelectedIndex = 1;  	if (tileSettings.imageSize == 256)  		cmbImageSize.SelectedIndex = 0;  	txtSavePath.Text = tileSettings.savePath;  	loadedSettings = tileSettings;  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageBuffer == 25)  	cmbImageBuffer.SelectedIndex = 1;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageBuffer == 50)  	cmbImageBuffer.SelectedIndex = 2;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageBuffer == 50)  	cmbImageBuffer.SelectedIndex = 2;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: cmbImageBuffer.SelectedIndex = 2;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageBuffer == 100)  	cmbImageBuffer.SelectedIndex = 3;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageBuffer == 100)  	cmbImageBuffer.SelectedIndex = 3;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: cmbImageBuffer.SelectedIndex = 3;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbPreConfig_SelectedIndexChanged,The following statement contains a magic number: if (tileSettings.imageSize == 256)  	cmbImageSize.SelectedIndex = 0;  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbSnapWorldChanged,The following statement contains a magic number: if (loaded) {  	string proj4;  	int epsg;  	MapUtils.FindProjection (map.getProjection ()' out proj4' out epsg);  	if (cmbSnapWorld.SelectedIndex == 0 && epsg != 3785) {  		cmbSnapWorld.SelectedIndex = 1;  		MessageBox.Show ("Your map must be set to google projection EPSG:3785 to use this function"' "Invalid Map Projection"' MessageBoxButtons.OK' MessageBoxIcon.Information);  	}  	if (cmbPreConfig.Text != "< unsaved settings >")  		SaveTileSettings (cmbPreConfig.Text' false);  	UpdatePreview ();  	UpdateTable ();  	if (cmbSnapWorld.SelectedIndex == 0) {  		lineGoogleV.Visible = true;  		lineGoogleH.Visible = true;  	}  	else {  		lineGoogleV.Visible = false;  		lineGoogleH.Visible = false;  	}  }  
Magic Number,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,cmbSnapWorldChanged,The following statement contains a magic number: if (cmbSnapWorld.SelectedIndex == 0 && epsg != 3785) {  	cmbSnapWorld.SelectedIndex = 1;  	MessageBox.Show ("Your map must be set to google projection EPSG:3785 to use this function"' "Invalid Map Projection"' MessageBoxButtons.OK' MessageBoxIcon.Information);  }  
Missing Default,DMS.MapManager,TileManagerForm,C:\repos\DMS-Aus_MapManager\MapManager\TileManager\TileManagerForm.cs,TileManagerForm_Load,The following switch statement is missing a default case: switch (key) {  case "TileManager_Config":  	int i = 0;  	foreach (TileSettings tileSettings in mainForm.settings.tileSettingsArray) {  		i++;  		if (tileSettings.settingsName == map.getMetaData ("TileManager_Config"))  			cmbPreConfig.SelectedIndex = i;  	}  	break;  }  
