Implementation smell,Namespace,Class,File,Method,Description
Long Method,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The method has 122 lines of code.
Long Method,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The method has 107 lines of code.
Long Method,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The method has 120 lines of code.
Complex Method,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,Cyclomatic complexity of the method is 12
Complex Method,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,Cyclomatic complexity of the method is 15
Complex Method,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,Cyclomatic complexity of the method is 8
Complex Method,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,Cyclomatic complexity of the method is 19
Complex Method,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,Cyclomatic complexity of the method is 8
Complex Method,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,Cyclomatic complexity of the method is 9
Complex Method,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,Cyclomatic complexity of the method is 10
Complex Method,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,Cyclomatic complexity of the method is 8
Complex Method,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,Cyclomatic complexity of the method is 11
Complex Method,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,Load,Cyclomatic complexity of the method is 11
Long Parameter List,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The method has 5 parameters. Parameters: elementsize' unknown' issparse' hasmetavalues' data
Long Parameter List,Crash,EntityPropertyLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityPropertyLoader.cs,Load,The method has 5 parameters. Parameters: elementsize' unknown' issparse' hasmetavalues' data
Long Parameter List,Crash,EntityUnknownProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityUnknownProperty.cs,EntityUnknownProperty,The method has 6 parameters. Parameters: type' elementsize' unknown' issparse' hasmetavalues' data
Long Parameter List,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,Load,The method has 5 parameters. Parameters: type' elementsize' unknown' last' data
Long Parameter List,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,OldFrame,The method has 15 parameters. Parameters: modeleid' xoffset' yoffset' zoffset' x1' y1' z1' x2' y2' z2' xglobal' yglobal' zglobal' vertices' unknown
Long Parameter List,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,OldFrameVertex,The method has 6 parameters. Parameters: x' y' z' normalx' normaly' normalz
Long Parameter List,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,OldMusicEntry,The method has 7 parameters. Parameters: vb0eid' vb1eid' vb2eid' vb3eid' vh' sep' eid
Long Parameter List,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SceneryTriangle,The method has 5 parameters. Parameters: vertexa' vertexb' vertexc' unknown1' unknown2
Long Parameter List,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SceneryVertex,The method has 6 parameters. Parameters: x' y' z' unknownx' unknowny' unknownz
Long Parameter List,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,OldSceneryEntry,The method has 5 parameters. Parameters: info' polygons' vertices' extradata' eid
Long Parameter List,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,OldSceneryPolygon,The method has 6 parameters. Parameters: vertexa' vertexb' vertexc' unknown1' unknown2' unknown3
Long Parameter List,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,OldSceneryVertex,The method has 7 parameters. Parameters: x' y' z' red' green' blue' lightingflag
Long Parameter List,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,SceneryQuad,The method has 6 parameters. Parameters: vertexa' vertexb' vertexc' vertexd' unknown2' unknown3
Long Parameter List,Crash,ADPCMConv,C:\repos\ughman_CrashEdit\Crash\Utility\ADPCMConv.cs,FromADPCM,The method has 5 parameters. Parameters: sample' factor' predict' s0' s1
Long Parameter List,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,MusicEntry,The method has 11 parameters. Parameters: vheid' vb0eid' vb1eid' vb2eid' vb3eid' vb4eid' vb5eid' vb6eid' vh' sep' eid
Long Parameter List,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,VAB,The method has 7 parameters. Parameters: isoldversion' volume' panning' attribute1' attribute2' programs' waves
Long Parameter List,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,VH,The method has 8 parameters. Parameters: isoldversion' vbsize' volume' panning' attribute1' attribute2' programs' waves
Long Parameter List,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,VHProgram,The method has 7 parameters. Parameters: isoldversion' volume' priority' mode' panning' attribute' tones
Long Parameter List,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The method has 17 parameters. Parameters: priority' mode' volume' panning' centernote' pitchshift' minimumnote' maximumnote' vibratowidth' vibratotime' portamentowidth' portamentotime' pitchbendminimum' pitchbendmaximum' adsr1' adsr2' wave
Long Parameter List,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,NSD,The method has 5 parameters. Parameters: unknown1' chunkcount' unknown2' index' extradata
Long Parameter List,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Unpack1555,The method has 5 parameters. Parameters: data' a1' b5' c5' d5
Long Parameter List,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,SceneryEntry,The method has 8 parameters. Parameters: info' vertices' triangles' quads' item4' colors' item6' eid
Long Statement,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The length of the statement  "            return new VHTone(priority'mode'volume'panning'centernote'pitchshift'minimumnote'maximumnote'vibratowidth'vibratotime'portamentowidth'portamentotime'pitchbendminimum'pitchbendmaximum'adsr1'adsr2'wave); " is 201.
Long Statement,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The length of the statement  "                header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0)); " is 156.
Complex Conditional,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,LoadFromField,The conditional expression  "LoadFromFieldOf<byte>(out property'obj'typeof(EntityUInt8Property)) ||                  LoadFromFieldOf<short>(out property'obj'typeof(EntityInt16Property)) ||                  LoadFromFieldOf<int>(out property'obj'typeof(EntityInt32Property)) ||                  LoadFromFieldOf<EntitySetting>(out property'obj'typeof(EntitySettingProperty)) ||                  LoadFromFieldOf<EntityPosition>(out property'obj'typeof(EntityPositionProperty))"  is complex.
Virtual Method Call from Constructor,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Entity,The constructor "Entity" calls a virtual method "LoadToField".
Empty Catch Block,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,ProcessAll,The method has an empty catch block.
Empty Catch Block,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ProcessAll,The method has an empty catch block.
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (IsSparse)              {                  length = rows.Count * 2;              }              else              {                  length = 2;              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (IsSparse)              {                  length = rows.Count * 2;              }              else              {                  length = 2;              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (HasMetaValues)              {                  length += rows.Count * 2;              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: Aligner.Align(ref length'4);
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: Aligner.Align(ref length'4);
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (IsSparse)              {                  foreach (EntityPropertyRow<T> row in rows)                  {                      BitConv.ToInt16(data'offset'(short)row.Values.Count);                      offset += 2;                  }              }              else              {                  BitConv.ToInt16(data'offset'(short)rows[0].Values.Count);                  offset += 2;              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (IsSparse)              {                  foreach (EntityPropertyRow<T> row in rows)                  {                      BitConv.ToInt16(data'offset'(short)row.Values.Count);                      offset += 2;                  }              }              else              {                  BitConv.ToInt16(data'offset'(short)rows[0].Values.Count);                  offset += 2;              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: if (HasMetaValues)              {                  foreach (EntityPropertyRow<T> row in rows)                  {                      if (!row.MetaValue.HasValue)                      {                          throw new InvalidOperationException("EntityPropertyRow MetaValues must be consistently present or non-present.");                      }                      BitConv.ToInt16(data'offset'row.MetaValue.Value);                      offset += 2;                  }              }
Magic Number,Crash,EntityBasicProperty<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicProperty.cs,Save,The following statement contains a magic number: Aligner.Align(ref offset'4);
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (issparse)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      int valuecount = (ushort)BitConv.FromInt16(data'offset);                      offset += 2;                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }              else              {                  if (offset + 2 > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  int valuecount = (ushort)BitConv.FromInt16(data'offset);                  offset += 2;                  foreach (EntityPropertyRow<T> row in rows)                  {                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (issparse)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      int valuecount = (ushort)BitConv.FromInt16(data'offset);                      offset += 2;                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }              else              {                  if (offset + 2 > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  int valuecount = (ushort)BitConv.FromInt16(data'offset);                  offset += 2;                  foreach (EntityPropertyRow<T> row in rows)                  {                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (issparse)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      int valuecount = (ushort)BitConv.FromInt16(data'offset);                      offset += 2;                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }              else              {                  if (offset + 2 > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  int valuecount = (ushort)BitConv.FromInt16(data'offset);                  offset += 2;                  foreach (EntityPropertyRow<T> row in rows)                  {                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (issparse)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      int valuecount = (ushort)BitConv.FromInt16(data'offset);                      offset += 2;                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }              else              {                  if (offset + 2 > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  int valuecount = (ushort)BitConv.FromInt16(data'offset);                  offset += 2;                  foreach (EntityPropertyRow<T> row in rows)                  {                      for (int i = 0;i < valuecount;i++)                      {                          row.Values.Add(new T());                      }                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (hasmetavalues)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      short metavalue = BitConv.FromInt16(data'offset);                      offset += 2;                      row.MetaValue = metavalue;                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: if (hasmetavalues)              {                  if (offset + 2 * unknown > data.Length)                  {                      ErrorManager.SignalError("EntityProperty: Not enough data");                  }                  foreach (EntityPropertyRow<T> row in rows)                  {                      short metavalue = BitConv.FromInt16(data'offset);                      offset += 2;                      row.MetaValue = metavalue;                  }              }
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: Aligner.Align(ref offset'4);
Magic Number,Crash,EntityBasicPropertyLoader<T>,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityBasicPropertyLoader.cs,Load,The following statement contains a magic number: Aligner.Align(ref offset'4);
Magic Number,Crash,EntityPositionProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityPositionProperty.cs,SaveElement,The following statement contains a magic number: BitConv.ToInt16(data'2'value.Y);
Magic Number,Crash,EntityPositionProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityPositionProperty.cs,SaveElement,The following statement contains a magic number: BitConv.ToInt16(data'4'value.Z);
Magic Number,Crash,EntityPositionPropertyLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityPositionPropertyLoader.cs,LoadElement,The following statement contains a magic number: short y = BitConv.FromInt16(data'2);
Magic Number,Crash,EntityPositionPropertyLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityPositionPropertyLoader.cs,LoadElement,The following statement contains a magic number: short z = BitConv.FromInt16(data'4);
Magic Number,Crash,EntityInt32Property,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityInt32Property.cs,LoadToField,The following statement contains a magic number: if (field.FieldType == typeof(EntityID?))              {                  if (Rows.Count == 1)                  {                      if (Rows[0].MetaValue == null)                      {                          if (Rows[0].Values.Count == 1)                          {                              field.SetValue(obj'new EntityID(Rows[0].Values[0]));                          }                          else                          {                              ErrorManager.SignalError("EntityProperty: Property has more values than expected");                          }                      }                      else                      {                          ErrorManager.SignalError("EntityProperty: Property has an unexpected metavalue");                      }                  }                  else if (Rows.Count == 2)                  {                      if (Rows[0].MetaValue == null && Rows[1].MetaValue == null)                      {                          if (Rows[0].Values.Count == 1 && Rows[1].Values.Count == 1)                          {                              field.SetValue(obj'new EntityID(Rows[0].Values[0]'Rows[1].Values[0]));                          }                          else                          {                              ErrorManager.SignalError("EntityProperty: Property has more values than expected");                          }                      }                      else                      {                          ErrorManager.SignalError("EntityProperty: Property has an unexpected metavalue");                      }                  }                  else                  {                      ErrorManager.SignalError("EntityProperty: Property has more rows than expected");                  }              }              else              {                  base.LoadToField(obj'field);              }
Magic Number,Crash,EntitySetting,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntitySetting.cs,EntitySetting,The following statement contains a magic number: if (valueb < -8388608 || valueb > 8388607)                  throw new ArgumentOutOfRangeException("valueb");
Magic Number,Crash,EntitySetting,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntitySetting.cs,EntitySetting,The following statement contains a magic number: if (valueb < -8388608 || valueb > 8388607)                  throw new ArgumentOutOfRangeException("valueb");
Magic Number,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,Load,The following statement contains a magic number: if (((type & 128) != 0) != last)              {                  ErrorManager.SignalIgnorableError("EntityProperty: Flag 128 has an unexpected value");              }
Magic Number,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,Load,The following statement contains a magic number: bool issparse = (type & 64) != 0;
Magic Number,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,Load,The following statement contains a magic number: bool hasmetavalues = (type & 32) != 0;
Magic Number,Crash,EntityProperty,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityProperty.cs,Load,The following statement contains a magic number: type &= 31;
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: if (data.Length < 56)              {                  ErrorManager.SignalError("OldFrame: Data is too short");              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: if (vertexcount < 0 || vertexcount > Chunk.Length / 6)              {                  ErrorManager.SignalError("OldFrame: Vertex count is invalid");              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: if (data.Length < 56 + vertexcount * 6 + 2)              {                  ErrorManager.SignalError("OldFrame: Data is too short");              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: if (data.Length < 56 + vertexcount * 6 + 2)              {                  ErrorManager.SignalError("OldFrame: Data is too short");              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: if (data.Length < 56 + vertexcount * 6 + 2)              {                  ErrorManager.SignalError("OldFrame: Data is too short");              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int modeleid = BitConv.FromInt32(data'4);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int xoffset = BitConv.FromInt32(data'8);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int yoffset = BitConv.FromInt32(data'12);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int zoffset = BitConv.FromInt32(data'16);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int x1 = BitConv.FromInt32(data'20);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int y1 = BitConv.FromInt32(data'24);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int z1 = BitConv.FromInt32(data'28);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int x2 = BitConv.FromInt32(data'32);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int y2 = BitConv.FromInt32(data'36);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int z2 = BitConv.FromInt32(data'40);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int xglobal = BitConv.FromInt32(data'44);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int yglobal = BitConv.FromInt32(data'48);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: int zglobal = BitConv.FromInt32(data'52);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] vertexdata = new byte [6];                  Array.Copy(data'56 + i * 6'vertexdata'0'vertexdata.Length);                  vertices[i] = OldFrameVertex.Load(vertexdata);              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] vertexdata = new byte [6];                  Array.Copy(data'56 + i * 6'vertexdata'0'vertexdata.Length);                  vertices[i] = OldFrameVertex.Load(vertexdata);              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] vertexdata = new byte [6];                  Array.Copy(data'56 + i * 6'vertexdata'0'vertexdata.Length);                  vertices[i] = OldFrameVertex.Load(vertexdata);              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: short unknown = BitConv.FromInt16(data'56 + vertexcount * 6);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Load,The following statement contains a magic number: short unknown = BitConv.FromInt16(data'56 + vertexcount * 6);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: byte[] data = new byte [56 + vertices.Count * 6 + 2];
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: byte[] data = new byte [56 + vertices.Count * 6 + 2];
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: byte[] data = new byte [56 + vertices.Count * 6 + 2];
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'4'modeleid);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'8'xoffset);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'12'yoffset);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'16'zoffset);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'20'x1);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'24'y1);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'28'z1);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'32'x2);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'36'y2);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'40'z2);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'44'xglobal);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'48'yglobal);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'52'zglobal);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].Save().CopyTo(data'56 + i * 6);              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].Save().CopyTo(data'56 + i * 6);              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'56 + vertices.Count * 6'unknown);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'56 + vertices.Count * 6'unknown);
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,ToOBJ,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter obj = new StreamWriter(stream))                  {                      obj.WriteLine("# Vertices");                      foreach (OldFrameVertex vertex in vertices)                      {                          obj.WriteLine("v {0} {1} {2}"'vertex.X - xorigin'vertex.Y - yorigin'vertex.Z - zorigin);                      }                      obj.WriteLine();                      obj.WriteLine("# Polygons");                      foreach (OldModelPolygon polygon in model.Polygons)                      {                          obj.WriteLine("f {0} {1} {2}"'polygon.VertexA / 6 + 1'polygon.VertexB / 6 + 1'polygon.VertexC / 6 + 1);                      }                  }                  return stream.ToArray();              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,ToOBJ,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter obj = new StreamWriter(stream))                  {                      obj.WriteLine("# Vertices");                      foreach (OldFrameVertex vertex in vertices)                      {                          obj.WriteLine("v {0} {1} {2}"'vertex.X - xorigin'vertex.Y - yorigin'vertex.Z - zorigin);                      }                      obj.WriteLine();                      obj.WriteLine("# Polygons");                      foreach (OldModelPolygon polygon in model.Polygons)                      {                          obj.WriteLine("f {0} {1} {2}"'polygon.VertexA / 6 + 1'polygon.VertexB / 6 + 1'polygon.VertexC / 6 + 1);                      }                  }                  return stream.ToArray();              }
Magic Number,Crash,OldFrame,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrame.cs,ToOBJ,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter obj = new StreamWriter(stream))                  {                      obj.WriteLine("# Vertices");                      foreach (OldFrameVertex vertex in vertices)                      {                          obj.WriteLine("v {0} {1} {2}"'vertex.X - xorigin'vertex.Y - yorigin'vertex.Z - zorigin);                      }                      obj.WriteLine();                      obj.WriteLine("# Polygons");                      foreach (OldModelPolygon polygon in model.Polygons)                      {                          obj.WriteLine("f {0} {1} {2}"'polygon.VertexA / 6 + 1'polygon.VertexB / 6 + 1'polygon.VertexC / 6 + 1);                      }                  }                  return stream.ToArray();              }
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Load,The following statement contains a magic number: if (data.Length != 6)                  throw new ArgumentException("Value must be 6 bytes long."'"data");
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Load,The following statement contains a magic number: byte z = data[2];
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Load,The following statement contains a magic number: byte normalx = data[3];
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Load,The following statement contains a magic number: byte normaly = data[4];
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Load,The following statement contains a magic number: byte normalz = data[5];
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Save,The following statement contains a magic number: byte[] data = new byte [6];
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Save,The following statement contains a magic number: data[2] = z;
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Save,The following statement contains a magic number: data[3] = normalx;
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Save,The following statement contains a magic number: data[4] = normaly;
Magic Number,Crash,OldFrameVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Animation\OldFrameVertex.cs,Save,The following statement contains a magic number: data[5] = normalz;
Magic Number,Crash,OldModelEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [2][];
Magic Number,Crash,OldModelEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntry.cs,Unprocess,The following statement contains a magic number: items[1] = new byte [polygons.Count * 8];
Magic Number,Crash,OldModelEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < polygons.Count;i++)              {                  polygons[i].Save().CopyTo(items[1]'i * 8);              }
Magic Number,Crash,OldModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 2)              {                  ErrorManager.SignalError("OldModelEntry: Wrong number of items");              }
Magic Number,Crash,OldModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntryLoader.cs,Load,The following statement contains a magic number: if (items[1].Length != polygoncount * 8)              {                  ErrorManager.SignalError("OldModelEntry: Polygon count mismatch");              }
Magic Number,Crash,OldModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < polygoncount;i++)              {                  byte[] polygondata = new byte [8];                  Array.Copy(items[1]'i * 8'polygondata'0'polygondata.Length);                  polygons[i] = OldModelPolygon.Load(polygondata);              }
Magic Number,Crash,OldModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < polygoncount;i++)              {                  byte[] polygondata = new byte [8];                  Array.Copy(items[1]'i * 8'polygondata'0'polygondata.Length);                  polygons[i] = OldModelPolygon.Load(polygondata);              }
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Load,The following statement contains a magic number: if (data.Length != 8)                  throw new ArgumentException("Value must be 8 bytes long."'"data");
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Load,The following statement contains a magic number: short vertexb = BitConv.FromInt16(data'2);
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Load,The following statement contains a magic number: short vertexc = BitConv.FromInt16(data'4);
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Load,The following statement contains a magic number: short unknown = BitConv.FromInt16(data'6);
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Save,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'2'vertexb);
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'4'vertexc);
Magic Number,Crash,OldModelPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\OldModelPolygon.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'6'unknown);
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [3][];
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: items[0] = new byte [20];
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'4'vb0eid);
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'8'vb1eid);
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'12'vb2eid);
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'16'vb3eid);
Magic Number,Crash,OldMusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntry.cs,Unprocess,The following statement contains a magic number: items[2] = sep.Save();
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3)              {                  ErrorManager.SignalError("OldMusicEntry: Wrong number of items");              }
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 20)              {                  ErrorManager.SignalError("OldMusicEntry: First item length is wrong");              }
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: int vb0eid = BitConv.FromInt32(items[0]'4);
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: int vb1eid = BitConv.FromInt32(items[0]'8);
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: int vb2eid = BitConv.FromInt32(items[0]'12);
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: int vb3eid = BitConv.FromInt32(items[0]'16);
Magic Number,Crash,OldMusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\OldMusicEntryLoader.cs,Load,The following statement contains a magic number: SEP sep = SEP.Load(items[2]'seqcount);
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,Load,The following statement contains a magic number: if (adata.Length != 4)                  throw new ArgumentException("Value must be 4 bytes long."'"adata");
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,Load,The following statement contains a magic number: if (bdata.Length != 2)                  throw new ArgumentException("Value must be 2 bytes long."'"adata");
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,Load,The following statement contains a magic number: int vertexa = (avalue >> 8) & 0xFFF;
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,Load,The following statement contains a magic number: int vertexb = (avalue >> 20) & 0xFFF;
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,Load,The following statement contains a magic number: int vertexc = (bvalue >> 4) & 0xFFF;
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SaveA,The following statement contains a magic number: byte[] data = new byte [4];
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SaveA,The following statement contains a magic number: int value = (vertexa << 8) | (vertexb << 20) | unknown1;
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SaveA,The following statement contains a magic number: int value = (vertexa << 8) | (vertexb << 20) | unknown1;
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SaveB,The following statement contains a magic number: byte[] data = new byte [2];
Magic Number,Crash,SceneryTriangle,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryTriangle.cs,SaveB,The following statement contains a magic number: int value = (vertexc << 4) | unknown2;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: if (xydata.Length != 4)                  throw new ArgumentException("Value must be 4 bytes long."'"xydata");
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: if (zdata.Length != 2)                  throw new ArgumentException("Value must be 2 bytes long."'"zdata");
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: short y = (short)(xy >> 16);
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: x >>= 4;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: y >>= 4;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,Load,The following statement contains a magic number: z >>= 4;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveXY,The following statement contains a magic number: byte[] data = new byte [4];
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveXY,The following statement contains a magic number: int xdata = (x << 4) | unknownx;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveXY,The following statement contains a magic number: int ydata = (y << 4) | unknowny;
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveXY,The following statement contains a magic number: BitConv.ToInt16(data'2'(short)ydata);
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveZ,The following statement contains a magic number: byte[] data = new byte [2];
Magic Number,Crash,SceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryVertex.cs,SaveZ,The following statement contains a magic number: int zdata = (z << 4) | unknownz;
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [extradata == null ? 3 : 4][];
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [extradata == null ? 3 : 4][];
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: items[1] = new byte [polygons.Count * 8];
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < polygons.Count;i++)              {                  polygons[i].Save().CopyTo(items[1]'i * 8);              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: items[2] = new byte [vertices.Count * 8];
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: items[2] = new byte [vertices.Count * 8];
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].Save().CopyTo(items[2]'i * 8);              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].Save().CopyTo(items[2]'i * 8);              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,Unprocess,The following statement contains a magic number: if (extradata != null)              {                  items[3] = extradata;              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter textwriter = new StreamWriter(stream))                  using (XmlTextWriter xmlwriter = new XmlTextWriter(textwriter))                  {                      xmlwriter.WriteStartDocument();                      xmlwriter.WriteStartElement("COLLADA");                      xmlwriter.WriteAttributeString("xmlns"'"http://www.collada.org/2005/11/COLLADASchema");                      xmlwriter.WriteAttributeString("version"'"1.4.1");                      xmlwriter.WriteStartElement("library_geometries");                      xmlwriter.WriteStartElement("geometry");                      xmlwriter.WriteStartElement("mesh");                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"positions");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"positions-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.X);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Y);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Z);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#positions-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"X");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"colors");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"colors-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.Red / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Green / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Blue / 256.0);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#colors-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"R");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"G");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"B");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("vertices");                      xmlwriter.WriteAttributeString("id"'"vertices");                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"POSITION");                      xmlwriter.WriteAttributeString("source"'"positions");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"COLOR");                      xmlwriter.WriteAttributeString("source"'"colors");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("triangles");                      xmlwriter.WriteAttributeString("count"'polygons.Count.ToString());                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"VERTEX");                      xmlwriter.WriteAttributeString("source"'"vertices");                      xmlwriter.WriteAttributeString("offset"'"0");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("p");                      foreach (OldSceneryPolygon polygon in polygons)                      {                          xmlwriter.WriteValue(polygon.VertexA);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexB);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexC);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndDocument();                  }                  return stream.ToArray();              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter textwriter = new StreamWriter(stream))                  using (XmlTextWriter xmlwriter = new XmlTextWriter(textwriter))                  {                      xmlwriter.WriteStartDocument();                      xmlwriter.WriteStartElement("COLLADA");                      xmlwriter.WriteAttributeString("xmlns"'"http://www.collada.org/2005/11/COLLADASchema");                      xmlwriter.WriteAttributeString("version"'"1.4.1");                      xmlwriter.WriteStartElement("library_geometries");                      xmlwriter.WriteStartElement("geometry");                      xmlwriter.WriteStartElement("mesh");                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"positions");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"positions-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.X);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Y);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Z);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#positions-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"X");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"colors");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"colors-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.Red / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Green / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Blue / 256.0);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#colors-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"R");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"G");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"B");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("vertices");                      xmlwriter.WriteAttributeString("id"'"vertices");                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"POSITION");                      xmlwriter.WriteAttributeString("source"'"positions");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"COLOR");                      xmlwriter.WriteAttributeString("source"'"colors");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("triangles");                      xmlwriter.WriteAttributeString("count"'polygons.Count.ToString());                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"VERTEX");                      xmlwriter.WriteAttributeString("source"'"vertices");                      xmlwriter.WriteAttributeString("offset"'"0");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("p");                      foreach (OldSceneryPolygon polygon in polygons)                      {                          xmlwriter.WriteValue(polygon.VertexA);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexB);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexC);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndDocument();                  }                  return stream.ToArray();              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter textwriter = new StreamWriter(stream))                  using (XmlTextWriter xmlwriter = new XmlTextWriter(textwriter))                  {                      xmlwriter.WriteStartDocument();                      xmlwriter.WriteStartElement("COLLADA");                      xmlwriter.WriteAttributeString("xmlns"'"http://www.collada.org/2005/11/COLLADASchema");                      xmlwriter.WriteAttributeString("version"'"1.4.1");                      xmlwriter.WriteStartElement("library_geometries");                      xmlwriter.WriteStartElement("geometry");                      xmlwriter.WriteStartElement("mesh");                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"positions");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"positions-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.X);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Y);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Z);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#positions-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"X");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"colors");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"colors-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.Red / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Green / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Blue / 256.0);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#colors-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"R");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"G");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"B");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("vertices");                      xmlwriter.WriteAttributeString("id"'"vertices");                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"POSITION");                      xmlwriter.WriteAttributeString("source"'"positions");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"COLOR");                      xmlwriter.WriteAttributeString("source"'"colors");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("triangles");                      xmlwriter.WriteAttributeString("count"'polygons.Count.ToString());                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"VERTEX");                      xmlwriter.WriteAttributeString("source"'"vertices");                      xmlwriter.WriteAttributeString("offset"'"0");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("p");                      foreach (OldSceneryPolygon polygon in polygons)                      {                          xmlwriter.WriteValue(polygon.VertexA);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexB);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexC);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndDocument();                  }                  return stream.ToArray();              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter textwriter = new StreamWriter(stream))                  using (XmlTextWriter xmlwriter = new XmlTextWriter(textwriter))                  {                      xmlwriter.WriteStartDocument();                      xmlwriter.WriteStartElement("COLLADA");                      xmlwriter.WriteAttributeString("xmlns"'"http://www.collada.org/2005/11/COLLADASchema");                      xmlwriter.WriteAttributeString("version"'"1.4.1");                      xmlwriter.WriteStartElement("library_geometries");                      xmlwriter.WriteStartElement("geometry");                      xmlwriter.WriteStartElement("mesh");                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"positions");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"positions-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.X);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Y);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Z);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#positions-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"X");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"colors");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"colors-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.Red / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Green / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Blue / 256.0);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#colors-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"R");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"G");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"B");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("vertices");                      xmlwriter.WriteAttributeString("id"'"vertices");                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"POSITION");                      xmlwriter.WriteAttributeString("source"'"positions");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"COLOR");                      xmlwriter.WriteAttributeString("source"'"colors");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("triangles");                      xmlwriter.WriteAttributeString("count"'polygons.Count.ToString());                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"VERTEX");                      xmlwriter.WriteAttributeString("source"'"vertices");                      xmlwriter.WriteAttributeString("offset"'"0");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("p");                      foreach (OldSceneryPolygon polygon in polygons)                      {                          xmlwriter.WriteValue(polygon.VertexA);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexB);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexC);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndDocument();                  }                  return stream.ToArray();              }
Magic Number,Crash,OldSceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntry.cs,ToCOLLADA,The following statement contains a magic number: using (MemoryStream stream = new MemoryStream())              {                  using (StreamWriter textwriter = new StreamWriter(stream))                  using (XmlTextWriter xmlwriter = new XmlTextWriter(textwriter))                  {                      xmlwriter.WriteStartDocument();                      xmlwriter.WriteStartElement("COLLADA");                      xmlwriter.WriteAttributeString("xmlns"'"http://www.collada.org/2005/11/COLLADASchema");                      xmlwriter.WriteAttributeString("version"'"1.4.1");                      xmlwriter.WriteStartElement("library_geometries");                      xmlwriter.WriteStartElement("geometry");                      xmlwriter.WriteStartElement("mesh");                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"positions");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"positions-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.X);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Y);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Z);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#positions-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"X");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"Y");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("source");                      xmlwriter.WriteAttributeString("id"'"colors");                      xmlwriter.WriteStartElement("float_array");                      xmlwriter.WriteAttributeString("id"'"colors-array");                      xmlwriter.WriteAttributeString("count"'(vertices.Count * 3).ToString());                      foreach (OldSceneryVertex vertex in vertices)                      {                          xmlwriter.WriteValue(vertex.Red / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Green / 256.0);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(vertex.Blue / 256.0);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("technique_common");                      xmlwriter.WriteStartElement("accessor");                      xmlwriter.WriteAttributeString("source"'"#colors-array");                      xmlwriter.WriteAttributeString("count"'vertices.Count.ToString());                      xmlwriter.WriteAttributeString("stride"'"3");                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"R");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"G");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("param");                      xmlwriter.WriteAttributeString("name"'"B");                      xmlwriter.WriteAttributeString("type"'"float");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("vertices");                      xmlwriter.WriteAttributeString("id"'"vertices");                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"POSITION");                      xmlwriter.WriteAttributeString("source"'"positions");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"COLOR");                      xmlwriter.WriteAttributeString("source"'"colors");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("triangles");                      xmlwriter.WriteAttributeString("count"'polygons.Count.ToString());                      xmlwriter.WriteStartElement("input");                      xmlwriter.WriteAttributeString("semantic"'"VERTEX");                      xmlwriter.WriteAttributeString("source"'"vertices");                      xmlwriter.WriteAttributeString("offset"'"0");                      xmlwriter.WriteEndElement();                      xmlwriter.WriteStartElement("p");                      foreach (OldSceneryPolygon polygon in polygons)                      {                          xmlwriter.WriteValue(polygon.VertexA);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexB);                          xmlwriter.WriteWhitespace(" ");                          xmlwriter.WriteValue(polygon.VertexC);                          xmlwriter.WriteWhitespace(" ");                      }                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndElement();                      xmlwriter.WriteEndDocument();                  }                  return stream.ToArray();              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3 && items.Length != 4)              {                  ErrorManager.SignalError("OldSceneryEntry: Wrong number of items");              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3 && items.Length != 4)              {                  ErrorManager.SignalError("OldSceneryEntry: Wrong number of items");              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items[1].Length % 8 != 0)              {                  ErrorManager.SignalError("OldSceneryEntry: Second item (polygons) length is invalid");              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: OldSceneryPolygon[] polygons = new OldSceneryPolygon [items[1].Length / 8];
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < polygons.Length;i++)              {                  byte[] polygondata = new byte [8];                  Array.Copy(items[1]'i * 8'polygondata'0'8);                  polygons[i] = OldSceneryPolygon.Load(polygondata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < polygons.Length;i++)              {                  byte[] polygondata = new byte [8];                  Array.Copy(items[1]'i * 8'polygondata'0'8);                  polygons[i] = OldSceneryPolygon.Load(polygondata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < polygons.Length;i++)              {                  byte[] polygondata = new byte [8];                  Array.Copy(items[1]'i * 8'polygondata'0'8);                  polygons[i] = OldSceneryPolygon.Load(polygondata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items[2].Length % 8 != 0)              {                  ErrorManager.SignalError("OldSceneryEntry: Third item (vertices) length is invalid");              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items[2].Length % 8 != 0)              {                  ErrorManager.SignalError("OldSceneryEntry: Third item (vertices) length is invalid");              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: OldSceneryVertex[] vertices = new OldSceneryVertex [items[2].Length / 8];
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: OldSceneryVertex[] vertices = new OldSceneryVertex [items[2].Length / 8];
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertices.Length;i++)              {                  byte[] vertexdata = new byte [8];                  Array.Copy(items[2]'i * 8'vertexdata'0'8);                  vertices[i] = OldSceneryVertex.Load(vertexdata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertices.Length;i++)              {                  byte[] vertexdata = new byte [8];                  Array.Copy(items[2]'i * 8'vertexdata'0'8);                  vertices[i] = OldSceneryVertex.Load(vertexdata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertices.Length;i++)              {                  byte[] vertexdata = new byte [8];                  Array.Copy(items[2]'i * 8'vertexdata'0'8);                  vertices[i] = OldSceneryVertex.Load(vertexdata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertices.Length;i++)              {                  byte[] vertexdata = new byte [8];                  Array.Copy(items[2]'i * 8'vertexdata'0'8);                  vertices[i] = OldSceneryVertex.Load(vertexdata);              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length >= 4)              {                  extradata = items[3];              }
Magic Number,Crash,OldSceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length >= 4)              {                  extradata = items[3];              }
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: if (data.Length != 8)                  throw new ArgumentException("Value must be 8 bytes long."'"data");
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: int wordb = BitConv.FromInt32(data'4);
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: int vertexa = (worda >> 20) & 0xFFF;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: int vertexb = (wordb >> 8) & 0xFFF;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: int vertexc = (wordb >> 20) & 0xFFF;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Load,The following statement contains a magic number: int unknown1 = (worda >> 8) & 0xFFF;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: worda |= vertexa << 20;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: wordb |= vertexb << 8;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: wordb |= vertexc << 20;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: worda |= unknown1 << 8;
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,Crash,OldSceneryPolygon,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryPolygon.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'4'wordb);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: if (data.Length != 8)                  throw new ArgumentException("Value must be 8 bytes long."'"data");
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: short x = (short)(BitConv.FromInt16(data'4) & 0xFFF8);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: short y = (short)(BitConv.FromInt16(data'6) & 0xFFF8);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: int zhigh = data[6] & 7;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: int zhigh = data[6] & 7;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: int zmid = (data[4] & 6) >> 1;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: int zmid = (data[4] & 6) >> 1;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: int zlow = data[3];
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: short z = (short)(zhigh << 13 | zmid << 11 | zlow << 3);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: short z = (short)(zhigh << 13 | zmid << 11 | zlow << 3);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: short z = (short)(zhigh << 13 | zmid << 11 | zlow << 3);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: byte blue = data[2];
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Load,The following statement contains a magic number: bool lightingflag = ((data[4] & 1) != 0);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: int zlow = (z >> 3) & 0xFF;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: int zmid = (z >> 11) & 0x3;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: int zhigh = (z >> 13) & 0x7;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: data[2] = blue;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: data[3] = (byte)zlow;
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'4'x);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: data[4] |= (byte)(zmid << 1);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'6'y);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: data[6] |= (byte)(zhigh);
Magic Number,Crash,OldSceneryVertex,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\OldSceneryVertex.cs,Save,The following statement contains a magic number: if (lightingflag)              {                  data[4] |= 1;              }
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: if (data.Length != 8)                  throw new ArgumentException("Value must be 8 bytes long."'"data");
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: int wordb = BitConv.FromInt32(data'4);
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: int vertexa = (worda >> 8) & 0xFFF;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: int vertexb = (worda >> 20) & 0xFFF;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: int vertexd = (wordb >> 8) & 0xFFF;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Load,The following statement contains a magic number: int vertexc = (wordb >> 20) & 0xFFF;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: byte[] data = new byte [8];
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: int worda = (vertexa << 8) | (vertexb << 20) | unknown2;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: int worda = (vertexa << 8) | (vertexb << 20) | unknown2;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: int wordb = (vertexd << 8) | (vertexc << 20) | unknown3;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: int wordb = (vertexd << 8) | (vertexc << 20) | unknown3;
Magic Number,Crash,SceneryQuad,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryQuad.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'4'wordb);
Magic Number,Crash,ADPCMConv,C:\repos\ughman_CrashEdit\Crash\Utility\ADPCMConv.cs,FromADPCM,The following statement contains a magic number: if (predict >= 16)                  throw new ArgumentOutOfRangeException("predict");
Magic Number,Crash,ADPCMConv,C:\repos\ughman_CrashEdit\Crash\Utility\ADPCMConv.cs,FromADPCM,The following statement contains a magic number: sample <<= 12;
Magic Number,Crash,ADPCMConv,C:\repos\ughman_CrashEdit\Crash\Utility\ADPCMConv.cs,FromADPCM,The following statement contains a magic number: value += s0 * f0[predict] / 64;
Magic Number,Crash,ADPCMConv,C:\repos\ughman_CrashEdit\Crash\Utility\ADPCMConv.cs,FromADPCM,The following statement contains a magic number: value += s1 * f1[predict] / 64;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: if (offset + 3 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: result |= str[offset + 0] << 8 * 2;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: result |= str[offset + 0] << 8 * 2;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: result |= str[offset + 1] << 8 * 1;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: result |= str[offset + 2] << 8 * 0;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,From3BE,The following statement contains a magic number: result |= str[offset + 2] << 8 * 0;
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: if (offset + 3 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,MIDIConv,C:\repos\ughman_CrashEdit\Crash\Utility\MIDIConv.cs,To3BE,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [3][];
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: items[0] = new byte [36];
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'4'vheid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'8'vb0eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'12'vb1eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'16'vb2eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'20'vb3eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'24'vb4eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'28'vb5eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(items[0]'32'vb6eid);
Magic Number,Crash,MusicEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntry.cs,Unprocess,The following statement contains a magic number: items[2] = sep.Save();
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3)              {                  ErrorManager.SignalError("MusicEntry: Wrong number of items");              }
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 36)              {                  ErrorManager.SignalError("MusicEntry: First item length is wrong");              }
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vheid = BitConv.FromInt32(items[0]'4);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb0eid = BitConv.FromInt32(items[0]'8);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb1eid = BitConv.FromInt32(items[0]'12);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb2eid = BitConv.FromInt32(items[0]'16);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb3eid = BitConv.FromInt32(items[0]'20);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb4eid = BitConv.FromInt32(items[0]'24);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb5eid = BitConv.FromInt32(items[0]'28);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: int vb6eid = BitConv.FromInt32(items[0]'32);
Magic Number,Crash,MusicEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Music\MusicEntryLoader.cs,Load,The following statement contains a magic number: SEP sep = SEP.Load(items[2]'seqcount);
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: byte[] result = new byte [12 + data.Length];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[2] = (byte)'F';
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[3] = (byte)'F';
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: AutoBitConv.ToInt32(endianness'result'4'data.Length + 4);
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: AutoBitConv.ToInt32(endianness'result'4'data.Length + 4);
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[8] = (byte)Name[0];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[9] = (byte)Name[1];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[10] = (byte)Name[2];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[10] = (byte)Name[2];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[11] = (byte)Name[3];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: result[11] = (byte)Name[3];
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,Save,The following statement contains a magic number: data.CopyTo(result'12);
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,SaveBody,The following statement contains a magic number: foreach (RIFFItem item in items)              {                  byte[] itemdata = item.Save(endianness);                  if (item is RIFF)                  {                      itemdata[0] = (byte)'L';                      itemdata[1] = (byte)'I';                      itemdata[2] = (byte)'S';                      itemdata[3] = (byte)'T';                  }                  data.AddRange(itemdata);              }
Magic Number,Crash,RIFF,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFF.cs,SaveBody,The following statement contains a magic number: foreach (RIFFItem item in items)              {                  byte[] itemdata = item.Save(endianness);                  if (item is RIFF)                  {                      itemdata[0] = (byte)'L';                      itemdata[1] = (byte)'I';                      itemdata[2] = (byte)'S';                      itemdata[3] = (byte)'T';                  }                  data.AddRange(itemdata);              }
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: byte[] result = new byte [8 + data.Length];
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: result[2] = (byte)Name[2];
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: result[2] = (byte)Name[2];
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: result[3] = (byte)Name[3];
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: result[3] = (byte)Name[3];
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: AutoBitConv.ToInt32(endianness'result'4'data.Length);
Magic Number,Crash,RIFFData,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFData.cs,Save,The following statement contains a magic number: data.CopyTo(result'8);
Magic Number,Crash,RIFFItem,C:\repos\ughman_CrashEdit\Crash\Formats\Common Formats\RIFF\RIFFItem.cs,RIFFItem,The following statement contains a magic number: if (name.Length != 4)                  throw new ArgumentException("Value must be 4 characters long."'"name");
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Load,The following statement contains a magic number: if (data.Length != 16)                  throw new ArgumentException("Value must be 16 bytes long."'"data");
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Load,The following statement contains a magic number: byte[] newdata = new byte [14];
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Load,The following statement contains a magic number: Array.Copy(data'2'newdata'0'14);
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Load,The following statement contains a magic number: Array.Copy(data'2'newdata'0'14);
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,SampleLine,The following statement contains a magic number: if (data.Length != 14)                  throw new ArgumentException("Value must be 14 bytes long."'"data");
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Save,The following statement contains a magic number: byte[] result = new byte [16];
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,Save,The following statement contains a magic number: data.CopyTo(result'2);
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: byte[] result = new byte [28 * 2];
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: byte[] result = new byte [28 * 2];
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: int predict = (info >> 4) & 0xF;
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: for (int i = 0;i < 14;i++)              {                  int adl = data[i] & 0xF;                  int adh = (data[i] & 0xF0) >> 4;                  short l = ADPCMConv.FromADPCM(adl'factor'predict'ref s0'ref s1);                  short h = ADPCMConv.FromADPCM(adh'factor'predict'ref s0'ref s1);                  BitConv.ToInt16(result'i * 4 + 0'l);                  BitConv.ToInt16(result'i * 4 + 2'h);              }
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: for (int i = 0;i < 14;i++)              {                  int adl = data[i] & 0xF;                  int adh = (data[i] & 0xF0) >> 4;                  short l = ADPCMConv.FromADPCM(adl'factor'predict'ref s0'ref s1);                  short h = ADPCMConv.FromADPCM(adh'factor'predict'ref s0'ref s1);                  BitConv.ToInt16(result'i * 4 + 0'l);                  BitConv.ToInt16(result'i * 4 + 2'h);              }
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: for (int i = 0;i < 14;i++)              {                  int adl = data[i] & 0xF;                  int adh = (data[i] & 0xF0) >> 4;                  short l = ADPCMConv.FromADPCM(adl'factor'predict'ref s0'ref s1);                  short h = ADPCMConv.FromADPCM(adh'factor'predict'ref s0'ref s1);                  BitConv.ToInt16(result'i * 4 + 0'l);                  BitConv.ToInt16(result'i * 4 + 2'h);              }
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: for (int i = 0;i < 14;i++)              {                  int adl = data[i] & 0xF;                  int adh = (data[i] & 0xF0) >> 4;                  short l = ADPCMConv.FromADPCM(adl'factor'predict'ref s0'ref s1);                  short h = ADPCMConv.FromADPCM(adh'factor'predict'ref s0'ref s1);                  BitConv.ToInt16(result'i * 4 + 0'l);                  BitConv.ToInt16(result'i * 4 + 2'h);              }
Magic Number,Crash,SampleLine,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleLine.cs,ToPCM,The following statement contains a magic number: for (int i = 0;i < 14;i++)              {                  int adl = data[i] & 0xF;                  int adh = (data[i] & 0xF0) >> 4;                  short l = ADPCMConv.FromADPCM(adl'factor'predict'ref s0'ref s1);                  short h = ADPCMConv.FromADPCM(adh'factor'predict'ref s0'ref s1);                  BitConv.ToInt16(result'i * 4 + 0'l);                  BitConv.ToInt16(result'i * 4 + 2'h);              }
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Load,The following statement contains a magic number: if (data.Length % 16 != 0)              {                  ErrorManager.SignalError("SampleSet: Length is invalid");              }
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Load,The following statement contains a magic number: int samplelinecount = data.Length / 16;
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Load,The following statement contains a magic number: for (int i = 0;i < samplelinecount;i++)              {                  byte[] linedata = new byte [16];                  Array.Copy(data'i * 16'linedata'0'16);                  samplelines[i] = SampleLine.Load(linedata);              }
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Load,The following statement contains a magic number: for (int i = 0;i < samplelinecount;i++)              {                  byte[] linedata = new byte [16];                  Array.Copy(data'i * 16'linedata'0'16);                  samplelines[i] = SampleLine.Load(linedata);              }
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Load,The following statement contains a magic number: for (int i = 0;i < samplelinecount;i++)              {                  byte[] linedata = new byte [16];                  Array.Copy(data'i * 16'linedata'0'16);                  samplelines[i] = SampleLine.Load(linedata);              }
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Save,The following statement contains a magic number: byte[] data = new byte [samplelines.Count * 16];
Magic Number,Crash,SampleSet,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\ADPCM\SampleSet.cs,Save,The following statement contains a magic number: for (int i = 0;i < samplelines.Count;i++)              {                  samplelines[i].Save().CopyTo(data'i * 16);              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: if (data.Length < 6)              {                  ErrorManager.SignalError("SEP: Data is too short");              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: short version = BEBitConv.FromInt16(data'4);
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: int offset = 6;
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Load,The following statement contains a magic number: for (int i = 0;i < seqcount;i++)              {                  if (data.Length < offset + 13)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  short seqid = BEBitConv.FromInt16(data'offset);                  short resolution = BEBitConv.FromInt16(data'offset + 2);                  // tempo is 3 (yes' three) bytes                  int tempo = MIDIConv.From3BE(data'offset + 4);                  short rhythm = BEBitConv.FromInt16(data'offset + 7);                  int length = BEBitConv.FromInt32(data'offset + 9);                  if (seqid != i)                  {                      ErrorManager.SignalIgnorableError("SEP: Track number is wrong");                  }                  if (length < 0)                  {                      ErrorManager.SignalError("SEP: Track length is negative");                  }                  offset += 13;                  if (data.Length < offset + length)                  {                      ErrorManager.SignalError("SEP: Data is too short");                  }                  byte[] seqdata = new byte [length];                  Array.Copy(data'offset'seqdata'0'length);                  seqs[i] = new SEQ(resolution'tempo'rhythm'seqdata);                  offset += length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: int length = 6;
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: foreach (SEQ seq in seqs)              {                  length += 13;                  length += seq.Data.Length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: BEBitConv.ToInt16(data'4'Version);
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: int offset = 6;
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: for (int i = 0;i < seqs.Count;i++)              {                  SEQ seq = seqs[i];                  BEBitConv.ToInt16(data'offset'(short)i);                  BEBitConv.ToInt16(data'offset + 2'seq.Resolution);                  MIDIConv.To3BE(data'offset + 4'seq.Tempo);                  BEBitConv.ToInt16(data'offset + 7'seq.Rhythm);                  BEBitConv.ToInt32(data'offset + 9'seq.Data.Length);                  offset += 13;                  seq.Data.CopyTo(data'offset);                  offset += seq.Data.Length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: for (int i = 0;i < seqs.Count;i++)              {                  SEQ seq = seqs[i];                  BEBitConv.ToInt16(data'offset'(short)i);                  BEBitConv.ToInt16(data'offset + 2'seq.Resolution);                  MIDIConv.To3BE(data'offset + 4'seq.Tempo);                  BEBitConv.ToInt16(data'offset + 7'seq.Rhythm);                  BEBitConv.ToInt32(data'offset + 9'seq.Data.Length);                  offset += 13;                  seq.Data.CopyTo(data'offset);                  offset += seq.Data.Length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: for (int i = 0;i < seqs.Count;i++)              {                  SEQ seq = seqs[i];                  BEBitConv.ToInt16(data'offset'(short)i);                  BEBitConv.ToInt16(data'offset + 2'seq.Resolution);                  MIDIConv.To3BE(data'offset + 4'seq.Tempo);                  BEBitConv.ToInt16(data'offset + 7'seq.Rhythm);                  BEBitConv.ToInt32(data'offset + 9'seq.Data.Length);                  offset += 13;                  seq.Data.CopyTo(data'offset);                  offset += seq.Data.Length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: for (int i = 0;i < seqs.Count;i++)              {                  SEQ seq = seqs[i];                  BEBitConv.ToInt16(data'offset'(short)i);                  BEBitConv.ToInt16(data'offset + 2'seq.Resolution);                  MIDIConv.To3BE(data'offset + 4'seq.Tempo);                  BEBitConv.ToInt16(data'offset + 7'seq.Rhythm);                  BEBitConv.ToInt32(data'offset + 9'seq.Data.Length);                  offset += 13;                  seq.Data.CopyTo(data'offset);                  offset += seq.Data.Length;              }
Magic Number,Crash,SEP,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEP.cs,Save,The following statement contains a magic number: for (int i = 0;i < seqs.Count;i++)              {                  SEQ seq = seqs[i];                  BEBitConv.ToInt16(data'offset'(short)i);                  BEBitConv.ToInt16(data'offset + 2'seq.Resolution);                  MIDIConv.To3BE(data'offset + 4'seq.Tempo);                  BEBitConv.ToInt16(data'offset + 7'seq.Rhythm);                  BEBitConv.ToInt32(data'offset + 9'seq.Data.Length);                  offset += 13;                  seq.Data.CopyTo(data'offset);                  offset += seq.Data.Length;              }
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: if (data.Length < 15)              {                  ErrorManager.SignalError("SEQ: Data is too short");              }
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: int version = BEBitConv.FromInt32(data'4);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: short resolution = BEBitConv.FromInt16(data'8);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: int tempo = MIDIConv.From3BE(data'10);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: short rhythm = BEBitConv.FromInt16(data'13);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: byte[] scoredata = new byte [data.Length - 15];
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Load,The following statement contains a magic number: Array.Copy(data'15'scoredata'0'scoredata.Length);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: byte[] result = new byte [15 + data.Length];
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: BEBitConv.ToInt32(result'4'Version);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: BEBitConv.ToInt16(result'8'resolution);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: MIDIConv.To3BE(result'10'tempo);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: BEBitConv.ToInt16(result'13'rhythm);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,Save,The following statement contains a magic number: data.CopyTo(result'15);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: byte[] mthd = new byte [6];
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: BEBitConv.ToInt16(mthd'2'1);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: BEBitConv.ToInt16(mthd'4'resolution);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: byte[] mtrk = new byte [15 + data.Length];
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[2] = 0x51;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[3] = 0x03;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: MIDIConv.To3BE(mtrk'4'tempo);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[7] = 0;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[8] = 0xFF;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[9] = 0x58;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[10] = 0x04;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: BEBitConv.ToInt16(mtrk'11'rhythm);
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[13] = 0x18;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: mtrk[14] = 0x08;
Magic Number,Crash,SEQ,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\SEQ.cs,ToMIDI,The following statement contains a magic number: data.CopyTo(mtrk'15);
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: byte[] colh = new byte [4];
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: BitConv.ToInt32(colh'0'programs.Count * 2);
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      lins.Items.Add(programs[i].ToDLSInstrument(i'false));                      lins.Items.Add(programs[i].ToDLSInstrument(i'true));                  }              }
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: foreach (SampleSet sampleset in waves)              {                  List<byte> pcm = new List<byte>();                  double s0 = 0.0;                  double s1 = 0.0;                  int loopstart = 0;                  for (int i = 0;i < sampleset.SampleLines.Count;i++)                  {                      SampleLine sampleline = sampleset.SampleLines[i];                      pcm.AddRange(sampleline.ToPCM(ref s0'ref s1));                      if ((sampleline.Flags & SampleLineFlags.LoopEnd) != 0)                      {                          break;                      }                      if ((sampleline.Flags & SampleLineFlags.LoopStart) != 0)                      {                          loopstart = i;                      }                  }                  /*for (int i = loopstart;i < sampleset.SampleLines.Count;i++)                  {                      SampleLine sampleline = sampleset.SampleLines[i];                      pcm.AddRange(sampleline.ToPCM(ref s0'ref s1));                      if ((sampleline.Flags & SampleLineFlags.LoopEnd) != 0)                      {                          break;                      }                  }*/                  RIFF wave = WaveConv.ToWave(pcm.ToArray()'44100);                  wave.Name = "wave";                  wvpl.Items.Add(wave);              }
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: byte[] ptbl = new byte [8 + 4 * waves.Count];
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: byte[] ptbl = new byte [8 + 4 * waves.Count];
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: BitConv.ToInt32(ptbl'0'8);
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: BitConv.ToInt32(ptbl'4'waves.Count);
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt32(ptbl'8 + i * 4'waveoffset);                  waveoffset += wvpl.Items[i].Length;              }
Magic Number,Crash,VAB,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VAB.cs,ToDLS,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt32(ptbl'8 + i * 4'waveoffset);                  waveoffset += wvpl.Items[i].Length;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (data.Length < 2592)              {                  ErrorManager.SignalError("VH: Data is too short");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: int version = BitConv.FromInt32(data'4);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: int id = BitConv.FromInt32(data'8);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: int size = BitConv.FromInt32(data'12);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: short reserved1 = BitConv.FromInt16(data'16);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: short programcount = BitConv.FromInt16(data'18);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: short tonecount = BitConv.FromInt16(data'20);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: short wavecount = BitConv.FromInt16(data'22);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: byte volume = data[24];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: byte panning = data[25];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: byte attribute1 = data[26];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: byte attribute2 = data[27];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: int reserved2 = BitConv.FromInt32(data'28);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if ((size - data.Length) % 16 != 0)              {                  ErrorManager.SignalError("VH: Size field is invalid");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: int vbsize = (size - data.Length) / 16;
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (programcount < 0 || programcount > 128)              {                  ErrorManager.SignalError("VH: Program count is invalid");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (tonecount < 0 || tonecount > 2048)              {                  ErrorManager.SignalError("VH: Tone count is invalid");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (wavecount < 0 || wavecount > 254)              {                  ErrorManager.SignalError("VH: Wave count is invalid");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (data.Length < 2592 + 32 * 16 * programcount)              {                  ErrorManager.SignalError("VH: Data is too short");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (data.Length < 2592 + 32 * 16 * programcount)              {                  ErrorManager.SignalError("VH: Data is too short");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: if (data.Length < 2592 + 32 * 16 * programcount)              {                  ErrorManager.SignalError("VH: Data is too short");              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  byte[] programdata = new byte [16];                  Array.Copy(data'32 + 16 * i'programdata'0'16);                  if (programdata[0] == 0)                  {                      continue;                  }                  if (programs.Count == programcount)                  {                      ErrorManager.SignalError("VH: Program count field mismatch");                  }                  byte[] tonedata = new byte [32 * 16];                  Array.Copy(data'32 + 16 * 128 + 32 * 16 * programs.Count'tonedata'0'32 * 16);                  programs.Add(i'VHProgram.Load(programdata'tonedata'isoldversion));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Load,The following statement contains a magic number: for (int i = 0;i < wavecount;i++)              {                  int wave = BitConv.FromInt16(data'32 + 16 * 128 + 32 * 16 * programcount + 2 + i * 2);                  if (wave % 2 != 0)                  {                      ErrorManager.SignalError("VH: Wave size is invalid");                  }                  waves[i] = wave / 2;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: byte[] data = new byte [2592 + 32 * 16 * programs.Count];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: byte[] data = new byte [2592 + 32 * 16 * programs.Count];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: byte[] data = new byte [2592 + 32 * 16 * programs.Count];
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'4'isoldversion ? OldVersion : Version);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'8'0);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'12'data.Length + vbsize * 16);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'12'data.Length + vbsize * 16);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'16'-0x1112);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'18'(short)programs.Count);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'20'(short)tonecount);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'22'(short)waves.Count);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: data[24] = volume;
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: data[25] = panning;
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: data[26] = attribute1;
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: data[27] = attribute2;
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'28'-1);
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      programs[i].Save().CopyTo(data'32 + 16 * i);                  }                  else                  {                      new VHProgram(isoldversion).Save().CopyTo(data'32 + 16 * i);                  }              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      programs[i].Save().CopyTo(data'32 + 16 * i);                  }                  else                  {                      new VHProgram(isoldversion).Save().CopyTo(data'32 + 16 * i);                  }              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      programs[i].Save().CopyTo(data'32 + 16 * i);                  }                  else                  {                      new VHProgram(isoldversion).Save().CopyTo(data'32 + 16 * i);                  }              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      programs[i].Save().CopyTo(data'32 + 16 * i);                  }                  else                  {                      new VHProgram(isoldversion).Save().CopyTo(data'32 + 16 * i);                  }              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < 128;i++)              {                  if (programs.ContainsKey(i))                  {                      programs[i].Save().CopyTo(data'32 + 16 * i);                  }                  else                  {                      new VHProgram(isoldversion).Save().CopyTo(data'32 + 16 * i);                  }              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<int'VHProgram> kvp in programs)              {                  VHProgram program = kvp.Value;                  for (int j = 0;j < 16;j++)                  {                      if (j < program.Tones.Count)                      {                          program.Tones[j].Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                      else                      {                          new VHTone(isoldversion).Save(kvp.Key).CopyTo(data'2080 + 32 * 16 * ii + 32 * j);                      }                  }                  ii++;              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VH,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VH.cs,Save,The following statement contains a magic number: for (int i = 0;i < waves.Count;i++)              {                  BitConv.ToInt16(data'2080 + 32 * 16 * programs.Count + 2 + i * 2'(short)(waves[i] * 2));              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: if (data.Length != 16)                  throw new ArgumentException("Value must be 16 bytes long."'"data");
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: if (tonedata.Length != 32 * 16)                  throw new ArgumentException("Value must be 512 bytes long."'"tonedata");
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: if (tonedata.Length != 32 * 16)                  throw new ArgumentException("Value must be 512 bytes long."'"tonedata");
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: byte priority = data[2];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: byte mode = data[3];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: byte panning = data[4];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: byte reserved1 = data[5];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: short attribute = BitConv.FromInt16(data'6);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: int reserved2 = BitConv.FromInt32(data'8);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: int reserved3 = BitConv.FromInt32(data'12);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: if (tonecount < 0 || tonecount > 16)              {                  ErrorManager.SignalError("VHProgram: Tone count is wrong");              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: for (int i = 0;i < tonecount;i++)              {                  byte[] thistonedata = new byte [32];                  Array.Copy(tonedata'i * 32'thistonedata'0'32);                  tones[i] = VHTone.Load(thistonedata);              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: for (int i = 0;i < tonecount;i++)              {                  byte[] thistonedata = new byte [32];                  Array.Copy(tonedata'i * 32'thistonedata'0'32);                  tones[i] = VHTone.Load(thistonedata);              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Load,The following statement contains a magic number: for (int i = 0;i < tonecount;i++)              {                  byte[] thistonedata = new byte [32];                  Array.Copy(tonedata'i * 32'thistonedata'0'32);                  tones[i] = VHTone.Load(thistonedata);              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,VHProgram,The following statement contains a magic number: if (isoldversion)              {                  this.volume = 0;                  this.priority = 0;                  this.mode = 0x1A;                  this.panning = 0;                  this.attribute = 0;              }              else              {                  this.volume = 127;                  this.priority = 255;                  this.mode = 255;                  this.panning = 64;                  this.attribute = 0;              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,VHProgram,The following statement contains a magic number: if (isoldversion)              {                  this.volume = 0;                  this.priority = 0;                  this.mode = 0x1A;                  this.panning = 0;                  this.attribute = 0;              }              else              {                  this.volume = 127;                  this.priority = 255;                  this.mode = 255;                  this.panning = 64;                  this.attribute = 0;              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,VHProgram,The following statement contains a magic number: if (isoldversion)              {                  this.volume = 0;                  this.priority = 0;                  this.mode = 0x1A;                  this.panning = 0;                  this.attribute = 0;              }              else              {                  this.volume = 127;                  this.priority = 255;                  this.mode = 255;                  this.panning = 64;                  this.attribute = 0;              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,VHProgram,The following statement contains a magic number: if (isoldversion)              {                  this.volume = 0;                  this.priority = 0;                  this.mode = 0x1A;                  this.panning = 0;                  this.attribute = 0;              }              else              {                  this.volume = 127;                  this.priority = 255;                  this.mode = 255;                  this.panning = 64;                  this.attribute = 0;              }
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: byte[] data = new byte [16];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: data[2] = priority;
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: data[3] = mode;
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: data[4] = panning;
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: data[5] = isoldversion ? (byte)0x00 : (byte)0xFF;
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'6'attribute);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'8'-1);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'12'-1);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,ToDLSInstrument,The following statement contains a magic number: byte[] insh = new byte [12];
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,ToDLSInstrument,The following statement contains a magic number: BitConv.ToInt32(insh'4'drumkit ? (1 << 31) : 0);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,ToDLSInstrument,The following statement contains a magic number: BitConv.ToInt32(insh'4'drumkit ? (1 << 31) : 0);
Magic Number,Crash,VHProgram,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHProgram.cs,ToDLSInstrument,The following statement contains a magic number: BitConv.ToInt32(insh'8'programnumber);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: if (data.Length != 32)                  throw new ArgumentException("Value must be 32 bytes long."'"data");
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte volume = data[2];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte panning = data[3];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte centernote = data[4];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte pitchshift = data[5];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte minimumnote = data[6];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte maximumnote = data[7];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte vibratowidth = data[8];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte vibratotime = data[9];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte portamentowidth = data[10];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte portamentotime = data[11];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte pitchbendminimum = data[12];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte pitchbendmaximum = data[13];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte reserved1 = data[14];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: byte reserved2 = data[15];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short adsr1 = BitConv.FromInt16(data'16);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short adsr2 = BitConv.FromInt16(data'18);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short wave = BitConv.FromInt16(data'22);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short reserved3 = BitConv.FromInt16(data'24);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short reserved4 = BitConv.FromInt16(data'26);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short reserved5 = BitConv.FromInt16(data'28);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Load,The following statement contains a magic number: short reserved6 = BitConv.FromInt16(data'30);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The following statement contains a magic number: if (isoldversion)              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 0;                  this.panning = 0;                  this.centernote = 0;                  this.pitchshift = 0;                  this.minimumnote = 0;                  this.maximumnote = 0;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }              else              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 80;                  this.panning = 64;                  this.centernote = 64;                  this.pitchshift = 0;                  this.minimumnote = 64;                  this.maximumnote = 64;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The following statement contains a magic number: if (isoldversion)              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 0;                  this.panning = 0;                  this.centernote = 0;                  this.pitchshift = 0;                  this.minimumnote = 0;                  this.maximumnote = 0;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }              else              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 80;                  this.panning = 64;                  this.centernote = 64;                  this.pitchshift = 0;                  this.minimumnote = 64;                  this.maximumnote = 64;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The following statement contains a magic number: if (isoldversion)              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 0;                  this.panning = 0;                  this.centernote = 0;                  this.pitchshift = 0;                  this.minimumnote = 0;                  this.maximumnote = 0;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }              else              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 80;                  this.panning = 64;                  this.centernote = 64;                  this.pitchshift = 0;                  this.minimumnote = 64;                  this.maximumnote = 64;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The following statement contains a magic number: if (isoldversion)              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 0;                  this.panning = 0;                  this.centernote = 0;                  this.pitchshift = 0;                  this.minimumnote = 0;                  this.maximumnote = 0;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }              else              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 80;                  this.panning = 64;                  this.centernote = 64;                  this.pitchshift = 0;                  this.minimumnote = 64;                  this.maximumnote = 64;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,VHTone,The following statement contains a magic number: if (isoldversion)              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 0;                  this.panning = 0;                  this.centernote = 0;                  this.pitchshift = 0;                  this.minimumnote = 0;                  this.maximumnote = 0;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }              else              {                  this.priority = 0;                  this.mode = 0;                  this.volume = 80;                  this.panning = 64;                  this.centernote = 64;                  this.pitchshift = 0;                  this.minimumnote = 64;                  this.maximumnote = 64;                  this.vibratowidth = 0;                  this.vibratotime = 0;                  this.portamentowidth = 0;                  this.portamentotime = 0;                  this.pitchbendminimum = 0;                  this.pitchbendmaximum = 0;                  unchecked                  {                      this.adsr1 = (short)0x80FF;                      this.adsr2 = (short)0x5FDF;                  }              }
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: byte[] data = new byte [32];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[2] = volume;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[3] = panning;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[4] = centernote;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[5] = pitchshift;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[6] = minimumnote;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[7] = maximumnote;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[8] = vibratowidth;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[9] = vibratotime;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[10] = portamentowidth;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[11] = portamentotime;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[12] = pitchbendminimum;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[13] = pitchbendmaximum;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[14] = 0xB1;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: data[15] = 0xB2;
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'16'adsr1);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'18'adsr2);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'20'(short)program);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'22'wave);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'24'0xC0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'26'0xC1);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'28'0xC2);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'30'0xC3);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: byte[] rgnh = new byte [12];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'2'maximumnote);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'4'0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'6'127);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'6'127);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'8'0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(rgnh'10'0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: byte[] wsmp = new byte [20 /* 36 */];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'0'20);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(wsmp'4'centernote);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(wsmp'6'pitchshift);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'8'volume - 64 << 16);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'8'volume - 64 << 16);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'8'volume - 64 << 16);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'12'0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wsmp'16'0 /* 1 */);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: byte[] wlnk = new byte [12];
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt16(wlnk'2'0);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wlnk'4'3);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wlnk'4'3);
Magic Number,Crash,VHTone,C:\repos\ughman_CrashEdit\Crash\Formats\PSX Formats\VAB\VHTone.cs,ToDLSRegion,The following statement contains a magic number: BitConv.ToInt32(wlnk'8'wave - 1);
Magic Number,Crash,WavebankEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntry.cs,Unprocess,The following statement contains a magic number: byte[] info = new byte [8];
Magic Number,Crash,WavebankEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntry.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(info'4'data.Length);
Magic Number,Crash,WavebankEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [2][];
Magic Number,Crash,WavebankEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 2)              {                  ErrorManager.SignalError("WavebankEntry: Wrong number of items");              }
Magic Number,Crash,WavebankEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 8)              {                  ErrorManager.SignalError("WavebankEntry: First item length is wrong");              }
Magic Number,Crash,WavebankEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntryLoader.cs,Load,The following statement contains a magic number: int length = BitConv.FromInt32(items[0]'4);
Magic Number,Crash,WavebankEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Wavebank\WavebankEntryLoader.cs,Load,The following statement contains a magic number: if (id < 0 || id > 6)              {                  ErrorManager.SignalIgnorableError("WavebankEntry: ID is invalid");              }
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: byte[] format = new byte [16];
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt16(format'2'1);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt32(format'4'samplerate);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt32(format'8'samplerate * 2);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt32(format'8'samplerate * 2);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt16(format'12'2);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt16(format'12'2);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt16(format'14'16);
Magic Number,Crash,WaveConv,C:\repos\ughman_CrashEdit\Crash\Utility\WaveConv.cs,ToWave,The following statement contains a magic number: BitConv.ToInt16(format'14'16);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: int length = 20 + Items.Count * 4;
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: int length = 20 + Items.Count * 4;
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: Aligner.Align(ref length'4);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: foreach (byte[] item in Items)              {                  length += item.Length;                  Aligner.Align(ref length'4);              }
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'4'EID);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'8'Type);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'12'Items.Count);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: int offset = 20 + Items.Count * 4;
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: int offset = 20 + Items.Count * 4;
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: Aligner.Align(ref offset'4);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: BitConv.ToInt32(data'16'offset);
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: for (int i = 0;i < Items.Count;i++)              {                  Items[i].CopyTo(data'offset);                  offset += Items[i].Length;                  Aligner.Align(ref offset'4);                  BitConv.ToInt32(data'20 + i * 4'offset);              }
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: for (int i = 0;i < Items.Count;i++)              {                  Items[i].CopyTo(data'offset);                  offset += Items[i].Length;                  Aligner.Align(ref offset'4);                  BitConv.ToInt32(data'20 + i * 4'offset);              }
Magic Number,Crash,UnprocessedEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\UnprocessedEntry.cs,Save,The following statement contains a magic number: for (int i = 0;i < Items.Count;i++)              {                  Items[i].CopyTo(data'offset);                  offset += Items[i].Length;                  Aligner.Align(ref offset'4);                  BitConv.ToInt32(data'20 + i * 4'offset);              }
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt16,The following statement contains a magic number: if (offset + 2 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt16,The following statement contains a magic number: result |= str[offset + 0] << 8 * 0;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt16,The following statement contains a magic number: result |= str[offset + 1] << 8 * 1;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: if (offset + 3 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: result |= str[offset + 0] << 8 * 0;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: result |= str[offset + 1] << 8 * 1;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt24,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: if (offset + 4 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 0] << 8 * 0;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 1] << 8 * 1;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 2] << 8 * 2;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 3] << 8 * 3;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 3] << 8 * 3;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 3] << 8 * 3;
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt16,The following statement contains a magic number: if (offset + 2 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt16,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt16,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: if (offset + 3 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: if (value < -8388608 || value > 8388607)                  throw new ArgumentOutOfRangeException("value");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: if (value < -8388608 || value > 8388607)                  throw new ArgumentOutOfRangeException("value");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt24,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: if (offset + 4 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 3] = (byte)((value >> 8 * 3) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 3] = (byte)((value >> 8 * 3) & 0xFF);
Magic Number,Crash,BitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 3] = (byte)((value >> 8 * 3) & 0xFF);
Magic Number,Crash,Chunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Chunk\Chunk.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 0;i < Length;i++)              {                  if (i < 12 || i >= 16)                  {                      checksum += data[i];                  }                  checksum = checksum << 3 | checksum >> 29;              }
Magic Number,Crash,Chunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Chunk\Chunk.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 0;i < Length;i++)              {                  if (i < 12 || i >= 16)                  {                      checksum += data[i];                  }                  checksum = checksum << 3 | checksum >> 29;              }
Magic Number,Crash,Chunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Chunk\Chunk.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 0;i < Length;i++)              {                  if (i < 12 || i >= 16)                  {                      checksum += data[i];                  }                  checksum = checksum << 3 | checksum >> 29;              }
Magic Number,Crash,Chunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Chunk\Chunk.cs,CalculateChecksum,The following statement contains a magic number: for (int i = 0;i < Length;i++)              {                  if (i < 12 || i >= 16)                  {                      checksum += data[i];                  }                  checksum = checksum << 3 | checksum >> 29;              }
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt16,The following statement contains a magic number: if (offset + 2 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt16,The following statement contains a magic number: result |= str[offset + 0] << 8 * 1;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt16,The following statement contains a magic number: result |= str[offset + 1] << 8 * 0;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: if (offset + 4 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 0] << 8 * 3;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 0] << 8 * 3;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 1] << 8 * 2;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 1] << 8 * 2;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 2] << 8 * 1;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 2] << 8 * 1;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 3] << 8 * 0;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,FromInt32,The following statement contains a magic number: result |= str[offset + 3] << 8 * 0;
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt16,The following statement contains a magic number: if (offset + 2 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt16,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt16,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: if (offset + 4 > str.Length)                  throw new ArgumentOutOfRangeException("offset");
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 3) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 0] = (byte)((value >> 8 * 3) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 1] = (byte)((value >> 8 * 2) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 2] = (byte)((value >> 8 * 1) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 3] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,BEBitConv,C:\repos\ughman_CrashEdit\Crash\Utility\BEBitConv.cs,ToInt32,The following statement contains a magic number: str[offset + 3] = (byte)((value >> 8 * 0) & 0xFF);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: if (data.Length < 1312)              {                  ErrorManager.SignalError("NSD: Data is too short");              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int[] unknown1 = new int [256];
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < 256;i++)              {                  unknown1[i] = BitConv.FromInt32(data'i * 4);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < 256;i++)              {                  unknown1[i] = BitConv.FromInt32(data'i * 4);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int chunkcount = BitConv.FromInt32(data'1024);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int entrycount = BitConv.FromInt32(data'1028);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int[] unknown2 = new int [70];
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  unknown2[i] = BitConv.FromInt32(data'1032 + i * 4);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  unknown2[i] = BitConv.FromInt32(data'1032 + i * 4);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  unknown2[i] = BitConv.FromInt32(data'1032 + i * 4);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: if (data.Length < 1312 + 8 * entrycount)              {                  ErrorManager.SignalError("NSD: Data is too short");              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: if (data.Length < 1312 + 8 * entrycount)              {                  ErrorManager.SignalError("NSD: Data is too short");              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int chunkid = BitConv.FromInt32(data'1312 + 8 * i);                  int entryid = BitConv.FromInt32(data'1316 + 8 * i);                  index[i] = new NSDLink(chunkid'entryid);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int chunkid = BitConv.FromInt32(data'1312 + 8 * i);                  int entryid = BitConv.FromInt32(data'1316 + 8 * i);                  index[i] = new NSDLink(chunkid'entryid);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int chunkid = BitConv.FromInt32(data'1312 + 8 * i);                  int entryid = BitConv.FromInt32(data'1316 + 8 * i);                  index[i] = new NSDLink(chunkid'entryid);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int chunkid = BitConv.FromInt32(data'1312 + 8 * i);                  int entryid = BitConv.FromInt32(data'1316 + 8 * i);                  index[i] = new NSDLink(chunkid'entryid);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int extralength = data.Length - (1312 + 8 * entrycount);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: int extralength = data.Length - (1312 + 8 * entrycount);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: Array.Copy(data'1312 + 8 * entrycount'extradata'0'extralength);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Load,The following statement contains a magic number: Array.Copy(data'1312 + 8 * entrycount'extradata'0'extralength);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,NSD,The following statement contains a magic number: if (unknown1.Length != 256)                  throw new ArgumentException("Value must be 256 ints long."'"unknown1");
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,NSD,The following statement contains a magic number: if (unknown2.Length != 70)                  throw new ArgumentException("Value must be 70 ints long."'"unknown2");
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: byte[] result = new byte [1312 + 8 * index.Count + extradata.Length];
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: byte[] result = new byte [1312 + 8 * index.Count + extradata.Length];
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < 256;i++)              {                  BitConv.ToInt32(result'i * 4'unknown1[i]);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < 256;i++)              {                  BitConv.ToInt32(result'i * 4'unknown1[i]);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: BitConv.ToInt32(result'1024'chunkcount);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: BitConv.ToInt32(result'1028'index.Count);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  BitConv.ToInt32(result'1032 + i * 4'unknown2[i]);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  BitConv.ToInt32(result'1032 + i * 4'unknown2[i]);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < 70;i++)              {                  BitConv.ToInt32(result'1032 + i * 4'unknown2[i]);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < index.Count;i++)              {                  BitConv.ToInt32(result'1312 + i * 8'index[i].ChunkID);                  BitConv.ToInt32(result'1316 + i * 8'index[i].EntryID);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < index.Count;i++)              {                  BitConv.ToInt32(result'1312 + i * 8'index[i].ChunkID);                  BitConv.ToInt32(result'1316 + i * 8'index[i].EntryID);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < index.Count;i++)              {                  BitConv.ToInt32(result'1312 + i * 8'index[i].ChunkID);                  BitConv.ToInt32(result'1316 + i * 8'index[i].EntryID);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: for (int i = 0;i < index.Count;i++)              {                  BitConv.ToInt32(result'1312 + i * 8'index[i].ChunkID);                  BitConv.ToInt32(result'1316 + i * 8'index[i].EntryID);              }
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: Array.Copy(extradata'0'result'1312 + index.Count * 8'extradata.Length);
Magic Number,Crash,NSD,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSD\NSD.cs,Save,The following statement contains a magic number: Array.Copy(extradata'0'result'1312 + index.Count * 8'extradata.Length);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt16(data'2'Type);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(data'4'chunkid);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(data'8'entries.Count);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: int offset = 20 + entries.Count * 4;
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: int offset = 20 + entries.Count * 4;
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < entries.Count;i++)              {                  UnprocessedEntry entry = entries[i].Unprocess();                  byte[] entrydata = entry.Save();                  offset += entry.HeaderLength;                  Aligner.Align(ref offset'Alignment);                  offset -= entry.HeaderLength;                  if (offset + entrydata.Length > Length)                  {                      throw new PackingException();                  }                  BitConv.ToInt32(data'16 + i * 4'offset);                  entrydata.CopyTo(data'offset);                  offset += entrydata.Length;              }
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < entries.Count;i++)              {                  UnprocessedEntry entry = entries[i].Unprocess();                  byte[] entrydata = entry.Save();                  offset += entry.HeaderLength;                  Aligner.Align(ref offset'Alignment);                  offset -= entry.HeaderLength;                  if (offset + entrydata.Length > Length)                  {                      throw new PackingException();                  }                  BitConv.ToInt32(data'16 + i * 4'offset);                  entrydata.CopyTo(data'offset);                  offset += entrydata.Length;              }
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(data'16 + entries.Count * 4'offset);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(data'16 + entries.Count * 4'offset);
Magic Number,Crash,EntryChunk,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunk.cs,Unprocess,The following statement contains a magic number: BitConv.ToInt32(data'12'checksum);
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: if (data.Length < 16)              {                  ErrorManager.SignalError("Entry: Data is too short");              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: int eid = BitConv.FromInt32(data'4);
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: int type = BitConv.FromInt32(data'8);
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: int itemcount = BitConv.FromInt32(data'12);
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: if (data.Length < 20 + itemcount * 4)              {                  ErrorManager.SignalError("Entry: Data is too short");              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: if (data.Length < 20 + itemcount * 4)              {                  ErrorManager.SignalError("Entry: Data is too short");              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: for (int i = 0;i < itemcount;i++)              {                  int itemstart = BitConv.FromInt32(data'16 + i * 4);                  int itemend = BitConv.FromInt32(data'20 + i * 4);                  if (itemstart < 0)                  {                      ErrorManager.SignalError("Entry: Item begins out of bounds");                  }                  if (itemend < itemstart)                  {                      ErrorManager.SignalError("Entry: Item ends before it begins");                  }                  if (itemend > data.Length)                  {                      ErrorManager.SignalError("Entry: Item ends out of bounds");                  }                  int itemsize = itemend - itemstart;                  itemdata = new byte [itemsize];                  Array.Copy(data'itemstart'itemdata'0'itemsize);                  items[i] = itemdata;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: for (int i = 0;i < itemcount;i++)              {                  int itemstart = BitConv.FromInt32(data'16 + i * 4);                  int itemend = BitConv.FromInt32(data'20 + i * 4);                  if (itemstart < 0)                  {                      ErrorManager.SignalError("Entry: Item begins out of bounds");                  }                  if (itemend < itemstart)                  {                      ErrorManager.SignalError("Entry: Item ends before it begins");                  }                  if (itemend > data.Length)                  {                      ErrorManager.SignalError("Entry: Item ends out of bounds");                  }                  int itemsize = itemend - itemstart;                  itemdata = new byte [itemsize];                  Array.Copy(data'itemstart'itemdata'0'itemsize);                  items[i] = itemdata;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: for (int i = 0;i < itemcount;i++)              {                  int itemstart = BitConv.FromInt32(data'16 + i * 4);                  int itemend = BitConv.FromInt32(data'20 + i * 4);                  if (itemstart < 0)                  {                      ErrorManager.SignalError("Entry: Item begins out of bounds");                  }                  if (itemend < itemstart)                  {                      ErrorManager.SignalError("Entry: Item ends before it begins");                  }                  if (itemend > data.Length)                  {                      ErrorManager.SignalError("Entry: Item ends out of bounds");                  }                  int itemsize = itemend - itemstart;                  itemdata = new byte [itemsize];                  Array.Copy(data'itemstart'itemdata'0'itemsize);                  items[i] = itemdata;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,Load,The following statement contains a magic number: for (int i = 0;i < itemcount;i++)              {                  int itemstart = BitConv.FromInt32(data'16 + i * 4);                  int itemend = BitConv.FromInt32(data'20 + i * 4);                  if (itemstart < 0)                  {                      ErrorManager.SignalError("Entry: Item begins out of bounds");                  }                  if (itemend < itemstart)                  {                      ErrorManager.SignalError("Entry: Item ends before it begins");                  }                  if (itemend > data.Length)                  {                      ErrorManager.SignalError("Entry: Item ends out of bounds");                  }                  int itemsize = itemend - itemstart;                  itemdata = new byte [itemsize];                  Array.Copy(data'itemstart'itemdata'0'itemsize);                  items[i] = itemdata;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,EIDToString,The following statement contains a magic number: char[] str = new char [5];
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,EIDToString,The following statement contains a magic number: for (int i = 0;i < 5;i++)              {                  str[4 - i] = EIDStringCharacterSet[eid & 0x3F];                  eid >>= 6;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,EIDToString,The following statement contains a magic number: for (int i = 0;i < 5;i++)              {                  str[4 - i] = EIDStringCharacterSet[eid & 0x3F];                  eid >>= 6;              }
Magic Number,Crash,Entry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry\Entry.cs,EIDToString,The following statement contains a magic number: for (int i = 0;i < 5;i++)              {                  str[4 - i] = EIDStringCharacterSet[eid & 0x3F];                  eid >>= 6;              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: if (data.Length < 16)              {                  ErrorManager.SignalError("Entity: Data is too short");              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: int blank1 = BitConv.FromInt32(data'4);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: int blank2 = BitConv.FromInt32(data'8);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: int propertycount = BitConv.FromInt32(data'12);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: if (data.Length < 16 + propertycount * 8)              {                  ErrorManager.SignalError("Entity: Data is too short");              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: if (data.Length < 16 + propertycount * 8)              {                  ErrorManager.SignalError("Entity: Data is too short");              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Load,The following statement contains a magic number: for (int i = 0;i < propertycount;i++)              {                  short id = BitConv.FromInt16(data'16 + i * 8);                  int offset = (ushort)BitConv.FromInt16(data'18 + i * 8) + 12;                  int nextoffset = (i == propertycount - 1) ? data.Length : ((ushort)BitConv.FromInt16(data'26 + i * 8) + 12);                  byte type = data[20 + i * 8];                  byte elementsize = data[21 + i * 8];                  short unknown = BitConv.FromInt16(data'22 + i * 8);                  if (offset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property begins out of bounds");                  }                  if (nextoffset < offset)                  {                      ErrorManager.SignalError("Entity: Property ends before it begins");                  }                  if (nextoffset > data.Length)                  {                      ErrorManager.SignalError("Entity: Property ends out of bounds");                  }                  if (properties.ContainsKey(id))                  {                      ErrorManager.SignalIgnorableError("Entity: Duplicate property");                  }                  else                  {                      byte[] propertydata = new byte [nextoffset - offset];                      Array.Copy(data'offset'propertydata'0'propertydata.Length);                      EntityProperty property = EntityProperty.Load(type'elementsize'unknown'i == propertycount - 1'propertydata);                      properties.Add(id'property);                  }              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: byte[] header = new byte [16 + 8 * properties.Count];
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: byte[] header = new byte [16 + 8 * properties.Count];
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: int offset = header.Length - 12;
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: foreach (KeyValuePair<short'EntityProperty> pair in properties)              {                  EntityProperty property = pair.Value;                  BitConv.ToInt16(header'16 + 8 * i + 0'pair.Key);                  unchecked                  {                      BitConv.ToInt16(header'16 + 8 * i + 2'(short)offset);                  }                  header[16 + 8 * i + 4] = (byte)(property.Type | ((i == properties.Count - 1) ? 128 : 0) | (property.IsSparse ? 64 : 0) | (property.HasMetaValues ? 32 : 0));                  header[16 + 8 * i + 5] = property.ElementSize;                  BitConv.ToInt16(header'16 + 8 * i + 6'property.Unknown);                  byte[] propertydata = property.Save();                  i++;                  offset += propertydata.Length;                  result.AddRange(propertydata);              }
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: BitConv.ToInt32(header'0'offset + 12);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: BitConv.ToInt32(header'4'0);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: BitConv.ToInt32(header'8'0);
Magic Number,Crash,Entity,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\Entity.cs,Save,The following statement contains a magic number: BitConv.ToInt32(header'12'properties.Count);
Magic Number,Crash,EntityEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [2 + entities.Count][];
Magic Number,Crash,EntityEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < entities.Count;i++)              {                  items[2 + i] = entities[i].Save();              }
Magic Number,Crash,EntityEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length < 2)              {                  ErrorManager.SignalError("EntityEntry: Wrong number of items");              }
Magic Number,Crash,EntityEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntryLoader.cs,Load,The following statement contains a magic number: Entity[] entities = new Entity [items.Length - 2];
Magic Number,Crash,EntityEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 2;i < items.Length;i++)              {                  entities[i - 2] = Entity.Load(items[i]);              }
Magic Number,Crash,EntityEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Entity\EntityEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 2;i < items.Length;i++)              {                  entities[i - 2] = Entity.Load(items[i]);              }
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Pack1555,The following statement contains a magic number: return (short)(a1 << 15 | b5 << 10 | c5 << 5 | d5);
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Pack1555,The following statement contains a magic number: return (short)(a1 << 15 | b5 << 10 | c5 << 5 | d5);
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Pack1555,The following statement contains a magic number: return (short)(a1 << 15 | b5 << 10 | c5 << 5 | d5);
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Unpack1555,The following statement contains a magic number: a1 = (byte)(data >> 15 & 0x1);
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Unpack1555,The following statement contains a magic number: b5 = (byte)(data >> 10 & 0x1F);
Magic Number,Crash,PixelConv,C:\repos\ughman_CrashEdit\Crash\Utility\PixelConv.cs,Unpack1555,The following statement contains a magic number: c5 = (byte)(data >> 5 & 0x1F);
Magic Number,Crash,T11EntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T11\T11EntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3 && items.Length != 5 && items.Length != 6)              {                  ErrorManager.SignalError("T11Entry: Wrong number of items");              }
Magic Number,Crash,T11EntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T11\T11EntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3 && items.Length != 5 && items.Length != 6)              {                  ErrorManager.SignalError("T11Entry: Wrong number of items");              }
Magic Number,Crash,T11EntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T11\T11EntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 3 && items.Length != 5 && items.Length != 6)              {                  ErrorManager.SignalError("T11Entry: Wrong number of items");              }
Magic Number,Crash,T11EntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T11\T11EntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 24)              {                  ErrorManager.SignalError("T11Entry: First item length is wrong");              }
Magic Number,Crash,ModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\ModelEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 5 && items.Length != 6)              {                  ErrorManager.SignalError("ModelEntry: Wrong number of items");              }
Magic Number,Crash,ModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\ModelEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 5 && items.Length != 6)              {                  ErrorManager.SignalError("ModelEntry: Wrong number of items");              }
Magic Number,Crash,ModelEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Models\ModelEntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 80)              {                  ErrorManager.SignalError("ModelEntry: First item length is wrong");              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: byte[][] items = new byte [7][];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[1] = new byte [vertices.Count * 6];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].SaveXY().CopyTo(items[1]'(vertices.Count - 1 - i) * 4);                  vertices[i].SaveZ().CopyTo(items[1]'vertices.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].SaveXY().CopyTo(items[1]'(vertices.Count - 1 - i) * 4);                  vertices[i].SaveZ().CopyTo(items[1]'vertices.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < vertices.Count;i++)              {                  vertices[i].SaveXY().CopyTo(items[1]'(vertices.Count - 1 - i) * 4);                  vertices[i].SaveZ().CopyTo(items[1]'vertices.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[2] = new byte [triangles.Count * 6];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[2] = new byte [triangles.Count * 6];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < triangles.Count;i++)              {                  triangles[i].SaveA().CopyTo(items[2]'(triangles.Count - 1 - i) * 4);                  triangles[i].SaveB().CopyTo(items[2]'triangles.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < triangles.Count;i++)              {                  triangles[i].SaveA().CopyTo(items[2]'(triangles.Count - 1 - i) * 4);                  triangles[i].SaveB().CopyTo(items[2]'triangles.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < triangles.Count;i++)              {                  triangles[i].SaveA().CopyTo(items[2]'(triangles.Count - 1 - i) * 4);                  triangles[i].SaveB().CopyTo(items[2]'triangles.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < triangles.Count;i++)              {                  triangles[i].SaveA().CopyTo(items[2]'(triangles.Count - 1 - i) * 4);                  triangles[i].SaveB().CopyTo(items[2]'triangles.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < triangles.Count;i++)              {                  triangles[i].SaveA().CopyTo(items[2]'(triangles.Count - 1 - i) * 4);                  triangles[i].SaveB().CopyTo(items[2]'triangles.Count * 4 + i * 2);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[3] = new byte [quads.Count * 8];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[3] = new byte [quads.Count * 8];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < quads.Count;i++)              {                  quads[i].Save().CopyTo(items[3]'i * 8);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < quads.Count;i++)              {                  quads[i].Save().CopyTo(items[3]'i * 8);              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[4] = item4;
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[5] = new byte [colors.Count * 4];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[5] = new byte [colors.Count * 4];
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: for (int i = 0;i < colors.Count;i++)              {                  items[5][i * 4 + 0] = colors[i].Red;                  items[5][i * 4 + 1] = colors[i].Green;                  items[5][i * 4 + 2] = colors[i].Blue;                  items[5][i * 4 + 3] = colors[i].Extra;              }
Magic Number,Crash,SceneryEntry,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntry.cs,Unprocess,The following statement contains a magic number: items[6] = item6;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items.Length != 7)              {                  ErrorManager.SignalError("SceneryEntry: Wrong number of items");              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: if (items[0].Length != 76)              {                  ErrorManager.SignalError("SceneryEntry: First item length is wrong");              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int vertexcount = items[1].Length / 6;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] xydata = new byte [4];                  byte[] zdata = new byte [2];                  Array.Copy(items[1]'(vertexcount - 1 - i) * 4'xydata'0'xydata.Length);                  Array.Copy(items[1]'vertexcount * 4 + i * 2'zdata'0'zdata.Length);                  vertices[i] = SceneryVertex.Load(xydata'zdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] xydata = new byte [4];                  byte[] zdata = new byte [2];                  Array.Copy(items[1]'(vertexcount - 1 - i) * 4'xydata'0'xydata.Length);                  Array.Copy(items[1]'vertexcount * 4 + i * 2'zdata'0'zdata.Length);                  vertices[i] = SceneryVertex.Load(xydata'zdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] xydata = new byte [4];                  byte[] zdata = new byte [2];                  Array.Copy(items[1]'(vertexcount - 1 - i) * 4'xydata'0'xydata.Length);                  Array.Copy(items[1]'vertexcount * 4 + i * 2'zdata'0'zdata.Length);                  vertices[i] = SceneryVertex.Load(xydata'zdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] xydata = new byte [4];                  byte[] zdata = new byte [2];                  Array.Copy(items[1]'(vertexcount - 1 - i) * 4'xydata'0'xydata.Length);                  Array.Copy(items[1]'vertexcount * 4 + i * 2'zdata'0'zdata.Length);                  vertices[i] = SceneryVertex.Load(xydata'zdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < vertexcount;i++)              {                  byte[] xydata = new byte [4];                  byte[] zdata = new byte [2];                  Array.Copy(items[1]'(vertexcount - 1 - i) * 4'xydata'0'xydata.Length);                  Array.Copy(items[1]'vertexcount * 4 + i * 2'zdata'0'zdata.Length);                  vertices[i] = SceneryVertex.Load(xydata'zdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int trianglecount = items[2].Length / 6;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int trianglecount = items[2].Length / 6;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < trianglecount;i++)              {                  byte[] adata = new byte [4];                  byte[] bdata = new byte [2];                  Array.Copy(items[2]'(trianglecount - 1 - i) * 4'adata'0'adata.Length);                  Array.Copy(items[2]'trianglecount * 4 + i * 2'bdata'0'bdata.Length);                  triangles[i] = SceneryTriangle.Load(adata'bdata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int quadcount = items[3].Length / 8;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int quadcount = items[3].Length / 8;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < quadcount;i++)              {                  byte[] quaddata = new byte [8];                  Array.Copy(items[3]'i * 8'quaddata'0'quaddata.Length);                  quads[i] = SceneryQuad.Load(quaddata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < quadcount;i++)              {                  byte[] quaddata = new byte [8];                  Array.Copy(items[3]'i * 8'quaddata'0'quaddata.Length);                  quads[i] = SceneryQuad.Load(quaddata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < quadcount;i++)              {                  byte[] quaddata = new byte [8];                  Array.Copy(items[3]'i * 8'quaddata'0'quaddata.Length);                  quads[i] = SceneryQuad.Load(quaddata);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int colorcount = items[5].Length / 4;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: int colorcount = items[5].Length / 4;
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < colorcount;i++)              {                  byte red = items[5][i * 4];                  byte green = items[5][i * 4 + 1];                  byte blue = items[5][i * 4 + 2];                  byte extra = items[5][i * 4 + 3];                  colors[i] = new SceneryColor(red'green'blue'extra);              }
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: return new SceneryEntry(items[0]'vertices'triangles'quads'items[4]'colors'items[6]'eid);
Magic Number,Crash,SceneryEntryLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Scenery\SceneryEntryLoader.cs,Load,The following statement contains a magic number: return new SceneryEntry(items[0]'vertices'triangles'quads'items[4]'colors'items[6]'eid);
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: if (data.Length < 4)              {                  ErrorManager.SignalError("T4Item: Data is too short");              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: short unknown1 = BitConv.FromInt16(data'2);
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: if (data.Length < 4 + 2 * count)              {                  ErrorManager.SignalError("T4Item: Data is too short");              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: if (data.Length < 4 + 2 * count)              {                  ErrorManager.SignalError("T4Item: Data is too short");              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: for (int i = 0;i < count;i++)              {                  values[i] = BitConv.FromInt16(data'4 + i * 2);              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Load,The following statement contains a magic number: for (int i = 0;i < count;i++)              {                  values[i] = BitConv.FromInt16(data'4 + i * 2);              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Save,The following statement contains a magic number: byte[] data = new byte [4 + values.Count * 2];
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Save,The following statement contains a magic number: byte[] data = new byte [4 + values.Count * 2];
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Save,The following statement contains a magic number: BitConv.ToInt16(data'2'unknown1);
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Save,The following statement contains a magic number: for (int i = 0;i < values.Count;i++)              {                  BitConv.ToInt16(data'4 + i * 2'values[i]);              }
Magic Number,Crash,T4Item,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\T4\T4Item.cs,Save,The following statement contains a magic number: for (int i = 0;i < values.Count;i++)              {                  BitConv.ToInt16(data'4 + i * 2'values[i]);              }
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: int id = BitConv.FromInt32(data'4);
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: int entrycount = BitConv.FromInt32(data'8);
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: int checksum = BitConv.FromInt32(data'12);
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: int headersize = 20 + entrycount * 4;
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: int headersize = 20 + entrycount * 4;
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int entrystart = BitConv.FromInt32(data'16 + i * 4);                  int entryend = BitConv.FromInt32(data'20 + i * 4);                  if (entrystart < 0)                  {                      ErrorManager.SignalError("EntryChunk: Entry begins out of bounds");                  }                  if (entryend < entrystart)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends before it begins");                  }                  if (entryend > data.Length)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends out of bounds");                  }                  int entrysize = entryend - entrystart;                  entrydata = new byte [entrysize];                  Array.Copy(data'entrystart'entrydata'0'entrysize);                  entries[i] = Entry.Load(entrydata);              }
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int entrystart = BitConv.FromInt32(data'16 + i * 4);                  int entryend = BitConv.FromInt32(data'20 + i * 4);                  if (entrystart < 0)                  {                      ErrorManager.SignalError("EntryChunk: Entry begins out of bounds");                  }                  if (entryend < entrystart)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends before it begins");                  }                  if (entryend > data.Length)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends out of bounds");                  }                  int entrysize = entryend - entrystart;                  entrydata = new byte [entrysize];                  Array.Copy(data'entrystart'entrydata'0'entrysize);                  entries[i] = Entry.Load(entrydata);              }
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int entrystart = BitConv.FromInt32(data'16 + i * 4);                  int entryend = BitConv.FromInt32(data'20 + i * 4);                  if (entrystart < 0)                  {                      ErrorManager.SignalError("EntryChunk: Entry begins out of bounds");                  }                  if (entryend < entrystart)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends before it begins");                  }                  if (entryend > data.Length)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends out of bounds");                  }                  int entrysize = entryend - entrystart;                  entrydata = new byte [entrysize];                  Array.Copy(data'entrystart'entrydata'0'entrysize);                  entries[i] = Entry.Load(entrydata);              }
Magic Number,Crash,EntryChunkLoader,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\Base\Entry Chunk\EntryChunkLoader.cs,Load,The following statement contains a magic number: for (int i = 0;i < entrycount;i++)              {                  int entrystart = BitConv.FromInt32(data'16 + i * 4);                  int entryend = BitConv.FromInt32(data'20 + i * 4);                  if (entrystart < 0)                  {                      ErrorManager.SignalError("EntryChunk: Entry begins out of bounds");                  }                  if (entryend < entrystart)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends before it begins");                  }                  if (entryend > data.Length)                  {                      ErrorManager.SignalError("EntryChunk: Entry ends out of bounds");                  }                  int entrysize = entryend - entrystart;                  entrydata = new byte [entrysize];                  Array.Copy(data'entrystart'entrydata'0'entrysize);                  entries[i] = Entry.Load(entrydata);              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (data.Length < offset + 2)              {                  ErrorManager.SignalError("NSF.ReadChunk: Data is too short");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ReadChunk,The following statement contains a magic number: if (magic == Chunk.Magic)              {                  compressed = false;                  if (data.Length < offset + Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'0'Chunk.Length);                  offset += Chunk.Length;              }              else if (magic == Chunk.CompressedMagic)              {                  compressed = true;                  int pos = 0;                  if (data.Length < offset + 12)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  short zero = BitConv.FromInt16(data'offset + 2);                  int length = BitConv.FromInt32(data'offset + 4);                  int skip = BitConv.FromInt32(data'offset + 8);                  if (zero != 0)                  {                      ErrorManager.SignalIgnorableError("NSF.ReadChunk: Zero value is wrong");                  }                  if (length < 0 || length > Chunk.Length)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Length field is invalid");                  }                  if (skip < 0)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Skip value is negative");                  }                  offset += 12;                  while (pos < length)                  {                      if (data.Length < offset + 1)                      {                          ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                      }                      byte prefix = data[offset];                      offset++;                      if ((prefix & 0x80) != 0)                      {                          prefix &= 0x7F;                          if (data.Length < offset + 1)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          int seek = data[offset];                          offset++;                          int span = seek & 7;                          seek >>= 3;                          seek |= prefix << 5;                          if (span == 7)                          {                              span = 64;                          }                          else                          {                              span += 3;                          }                          if (pos - seek < 0)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat begins out of bounds");                          }                          if (pos + span > Chunk.Length)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Repeat ends out of bounds");                          }                          // Do NOT use Array.Copy as                          // overlap is possible i.e. span                          // may be greater than seek                          for (int i = 0;i < span;i++)                          {                              result[pos + i] = result[pos - seek + i];                          }                          pos += span;                      }                      else                      {                          if (data.Length < offset + prefix)                          {                              ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                          }                          Array.Copy(data'offset'result'pos'prefix);                          offset += prefix;                          pos += prefix;                      }                  }                  if (data.Length < offset + skip)                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  offset += skip;                  if (data.Length < offset + (Chunk.Length - length))                  {                      ErrorManager.SignalError("NSF.ReadChunk: Data is too short");                  }                  Array.Copy(data'offset'result'pos'Chunk.Length - length);                  offset += (Chunk.Length - length);              }              else              {                  compressed = false; // Fixes a stupid compile error                  ErrorManager.SignalError("NSF.ReadChunk: Unknown magic number");              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,ProcessAll,The following statement contains a magic number: for (int i = 0;i < chunks.Count;i++)              {                  if (chunks[i] is UnprocessedChunk)                  {                      ErrorManager.EnterSkipRegion();                      try                      {                          chunks[i] = ((UnprocessedChunk)chunks[i]).Process(i * 2 + 1);                      }                      catch (LoadSkippedException)                      {                      }                      finally                      {                          ErrorManager.ExitSkipRegion();                      }                  }                  if (chunks[i] is EntryChunk)                  {                      ((EntryChunk)chunks[i]).ProcessAll(gameversion);                  }              }
Magic Number,Crash,NSF,C:\repos\ughman_CrashEdit\Crash\Formats\Crash Formats\NSF.cs,Save,The following statement contains a magic number: for (int i = 0;i < chunks.Count;i++)              {                  chunks[i].Save(i * 2 + 1).CopyTo(data'i * Chunk.Length);              }
Missing Default,Crash,ErrorManager,C:\repos\ughman_CrashEdit\Crash\Error System\ErrorManager.cs,SignalErrorWithArgs,The following switch statement is missing a default case: switch (e.Response)              {                  case ErrorResponse.Break:                      Debugger.Break();                      e.Response = ErrorResponse.Abort;                      SignalErrorWithArgs(e);                      break;                  case ErrorResponse.Abort:                      throw new LoadAbortedException();                  case ErrorResponse.Skip:                      throw new LoadSkippedException();                  case ErrorResponse.Ignore:                      break;              }
