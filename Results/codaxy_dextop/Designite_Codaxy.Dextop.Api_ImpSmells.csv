Implementation smell,Namespace,Class,File,Method,Description
Long Method,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The method has 113 lines of code.
Complex Method,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,Cyclomatic complexity of the method is 17
Long Parameter List,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The method has 5 parameters. Parameters: application' sw' cacheWriter' controllerType' includedTypes
Long Statement,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The length of the statement  "            sw.Write("\tcontrollerType: '{0}'"' String.Format("{0}' {1}"' controllerType.FullName' controllerType.Assembly.GetName().Name)); " is 128.
Long Statement,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The length of the statement  "            var proxyInterface = interfaces.FirstOrDefault(x => x.IsGenericType && typeof(IDextopReadProxy<>).IsAssignableFrom(x.GetGenericTypeDefinition())); " is 146.
Long Statement,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The length of the statement  "                    throw new DextopException("Could not generate data store of type '{0}' as it does not implement data proxy interface."' apiControllerType); " is 139.
Long Statement,Codaxy.Dextop.Api,ProxyActionInvoker,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiProxyController.cs,Try,The length of the statement  "            var proxyInterface = controller.GetType().GetInterfaces().FirstOrDefault(x => x.IsGenericType && x.GetGenericTypeDefinition() == typeof(IDextopReadProxy<>)); " is 157.
Magic Number,Codaxy.Dextop.Api,DextopApiHandler,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiHandler.cs,ProcessRequest,The following statement contains a magic number: foreach (var request in requests)              {                  DextopApiInvocationResult result;                  try                  {                      using (var apiContext = DextopApi.Resolve<DextopApiContext>())                      {                          var controllerType = Type.GetType(request.data[0]);                          apiContext.Scope = DextopUtil.Decode<DextopConfig>(request.data[1]);                          apiContext.HttpContext = new HttpContextWrapper(context);                          var controller = apiContext.ResolveController(controllerType);                          controller.OnInitialize();                            try                          {                              controller.OnExecuting();                              result = controller.Invoke(request.data[2]' request.FormSubmit' DextopUtil.Decode<string[]>(request.data[3]));                              controller.OnExecuted();                          }                          catch (Exception ex)                          {                              controller.OnError(ex);                              throw;                          }                      }                  }                  catch (Exception ex)                  {                      result = DextopApiInvocationResult.Exception(ex);                  }                    var response = new Response                  {                      action = request.action'                      method = request.method'                      type = request.type'                      tid = request.tid'                      result = result                  };                    responses.Add(response);              }
Magic Number,Codaxy.Dextop.Api,DextopApiHandler,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiHandler.cs,ProcessRequest,The following statement contains a magic number: foreach (var request in requests)              {                  DextopApiInvocationResult result;                  try                  {                      using (var apiContext = DextopApi.Resolve<DextopApiContext>())                      {                          var controllerType = Type.GetType(request.data[0]);                          apiContext.Scope = DextopUtil.Decode<DextopConfig>(request.data[1]);                          apiContext.HttpContext = new HttpContextWrapper(context);                          var controller = apiContext.ResolveController(controllerType);                          controller.OnInitialize();                            try                          {                              controller.OnExecuting();                              result = controller.Invoke(request.data[2]' request.FormSubmit' DextopUtil.Decode<string[]>(request.data[3]));                              controller.OnExecuted();                          }                          catch (Exception ex)                          {                              controller.OnError(ex);                              throw;                          }                      }                  }                  catch (Exception ex)                  {                      result = DextopApiInvocationResult.Exception(ex);                  }                    var response = new Response                  {                      action = request.action'                      method = request.method'                      type = request.type'                      tid = request.tid'                      result = result                  };                    responses.Add(response);              }
Magic Number,Codaxy.Dextop.Api,DextopApiHandler,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiHandler.cs,ProcessAjaxRequest,The following statement contains a magic number: try              {                  using (var apiContext = DextopApi.Resolve<DextopApiContext>())                  {                      if (context.Request.QueryString["_apiScope"] != null)                          apiContext.Scope = DextopUtil.Decode<DextopConfig>(context.Request.QueryString["_apiScope"]);                        apiContext.HttpContext = new HttpContextWrapper(context);                       var controller = apiContext.ResolveController(controllerType);                      try                      {                          controller.OnProcessAjaxRequest(context);                      }                      catch (Exception ex)                      {                          controller.OnError(ex);                          throw;                      }                  }              }              catch              {                  context.Response.StatusCode = 500;                              }
Magic Number,Codaxy.Dextop.Api,DextopApiPreprocessor,C:\repos\codaxy_dextop\Libraries\Codaxy.Dextop.Api\DextopApiPreprocessor.cs,WriteType,The following statement contains a magic number: foreach (var mi in controllerType.GetMethods(BindingFlags.Public | BindingFlags.Instance))              {                  if (mi.DeclaringType == controllerType || genericBaseTypes.Contains(mi.DeclaringType))                  {                                          var methodName = mi.Name;                      sw.WriteLine("'");                      var parameters = mi.GetParameters();                      var upload = parameters.Any(a => a.ParameterType == formSubmitType);                      if (upload)                      {                          if (parameters.Length == 0 || parameters[0].ParameterType != formSubmitType)                              throw new Exception("Form submit methods must have first parameter of type DextopFormSubmit.");                          sw.Write("\t{0}: function("' methodName);                          for (var i = 0; i < parameters.Length; i++)                          {                              sw.Write(parameters[i].Name);                              sw.Write("' ");                          }                          sw.Write("callback' scope");                          sw.Write(") {{ this.submitForm(callback' scope' '{0}'' {1}' ["' methodName' parameters[0].Name);                          if (parameters.Length > 1)                          {                              sw.Write(parameters[1].Name);                              for (var i = 2; i < parameters.Length; i++)                              {                                  sw.Write("' ");                                  sw.Write(parameters[i].Name);                              }                          }                          sw.Write("]);}");                      }                      else                      {                          sw.Write("\t{0}: function("' methodName);                          for (var i = 0; i < parameters.Length; i++)                          {                              sw.Write(parameters[i].Name);                              sw.Write("' ");                          }                          sw.Write("callback' scope");                          sw.Write(") {{ this.invokeRemoteMethod(callback' scope' '{0}'' ["' methodName);                          if (parameters.Length > 0)                          {                              sw.Write(parameters[0].Name);                              for (var i = 1; i < parameters.Length; i++)                              {                                  sw.Write("' ");                                  sw.Write(parameters[i].Name);                              }                          }                          sw.Write("]);}");                      }                  }              }
