Implementation smell,Namespace,Class,File,Method,Description
Long Statement,KinectCoordinateMapping,DepthExtensions,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\Utilities\DepthExtensions.cs,ToBitmap,The length of the statement  "            for (int depthIndex = 0' colorPixelIndex = 0; depthIndex < _depthData.Length && colorPixelIndex < _pixels.Length; depthIndex++' colorPixelIndex += 4) " is 149.
Long Statement,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Window_Loaded,The length of the statement  "                _reader = _sensor.OpenMultiSourceFrameReader(FrameSourceTypes.Color | FrameSourceTypes.Depth | FrameSourceTypes.Infrared | FrameSourceTypes.Body); " is 146.
Long Statement,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Reader_MultiSourceFrameArrived,The length of the statement  "                                    else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424 " is 120.
Long Statement,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,InitializeComponent,The length of the statement  "            System.Uri resourceLocater = new System.Uri("/KinectCoordinateMapping;component/mainwindow.xaml"' System.UriKind.Relative); " is 123.
Magic Number,KinectCoordinateMapping,DepthExtensions,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\Utilities\DepthExtensions.cs,ToBitmap,The following statement contains a magic number: for (int depthIndex = 0' colorPixelIndex = 0; depthIndex < _depthData.Length && colorPixelIndex < _pixels.Length; depthIndex++' colorPixelIndex += 4)              {                  // Get the depth for this pixel                  ushort depth = _depthData[depthIndex];                  byte player = _bodyData[depthIndex];                    // To convert to a byte' we're discarding the most-significant                  // rather than least-significant bits.                  // We're preserving detail' although the intensity will "wrap."                  // Values outside the reliable depth range are mapped to 0 (black).                  byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);                    if (player != 0xff)                  {                      // Color player gold.                      _pixels[colorPixelIndex + 0] = Colors.Gold.B; // B                      _pixels[colorPixelIndex + 1] = Colors.Gold.G; // G                      _pixels[colorPixelIndex + 2] = Colors.Gold.R; // R                  }                  else                  {                      // Color the rest of the image in grayscale.                      _pixels[colorPixelIndex + 0] = intensity; // B                      _pixels[colorPixelIndex + 1] = intensity; // G                      _pixels[colorPixelIndex + 2] = intensity; // R                  }              }
Magic Number,KinectCoordinateMapping,DepthExtensions,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\Utilities\DepthExtensions.cs,ToBitmap,The following statement contains a magic number: for (int depthIndex = 0' colorPixelIndex = 0; depthIndex < _depthData.Length && colorPixelIndex < _pixels.Length; depthIndex++' colorPixelIndex += 4)              {                  // Get the depth for this pixel                  ushort depth = _depthData[depthIndex];                  byte player = _bodyData[depthIndex];                    // To convert to a byte' we're discarding the most-significant                  // rather than least-significant bits.                  // We're preserving detail' although the intensity will "wrap."                  // Values outside the reliable depth range are mapped to 0 (black).                  byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);                    if (player != 0xff)                  {                      // Color player gold.                      _pixels[colorPixelIndex + 0] = Colors.Gold.B; // B                      _pixels[colorPixelIndex + 1] = Colors.Gold.G; // G                      _pixels[colorPixelIndex + 2] = Colors.Gold.R; // R                  }                  else                  {                      // Color the rest of the image in grayscale.                      _pixels[colorPixelIndex + 0] = intensity; // B                      _pixels[colorPixelIndex + 1] = intensity; // G                      _pixels[colorPixelIndex + 2] = intensity; // R                  }              }
Magic Number,KinectCoordinateMapping,DepthExtensions,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\Utilities\DepthExtensions.cs,ToBitmap,The following statement contains a magic number: for (int depthIndex = 0' colorPixelIndex = 0; depthIndex < _depthData.Length && colorPixelIndex < _pixels.Length; depthIndex++' colorPixelIndex += 4)              {                  // Get the depth for this pixel                  ushort depth = _depthData[depthIndex];                  byte player = _bodyData[depthIndex];                    // To convert to a byte' we're discarding the most-significant                  // rather than least-significant bits.                  // We're preserving detail' although the intensity will "wrap."                  // Values outside the reliable depth range are mapped to 0 (black).                  byte intensity = (byte)(depth >= minDepth && depth <= maxDepth ? depth : 0);                    if (player != 0xff)                  {                      // Color player gold.                      _pixels[colorPixelIndex + 0] = Colors.Gold.B; // B                      _pixels[colorPixelIndex + 1] = Colors.Gold.G; // G                      _pixels[colorPixelIndex + 2] = Colors.Gold.R; // R                  }                  else                  {                      // Color the rest of the image in grayscale.                      _pixels[colorPixelIndex + 0] = intensity; // B                      _pixels[colorPixelIndex + 1] = intensity; // G                      _pixels[colorPixelIndex + 2] = intensity; // R                  }              }
Magic Number,KinectCoordinateMapping,InfraredExtensions,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\Utilities\InfraredExtensions.cs,ToBitmap,The following statement contains a magic number: for (int infraredIndex = 0; infraredIndex < _infraredData.Length; infraredIndex++)              {                  // Get the infrared value for this pixel                  ushort ir = _infraredData[infraredIndex];                    // To convert to a byte' we're discarding the most-significant                  // rather than least-significant bits.                  // We're preserving detail' although the intensity will "wrap."                  byte intensity = (byte)(ir >> 6);                    _pixels[colorIndex++] = intensity; // Blue                  _pixels[colorIndex++] = intensity; // Green                     _pixels[colorIndex++] = intensity; // Red                    // We're outputting BGR' the last byte in the 32 bits is unused so skip it                  // If we were outputting BGRA' we would write alpha here.                  colorIndex++;              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Reader_MultiSourceFrameArrived,The following statement contains a magic number: using (var frame = reference.BodyFrameReference.AcquireFrame())              {                  if (frame != null)                  {                      canvas.Children.Clear();                        _bodies = new Body[frame.BodyFrameSource.BodyCount];                        frame.GetAndRefreshBodyData(_bodies);                        foreach (var body in _bodies)                      {                          if (body.IsTracked)                          {                              // COORDINATE MAPPING                              foreach (Joint joint in body.Joints.Values)                              {                                  if (joint.TrackingState == TrackingState.Tracked)                                  {                                      // 3D space point                                      CameraSpacePoint jointPosition = joint.Position;                                        // 2D space point                                      Point point = new Point();                                        if (_mode == CameraMode.Color)                                      {                                          ColorSpacePoint colorPoint = _sensor.CoordinateMapper.MapCameraPointToColorSpace(jointPosition);                                            point.X = float.IsInfinity(colorPoint.X) ? 0 : colorPoint.X;                                          point.Y = float.IsInfinity(colorPoint.Y) ? 0 : colorPoint.Y;                                      }                                      else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424                                      {                                          DepthSpacePoint depthPoint = _sensor.CoordinateMapper.MapCameraPointToDepthSpace(jointPosition);                                            point.X = float.IsInfinity(depthPoint.X) ? 0 : depthPoint.X;                                          point.Y = float.IsInfinity(depthPoint.Y) ? 0 : depthPoint.Y;                                      }                                        // Draw                                      Ellipse ellipse = new Ellipse                                      {                                          Fill = Brushes.Red'                                          Width = 30'                                          Height = 30                                      };                                        Canvas.SetLeft(ellipse' point.X - ellipse.Width / 2);                                      Canvas.SetTop(ellipse' point.Y - ellipse.Height / 2);                                        canvas.Children.Add(ellipse);                                  }                              }                          }                      }                  }              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Reader_MultiSourceFrameArrived,The following statement contains a magic number: using (var frame = reference.BodyFrameReference.AcquireFrame())              {                  if (frame != null)                  {                      canvas.Children.Clear();                        _bodies = new Body[frame.BodyFrameSource.BodyCount];                        frame.GetAndRefreshBodyData(_bodies);                        foreach (var body in _bodies)                      {                          if (body.IsTracked)                          {                              // COORDINATE MAPPING                              foreach (Joint joint in body.Joints.Values)                              {                                  if (joint.TrackingState == TrackingState.Tracked)                                  {                                      // 3D space point                                      CameraSpacePoint jointPosition = joint.Position;                                        // 2D space point                                      Point point = new Point();                                        if (_mode == CameraMode.Color)                                      {                                          ColorSpacePoint colorPoint = _sensor.CoordinateMapper.MapCameraPointToColorSpace(jointPosition);                                            point.X = float.IsInfinity(colorPoint.X) ? 0 : colorPoint.X;                                          point.Y = float.IsInfinity(colorPoint.Y) ? 0 : colorPoint.Y;                                      }                                      else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424                                      {                                          DepthSpacePoint depthPoint = _sensor.CoordinateMapper.MapCameraPointToDepthSpace(jointPosition);                                            point.X = float.IsInfinity(depthPoint.X) ? 0 : depthPoint.X;                                          point.Y = float.IsInfinity(depthPoint.Y) ? 0 : depthPoint.Y;                                      }                                        // Draw                                      Ellipse ellipse = new Ellipse                                      {                                          Fill = Brushes.Red'                                          Width = 30'                                          Height = 30                                      };                                        Canvas.SetLeft(ellipse' point.X - ellipse.Width / 2);                                      Canvas.SetTop(ellipse' point.Y - ellipse.Height / 2);                                        canvas.Children.Add(ellipse);                                  }                              }                          }                      }                  }              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Reader_MultiSourceFrameArrived,The following statement contains a magic number: using (var frame = reference.BodyFrameReference.AcquireFrame())              {                  if (frame != null)                  {                      canvas.Children.Clear();                        _bodies = new Body[frame.BodyFrameSource.BodyCount];                        frame.GetAndRefreshBodyData(_bodies);                        foreach (var body in _bodies)                      {                          if (body.IsTracked)                          {                              // COORDINATE MAPPING                              foreach (Joint joint in body.Joints.Values)                              {                                  if (joint.TrackingState == TrackingState.Tracked)                                  {                                      // 3D space point                                      CameraSpacePoint jointPosition = joint.Position;                                        // 2D space point                                      Point point = new Point();                                        if (_mode == CameraMode.Color)                                      {                                          ColorSpacePoint colorPoint = _sensor.CoordinateMapper.MapCameraPointToColorSpace(jointPosition);                                            point.X = float.IsInfinity(colorPoint.X) ? 0 : colorPoint.X;                                          point.Y = float.IsInfinity(colorPoint.Y) ? 0 : colorPoint.Y;                                      }                                      else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424                                      {                                          DepthSpacePoint depthPoint = _sensor.CoordinateMapper.MapCameraPointToDepthSpace(jointPosition);                                            point.X = float.IsInfinity(depthPoint.X) ? 0 : depthPoint.X;                                          point.Y = float.IsInfinity(depthPoint.Y) ? 0 : depthPoint.Y;                                      }                                        // Draw                                      Ellipse ellipse = new Ellipse                                      {                                          Fill = Brushes.Red'                                          Width = 30'                                          Height = 30                                      };                                        Canvas.SetLeft(ellipse' point.X - ellipse.Width / 2);                                      Canvas.SetTop(ellipse' point.Y - ellipse.Height / 2);                                        canvas.Children.Add(ellipse);                                  }                              }                          }                      }                  }              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Reader_MultiSourceFrameArrived,The following statement contains a magic number: using (var frame = reference.BodyFrameReference.AcquireFrame())              {                  if (frame != null)                  {                      canvas.Children.Clear();                        _bodies = new Body[frame.BodyFrameSource.BodyCount];                        frame.GetAndRefreshBodyData(_bodies);                        foreach (var body in _bodies)                      {                          if (body.IsTracked)                          {                              // COORDINATE MAPPING                              foreach (Joint joint in body.Joints.Values)                              {                                  if (joint.TrackingState == TrackingState.Tracked)                                  {                                      // 3D space point                                      CameraSpacePoint jointPosition = joint.Position;                                        // 2D space point                                      Point point = new Point();                                        if (_mode == CameraMode.Color)                                      {                                          ColorSpacePoint colorPoint = _sensor.CoordinateMapper.MapCameraPointToColorSpace(jointPosition);                                            point.X = float.IsInfinity(colorPoint.X) ? 0 : colorPoint.X;                                          point.Y = float.IsInfinity(colorPoint.Y) ? 0 : colorPoint.Y;                                      }                                      else if (_mode == CameraMode.Depth || _mode == CameraMode.Infrared) // Change the Image and Canvas dimensions to 512x424                                      {                                          DepthSpacePoint depthPoint = _sensor.CoordinateMapper.MapCameraPointToDepthSpace(jointPosition);                                            point.X = float.IsInfinity(depthPoint.X) ? 0 : depthPoint.X;                                          point.Y = float.IsInfinity(depthPoint.Y) ? 0 : depthPoint.Y;                                      }                                        // Draw                                      Ellipse ellipse = new Ellipse                                      {                                          Fill = Brushes.Red'                                          Width = 30'                                          Height = 30                                      };                                        Canvas.SetLeft(ellipse' point.X - ellipse.Width / 2);                                      Canvas.SetTop(ellipse' point.Y - ellipse.Height / 2);                                        canvas.Children.Add(ellipse);                                  }                              }                          }                      }                  }              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.camera = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Magic Number,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Connect,The following statement contains a magic number: switch (connectionId)              {              case 1:                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.camera = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              }
Missing Default,KinectCoordinateMapping,MainWindow,C:\repos\Vangos_kinect-2-coordinate-mapping\KinectCoordinateMapping\KinectCoordinateMapping\MainWindow.xaml.cs,Connect,The following switch statement is missing a default case: switch (connectionId)              {              case 1:                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Loaded += new System.Windows.RoutedEventHandler(this.Window_Loaded);                            #line default              #line hidden                            #line 5 "..\..\MainWindow.xaml"              ((KinectCoordinateMapping.MainWindow)(target)).Closed += new System.EventHandler(this.Window_Closed);                            #line default              #line hidden              return;              case 2:              this.camera = ((System.Windows.Controls.Image)(target));              return;              case 3:              this.canvas = ((System.Windows.Controls.Canvas)(target));              return;              }
