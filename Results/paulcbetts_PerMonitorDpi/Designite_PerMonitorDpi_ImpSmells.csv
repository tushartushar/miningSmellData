Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,PerMonitorDPI,PerMonitorDpiBehavior,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,HwndHook,The method has 5 parameters. Parameters: hWnd' message' wParam' lParam' handled
Long Parameter List,PerMonitorDPI,SafeNativeMethods,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\SafeNativeMethods.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Statement,PerMonitorDPI,MonitorDpi,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,GetScaleRatioForWindow,The length of the statement  "            var wpfDpi = 96.0 * PresentationSource.FromVisual(Application.Current.MainWindow).CompositionTarget.TransformToDevice.M11; " is 122.
Magic Number,PerMonitorDPI,MonitorDpi,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,GetScaleRatioForWindow,The following statement contains a magic number: var wpfDpi = 96.0 * PresentationSource.FromVisual(Application.Current.MainWindow).CompositionTarget.TransformToDevice.M11;
Magic Number,PerMonitorDPI,MonitorDpi,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,GetScaleRatioForWindow,The following statement contains a magic number: return wpfDpi / 96.0;
Magic Number,PerMonitorDPI,PerMonitorDpiBehavior,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,EnableDragDropFromLowPrivUIPIProcesses,The following statement contains a magic number: Environment.OSVersion.Version.Major < 6
Missing Default,PerMonitorDPI,PerMonitorDpiBehavior,C:\research\architectureSmells\repos\paulcbetts_PerMonitorDpi\PerMonitorDpiBehavior.cs,HwndHook,The following switch statement is missing a default case: switch (message)              {                  case NativeConstants.WM_DPICHANGED:                      var rect = (RECT)Marshal.PtrToStructure(lParam' typeof(RECT));                        SafeNativeMethods.SetWindowPos(hWnd' IntPtr.Zero'                          rect.left' rect.top' rect.right - rect.left' rect.bottom - rect.top'                          SetWindowPosFlags.DoNotChangeOwnerZOrder | SetWindowPosFlags.DoNotActivate | SetWindowPosFlags.IgnoreZOrder);                        var newDpiRatio = MonitorDpi.GetScaleRatioForWindow(AssociatedObject);                      if (newDpiRatio != currentDpiRatio) UpdateDpiScaling(newDpiRatio);                        break;              }
