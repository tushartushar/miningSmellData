Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,LoadSubtitle,Cyclomatic complexity of the method is 8
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,IPlugin,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\IPlugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,AviWriter,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Plugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Statement,Nikse.SubtitleEdit.PluginLogic,AviWriter,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Plugin.cs,WriteAndUnzipRes,The length of the statement  "            using (var fout = new FileStream(Path.Combine(tempDir' GetFileNameFromRessourceName(resourceName))' FileMode.Create' FileAccess.Write)) " is 135.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Subtitle.cs,AdjustDisplayTimeUsingPercent,The length of the statement  "                    newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseToMilliseconds,The length of the statement  "                if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)) " is 160.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The length of the statement  "                if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames)) " is 154.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ToString,The length of the statement  "            string s = string.Format("{0:00}:{1:00}:{2:00}'{3:000}"' _time.Hours' _time.Minutes' _time.Seconds' _time.Milliseconds); " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ToShortStringHHMMSSFF,The length of the statement  "                return string.Format("{0:00}:{1:00}:{2:00}"' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ToShortStringHHMMSSFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}:{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ToHHMMSSFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}:{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ToHHMMSSPeriodFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}.{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Utilities.cs,RemoveHtmlTags,The length of the statement  "            s = System.Text.RegularExpressions.Regex.Replace(s' "</?[bipu]>"' string.Empty' System.Text.RegularExpressions.RegexOptions.IgnoreCase); " is 136.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Utilities.cs,GetMovieFileExtensions,The length of the statement  "            return new List<string> { ".avi"' ".mkv"' ".wmv"' ".mpg"' ".mpeg"' ".divx"' ".mp4"' ".asf"' ".flv"' ".mov"' ".m4v"' ".vob"' ".ogv"' ".webm"' ".ts"' ".m2ts" }; " is 158.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,LoadSubtitle,The conditional expression  "_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      _regexTimeCodes.IsMatch(lines[i + 1])"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseToMilliseconds,The conditional expression  "int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The conditional expression  "int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames)"  is complex.
Magic Number,Nikse.SubtitleEdit.PluginLogic,Paragraph,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Paragraph.cs,CalculateFrameNumbersFromTimeCodes,The following statement contains a magic number: StartFrame = (int)Math.Round((StartTime.TotalMilliseconds / 1000.0 * frameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic,Paragraph,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Paragraph.cs,CalculateFrameNumbersFromTimeCodes,The following statement contains a magic number: EndFrame = (int)Math.Round((EndTime.TotalMilliseconds / 1000.0 * frameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic,Paragraph,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Paragraph.cs,CalculateTimeCodesFromFrameNumbers,The following statement contains a magic number: StartTime.TotalMilliseconds = StartFrame * (1000.0 / frameRate);
Magic Number,Nikse.SubtitleEdit.PluginLogic,Paragraph,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Paragraph.cs,CalculateTimeCodesFromFrameNumbers,The following statement contains a magic number: EndTime.TotalMilliseconds = EndFrame * (1000.0 / frameRate);
Magic Number,Nikse.SubtitleEdit.PluginLogic,AviWriter,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Plugin.cs,GetFileNameFromRessourceName,The following statement contains a magic number: var name = resourceName.Substring(resourceName.IndexOf(".DLL."' StringComparison.Ordinal) + 5);
Magic Number,Nikse.SubtitleEdit.PluginLogic,AviWriter,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Plugin.cs,GetFileNameFromRessourceName,The following statement contains a magic number: return name.Substring(0' name.Length - 3);
Magic Number,Nikse.SubtitleEdit.PluginLogic,AviWriter,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Plugin.cs,WriteAndUnzipRes,The following statement contains a magic number: using (Stream strm = asm.GetManifestResourceStream(resourceName))              using (var rdr = new BinaryReader(strm))              using (var fout = new FileStream(Path.Combine(tempDir' GetFileNameFromRessourceName(resourceName))' FileMode.Create' FileAccess.Write))              using (var zip = new GZipStream(rdr.BaseStream' CompressionMode.Decompress))              {                  byte[] data = new byte[4069];                  int bytesRead = 1;                  while (bytesRead > 0)                  {                      bytesRead = zip.Read(data' 0' data.Length);                      fout.Write(data' 0' bytesRead);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubtitleFormat,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubtitleFormat.cs,MillisecondsToFrames,The following statement contains a magic number: return (int)System.Math.Round(milliseconds / (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubtitleFormat,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubtitleFormat.cs,FramesToMilliseconds,The following statement contains a magic number: return (int)System.Math.Round(frames * (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      return new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames)).TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      return new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames)).TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      return new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames)).TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Utilities.cs,RemoveHtmlTags,The following statement contains a magic number: if (s == null || s.Length < 3)                  return s;
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Utilities.cs,RemoveHtmlFontTag,The following statement contains a magic number: while (idx >= 0)              {                  var endIdx = s.IndexOf('>'' idx + 5);                  if (endIdx < idx)                      break;                  s = s.Remove(idx' endIdx - idx + 1);                  idx = s.IndexOf("<font"' idx' StringComparison.OrdinalIgnoreCase);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\Utilities.cs,RemoveParagraphTag,The following statement contains a magic number: while (idx >= 0)              {                  var endIdx = s.IndexOf('>'' idx + 2);                  if (endIdx < idx)                      break;                  s = s.Remove(idx' endIdx - idx + 1);                  idx = s.IndexOf("<p"' idx' StringComparison.OrdinalIgnoreCase);              }
Missing Default,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\AviWriter\AviWriter\SubRip.cs,ReadLine,The following switch statement is missing a default case: switch (_expecting)              {                  case ExpectingLine.Number:                      if (Utilities.IsInteger(line))                      {                          _paragraph.Number = int.Parse(line);                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                      }                      break;                  case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                  case ExpectingLine.Text:                      if (line.Trim().Length > 0)                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || _regexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
