Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,LoadSettingsIfThereIs,The method has 125 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The method has 756 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The method has 195 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The method has 119 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The method has 158 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The method has 237 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaStyle,The method has 176 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The method has 119 lines of code.
Complex Method,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SelectIndexAndEnsureVisible,Cyclomatic complexity of the method is 9
Complex Method,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,LoadSettingsIfThereIs,Cyclomatic complexity of the method is 39
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,DrawText,Cyclomatic complexity of the method is 8
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,Cyclomatic complexity of the method is 44
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,Cyclomatic complexity of the method is 8
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,Cyclomatic complexity of the method is 8
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,Cyclomatic complexity of the method is 21
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,LoadSubtitle,Cyclomatic complexity of the method is 9
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,Cyclomatic complexity of the method is 9
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,IPlugin,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\IPlugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,MergeTwoSrtToAss,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Plugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The method has 11 parameters. Parameters: text' g' bmp' comboboxfontName' fontSize' checkBoxFontBold' radioButtonAlignTop' checkBoxFontItalic' checkBoxFontUnderline' fontColor' backColor
Long Parameter List,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,DrawText,The method has 12 parameters. Parameters: font' sf' path' sb' isItalic' isBold' isUnderline' left' top' newLine' leftMargin' pathPointsStart
Long Parameter List,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The method has 5 parameters. Parameters: subtitle' title' header' headerNoStyles' sb
Long Parameter List,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The method has 6 parameters. Parameters: text' start' fontTag' tag' ssaTagName' endSsaTag
Long Parameter List,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The method has 5 parameters. Parameters: subtitle' title' header' headerNoStyles' sb
Long Identifier,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The length of the parameter lineNumberXExpectedNumberFromSourceLineY is 40.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,InitializeTimestampColumnWidths,The length of the statement  "            //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 && " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,InitializeTimestampColumnWidths,The length of the statement  "            //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1) " is 136.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView_DrawSubItem,The length of the statement  "                    TextRenderer.DrawText(e.Graphics' e.Item.SubItems[e.ColumnIndex].Text' _subtitleFont' new Point(e.Bounds.Left + 3' e.Bounds.Top + 2)' e.Item.ForeColor' TextFormatFlags.NoPrefix); " is 178.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The length of the statement  "            int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width; " is 149.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The length of the statement  "                //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 && " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The length of the statement  "                //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1) " is 136.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The length of the statement  "                int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width; " is 149.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,Add,The length of the statement  "            //    subItem = new ListViewItem.ListViewSubItem(item' string.Format("{0}'{1:00}"' paragraph.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(paragraph.Duration.Milliseconds))); " is 216.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,Add,The length of the statement  "                subItem = new ListViewItem.ListViewSubItem(item' string.Format("{0}'{1:000}"' paragraph.Duration.Seconds' paragraph.Duration.Milliseconds)); " is 140.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetTimeAndText,The length of the statement  "                //    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:00}"' paragraph.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(paragraph.Duration.Milliseconds)); " is 208.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetTimeAndText,The length of the statement  "                    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:000}"' paragraph.Duration.Seconds' paragraph.Duration.Milliseconds); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The length of the statement  "                int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width; " is 149.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetDuration,The length of the statement  "                //    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:00}"' paragraph.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(paragraph.Duration.Milliseconds)); " is 208.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetDuration,The length of the statement  "                    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:000}"' paragraph.Duration.Seconds' paragraph.Duration.Milliseconds); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,UpdateFrames,The length of the statement  "            //            item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:00}"' p.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(p.Duration.Milliseconds)); " is 200.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetStartTime,The length of the statement  "                //    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:00}"' paragraph.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(paragraph.Duration.Milliseconds)); " is 208.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetStartTime,The length of the statement  "                    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:000}"' paragraph.Duration.Seconds' paragraph.Duration.Milliseconds); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetStartTimeAndDuration,The length of the statement  "                //    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:00}"' paragraph.Duration.Seconds' Logic.SubtitleFormats.SubtitleFormat.MillisecondsToFramesMaxFrameRate(paragraph.Duration.Milliseconds)); " is 208.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SetStartTimeAndDuration,The length of the statement  "                    item.SubItems[ColumnIndexDuration].Text = string.Format("{0}'{1:000}"' paragraph.Duration.Seconds' paragraph.Duration.Milliseconds); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The length of the statement  "            //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 && " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The length of the statement  "            //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1) " is 136.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GetSettingsFileName,The length of the statement  "                path = Path.Combine(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData)' "Subtitle Edit")' "Plugins"); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The length of the statement  "                DrawText(_textOne' g' bmp' comboBoxFontName1' numericUpDownFontSize1.Value' checkBoxFontBold1' radioButtonAlignTop1' checkBoxFontItalic1' checkBoxFontUnderline1' panelPrimaryColor1.BackColor' panelOutlineColor1.BackColor); " is 222.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The length of the statement  "                DrawText(_textTwo' g' bmp' comboBoxFontName2' numericUpDownFontSize2.Value' checkBoxFontBold2' radioButtonAlignTop2' checkBoxFontItalic2' checkBoxFontUnderline2' panelPrimaryColor2.BackColor' panelOutlineColor2.BackColor); " is 222.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The length of the statement  "            TextDraw.DrawText(font' sf' path' sb' checkBoxFontItalic.Checked' checkBoxFontBold.Checked' checkBoxFontUnderline.Checked' left' top' ref newLine' leftMargin' ref pathPointsStart); " is 180.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,buttonOutlineColor1_Click,The length of the statement  "                SetSsaStyle("style1"' _isSubStationAlpha ? "tertiarycolour" : "outlinecolour"' GetSsaColorString(colorDialogSSAStyle.Color)); " is 125.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,buttonOutlineColor2_Click,The length of the statement  "                SetSsaStyle("style2"' _isSubStationAlpha ? "tertiarycolour" : "outlinecolour"' GetSsaColorString(colorDialogSSAStyle.Color)); " is 125.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The length of the statement  "                                        //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue); " is 155.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,comboBoxFormat_SelectedIndexChanged,The length of the statement  "            SetSsaStyle("style1"' _isSubStationAlpha ? "tertiarycolour" : "outlinecolour"' GetSsaColorString(panelOutlineColor1.BackColor)); " is 128.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,comboBoxFormat_SelectedIndexChanged,The length of the statement  "            SetSsaStyle("style2"' _isSubStationAlpha ? "tertiarycolour" : "outlinecolour"' GetSsaColorString(panelOutlineColor2.BackColor)); " is 128.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetHeader,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' OutlineColour' BackColour' Bold' Italic' Underline' StrikeOut' ScaleX' ScaleY' Spacing' Angle' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' Encoding " is 237.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetHeader,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' TertiaryColour' BackColour' Bold' Italic' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' AlphaLevel' Encoding " is 196.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 145.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox3.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 145.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.textBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonOpenFile2.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.subtitleListView2.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.subtitleListView2.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 144.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 141.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonOpenFile1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.subtitleListView1.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.subtitleListView1.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox4.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)  " is 145.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBoxSettings.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 155.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox6.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontUnderline2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Underline' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 174.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontItalic2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Italic' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontBold2.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBox5.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 142.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontUnderline1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Underline' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 174.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontItalic1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Italic' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 168.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.checkBoxFontBold1.Font = new System.Drawing.Font("Microsoft Sans Serif"' 8.25F' System.Drawing.FontStyle.Bold' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 164.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.label6.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 145.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.comboBoxFormat.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The length of the statement  "                    newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,GetIndex,The length of the statement  "                if (p.Number == _paragraphs[i].Number && (p.StartTime.TotalMilliseconds == _paragraphs[i].StartTime.TotalMilliseconds || " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ToHHMMSSFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}:{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ToHHMMSSPeriodFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}.{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ToString,The length of the statement  "            string s = string.Format("{0:00}:{1:00}:{2:00}'{3:000}"' _time.Hours' _time.Minutes' _time.Seconds' _time.Milliseconds); " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The length of the statement  "                if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames)) " is 154.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The length of the statement  "                if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)) " is 160.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ToShortStringHHMMSSFF,The length of the statement  "                return string.Format("{0:00}:{1:00}:{2:00}"' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ToShortStringHHMMSSFF,The length of the statement  "            return string.Format("{0:00}:{1:00}:{2:00}:{3:00}"' _time.Hours' _time.Minutes' _time.Seconds' SubtitleFormat.MillisecondsToFrames(_time.Milliseconds)); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,CanBreak,The length of the statement  "            if (s2.EndsWith("? -"' StringComparison.Ordinal) || s2.EndsWith("! -"' StringComparison.Ordinal) || s2.EndsWith(". -"' StringComparison.Ordinal)) " is 145.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The length of the statement  "                    if (arr0.StartsWith("-") && arr[1].TrimStart().StartsWith("-") && (arr0.EndsWith(".") || arr0.EndsWith("!") || arr0.EndsWith("?") || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith("–"))) " is 202.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The length of the statement  "                if (splitPos != maximumLength + 1 || s[maximumLength] != ' ') // allow for maxlength+1 char to be space (does not count) " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The length of the statement  "                        if (@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language)) " is 125.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The length of the statement  "                        if (@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language)) " is 125.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,IsMine,The length of the statement  "            if (!string.IsNullOrEmpty(fileName) && fileName.EndsWith(".ass"' StringComparison.OrdinalIgnoreCase) && !all.Contains("[V4 Styles]")) " is 133.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,IsMine,The length of the statement  "            else if (!all.Contains("dialog:"' StringComparison.OrdinalIgnoreCase) && !all.Contains("dialogue:"' StringComparison.OrdinalIgnoreCase)) " is 136.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' OutlineColour' BackColour' Bold' Italic' Underline' StrikeOut' ScaleX' ScaleY' Spacing' Angle' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' Encoding " is 237.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' OutlineColour' BackColour' Bold' Italic' Underline' StrikeOut' ScaleX' ScaleY' Spacing' Angle' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' Encoding " is 237.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The length of the statement  "                string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10); " is 137.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The length of the statement  "                string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10); " is 127.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The length of the statement  "            if (!string.IsNullOrEmpty(subtitle.Footer) && (subtitle.Footer.Contains("[Fonts]" + Environment.NewLine) || subtitle.Footer.Contains("[Graphics]" + Environment.NewLine))) " is 170.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The length of the statement  "                // Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' OutlineColour' BackColour' Bold' Italic' Underline' StrikeOut' ScaleX' ScaleY' Spacing' Angle' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' Encoding " is 232.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The length of the statement  "                const string styleFormat = "Style: {0}'{1}'{2}'{3}'{4}'{5}'{6}'{7}'{8}'{9}'0'100'100'0'0'{10}'{11}'{12}'{13}'{14}'{15}'{16}'1"; " is 127.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The length of the statement  "                            ttStyles.AppendLine(string.Format(styleFormat' ssaStyle.Name' ssaStyle.FontName' ssaStyle.FontSize' GetSsaColorString(ssaStyle.Primary)' GetSsaColorString(ssaStyle.Secondary)' " is 175.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The length of the statement  "                                                GetSsaColorString(ssaStyle.Outline)' GetSsaColorString(ssaStyle.Background)' bold' italic' underline' ssaStyle.BorderStyle' ssaStyle.OutlineWidth' ssaStyle.ShadowWidth' " is 168.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The length of the statement  "            return text.Replace("{\\c}"' "@___@@").Replace("}{"' string.Empty).Replace("@___@@"' "{\\c}").Replace("{\\c}{\\c&"' "{\\c&"); " is 125.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The length of the statement  "                            subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2); " is 165.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The length of the statement  "                    if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal)) " is 158.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The length of the statement  "                        color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2); " is 162.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The length of the statement  "                        color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2); " is 162.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The length of the statement  "                        color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2); " is 162.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The length of the statement  "                else if (line.TrimStart().StartsWith("dialog:"' StringComparison.OrdinalIgnoreCase) || line.TrimStart().StartsWith("dialogue:"' StringComparison.OrdinalIgnoreCase)) // fix faulty font tags... " is 191.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,AddSsaStyle,The length of the statement  "            string styleFormat = "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' OutlineColour' BackColour' Bold' Italic' Underline' StrikeOut' ScaleX' ScaleY' Spacing' Angle' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' Encoding"; " is 261.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,AddSsaStyle,The length of the statement  "                if (line.Equals("[V4+ Styles]"' StringComparison.OrdinalIgnoreCase) || line.Equals("[V4 Styles]"' StringComparison.OrdinalIgnoreCase)) " is 134.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ToText,The length of the statement  "                string s = p.Text.Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine).Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 162.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The length of the statement  "                        if (_lastParagraph != null && nextNext != null && (_lastParagraph.Number + 1).ToString(CultureInfo.InvariantCulture) == nextNext) " is 129.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' TertiaryColour' BackColour' Bold' Italic' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' AlphaLevel' Encoding " is 196.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' TertiaryColour' BackColour' Bold' Italic' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' AlphaLevel' Encoding " is 196.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "                string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10); " is 137.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "                string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10); " is 127.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "                    sb.AppendLine(string.Format(commentWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect)); " is 131.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The length of the statement  "                    sb.AppendLine(string.Format(paragraphWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect)); " is 133.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The length of the statement  "                            //Format: Name' Fontname' Fontsize' PrimaryColour' SecondaryColour' TertiaryColour' BackColour' Bold' Italic' BorderStyle' Outline' Shadow' Alignment' MarginL' MarginR' MarginV' AlphaLevel' Encoding " is 198.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The length of the statement  "                            ttStyles.AppendLine(string.Format(styleFormat' ssaStyle.Name' ssaStyle.FontName' ssaStyle.FontSize' ssaStyle.Primary.ToArgb()' ssaStyle.Secondary.ToArgb()' " is 155.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The length of the statement  "                                                ssaStyle.Outline.ToArgb()' ssaStyle.Background.ToArgb()' bold' italic' ssaStyle.BorderStyle' ssaStyle.OutlineWidth' ssaStyle.ShadowWidth' " is 137.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The length of the statement  "            string[] format = { "Marked"' " Start"' " End"' " Style"' " Name"' " MarginL"' " MarginR"' " MarginV"' " Effect"' " Text" }; " is 124.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,ToUtf8XmlString,The length of the statement  "            var settings = new XmlWriterSettings {Encoding = new UnicodeEncoding(false' false)' Indent = true' OmitXmlDeclaration = omitXmlDeclaration}; " is 140.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SelectIndexAndEnsureVisible,The conditional expression  "item.Text == p.Number.ToString(CultureInfo.InvariantCulture) &&                      item.SubItems[ColumnIndexStart].Text == p.StartTime.ToString() &&                      item.SubItems[ColumnIndexEnd].Text == p.EndTime.ToString() &&                      item.SubItems[ColumnIndexText].Text == p.Text"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,buttonOK_Click,The conditional expression  "_subtitle1 == null || _subtitle1.Paragraphs.Count == 0 ||                  _subtitle2 == null || _subtitle1.Paragraphs.Count == 2"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The conditional expression  "int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The conditional expression  "int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The conditional expression  "arr0.StartsWith("-") && arr[1].TrimStart().StartsWith("-") && (arr0.EndsWith(".") || arr0.EndsWith("!") || arr0.EndsWith("?") || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith("–"))"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The conditional expression  "@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The conditional expression  "@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,RemoveNativeFormatting,The conditional expression  "s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,RemoveNativeFormatting,The conditional expression  "s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,LoadSubtitle,The conditional expression  "_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      RegexTimeCodes.IsMatch(lines[i + 1])"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The conditional expression  "line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';')"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The conditional expression  "s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The conditional expression  "s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal)"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The conditional expression  "s.StartsWith("{\\a1}"' StringComparison.Ordinal) || s.StartsWith("{\\a1\\"' StringComparison.Ordinal) ||                                   s.StartsWith("{\\a3}"' StringComparison.Ordinal) || s.StartsWith("{\\a3\\"' StringComparison.Ordinal)"  is complex.
Empty Catch Block,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The method has an empty catch block.
Empty Catch Block,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The method has an empty catch block.
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,InitializeTimestampColumnWidths,The following statement contains a magic number: {                  Graphics graphics = parentForm.CreateGraphics();                  SizeF timestampSizeF = graphics.MeasureString("00:00:33'527"' Font);                  int timestampWidth = (int)(timestampSizeF.Width + 0.5) + 11;                  Columns[ColumnIndexStart].Width = timestampWidth;                  Columns[ColumnIndexEnd].Width = timestampWidth;                  Columns[ColumnIndexDuration].Width = (int)(timestampWidth * 0.8);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,InitializeTimestampColumnWidths,The following statement contains a magic number: {                  Graphics graphics = parentForm.CreateGraphics();                  SizeF timestampSizeF = graphics.MeasureString("00:00:33'527"' Font);                  int timestampWidth = (int)(timestampSizeF.Width + 0.5) + 11;                  Columns[ColumnIndexStart].Width = timestampWidth;                  Columns[ColumnIndexEnd].Width = timestampWidth;                  Columns[ColumnIndexDuration].Width = (int)(timestampWidth * 0.8);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,InitializeTimestampColumnWidths,The following statement contains a magic number: {                  Graphics graphics = parentForm.CreateGraphics();                  SizeF timestampSizeF = graphics.MeasureString("00:00:33'527"' Font);                  int timestampWidth = (int)(timestampSizeF.Width + 0.5) + 11;                  Columns[ColumnIndexStart].Width = timestampWidth;                  Columns[ColumnIndexEnd].Width = timestampWidth;                  Columns[ColumnIndexDuration].Width = (int)(timestampWidth * 0.8);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView,The following statement contains a magic number: Columns.AddRange(new[]              {                  new ColumnHeader { Text="#"' Width=55 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width= 55 }'                  new ColumnHeader { Width = -2 } // -2 = as rest of space (300)              });
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView,The following statement contains a magic number: Columns.AddRange(new[]              {                  new ColumnHeader { Text="#"' Width=55 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width= 55 }'                  new ColumnHeader { Width = -2 } // -2 = as rest of space (300)              });
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView,The following statement contains a magic number: Columns.AddRange(new[]              {                  new ColumnHeader { Text="#"' Width=55 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width= 55 }'                  new ColumnHeader { Width = -2 } // -2 = as rest of space (300)              });
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView,The following statement contains a magic number: Columns.AddRange(new[]              {                  new ColumnHeader { Text="#"' Width=55 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width= 55 }'                  new ColumnHeader { Width = -2 } // -2 = as rest of space (300)              });
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView,The following statement contains a magic number: Columns.AddRange(new[]              {                  new ColumnHeader { Text="#"' Width=55 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width = 80 }'                  new ColumnHeader { Width= 55 }'                  new ColumnHeader { Width = -2 } // -2 = as rest of space (300)              });
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView_DrawSubItem,The following statement contains a magic number: using (var sf = new StringFormat())              {                  switch (e.Header.TextAlign)                  {                      case HorizontalAlignment.Center:                          sf.Alignment = StringAlignment.Center;                          break;                      case HorizontalAlignment.Right:                          sf.Alignment = StringAlignment.Far;                          break;                  }                    if (e.Item.Selected)                  {                      Rectangle rect = e.Bounds;                      //if (Configuration.Settings != null)                      //{                      //    if (backgroundColor == BackColor)                      //        backgroundColor = Configuration.Settings.Tools.ListViewUnfocusedSelectedColor;                      //    else                      //    {                      //        int r = backgroundColor.R - 39;                      //        int g = backgroundColor.G - 39;                      //        int b = backgroundColor.B - 39;                      //        if (r < 0)                      //            r = 0;                      //        if (g < 0)                      //            g = 0;                      //        if (b < 0)                      //            b = 0;                      //        backgroundColor = Color.FromArgb(backgroundColor.A' r' g' b);                      //    }                      //    SolidBrush sb = new SolidBrush(backgroundColor);                      //    e.Graphics.FillRectangle(sb' rect);                      //}                      //else                      {                          e.Graphics.FillRectangle(Brushes.LightBlue' rect);                      }                      //rect = new Rectangle(e.Bounds.Left + 4' e.Bounds.Top+2' e.Bounds.Width - 3' e.Bounds.Height);                      TextRenderer.DrawText(e.Graphics' e.Item.SubItems[e.ColumnIndex].Text' _subtitleFont' new Point(e.Bounds.Left + 3' e.Bounds.Top + 2)' e.Item.ForeColor' TextFormatFlags.NoPrefix);                  }                  else                  {                      e.DrawDefault = true;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView_DrawSubItem,The following statement contains a magic number: using (var sf = new StringFormat())              {                  switch (e.Header.TextAlign)                  {                      case HorizontalAlignment.Center:                          sf.Alignment = StringAlignment.Center;                          break;                      case HorizontalAlignment.Right:                          sf.Alignment = StringAlignment.Far;                          break;                  }                    if (e.Item.Selected)                  {                      Rectangle rect = e.Bounds;                      //if (Configuration.Settings != null)                      //{                      //    if (backgroundColor == BackColor)                      //        backgroundColor = Configuration.Settings.Tools.ListViewUnfocusedSelectedColor;                      //    else                      //    {                      //        int r = backgroundColor.R - 39;                      //        int g = backgroundColor.G - 39;                      //        int b = backgroundColor.B - 39;                      //        if (r < 0)                      //            r = 0;                      //        if (g < 0)                      //            g = 0;                      //        if (b < 0)                      //            b = 0;                      //        backgroundColor = Color.FromArgb(backgroundColor.A' r' g' b);                      //    }                      //    SolidBrush sb = new SolidBrush(backgroundColor);                      //    e.Graphics.FillRectangle(sb' rect);                      //}                      //else                      {                          e.Graphics.FillRectangle(Brushes.LightBlue' rect);                      }                      //rect = new Rectangle(e.Bounds.Left + 4' e.Bounds.Top+2' e.Bounds.Width - 3' e.Bounds.Height);                      TextRenderer.DrawText(e.Graphics' e.Item.SubItems[e.ColumnIndex].Text' _subtitleFont' new Point(e.Bounds.Left + 3' e.Bounds.Top + 2)' e.Item.ForeColor' TextFormatFlags.NoPrefix);                  }                  else                  {                      e.DrawDefault = true;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: Columns[ColumnIndexNumber].Width = 55;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,AutoSizeAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  //if (_settings != null && _settings.General.ListViewColumnsRememberSize && _settings.General.ListViewNumberWidth > 1 &&                  //    _settings.General.ListViewStartWidth > 1 && _settings.General.ListViewEndWidth > 1 && _settings.General.ListViewDurationWidth > 1)                  //{                  //    int restWidth = lengthAvailable - 15 - Columns[ColumnIndexText].Width;                  //    if (restWidth > 0)                  //        Columns[ColumnIndexTextAlternate].Width = restWidth;                  //}                  //else                  {                      int restWidth = (lengthAvailable / 2) - 15;                      Columns[ColumnIndexText].Width = restWidth;                      Columns[ColumnIndexTextAlternate].Width = restWidth;                  }              }              else if (!IsAlternateTextColumnVisible && !IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 23;                  Columns[ColumnIndexText].Width = restWidth;              }              else if (!IsAlternateTextColumnVisible && IsExtraColumnVisible)              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.6);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.4);              }              else              {                  int restWidth = lengthAvailable - 15;                  Columns[ColumnIndexText].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexTextAlternate].Width = (int)(restWidth * 0.4);                  Columns[ColumnIndexExtra].Width = (int)(restWidth * 0.2);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The following statement contains a magic number: if (!IsAlternateTextColumnVisible)              {                  ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  if (IsExtraColumnVisible)                  {                      Columns.Insert(ColumnIndexTextAlternate' new ColumnHeader { Text = text' Width = -2 });                  }                  else                  {                      Columns.Add(new ColumnHeader { Text = text' Width = -2 });                  }                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                  Columns[ColumnIndexText].Width = (lengthAvailable / 2) - 15;                  Columns[ColumnIndexTextAlternate].Width = -2;                    IsAlternateTextColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The following statement contains a magic number: if (!IsAlternateTextColumnVisible)              {                  ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  if (IsExtraColumnVisible)                  {                      Columns.Insert(ColumnIndexTextAlternate' new ColumnHeader { Text = text' Width = -2 });                  }                  else                  {                      Columns.Add(new ColumnHeader { Text = text' Width = -2 });                  }                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                  Columns[ColumnIndexText].Width = (lengthAvailable / 2) - 15;                  Columns[ColumnIndexTextAlternate].Width = -2;                    IsAlternateTextColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The following statement contains a magic number: if (!IsAlternateTextColumnVisible)              {                  ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  if (IsExtraColumnVisible)                  {                      Columns.Insert(ColumnIndexTextAlternate' new ColumnHeader { Text = text' Width = -2 });                  }                  else                  {                      Columns.Add(new ColumnHeader { Text = text' Width = -2 });                  }                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                  Columns[ColumnIndexText].Width = (lengthAvailable / 2) - 15;                  Columns[ColumnIndexTextAlternate].Width = -2;                    IsAlternateTextColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The following statement contains a magic number: if (!IsAlternateTextColumnVisible)              {                  ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  if (IsExtraColumnVisible)                  {                      Columns.Insert(ColumnIndexTextAlternate' new ColumnHeader { Text = text' Width = -2 });                  }                  else                  {                      Columns.Add(new ColumnHeader { Text = text' Width = -2 });                  }                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                  Columns[ColumnIndexText].Width = (lengthAvailable / 2) - 15;                  Columns[ColumnIndexTextAlternate].Width = -2;                    IsAlternateTextColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAlternateTextColumn,The following statement contains a magic number: if (!IsAlternateTextColumnVisible)              {                  ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  if (IsExtraColumnVisible)                  {                      Columns.Insert(ColumnIndexTextAlternate' new ColumnHeader { Text = text' Width = -2 });                  }                  else                  {                      Columns.Add(new ColumnHeader { Text = text' Width = -2 });                  }                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                  Columns[ColumnIndexText].Width = (lengthAvailable / 2) - 15;                  Columns[ColumnIndexTextAlternate].Width = -2;                    IsAlternateTextColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListViewResize,The following statement contains a magic number: Columns[Columns.Count - 1].Width = Width - (width + 25);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,GetFirstVisibleItem,The following statement contains a magic number: foreach (ListViewItem item in Items)              {                  if (ClientRectangle.Contains(new Rectangle(item.Bounds.Left' item.Bounds.Top' item.Bounds.Height' 10)))                  {                      return item;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SelectIndexAndEnsureVisible,The following statement contains a magic number: int bottomIndex = TopItem.Index + ((Height - 25) / 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SelectIndexAndEnsureVisible,The following statement contains a magic number: int bottomIndex = TopItem.Index + ((Height - 25) / 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SelectIndexAndEnsureVisible,The following statement contains a magic number: int itemsBeforeAfterCount = ((bottomIndex - TopItem.Index) / 2) - 1;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowExtraColumn,The following statement contains a magic number: if (!IsExtraColumnVisible)              {                  if (IsAlternateTextColumnVisible)                      ColumnIndexExtra = ColumnIndexTextAlternate + 1;                  else                      ColumnIndexExtra = ColumnIndexTextAlternate;                    Columns.Add(new ColumnHeader { Text = title' Width = 80 });                    int length = Columns[ColumnIndexNumber].Width + Columns[ColumnIndexStart].Width + Columns[ColumnIndexEnd].Width + Columns[ColumnIndexDuration].Width;                  int lengthAvailable = Width - length;                    if (IsAlternateTextColumnVisible)                  {                      int part = lengthAvailable / 5;                      Columns[ColumnIndexText].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                      Columns[ColumnIndexTextAlternate].Width = part;                  }                  else                  {                      int part = lengthAvailable / 6;                      Columns[ColumnIndexText].Width = part * 4;                      Columns[ColumnIndexTextAlternate].Width = part * 2;                  }                  IsExtraColumnVisible = true;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: Columns[ColumnIndexNumber].Width = 45;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: Columns[ColumnIndexEnd].Width = 80;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: Columns[ColumnIndexDuration].Width = 55;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible)              {                  Columns[ColumnIndexText].Width = 250;                  Columns[ColumnIndexTextAlternate].Width = -2;              }              else              {                  Columns[ColumnIndexText].Width = -2;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible)              {                  Columns[ColumnIndexText].Width = 250;                  Columns[ColumnIndexTextAlternate].Width = -2;              }              else              {                  Columns[ColumnIndexText].Width = -2;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,ShowAllColumns,The following statement contains a magic number: if (IsAlternateTextColumnVisible)              {                  Columns[ColumnIndexText].Width = 250;                  Columns[ColumnIndexTextAlternate].Width = -2;              }              else              {                  Columns[ColumnIndexText].Width = -2;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,PluginForm,The following statement contains a magic number: _previewTimer.Interval = 200;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GetSettingsFileName,The following statement contains a magic number: if (path != null && path.StartsWith("file:\\"))                  path = path.Remove(0' 6);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,buttonOK_Click,The following statement contains a magic number: if (_subtitle1 == null || _subtitle1.Paragraphs.Count == 0 ||                  _subtitle2 == null || _subtitle1.Paragraphs.Count == 2)              {                  MessageBox.Show("Please load two subtitles");                  return;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(bmp))              {                    // Draw background                  const int rectangleSize = 9;                  for (int y = 0; y < bmp.Height; y += rectangleSize)                  {                      for (int x = 0; x < bmp.Width; x += rectangleSize)                      {                          Color c = Color.WhiteSmoke;                          if (y % (rectangleSize * 2) == 0)                          {                              if (x % (rectangleSize * 2) == 0)                                  c = Color.LightGray;                          }                          else                          {                              if (x % (rectangleSize * 2) != 0)                                  c = Color.LightGray;                          }                          g.FillRectangle(new SolidBrush(c)' x' y' rectangleSize' rectangleSize);                      }                  }                    DrawText(_textOne' g' bmp' comboBoxFontName1' numericUpDownFontSize1.Value' checkBoxFontBold1' radioButtonAlignTop1' checkBoxFontItalic1' checkBoxFontUnderline1' panelPrimaryColor1.BackColor' panelOutlineColor1.BackColor);                  DrawText(_textTwo' g' bmp' comboBoxFontName2' numericUpDownFontSize2.Value' checkBoxFontBold2' radioButtonAlignTop2' checkBoxFontItalic2' checkBoxFontUnderline2' panelPrimaryColor2.BackColor' panelOutlineColor2.BackColor);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(bmp))              {                    // Draw background                  const int rectangleSize = 9;                  for (int y = 0; y < bmp.Height; y += rectangleSize)                  {                      for (int x = 0; x < bmp.Width; x += rectangleSize)                      {                          Color c = Color.WhiteSmoke;                          if (y % (rectangleSize * 2) == 0)                          {                              if (x % (rectangleSize * 2) == 0)                                  c = Color.LightGray;                          }                          else                          {                              if (x % (rectangleSize * 2) != 0)                                  c = Color.LightGray;                          }                          g.FillRectangle(new SolidBrush(c)' x' y' rectangleSize' rectangleSize);                      }                  }                    DrawText(_textOne' g' bmp' comboBoxFontName1' numericUpDownFontSize1.Value' checkBoxFontBold1' radioButtonAlignTop1' checkBoxFontItalic1' checkBoxFontUnderline1' panelPrimaryColor1.BackColor' panelOutlineColor1.BackColor);                  DrawText(_textTwo' g' bmp' comboBoxFontName2' numericUpDownFontSize2.Value' checkBoxFontBold2' radioButtonAlignTop2' checkBoxFontItalic2' checkBoxFontUnderline2' panelPrimaryColor2.BackColor' panelOutlineColor2.BackColor);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(bmp))              {                    // Draw background                  const int rectangleSize = 9;                  for (int y = 0; y < bmp.Height; y += rectangleSize)                  {                      for (int x = 0; x < bmp.Width; x += rectangleSize)                      {                          Color c = Color.WhiteSmoke;                          if (y % (rectangleSize * 2) == 0)                          {                              if (x % (rectangleSize * 2) == 0)                                  c = Color.LightGray;                          }                          else                          {                              if (x % (rectangleSize * 2) != 0)                                  c = Color.LightGray;                          }                          g.FillRectangle(new SolidBrush(c)' x' y' rectangleSize' rectangleSize);                      }                  }                    DrawText(_textOne' g' bmp' comboBoxFontName1' numericUpDownFontSize1.Value' checkBoxFontBold1' radioButtonAlignTop1' checkBoxFontItalic1' checkBoxFontUnderline1' panelPrimaryColor1.BackColor' panelOutlineColor1.BackColor);                  DrawText(_textTwo' g' bmp' comboBoxFontName2' numericUpDownFontSize2.Value' checkBoxFontBold2' radioButtonAlignTop2' checkBoxFontItalic2' checkBoxFontUnderline2' panelPrimaryColor2.BackColor' panelOutlineColor2.BackColor);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,GeneratePreviewReal,The following statement contains a magic number: using (Graphics g = Graphics.FromImage(bmp))              {                    // Draw background                  const int rectangleSize = 9;                  for (int y = 0; y < bmp.Height; y += rectangleSize)                  {                      for (int x = 0; x < bmp.Width; x += rectangleSize)                      {                          Color c = Color.WhiteSmoke;                          if (y % (rectangleSize * 2) == 0)                          {                              if (x % (rectangleSize * 2) == 0)                                  c = Color.LightGray;                          }                          else                          {                              if (x % (rectangleSize * 2) != 0)                                  c = Color.LightGray;                          }                          g.FillRectangle(new SolidBrush(c)' x' y' rectangleSize' rectangleSize);                      }                  }                    DrawText(_textOne' g' bmp' comboBoxFontName1' numericUpDownFontSize1.Value' checkBoxFontBold1' radioButtonAlignTop1' checkBoxFontItalic1' checkBoxFontUnderline1' panelPrimaryColor1.BackColor' panelOutlineColor1.BackColor);                  DrawText(_textTwo' g' bmp' comboBoxFontName2' numericUpDownFontSize2.Value' checkBoxFontBold2' radioButtonAlignTop2' checkBoxFontItalic2' checkBoxFontUnderline2' panelPrimaryColor2.BackColor' panelOutlineColor2.BackColor);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: float left = ((float)(bmp.Width - measuredWidth * 0.8 + 15) / 2);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: float left = ((float)(bmp.Width - measuredWidth * 0.8 + 15) / 2);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: float left = ((float)(bmp.Width - measuredWidth * 0.8 + 15) / 2);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: if (radioButtonAlignTop.Checked)                  top = 10;              //else if (radioButtonMiddleLeft.Checked || radioButtonMiddleCenter.Checked || radioButtonMiddleRight.Checked)              //    top = (bmp.Height - measuredHeight) / 2;              else                  top = bmp.Height - measuredHeight - 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: if (radioButtonAlignTop.Checked)                  top = 10;              //else if (radioButtonMiddleLeft.Checked || radioButtonMiddleCenter.Checked || radioButtonMiddleRight.Checked)              //    top = (bmp.Height - measuredHeight) / 2;              else                  top = bmp.Height - measuredHeight - 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,DrawText,The following statement contains a magic number: if (numericUpDownShadowWidth1.Value > 0) // && radioButtonOutline1.Checked)              {                  var shadowPath = (GraphicsPath)path.Clone();                  for (int i = 0; i < (int)numericUpDownShadowWidth1.Value; i++)                  {                      var translateMatrix = new Matrix();                      translateMatrix.Translate(1' 1);                      shadowPath.Transform(translateMatrix);                        using (var p1 = new Pen(Color.FromArgb(250' Color.Black)' outline)) //(()) panelBackColor.BackColor)' outline);                          g.DrawPath(p1' shadowPath);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,PluginForm_Load,The following statement contains a magic number: numericUpDownFontSize1.Value = 20;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,PluginForm_Load,The following statement contains a magic number: numericUpDownFontSize2.Value = 20;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,SetSsaStyle,The following statement contains a magic number: lock (_lockObj)              {                  int propertyIndex = -1;                  int nameIndex = -1;                  var sb = new StringBuilder();                  foreach (var line in _header.Split(Utilities.NewLineChars' StringSplitOptions.None))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              var format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (f == "name")                                      nameIndex = i;                                  if (f == propertyName)                                      propertyIndex = i;                              }                          }                          sb.AppendLine(line);                      }                      else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              bool correctLine = false;                              var format = line.Substring(6).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim();                                  if (i == nameIndex)                                      correctLine = f.Equals(styleName' StringComparison.OrdinalIgnoreCase);                              }                              if (correctLine)                              {                                  sb.Append(line.Substring(0' 6) + " ");                                  format = line.Substring(6).Split(''');                                  for (int i = 0; i < format.Length; i++)                                  {                                      string f = format[i].Trim();                                      if (i == propertyIndex)                                      {                                          //                                        MessageBox.Show("Style:" + styleName + ": changing property " + propertyName + " " + f + " to " + propertyValue);                                          sb.Append(propertyValue);                                      }                                      else                                      {                                          sb.Append(f);                                      }                                      if (i < format.Length - 1)                                          sb.Append(''');                                  }                                  sb.AppendLine();                              }                              else                              {                                  sb.AppendLine(line);                              }                          }                          else                          {                              sb.AppendLine(line);                          }                      }                      else                      {                          sb.AppendLine(line);                      }                  }                  _header = sb.ToString().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(837' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(837' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(101' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(101' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 5;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(7' 12);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Location = new System.Drawing.Point(7' 12);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(1038' 411);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.Size = new System.Drawing.Size(1038' 411);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox1.TabIndex = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(513' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Location = new System.Drawing.Point(513' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(519' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox3.Size = new System.Drawing.Size(519' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(6' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Location = new System.Drawing.Point(6' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(469' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.Size = new System.Drawing.Size(469' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox2.TabIndex = 7;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile2.Location = new System.Drawing.Point(481' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile2.Location = new System.Drawing.Point(481' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile2.Size = new System.Drawing.Size(27' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile2.Size = new System.Drawing.Size(27' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile2.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.Location = new System.Drawing.Point(6' 50);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.Location = new System.Drawing.Point(6' 50);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.Size = new System.Drawing.Size(507' 329);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.Size = new System.Drawing.Size(507' 329);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.SubtitleFontSize = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView2.TabIndex = 6;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(12' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Location = new System.Drawing.Point(12' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(496' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox2.Size = new System.Drawing.Size(496' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(7' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Location = new System.Drawing.Point(7' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(445' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.Size = new System.Drawing.Size(445' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBox1.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile1.Location = new System.Drawing.Point(458' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile1.Location = new System.Drawing.Point(458' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile1.Size = new System.Drawing.Size(27' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOpenFile1.Size = new System.Drawing.Size(27' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView1.Location = new System.Drawing.Point(6' 50);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView1.Location = new System.Drawing.Point(6' 50);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView1.Size = new System.Drawing.Size(484' 329);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView1.Size = new System.Drawing.Size(484' 329);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.subtitleListView1.SubtitleFontSize = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(7' 429);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Location = new System.Drawing.Point(7' 429);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(450' 280);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox4.Size = new System.Drawing.Size(450' 280);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Location = new System.Drawing.Point(3' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Location = new System.Drawing.Point(3' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Size = new System.Drawing.Size(444' 261);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.pictureBoxPreview.Size = new System.Drawing.Size(444' 261);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxSettings.Location = new System.Drawing.Point(463' 429);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxSettings.Location = new System.Drawing.Point(463' 429);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxSettings.Size = new System.Drawing.Size(582' 247);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxSettings.Size = new System.Drawing.Size(582' 247);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxSettings.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Location = new System.Drawing.Point(308' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Location = new System.Drawing.Point(308' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Size = new System.Drawing.Size(268' 222);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.Size = new System.Drawing.Size(268' 222);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox6.TabIndex = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Location = new System.Drawing.Point(3' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(40' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.Size = new System.Drawing.Size(40' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label4.TabIndex = 27;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth2.Location = new System.Drawing.Point(162' 183);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth2.Location = new System.Drawing.Point(162' 183);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth2.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth2.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth2.TabIndex = 26;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.Location = new System.Drawing.Point(52' 183);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.Location = new System.Drawing.Point(52' 183);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.TabIndex = 24;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline2.Value = new decimal(new int[] {              2'              0'              0'              0});
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(102' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Location = new System.Drawing.Point(102' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.Size = new System.Drawing.Size(58' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label5.TabIndex = 25;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor2.Location = new System.Drawing.Point(128' 150);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor2.Location = new System.Drawing.Point(128' 150);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor2.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor2.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor2.TabIndex = 23;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor2.Location = new System.Drawing.Point(6' 149);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor2.Location = new System.Drawing.Point(6' 149);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor2.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor2.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor2.TabIndex = 22;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor2.Location = new System.Drawing.Point(128' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor2.Location = new System.Drawing.Point(128' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor2.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor2.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor2.TabIndex = 21;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor2.Location = new System.Drawing.Point(6' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor2.Location = new System.Drawing.Point(6' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor2.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor2.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor2.TabIndex = 20;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline2.Location = new System.Drawing.Point(162' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline2.Location = new System.Drawing.Point(162' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline2.Size = new System.Drawing.Size(71' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline2.Size = new System.Drawing.Size(71' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline2.TabIndex = 19;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.Location = new System.Drawing.Point(96' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.Location = new System.Drawing.Point(96' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.Maximum = new decimal(new int[] {              200'              0'              0'              0});
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.Size = new System.Drawing.Size(51' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.Size = new System.Drawing.Size(51' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize2.TabIndex = 16;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic2.Location = new System.Drawing.Point(83' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic2.Location = new System.Drawing.Point(83' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic2.Size = new System.Drawing.Size(48' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic2.Size = new System.Drawing.Size(48' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic2.TabIndex = 18;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold2.Location = new System.Drawing.Point(6' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold2.Location = new System.Drawing.Point(6' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold2.Size = new System.Drawing.Size(51' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold2.Size = new System.Drawing.Size(51' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold2.TabIndex = 17;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName2.Location = new System.Drawing.Point(96' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName2.Location = new System.Drawing.Point(96' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName2.Size = new System.Drawing.Size(147' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName2.Size = new System.Drawing.Size(147' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName2.TabIndex = 14;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 42);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Location = new System.Drawing.Point(6' 42);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(49' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.Size = new System.Drawing.Size(49' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label1.TabIndex = 15;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Location = new System.Drawing.Point(6' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(57' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.Size = new System.Drawing.Size(57' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label2.TabIndex = 13;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom2.Location = new System.Drawing.Point(94' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom2.Location = new System.Drawing.Point(94' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom2.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom2.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom2.TabIndex = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop2.Location = new System.Drawing.Point(6' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop2.Location = new System.Drawing.Point(6' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop2.Size = new System.Drawing.Size(66' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop2.Size = new System.Drawing.Size(66' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop2.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(6' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Location = new System.Drawing.Point(6' 19);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(296' 222);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.Size = new System.Drawing.Size(296' 222);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBox5.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Location = new System.Drawing.Point(6' 186);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(40' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.Size = new System.Drawing.Size(40' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label3.TabIndex = 20;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth1.Location = new System.Drawing.Point(162' 182);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth1.Location = new System.Drawing.Point(162' 182);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth1.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth1.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownShadowWidth1.TabIndex = 19;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.Location = new System.Drawing.Point(52' 182);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.Location = new System.Drawing.Point(52' 182);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.Size = new System.Drawing.Size(44' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.TabIndex = 17;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownOutline1.Value = new decimal(new int[] {              2'              0'              0'              0});
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelShadow.Location = new System.Drawing.Point(102' 185);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelShadow.Location = new System.Drawing.Point(102' 185);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelShadow.Size = new System.Drawing.Size(58' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelShadow.Size = new System.Drawing.Size(58' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelShadow.TabIndex = 18;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor1.Location = new System.Drawing.Point(131' 150);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor1.Location = new System.Drawing.Point(131' 150);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor1.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor1.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelOutlineColor1.TabIndex = 16;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor1.Location = new System.Drawing.Point(9' 149);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor1.Location = new System.Drawing.Point(9' 149);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor1.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor1.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOutlineColor1.TabIndex = 15;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor1.Location = new System.Drawing.Point(131' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor1.Location = new System.Drawing.Point(131' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor1.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor1.Size = new System.Drawing.Size(21' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelPrimaryColor1.TabIndex = 14;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor1.Location = new System.Drawing.Point(9' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor1.Location = new System.Drawing.Point(9' 122);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor1.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor1.Size = new System.Drawing.Size(112' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonPrimaryColor1.TabIndex = 13;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline1.Location = new System.Drawing.Point(165' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline1.Location = new System.Drawing.Point(165' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline1.Size = new System.Drawing.Size(71' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline1.Size = new System.Drawing.Size(71' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontUnderline1.TabIndex = 12;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.Location = new System.Drawing.Point(96' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.Location = new System.Drawing.Point(96' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.Maximum = new decimal(new int[] {              200'              0'              0'              0});
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.Size = new System.Drawing.Size(51' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.Size = new System.Drawing.Size(51' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.numericUpDownFontSize1.TabIndex = 9;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic1.Location = new System.Drawing.Point(86' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic1.Location = new System.Drawing.Point(86' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic1.Size = new System.Drawing.Size(48' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic1.Size = new System.Drawing.Size(48' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontItalic1.TabIndex = 11;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold1.Location = new System.Drawing.Point(9' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold1.Location = new System.Drawing.Point(9' 69);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold1.Size = new System.Drawing.Size(51' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold1.Size = new System.Drawing.Size(51' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxFontBold1.TabIndex = 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName1.Location = new System.Drawing.Point(96' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName1.Location = new System.Drawing.Point(96' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName1.Size = new System.Drawing.Size(147' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName1.Size = new System.Drawing.Size(147' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFontName1.TabIndex = 7;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontSize.Location = new System.Drawing.Point(6' 42);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontSize.Location = new System.Drawing.Point(6' 42);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontSize.Size = new System.Drawing.Size(49' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontSize.Size = new System.Drawing.Size(49' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontSize.TabIndex = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontName.Location = new System.Drawing.Point(6' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontName.Location = new System.Drawing.Point(6' 16);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontName.Size = new System.Drawing.Size(57' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontName.Size = new System.Drawing.Size(57' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelFontName.TabIndex = 6;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom1.Location = new System.Drawing.Point(96' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom1.Location = new System.Drawing.Point(96' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom1.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignBottom1.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop1.Location = new System.Drawing.Point(9' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop1.Location = new System.Drawing.Point(9' 94);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop1.Size = new System.Drawing.Size(66' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonAlignTop1.Size = new System.Drawing.Size(66' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(466' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Location = new System.Drawing.Point(466' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(71' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.Size = new System.Drawing.Size(71' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.label6.TabIndex = 21;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFormat.Location = new System.Drawing.Point(543' 688);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFormat.Location = new System.Drawing.Point(543' 688);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFormat.Size = new System.Drawing.Size(121' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFormat.Size = new System.Drawing.Size(121' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxFormat.TabIndex = 22;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(944' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(944' 691);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(101' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(101' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 23;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1057' 721);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1057' 721);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(820' 583);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(820' 583);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Paragraph,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Paragraph.cs,CalculateFrameNumbersFromTimeCodes,The following statement contains a magic number: StartFrame = (int)Math.Round((StartTime.TotalMilliseconds / 1000.0 * frameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Paragraph,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Paragraph.cs,CalculateFrameNumbersFromTimeCodes,The following statement contains a magic number: EndFrame = (int)Math.Round((EndTime.TotalMilliseconds / 1000.0 * frameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,SsaStyle,The following statement contains a magic number: FontSize = 20;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,SsaStyle,The following statement contains a magic number: OutlineWidth = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,SsaStyle,The following statement contains a magic number: MarginLeft = 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,SsaStyle,The following statement contains a magic number: MarginRight = 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,SsaStyle,The following statement contains a magic number: MarginVertical = 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,ToRawSsa,The following statement contains a magic number: var format = styleFormat.ToLower().Substring(8).Split(''');
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SsaStyle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SsaStyle.cs,ToRawAss,The following statement contains a magic number: var format = styleFormat.ToLower().Substring(8).Split(''');
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,ChangeFramerate,The following statement contains a magic number: foreach (Paragraph p in Paragraphs)              {                  double startFrame = p.StartTime.TotalMilliseconds / 1000.0 * oldFramerate;                  double endFrame = p.EndTime.TotalMilliseconds / 1000.0 * oldFramerate;                  p.StartTime.TotalMilliseconds = startFrame * (1000.0 / newFramerate);                  p.EndTime.TotalMilliseconds = endFrame * (1000.0 / newFramerate);                  p.CalculateFrameNumbersFromTimeCodes(newFramerate);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,ChangeFramerate,The following statement contains a magic number: foreach (Paragraph p in Paragraphs)              {                  double startFrame = p.StartTime.TotalMilliseconds / 1000.0 * oldFramerate;                  double endFrame = p.EndTime.TotalMilliseconds / 1000.0 * oldFramerate;                  p.StartTime.TotalMilliseconds = startFrame * (1000.0 / newFramerate);                  p.EndTime.TotalMilliseconds = endFrame * (1000.0 / newFramerate);                  p.CalculateFrameNumbersFromTimeCodes(newFramerate);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,ChangeFramerate,The following statement contains a magic number: foreach (Paragraph p in Paragraphs)              {                  double startFrame = p.StartTime.TotalMilliseconds / 1000.0 * oldFramerate;                  double endFrame = p.EndTime.TotalMilliseconds / 1000.0 * oldFramerate;                  p.StartTime.TotalMilliseconds = startFrame * (1000.0 / newFramerate);                  p.EndTime.TotalMilliseconds = endFrame * (1000.0 / newFramerate);                  p.CalculateFrameNumbersFromTimeCodes(newFramerate);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,ChangeFramerate,The following statement contains a magic number: foreach (Paragraph p in Paragraphs)              {                  double startFrame = p.StartTime.TotalMilliseconds / 1000.0 * oldFramerate;                  double endFrame = p.EndTime.TotalMilliseconds / 1000.0 * oldFramerate;                  p.StartTime.TotalMilliseconds = startFrame * (1000.0 / newFramerate);                  p.EndTime.TotalMilliseconds = endFrame * (1000.0 / newFramerate);                  p.CalculateFrameNumbersFromTimeCodes(newFramerate);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * 1000.0);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * 1000.0);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * 1000.0);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Subtitle,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * 1000.0);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,DrawText,The following statement contains a magic number: if (path.PointCount > 0)              {                  int k = 0;                    var list = (PointF[])path.PathPoints.Clone(); // avoid using very slow path.PathPoints indexer!!!                  for (int i = list.Length - 1; i >= 0; i--)                  {                      if (list[i].X > next.X)                          next.X = list[i].X;                      k++;                      if (k > 60)                          break;                      if (i <= pathPointsStart && pathPointsStart != -1)                          break;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextWidth,The following statement contains a magic number: int index = list.Length - 42;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextWidth,The following statement contains a magic number: for (int i = index; i < list.Length; i += 2)              {                  if (list[i].X > width)                      width = list[i].X;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextWidth,The following statement contains a magic number: int max = 52;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextWidth,The following statement contains a magic number: for (int i = 0; i < max; i += 2)              {                  if (list[i].X > width)                      width = list[i].X;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextHeight,The following statement contains a magic number: int index = list.Length - 80;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextHeight,The following statement contains a magic number: for (int i = index; i < list.Length; i += 2)              {                  if (list[i].Y > height)                      height = list[i].Y;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TextDraw,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TextDraw.cs,MeasureTextHeight,The following statement contains a magic number: for (int i = 0; i < list.Length; i += 2)              {                  if (list[i].Y > height)                      height = list[i].Y;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames));                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames));                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseHHMMSSFFToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int frames;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out frames))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' SubtitleFormat.FramesToMilliseconds(frames));                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,TimeCode,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,RemoveHtmlFontTag,The following statement contains a magic number: while (s.ToLower().Contains("<font"))              {                  int startIndex = s.ToLower().IndexOf("<font");                  int endIndex = Math.Max(s.IndexOf(">")' startIndex + 4);                  s = s.Remove(startIndex' (endIndex - startIndex) + 1);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,RemoveParagraphTag,The following statement contains a magic number: while (s.ToLower().Contains("<p "))              {                  int startIndex = s.ToLower().IndexOf("<p ");                  int endIndex = Math.Max(s.IndexOf(">")' startIndex + 4);                  s = s.Remove(startIndex' (endIndex - startIndex) + 1);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,IsPartOfNumber,The following statement contains a magic number: if (position + 2 > s.Length)                  return false;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: return AutoBreakLine(p' 43' 10' "en");
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: return AutoBreakLine(p' 43' 10' "en");
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (text == null || text.Length < 3)                  return text;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (text.Contains("-") && text.Contains(Environment.NewLine))              {                  string dialogS = RemoveHtmlTags(text);                  var arr = dialogS.Replace(Environment.NewLine' "\n").Split('\n');                  if (arr.Length == 2)                  {                      string arr0 = arr[0].Trim().TrimEnd('"').TrimEnd('\'').TrimEnd();                      if (arr0.StartsWith("-") && arr[1].TrimStart().StartsWith("-") && (arr0.EndsWith(".") || arr0.EndsWith("!") || arr0.EndsWith("?") || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith("–")))                          return text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: int mid = s.Length / 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1 && s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2].ToString()))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1)              {                  for (int j = 0; j < 15; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (@".!?".Contains(s[mid + j].ToString()) && !IsPartOfNumber(s' mid + j) && CanBreak(s' mid + j + 1' language))                          {                              splitPos = mid + j + 1;                              if (@".!?0123456789".Contains(s[splitPos].ToString()))                              { // do not break double/tripple end lines like "!!!" or "..."                                  splitPos++;                                  if (@".!?0123456789".Contains(s[mid + j + 1]))                                      splitPos++;                              }                              break;                          }                          if (@".!?".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              splitPos++;                              break;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1)              {                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (@" .!?".Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (@" .!?".Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1)              {                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (@" .!?".Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (@" .!?".Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1)              {                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (@" .!?".Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (@" .!?".Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos == -1)              {                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (@".!?' ".Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (@" .!?".Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (@" .!?".Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (@".!?' ".Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              if (@".!?".Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\Utilities.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < s.Length - 2)                  s = s.Substring(0' splitPos) + Environment.NewLine + s.Substring(splitPos);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The following statement contains a magic number: foreach (Paragraph p in subtitle.Paragraphs)              {                  string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10);                  string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10);                  string style = "Default";                  if (!string.IsNullOrEmpty(p.Extra) && isValidAssHeader && styles.Contains(p.Extra))                      style = p.Extra;                  string actor = "";                  if (!string.IsNullOrEmpty(p.Actor))                      actor = p.Actor;                  string effect = "";                  if (!string.IsNullOrEmpty(p.Effect))                      effect = p.Effect;                    if (p.IsComment)                      sb.AppendLine(string.Format(commentWriteFormat' start' end' FormatText(p)' style' actor' effect' p.Layer));                  else                      sb.AppendLine(string.Format(paragraphWriteFormat' start' end' FormatText(p)' style' actor' effect' p.Layer));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,ToText,The following statement contains a magic number: foreach (Paragraph p in subtitle.Paragraphs)              {                  string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10);                  string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10);                  string style = "Default";                  if (!string.IsNullOrEmpty(p.Extra) && isValidAssHeader && styles.Contains(p.Extra))                      style = p.Extra;                  string actor = "";                  if (!string.IsNullOrEmpty(p.Actor))                      actor = p.Actor;                  string effect = "";                  if (!string.IsNullOrEmpty(p.Effect))                      effect = p.Effect;                    if (p.IsComment)                      sb.AppendLine(string.Format(commentWriteFormat' start' end' FormatText(p)' style' actor' effect' p.Layer));                  else                      sb.AppendLine(string.Format(paragraphWriteFormat' start' end' FormatText(p)' style' actor' effect' p.Layer));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetStylesFromHeader,The following statement contains a magic number: foreach (string line in headerLines.SplitToLines())              {                  if (line.StartsWith("style:"' StringComparison.OrdinalIgnoreCase))                  {                      int end = line.IndexOf(''');                      if (end > 0)                          list.Add(line.Substring(6' end - 6).Trim());                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetStylesFromHeader,The following statement contains a magic number: foreach (string line in headerLines.SplitToLines())              {                  if (line.StartsWith("style:"' StringComparison.OrdinalIgnoreCase))                  {                      int end = line.IndexOf(''');                      if (end > 0)                          list.Add(line.Substring(6' end - 6).Trim());                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The following statement contains a magic number: while (text.Contains("<font ") && count < 10)              {                  int start = text.IndexOf(@"<font "' StringComparison.Ordinal);                  int end = text.IndexOf('>'' start);                  if (end > 0)                  {                      string fontTag = text.Substring(start + 5' end - (start + 4));                      text = text.Remove(start' end - start + 1);                      int indexOfEndFont = text.IndexOf("</font>"' start' StringComparison.Ordinal);                      if (indexOfEndFont > 0)                      {                          text = text.Remove(indexOfEndFont' 7);                          if (indexOfEndFont < text.Length - 9)                              text = text.Insert(indexOfEndFont' "{\\c}");                      }                        fontTag = FormatTag(ref text' start' fontTag' "face=\""' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face='"' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face="' "fn"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "size=\""' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size='"' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size="' "fs"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "color=\""' "c&H"' "&}");                      fontTag = FormatTag(ref text' start' fontTag' "color='"' "c&H"' "&}");                      FormatTag(ref text' start' fontTag' "color="' "c&H"' "&}");                  }                  count++;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The following statement contains a magic number: while (text.Contains("<font ") && count < 10)              {                  int start = text.IndexOf(@"<font "' StringComparison.Ordinal);                  int end = text.IndexOf('>'' start);                  if (end > 0)                  {                      string fontTag = text.Substring(start + 5' end - (start + 4));                      text = text.Remove(start' end - start + 1);                      int indexOfEndFont = text.IndexOf("</font>"' start' StringComparison.Ordinal);                      if (indexOfEndFont > 0)                      {                          text = text.Remove(indexOfEndFont' 7);                          if (indexOfEndFont < text.Length - 9)                              text = text.Insert(indexOfEndFont' "{\\c}");                      }                        fontTag = FormatTag(ref text' start' fontTag' "face=\""' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face='"' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face="' "fn"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "size=\""' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size='"' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size="' "fs"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "color=\""' "c&H"' "&}");                      fontTag = FormatTag(ref text' start' fontTag' "color='"' "c&H"' "&}");                      FormatTag(ref text' start' fontTag' "color="' "c&H"' "&}");                  }                  count++;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The following statement contains a magic number: while (text.Contains("<font ") && count < 10)              {                  int start = text.IndexOf(@"<font "' StringComparison.Ordinal);                  int end = text.IndexOf('>'' start);                  if (end > 0)                  {                      string fontTag = text.Substring(start + 5' end - (start + 4));                      text = text.Remove(start' end - start + 1);                      int indexOfEndFont = text.IndexOf("</font>"' start' StringComparison.Ordinal);                      if (indexOfEndFont > 0)                      {                          text = text.Remove(indexOfEndFont' 7);                          if (indexOfEndFont < text.Length - 9)                              text = text.Insert(indexOfEndFont' "{\\c}");                      }                        fontTag = FormatTag(ref text' start' fontTag' "face=\""' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face='"' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face="' "fn"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "size=\""' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size='"' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size="' "fs"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "color=\""' "c&H"' "&}");                      fontTag = FormatTag(ref text' start' fontTag' "color='"' "c&H"' "&}");                      FormatTag(ref text' start' fontTag' "color="' "c&H"' "&}");                  }                  count++;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The following statement contains a magic number: while (text.Contains("<font ") && count < 10)              {                  int start = text.IndexOf(@"<font "' StringComparison.Ordinal);                  int end = text.IndexOf('>'' start);                  if (end > 0)                  {                      string fontTag = text.Substring(start + 5' end - (start + 4));                      text = text.Remove(start' end - start + 1);                      int indexOfEndFont = text.IndexOf("</font>"' start' StringComparison.Ordinal);                      if (indexOfEndFont > 0)                      {                          text = text.Remove(indexOfEndFont' 7);                          if (indexOfEndFont < text.Length - 9)                              text = text.Insert(indexOfEndFont' "{\\c}");                      }                        fontTag = FormatTag(ref text' start' fontTag' "face=\""' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face='"' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face="' "fn"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "size=\""' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size='"' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size="' "fs"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "color=\""' "c&H"' "&}");                      fontTag = FormatTag(ref text' start' fontTag' "color='"' "c&H"' "&}");                      FormatTag(ref text' start' fontTag' "color="' "c&H"' "&}");                  }                  count++;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatText,The following statement contains a magic number: while (text.Contains("<font ") && count < 10)              {                  int start = text.IndexOf(@"<font "' StringComparison.Ordinal);                  int end = text.IndexOf('>'' start);                  if (end > 0)                  {                      string fontTag = text.Substring(start + 5' end - (start + 4));                      text = text.Remove(start' end - start + 1);                      int indexOfEndFont = text.IndexOf("</font>"' start' StringComparison.Ordinal);                      if (indexOfEndFont > 0)                      {                          text = text.Remove(indexOfEndFont' 7);                          if (indexOfEndFont < text.Length - 9)                              text = text.Insert(indexOfEndFont' "{\\c}");                      }                        fontTag = FormatTag(ref text' start' fontTag' "face=\""' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face='"' "fn"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "face="' "fn"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "size=\""' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size='"' "fs"' "}");                      fontTag = FormatTag(ref text' start' fontTag' "size="' "fs"' "}");                        fontTag = FormatTag(ref text' start' fontTag' "color=\""' "c&H"' "&}");                      fontTag = FormatTag(ref text' start' fontTag' "color='"' "c&H"' "&}");                      FormatTag(ref text' start' fontTag' "color="' "c&H"' "&}");                  }                  count++;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,FormatTag,The following statement contains a magic number: if (fontTag.Contains(tag))              {                  int fontStart = fontTag.IndexOf(tag' StringComparison.Ordinal);                  int fontEnd = fontTag.IndexOfAny(new[] { '"'' '\''' ' '' '>' }' fontStart + tag.Length);                  if (fontEnd > 0)                  {                      string subTag = fontTag.Substring(fontStart + tag.Length' fontEnd - (fontStart + tag.Length));                      if (tag.Contains("color"))                      {                          subTag = subTag.Replace("#"' string.Empty);                            // switch from rrggbb to bbggrr                          if (subTag.Length >= 6)                              subTag = subTag.Remove(subTag.Length - 6) + subTag.Substring(subTag.Length - 2' 2) + subTag.Substring(subTag.Length - 4' 2) + subTag.Substring(subTag.Length - 6' 2);                      }                      fontTag = fontTag.Remove(fontStart' fontEnd - fontStart + 1);                      if (start < text.Length)                          text = text.Insert(start' @"{\" + ssaTagName + subTag + endSsaTag);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetFormattedText,The following statement contains a magic number: for (int i = 0; i < 10; i++) // just look ten times...              {                  bool italic;                  if (text.Contains(@"{\fn"))                  {                      int start = text.IndexOf(@"{\fn"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fn}"' StringComparison.Ordinal))                      {                          string fontName = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontName' ref extraTags' out italic);                          text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font face=\"" + fontName + "\"" + extraTags + ">");                            int indexOfEndTag = text.IndexOf("{\\fn}"' start' StringComparison.Ordinal);                          if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\fn}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\fs"))                  {                      int start = text.IndexOf(@"{\fs"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\fs}"' StringComparison.Ordinal))                      {                          string fontSize = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref fontSize' ref extraTags' out italic);                          if (Utilities.IsInteger(fontSize))                          {                              text = text.Remove(start' end - start + 1);                              if (italic)                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + "><i>");                              else                                  text = text.Insert(start' "<font size=\"" + fontSize + "\"" + extraTags + ">");                                int indexOfEndTag = text.IndexOf("{\\fs}"' start' StringComparison.Ordinal);                              if (indexOfEndTag > 0)                                  text = text.Remove(indexOfEndTag' "{\\fs}".Length).Insert(indexOfEndTag' "</font>");                              else                                  text += "</font>";                          }                      }                  }                    if (text.Contains(@"{\c"))                  {                      int start = text.IndexOf(@"{\c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\c}"' StringComparison.Ordinal) && !text.Substring(start).StartsWith("{\\clip"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 4' end - (start + 4));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          int indexOfEndTag = text.IndexOf("{\\c}"' start' StringComparison.Ordinal);                          int indexOfNextColorTag = text.IndexOf("{\\c&"' start' StringComparison.Ordinal);                          if (indexOfNextColorTag > 0 && (indexOfNextColorTag < indexOfEndTag || indexOfEndTag == -1))                              text = text.Insert(indexOfNextColorTag' "</font>");                          else if (indexOfEndTag > 0)                              text = text.Remove(indexOfEndTag' "{\\c}".Length).Insert(indexOfEndTag' "</font>");                          else                              text += "</font>";                      }                  }                    if (text.Contains(@"{\1c")) // "1" specifices primary color                  {                      int start = text.IndexOf(@"{\1c"' StringComparison.Ordinal);                      int end = text.IndexOf('}'' start);                      if (end > 0 && !text.Substring(start).StartsWith("{\\1c}"' StringComparison.Ordinal))                      {                          string color = text.Substring(start + 5' end - (start + 5));                          string extraTags = string.Empty;                          CheckAndAddSubTags(ref color' ref extraTags' out italic);                            color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                            // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            text = text.Remove(start' end - start + 1);                          if (italic)                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + "><i>");                          else                              text = text.Insert(start' "<font color=\"" + color + "\"" + extraTags + ">");                          text += "</font>";                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckAndAddSubTags,The following statement contains a magic number: if (indexOfSPlit > 0)              {                  string rest = tagName.Substring(indexOfSPlit).TrimStart('\\');                  tagName = tagName.Remove(indexOfSPlit);                    for (int i = 0; i < 10; i++)                  {                      if (rest.StartsWith("fs"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontSize = rest;                          if (indexOfSPlit > 0)                          {                              fontSize = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " size=\"" + fontSize.Substring(2) + "\"";                      }                      else if (rest.StartsWith("fn"' StringComparison.Ordinal) && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontName = rest;                          if (indexOfSPlit > 0)                          {                              fontName = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                          extraTags += " face=\"" + fontName.Substring(2) + "\"";                      }                      else if (rest.StartsWith('c') && rest.Length > 2)                      {                          indexOfSPlit = rest.IndexOf('\\');                          string fontColor = rest;                          if (indexOfSPlit > 0)                          {                              fontColor = rest.Substring(0' indexOfSPlit);                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                            string color = fontColor.Substring(2);                          color = color.Replace("&"' string.Empty).TrimStart('H');                          color = color.PadLeft(6' '0');                          // switch to rrggbb from bbggrr                          color = "#" + color.Remove(color.Length - 6) + color.Substring(color.Length - 2' 2) + color.Substring(color.Length - 4' 2) + color.Substring(color.Length - 6' 2);                          color = color.ToLower();                            extraTags += " color=\"" + color + "\"";                      }                      else if (rest.StartsWith("i1"' StringComparison.Ordinal) && rest.Length > 1)                      {                          indexOfSPlit = rest.IndexOf('\\');                          italic = true;                          if (indexOfSPlit > 0)                          {                              rest = rest.Substring(indexOfSPlit).TrimStart('\\');                          }                          else                          {                              rest = string.Empty;                          }                      }                      else if (rest.Length > 0 && rest.Contains("\\"))                      {                          indexOfSPlit = rest.IndexOf('\\');                          rest = rest.Substring(indexOfSPlit).TrimStart('\\');                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexEnd = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexStyle = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexActor = 4;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexEffect = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexText = 9;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted && !fontsStarted && !graphicsStarted)                      header.AppendLine(line);                    if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith(';'))                  {                      // skip empty and comment lines                  }                  else if (line.TrimStart().StartsWith("dialog:"' StringComparison.OrdinalIgnoreCase) || line.TrimStart().StartsWith("dialogue:"' StringComparison.OrdinalIgnoreCase)) // fix faulty font tags...                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                  else if (line.Trim().Equals("[fonts]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = true;                      graphicsStarted = false;                      footer.AppendLine();                      footer.AppendLine("[Fonts]");                  }                  else if (line.Trim().Equals("[graphics]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = false;                      graphicsStarted = true;                      footer.AppendLine();                      footer.AppendLine("[Graphics]");                  }                  else if (fontsStarted)                  {                      footer.AppendLine(line);                  }                  else if (graphicsStarted)                  {                      footer.AppendLine(line);                  }                  else if (eventsStarted)                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                                  else if (format[i].Trim().Equals("actor"' StringComparison.OrdinalIgnoreCase))                                      indexActor = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          var text = string.Empty;                          var start = string.Empty;                          var end = string.Empty;                          var style = string.Empty;                          var actor = string.Empty;                          var effect = string.Empty;                          var layer = 0;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexStyle)                                  style = splittedLine[i].Trim();                              else if (i == indexActor)                                  actor = splittedLine[i].Trim();                              else if (i == indexEffect)                                  effect = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i].Trim()' out layer);                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(actor))                                  p.Actor = actor;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted && !fontsStarted && !graphicsStarted)                      header.AppendLine(line);                    if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith(';'))                  {                      // skip empty and comment lines                  }                  else if (line.TrimStart().StartsWith("dialog:"' StringComparison.OrdinalIgnoreCase) || line.TrimStart().StartsWith("dialogue:"' StringComparison.OrdinalIgnoreCase)) // fix faulty font tags...                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                  else if (line.Trim().Equals("[fonts]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = true;                      graphicsStarted = false;                      footer.AppendLine();                      footer.AppendLine("[Fonts]");                  }                  else if (line.Trim().Equals("[graphics]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = false;                      graphicsStarted = true;                      footer.AppendLine();                      footer.AppendLine("[Graphics]");                  }                  else if (fontsStarted)                  {                      footer.AppendLine(line);                  }                  else if (graphicsStarted)                  {                      footer.AppendLine(line);                  }                  else if (eventsStarted)                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                                  else if (format[i].Trim().Equals("actor"' StringComparison.OrdinalIgnoreCase))                                      indexActor = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          var text = string.Empty;                          var start = string.Empty;                          var end = string.Empty;                          var style = string.Empty;                          var actor = string.Empty;                          var effect = string.Empty;                          var layer = 0;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexStyle)                                  style = splittedLine[i].Trim();                              else if (i == indexActor)                                  actor = splittedLine[i].Trim();                              else if (i == indexEffect)                                  effect = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i].Trim()' out layer);                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(actor))                                  p.Actor = actor;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted && !fontsStarted && !graphicsStarted)                      header.AppendLine(line);                    if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith(';'))                  {                      // skip empty and comment lines                  }                  else if (line.TrimStart().StartsWith("dialog:"' StringComparison.OrdinalIgnoreCase) || line.TrimStart().StartsWith("dialogue:"' StringComparison.OrdinalIgnoreCase)) // fix faulty font tags...                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                  else if (line.Trim().Equals("[fonts]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = true;                      graphicsStarted = false;                      footer.AppendLine();                      footer.AppendLine("[Fonts]");                  }                  else if (line.Trim().Equals("[graphics]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = false;                      graphicsStarted = true;                      footer.AppendLine();                      footer.AppendLine("[Graphics]");                  }                  else if (fontsStarted)                  {                      footer.AppendLine(line);                  }                  else if (graphicsStarted)                  {                      footer.AppendLine(line);                  }                  else if (eventsStarted)                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                                  else if (format[i].Trim().Equals("actor"' StringComparison.OrdinalIgnoreCase))                                      indexActor = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          var text = string.Empty;                          var start = string.Empty;                          var end = string.Empty;                          var style = string.Empty;                          var actor = string.Empty;                          var effect = string.Empty;                          var layer = 0;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexStyle)                                  style = splittedLine[i].Trim();                              else if (i == indexActor)                                  actor = splittedLine[i].Trim();                              else if (i == indexEffect)                                  effect = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i].Trim()' out layer);                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(actor))                                  p.Actor = actor;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted && !fontsStarted && !graphicsStarted)                      header.AppendLine(line);                    if (string.IsNullOrWhiteSpace(line) || line.TrimStart().StartsWith(';'))                  {                      // skip empty and comment lines                  }                  else if (line.TrimStart().StartsWith("dialog:"' StringComparison.OrdinalIgnoreCase) || line.TrimStart().StartsWith("dialogue:"' StringComparison.OrdinalIgnoreCase)) // fix faulty font tags...                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                      fontsStarted = false;                      graphicsStarted = false;                  }                  else if (line.Trim().Equals("[fonts]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = true;                      graphicsStarted = false;                      footer.AppendLine();                      footer.AppendLine("[Fonts]");                  }                  else if (line.Trim().Equals("[graphics]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = false;                      fontsStarted = false;                      graphicsStarted = true;                      footer.AppendLine();                      footer.AppendLine("[Graphics]");                  }                  else if (fontsStarted)                  {                      footer.AppendLine(line);                  }                  else if (graphicsStarted)                  {                      footer.AppendLine(line);                  }                  else if (eventsStarted)                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                                  else if (format[i].Trim().Equals("actor"' StringComparison.OrdinalIgnoreCase))                                      indexActor = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          var text = string.Empty;                          var start = string.Empty;                          var end = string.Empty;                          var style = string.Empty;                          var actor = string.Empty;                          var effect = string.Empty;                          var layer = 0;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexStyle)                                  style = splittedLine[i].Trim();                              else if (i == indexActor)                                  actor = splittedLine[i].Trim();                              else if (i == indexEffect)                                  effect = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i].Trim()' out layer);                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(actor))                                  p.Actor = actor;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,RemoveNativeFormatting,The following statement contains a magic number: if (newFormat != null && newFormat.Name == SubStationAlpha.NameOfFormat)              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      string s = p.Text;                      if (s.Contains('{') && s.Contains('}'))                      {                          s = s.Replace(@"\u0"' string.Empty);                          s = s.Replace(@"\u1"' string.Empty);                          s = s.Replace(@"\s0"' string.Empty);                          s = s.Replace(@"\s1"' string.Empty);                          s = s.Replace(@"\be0"' string.Empty);                          s = s.Replace(@"\be1"' string.Empty);                            s = RemoveTag(s' "shad");                          s = RemoveTag(s' "fsc");                          s = RemoveTag(s' "fsp");                          s = RemoveTag(s' "fr");                            s = RemoveTag(s' "t(");                          s = RemoveTag(s' "move(");                          s = RemoveTag(s' "Position(");                          s = RemoveTag(s' "org(");                          s = RemoveTag(s' "fade(");                          s = RemoveTag(s' "fad(");                          s = RemoveTag(s' "clip(");                          s = RemoveTag(s' "pbo(");                            // TODO: Alignment tags                            s = s.Replace("{}"' string.Empty);                            p.Text = s;                      }                  }              }              else              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      int indexOfBegin = p.Text.IndexOf('{');                      string pre = string.Empty;                      while (indexOfBegin >= 0 && p.Text.IndexOf('}') > indexOfBegin)                      {                          string s = p.Text.Substring(indexOfBegin);                          if (s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 6);                          }                          else if (s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 5) + "}";                          }                          int indexOfEnd = p.Text.IndexOf('}');                          p.Text = p.Text.Remove(indexOfBegin' (indexOfEnd - indexOfBegin) + 1);                            indexOfBegin = p.Text.IndexOf('{');                      }                      p.Text = pre + p.Text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,RemoveNativeFormatting,The following statement contains a magic number: if (newFormat != null && newFormat.Name == SubStationAlpha.NameOfFormat)              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      string s = p.Text;                      if (s.Contains('{') && s.Contains('}'))                      {                          s = s.Replace(@"\u0"' string.Empty);                          s = s.Replace(@"\u1"' string.Empty);                          s = s.Replace(@"\s0"' string.Empty);                          s = s.Replace(@"\s1"' string.Empty);                          s = s.Replace(@"\be0"' string.Empty);                          s = s.Replace(@"\be1"' string.Empty);                            s = RemoveTag(s' "shad");                          s = RemoveTag(s' "fsc");                          s = RemoveTag(s' "fsp");                          s = RemoveTag(s' "fr");                            s = RemoveTag(s' "t(");                          s = RemoveTag(s' "move(");                          s = RemoveTag(s' "Position(");                          s = RemoveTag(s' "org(");                          s = RemoveTag(s' "fade(");                          s = RemoveTag(s' "fad(");                          s = RemoveTag(s' "clip(");                          s = RemoveTag(s' "pbo(");                            // TODO: Alignment tags                            s = s.Replace("{}"' string.Empty);                            p.Text = s;                      }                  }              }              else              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      int indexOfBegin = p.Text.IndexOf('{');                      string pre = string.Empty;                      while (indexOfBegin >= 0 && p.Text.IndexOf('}') > indexOfBegin)                      {                          string s = p.Text.Substring(indexOfBegin);                          if (s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 6);                          }                          else if (s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 5) + "}";                          }                          int indexOfEnd = p.Text.IndexOf('}');                          p.Text = p.Text.Remove(indexOfBegin' (indexOfEnd - indexOfBegin) + 1);                            indexOfBegin = p.Text.IndexOf('{');                      }                      p.Text = pre + p.Text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length < 7)              {                  while (s.Length < 7)                      s = s.Insert(1' "0");              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length < 7)              {                  while (s.Length < 7)                      s = s.Insert(1' "0");              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 7)              {                  s = s.Substring(1);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      return ColorTranslator.FromHtml(hexColor);                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (s.StartsWith('h') && s.Length == 9)              {                  s = s.Substring(3);                  string hexColor = "#" + s.Substring(4' 2) + s.Substring(2' 2) + s.Substring(0' 2);                  try                  {                      var c = ColorTranslator.FromHtml(hexColor);                        return c;                  }                  catch                  {                      return defaultColor;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaColor,The following statement contains a magic number: if (int.TryParse(f' out number))              {                  Color temp = Color.FromArgb(number);                  return Color.FromArgb(255' temp.B' temp.G' temp.R);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,CheckForErrors,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.Substring(8).ToLower().Split(''');                          styleCount = format.Length;                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          string rawLine = line;                          var format = line.Substring(6).Split(''');                            if (format.Length != styleCount)                          {                              sb.AppendLine("Number of expected Style elements do not match number of Format elements: " + rawLine);                              sb.AppendLine();                          }                          else                          {                              Color dummyColor = Color.FromArgb(9' 14' 16' 26);                              for (int i = 0; i < format.Length; i++)                              {                                  string f = format[i].Trim().ToLower();                                  if (i == nameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Name' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontNameIndex)                                  {                                      if (f.Length == 0)                                      {                                          sb.AppendLine("'Fontname' is empty: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == fontsizeIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Fontsize' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == primaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor || f == "&h")                                      {                                          sb.AppendLine("'PrimaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == secondaryColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'SecondaryColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'OutlineColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == backColourIndex)                                  {                                      if (GetSsaColor(f' dummyColor) == dummyColor)                                      {                                          sb.AppendLine("'BackColour' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == boldIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Bold' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == italicIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Italic' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == underlineIndex)                                  {                                      if (Utilities.AllLetters.Contains(f))                                      {                                          sb.AppendLine("'Underline' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == outlineIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Outline' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == shadowIndex)                                  {                                      float number;                                      if (!float.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'Shadow' (width) incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == alignmentIndex)                                  {                                      if (!"101123456789 ".Contains(f))                                      {                                          sb.AppendLine("'Alignment' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginLIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginL' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginRIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginR' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == marginVIndex)                                  {                                      int number;                                      if (!int.TryParse(f' out number) || f.StartsWith('-'))                                      {                                          sb.AppendLine("'MarginV' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                                  else if (i == borderStyleIndex)                                  {                                      if (f.Length != 0 && !"123".Contains(f))                                      {                                          sb.AppendLine("'BorderStyle' incorrect: " + rawLine);                                          sb.AppendLine();                                      }                                  }                              }                          }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaStyle,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.ToLower().Substring(8).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "tertiarycolour")                                  tertiaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          style.RawLine = line;                          var format = line.Substring(6).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (i == nameIndex)                              {                                  style.Name = format[i].Trim();                              }                              else if (i == fontNameIndex)                              {                                  style.FontName = f;                              }                              else if (i == fontsizeIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.FontSize = number;                              }                              else if (i == primaryColourIndex)                              {                                  style.Primary = GetSsaColor(f' Color.White);                              }                              else if (i == secondaryColourIndex)                              {                                  style.Secondary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == tertiaryColourIndex)                              {                                  style.Tertiary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == outlineColourIndex)                              {                                  style.Outline = GetSsaColor(f' Color.Black);                              }                              else if (i == backColourIndex)                              {                                  style.Background = GetSsaColor(f' Color.Black);                              }                              else if (i == boldIndex)                              {                                  style.Bold = f == "1";                              }                              else if (i == italicIndex)                              {                                  style.Italic = f == "1";                              }                              else if (i == underlineIndex)                              {                                  style.Underline = f == "1";                              }                              else if (i == outlineIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.OutlineWidth = number;                              }                              else if (i == shadowIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.ShadowWidth = number;                              }                              else if (i == alignmentIndex)                              {                                  style.Alignment = f;                              }                              else if (i == marginLIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginLeft = number;                              }                              else if (i == marginRIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginRight = number;                              }                              else if (i == marginVIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginVertical = number;                              }                              else if (i == borderStyleIndex)                              {                                  style.BorderStyle = f;                              }                          }                      }                      if (styleName != null && style.Name != null && styleName.Equals(style.Name' StringComparison.OrdinalIgnoreCase))                      {                          style.LoadedFromHeader = true;                          return style;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaStyle,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.ToLower().Substring(8).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "tertiarycolour")                                  tertiaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          style.RawLine = line;                          var format = line.Substring(6).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (i == nameIndex)                              {                                  style.Name = format[i].Trim();                              }                              else if (i == fontNameIndex)                              {                                  style.FontName = f;                              }                              else if (i == fontsizeIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.FontSize = number;                              }                              else if (i == primaryColourIndex)                              {                                  style.Primary = GetSsaColor(f' Color.White);                              }                              else if (i == secondaryColourIndex)                              {                                  style.Secondary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == tertiaryColourIndex)                              {                                  style.Tertiary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == outlineColourIndex)                              {                                  style.Outline = GetSsaColor(f' Color.Black);                              }                              else if (i == backColourIndex)                              {                                  style.Background = GetSsaColor(f' Color.Black);                              }                              else if (i == boldIndex)                              {                                  style.Bold = f == "1";                              }                              else if (i == italicIndex)                              {                                  style.Italic = f == "1";                              }                              else if (i == underlineIndex)                              {                                  style.Underline = f == "1";                              }                              else if (i == outlineIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.OutlineWidth = number;                              }                              else if (i == shadowIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.ShadowWidth = number;                              }                              else if (i == alignmentIndex)                              {                                  style.Alignment = f;                              }                              else if (i == marginLIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginLeft = number;                              }                              else if (i == marginRIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginRight = number;                              }                              else if (i == marginVIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginVertical = number;                              }                              else if (i == borderStyleIndex)                              {                                  style.BorderStyle = f;                              }                          }                      }                      if (styleName != null && style.Name != null && styleName.Equals(style.Name' StringComparison.OrdinalIgnoreCase))                      {                          style.LoadedFromHeader = true;                          return style;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaStyle,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.ToLower().Substring(8).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "tertiarycolour")                                  tertiaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          style.RawLine = line;                          var format = line.Substring(6).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (i == nameIndex)                              {                                  style.Name = format[i].Trim();                              }                              else if (i == fontNameIndex)                              {                                  style.FontName = f;                              }                              else if (i == fontsizeIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.FontSize = number;                              }                              else if (i == primaryColourIndex)                              {                                  style.Primary = GetSsaColor(f' Color.White);                              }                              else if (i == secondaryColourIndex)                              {                                  style.Secondary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == tertiaryColourIndex)                              {                                  style.Tertiary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == outlineColourIndex)                              {                                  style.Outline = GetSsaColor(f' Color.Black);                              }                              else if (i == backColourIndex)                              {                                  style.Background = GetSsaColor(f' Color.Black);                              }                              else if (i == boldIndex)                              {                                  style.Bold = f == "1";                              }                              else if (i == italicIndex)                              {                                  style.Italic = f == "1";                              }                              else if (i == underlineIndex)                              {                                  style.Underline = f == "1";                              }                              else if (i == outlineIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.OutlineWidth = number;                              }                              else if (i == shadowIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.ShadowWidth = number;                              }                              else if (i == alignmentIndex)                              {                                  style.Alignment = f;                              }                              else if (i == marginLIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginLeft = number;                              }                              else if (i == marginRIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginRight = number;                              }                              else if (i == marginVIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginVertical = number;                              }                              else if (i == borderStyleIndex)                              {                                  style.BorderStyle = f;                              }                          }                      }                      if (styleName != null && style.Name != null && styleName.Equals(style.Name' StringComparison.OrdinalIgnoreCase))                      {                          style.LoadedFromHeader = true;                          return style;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,GetSsaStyle,The following statement contains a magic number: foreach (string line in header.SplitToLines())              {                  string s = line.Trim().ToLower();                  if (s.StartsWith("format:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          var format = line.ToLower().Substring(8).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (f == "name")                                  nameIndex = i;                              else if (f == "fontname")                                  fontNameIndex = i;                              else if (f == "fontsize")                                  fontsizeIndex = i;                              else if (f == "primarycolour")                                  primaryColourIndex = i;                              else if (f == "secondarycolour")                                  secondaryColourIndex = i;                              else if (f == "tertiarycolour")                                  tertiaryColourIndex = i;                              else if (f == "outlinecolour")                                  outlineColourIndex = i;                              else if (f == "backcolour")                                  backColourIndex = i;                              else if (f == "bold")                                  boldIndex = i;                              else if (f == "italic")                                  italicIndex = i;                              else if (f == "underline")                                  underlineIndex = i;                              else if (f == "outline")                                  outlineIndex = i;                              else if (f == "shadow")                                  shadowIndex = i;                              else if (f == "alignment")                                  alignmentIndex = i;                              else if (f == "marginl")                                  marginLIndex = i;                              else if (f == "marginr")                                  marginRIndex = i;                              else if (f == "marginv")                                  marginVIndex = i;                              else if (f == "borderstyle")                                  borderStyleIndex = i;                          }                      }                  }                  else if (s.Replace(" "' string.Empty).StartsWith("style:"' StringComparison.Ordinal))                  {                      if (line.Length > 10)                      {                          style.RawLine = line;                          var format = line.Substring(6).Split(''');                          for (int i = 0; i < format.Length; i++)                          {                              string f = format[i].Trim().ToLower();                              if (i == nameIndex)                              {                                  style.Name = format[i].Trim();                              }                              else if (i == fontNameIndex)                              {                                  style.FontName = f;                              }                              else if (i == fontsizeIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.FontSize = number;                              }                              else if (i == primaryColourIndex)                              {                                  style.Primary = GetSsaColor(f' Color.White);                              }                              else if (i == secondaryColourIndex)                              {                                  style.Secondary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == tertiaryColourIndex)                              {                                  style.Tertiary = GetSsaColor(f' Color.Yellow);                              }                              else if (i == outlineColourIndex)                              {                                  style.Outline = GetSsaColor(f' Color.Black);                              }                              else if (i == backColourIndex)                              {                                  style.Background = GetSsaColor(f' Color.Black);                              }                              else if (i == boldIndex)                              {                                  style.Bold = f == "1";                              }                              else if (i == italicIndex)                              {                                  style.Italic = f == "1";                              }                              else if (i == underlineIndex)                              {                                  style.Underline = f == "1";                              }                              else if (i == outlineIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.OutlineWidth = number;                              }                              else if (i == shadowIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.ShadowWidth = number;                              }                              else if (i == alignmentIndex)                              {                                  style.Alignment = f;                              }                              else if (i == marginLIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginLeft = number;                              }                              else if (i == marginRIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginRight = number;                              }                              else if (i == marginVIndex)                              {                                  int number;                                  if (int.TryParse(f' out number))                                      style.MarginVertical = number;                              }                              else if (i == borderStyleIndex)                              {                                  style.BorderStyle = f;                              }                          }                      }                      if (styleName != null && style.Name != null && styleName.Equals(style.Name' StringComparison.OrdinalIgnoreCase))                      {                          style.LoadedFromHeader = true;                          return style;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,LoadSubtitle,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  _lineNumber++;                  string line = lines[i].TrimEnd();                  line = line.Trim('\u007F'); // 127=delete acscii                    string next = string.Empty;                  if (i + 1 < lines.Count)                      next = lines[i + 1];                    string nextNext = string.Empty;                  if (i + 2 < lines.Count)                      nextNext = lines[i + 2];                    // A new line is missing between two paragraphs (buggy srt file)                  if (_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      RegexTimeCodes.IsMatch(lines[i + 1]))                  {                      ReadLine(subtitle' string.Empty' string.Empty' string.Empty);                  }                  if (_expecting == ExpectingLine.Number && RegexTimeCodes.IsMatch(line))                  {                      _expecting = ExpectingLine.TimeCodes;                      doRenum = true;                  }                    ReadLine(subtitle' line' next' nextNext);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,LoadSubtitle,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  _lineNumber++;                  string line = lines[i].TrimEnd();                  line = line.Trim('\u007F'); // 127=delete acscii                    string next = string.Empty;                  if (i + 1 < lines.Count)                      next = lines[i + 1];                    string nextNext = string.Empty;                  if (i + 2 < lines.Count)                      nextNext = lines[i + 2];                    // A new line is missing between two paragraphs (buggy srt file)                  if (_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      RegexTimeCodes.IsMatch(lines[i + 1]))                  {                      ReadLine(subtitle' string.Empty' string.Empty' string.Empty);                  }                  if (_expecting == ExpectingLine.Number && RegexTimeCodes.IsMatch(line))                  {                      _expecting = ExpectingLine.TimeCodes;                      doRenum = true;                  }                    ReadLine(subtitle' line' next' nextNext);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The following statement contains a magic number: switch (_expecting)              {                  case ExpectingLine.Number:                      int number;                      if (int.TryParse(line' out number))                      {                          _paragraph.Number = number;                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_lastParagraph != null && nextNext != null && (_lastParagraph.Number + 1).ToString(CultureInfo.InvariantCulture) == nextNext)                          {                              _lastParagraph.Text = (_lastParagraph.Text + Environment.NewLine + line.Trim()).Trim();                          }                          else                          {                              if (_errors.Length < 2000)                                  _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                              _errorCount++;                          }                      }                      break;                  case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_errors.Length < 2000)                              _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                  case ExpectingLine.Text:                      if (!string.IsNullOrWhiteSpace(line))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || RegexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _lastParagraph = _paragraph;                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _lastParagraph = _paragraph;                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The following statement contains a magic number: switch (_expecting)              {                  case ExpectingLine.Number:                      int number;                      if (int.TryParse(line' out number))                      {                          _paragraph.Number = number;                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_lastParagraph != null && nextNext != null && (_lastParagraph.Number + 1).ToString(CultureInfo.InvariantCulture) == nextNext)                          {                              _lastParagraph.Text = (_lastParagraph.Text + Environment.NewLine + line.Trim()).Trim();                          }                          else                          {                              if (_errors.Length < 2000)                                  _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                              _errorCount++;                          }                      }                      break;                  case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_errors.Length < 2000)                              _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                  case ExpectingLine.Text:                      if (!string.IsNullOrWhiteSpace(line))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || RegexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _lastParagraph = _paragraph;                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _lastParagraph = _paragraph;                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && (line[8] == ':' || line[8] == ';'))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && (line[8] == ':' || line[8] == ';'))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && (line[8] == ':' || line[8] == ';'))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && (line[8] == ':' || line[8] == ';'))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && (line[8] == ':' || line[8] == ';'))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && (line[25] == ':' || line[25] == ';'))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (RegexTimeCodes.IsMatch(line) || RegexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                        paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      if (parts[0].StartsWith('-') && paragraph.StartTime.TotalMilliseconds > 0)                          paragraph.StartTime.TotalMilliseconds = paragraph.StartTime.TotalMilliseconds * -1;                        paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      if (parts[4].StartsWith('-') && paragraph.EndTime.TotalMilliseconds > 0)                          paragraph.EndTime.TotalMilliseconds = paragraph.EndTime.TotalMilliseconds * -1;                        return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The following statement contains a magic number: if (isValidAssHeader)              {                  sb.AppendLine(subtitle.Header.Trim());                  const string formatLine = "Format: Marked' Start' End' Style' Name' MarginL' MarginR' MarginV' Effect' Text";                  if (!subtitle.Header.Contains(formatLine))                      sb.AppendLine(formatLine);                  styles = AdvancedSubStationAlpha.GetStylesFromHeader(subtitle.Header);              }              else if (!string.IsNullOrEmpty(subtitle.Header) && subtitle.Header.Contains("[V4+ Styles]"))              {                  LoadStylesFromAdvancedSubstationAlpha(subtitle' title' subtitle.Header' headerNoStyles' sb);              }              else              {                  sb.AppendLine(string.Format(header'                                              title'                                              "Arial"'                                              20'                                              ColorTranslator.ToWin32(fontColor)'                                              2'                                              1                                              ));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The following statement contains a magic number: if (isValidAssHeader)              {                  sb.AppendLine(subtitle.Header.Trim());                  const string formatLine = "Format: Marked' Start' End' Style' Name' MarginL' MarginR' MarginV' Effect' Text";                  if (!subtitle.Header.Contains(formatLine))                      sb.AppendLine(formatLine);                  styles = AdvancedSubStationAlpha.GetStylesFromHeader(subtitle.Header);              }              else if (!string.IsNullOrEmpty(subtitle.Header) && subtitle.Header.Contains("[V4+ Styles]"))              {                  LoadStylesFromAdvancedSubstationAlpha(subtitle' title' subtitle.Header' headerNoStyles' sb);              }              else              {                  sb.AppendLine(string.Format(header'                                              title'                                              "Arial"'                                              20'                                              ColorTranslator.ToWin32(fontColor)'                                              2'                                              1                                              ));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The following statement contains a magic number: foreach (Paragraph p in subtitle.Paragraphs)              {                  string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10);                  string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10);                  string style = "Default";                  string actor = "NTP";                  if (!string.IsNullOrEmpty(p.Actor))                      actor = p.Actor;                  string effect = "";                  if (!string.IsNullOrEmpty(p.Effect))                      effect = p.Effect;                  if (!string.IsNullOrEmpty(p.Extra) && isValidAssHeader && styles.Contains(p.Extra))                      style = p.Extra;                  if (style == "Default")                      style = "*Default";                  if (p.IsComment)                      sb.AppendLine(string.Format(commentWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect));                  else                      sb.AppendLine(string.Format(paragraphWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,ToText,The following statement contains a magic number: foreach (Paragraph p in subtitle.Paragraphs)              {                  string start = string.Format(timeCodeFormat' p.StartTime.Hours' p.StartTime.Minutes' p.StartTime.Seconds' p.StartTime.Milliseconds / 10);                  string end = string.Format(timeCodeFormat' p.EndTime.Hours' p.EndTime.Minutes' p.EndTime.Seconds' p.EndTime.Milliseconds / 10);                  string style = "Default";                  string actor = "NTP";                  if (!string.IsNullOrEmpty(p.Actor))                      actor = p.Actor;                  string effect = "";                  if (!string.IsNullOrEmpty(p.Effect))                      effect = p.Effect;                  if (!string.IsNullOrEmpty(p.Extra) && isValidAssHeader && styles.Contains(p.Extra))                      style = p.Extra;                  if (style == "Default")                      style = "*Default";                  if (p.IsComment)                      sb.AppendLine(string.Format(commentWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect));                  else                      sb.AppendLine(string.Format(paragraphWriteFormat' start' end' AdvancedSubStationAlpha.FormatText(p)' style' p.Layer' actor' effect));              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexEnd = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexStyle = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: const int indexName = 4;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexEffect = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: int indexText = 9;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted)                      header.AppendLine(line);                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                  }                  else if (!string.IsNullOrEmpty(line) && line.TrimStart().StartsWith(';'))                  {                      // skip comment lines                  }                  else if (eventsStarted && !string.IsNullOrWhiteSpace(line))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                                  else if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          string text = string.Empty;                          string start = string.Empty;                          string end = string.Empty;                          string style = string.Empty;                          var layer = 0;                          string effect = string.Empty;                          string name = string.Empty;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i]' out layer);                              else if (i == indexEffect)                                  effect = splittedLine[i];                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i == indexStyle)                                  style = splittedLine[i];                              else if (i == indexName)                                  name = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = AdvancedSubStationAlpha.GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              if (!string.IsNullOrEmpty(name))                                  p.Actor = name;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                                                    }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted)                      header.AppendLine(line);                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                  }                  else if (!string.IsNullOrEmpty(line) && line.TrimStart().StartsWith(';'))                  {                      // skip comment lines                  }                  else if (eventsStarted && !string.IsNullOrWhiteSpace(line))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                                  else if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          string text = string.Empty;                          string start = string.Empty;                          string end = string.Empty;                          string style = string.Empty;                          var layer = 0;                          string effect = string.Empty;                          string name = string.Empty;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i]' out layer);                              else if (i == indexEffect)                                  effect = splittedLine[i];                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i == indexStyle)                                  style = splittedLine[i];                              else if (i == indexName)                                  name = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = AdvancedSubStationAlpha.GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              if (!string.IsNullOrEmpty(name))                                  p.Actor = name;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                                                    }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted)                      header.AppendLine(line);                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                  }                  else if (!string.IsNullOrEmpty(line) && line.TrimStart().StartsWith(';'))                  {                      // skip comment lines                  }                  else if (eventsStarted && !string.IsNullOrWhiteSpace(line))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                                  else if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          string text = string.Empty;                          string start = string.Empty;                          string end = string.Empty;                          string style = string.Empty;                          var layer = 0;                          string effect = string.Empty;                          string name = string.Empty;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i]' out layer);                              else if (i == indexEffect)                                  effect = splittedLine[i];                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i == indexStyle)                                  style = splittedLine[i];                              else if (i == indexName)                                  name = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = AdvancedSubStationAlpha.GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              if (!string.IsNullOrEmpty(name))                                  p.Actor = name;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                                                    }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadSubtitle,The following statement contains a magic number: foreach (string line in lines)              {                  lineNumber++;                  if (!eventsStarted)                      header.AppendLine(line);                    if (line.Trim().Equals("[events]"' StringComparison.OrdinalIgnoreCase))                  {                      eventsStarted = true;                  }                  else if (!string.IsNullOrEmpty(line) && line.TrimStart().StartsWith(';'))                  {                      // skip comment lines                  }                  else if (eventsStarted && !string.IsNullOrWhiteSpace(line))                  {                      string s = line.Trim().ToLower();                      if (s.StartsWith("format:"' StringComparison.Ordinal))                      {                          if (line.Length > 10)                          {                              format = line.ToLower().Substring(8).Split(''');                              for (int i = 0; i < format.Length; i++)                              {                                  if (format[i].Trim().Equals("layer"' StringComparison.OrdinalIgnoreCase))                                      indexLayer = i;                                  else if (format[i].Trim().Equals("start"' StringComparison.OrdinalIgnoreCase))                                      indexStart = i;                                  else if (format[i].Trim().Equals("end"' StringComparison.OrdinalIgnoreCase))                                      indexEnd = i;                                  else if (format[i].Trim().Equals("text"' StringComparison.OrdinalIgnoreCase))                                      indexText = i;                                  else if (format[i].Trim().Equals("effect"' StringComparison.OrdinalIgnoreCase))                                      indexEffect = i;                                  else if (format[i].Trim().Equals("style"' StringComparison.OrdinalIgnoreCase))                                      indexStyle = i;                              }                          }                      }                      else if (!string.IsNullOrEmpty(s))                      {                          string text = string.Empty;                          string start = string.Empty;                          string end = string.Empty;                          string style = string.Empty;                          var layer = 0;                          string effect = string.Empty;                          string name = string.Empty;                            string[] splittedLine;                          if (s.StartsWith("dialog:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 7).Split(''');                          else if (s.StartsWith("dialogue:"' StringComparison.Ordinal))                              splittedLine = line.Remove(0' 9).Split(''');                          else                              splittedLine = line.Split(''');                            for (int i = 0; i < splittedLine.Length; i++)                          {                              if (i == indexStart)                                  start = splittedLine[i].Trim();                              else if (i == indexEnd)                                  end = splittedLine[i].Trim();                              else if (i == indexLayer)                                  int.TryParse(splittedLine[i]' out layer);                              else if (i == indexEffect)                                  effect = splittedLine[i];                              else if (i == indexText)                                  text = splittedLine[i];                              else if (i == indexStyle)                                  style = splittedLine[i];                              else if (i == indexName)                                  name = splittedLine[i];                              else if (i > indexText)                                  text += "'" + splittedLine[i];                          }                            try                          {                              var p = new Paragraph                              {                                  StartTime = GetTimeCodeFromString(start)'                                  EndTime = GetTimeCodeFromString(end)'                                  Text = AdvancedSubStationAlpha.GetFormattedText(text)                              };                                if (!string.IsNullOrEmpty(style))                                  p.Extra = style;                              if (!string.IsNullOrEmpty(effect))                                  p.Effect = effect;                              p.Layer = layer;                              if (!string.IsNullOrEmpty(name))                                  p.Actor = name;                              p.IsComment = s.StartsWith("comment:"' StringComparison.Ordinal);                              subtitle.Paragraphs.Add(p);                          }                          catch                          {                              _errorCount++;                                                    }                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,GetTimeCodeFromString,The following statement contains a magic number: return new TimeCode(int.Parse(timeCode[0])'                                  int.Parse(timeCode[1])'                                  int.Parse(timeCode[2])'                                  int.Parse(timeCode[3]) * 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The following statement contains a magic number: if (newFormat != null && newFormat.Name == AdvancedSubStationAlpha.NameOfFormat)              {                  // do we need any conversion?              }              else              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      int indexOfBegin = p.Text.IndexOf('{');                      string pre = string.Empty;                      while (indexOfBegin >= 0 && p.Text.IndexOf('}') > indexOfBegin)                      {                          string s = p.Text.Substring(indexOfBegin);                          if (s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 6);                          }                          else if (s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 5) + "}";                          }                          else if (s.StartsWith("{\\a1}"' StringComparison.Ordinal) || s.StartsWith("{\\a1\\"' StringComparison.Ordinal) ||                                   s.StartsWith("{\\a3}"' StringComparison.Ordinal) || s.StartsWith("{\\a3\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 4) + "}";                          }                          else if (s.StartsWith("{\\a9}"' StringComparison.Ordinal) || s.StartsWith("{\\a9\\"' StringComparison.Ordinal))                          {                              pre = "{\\an4}";                          }                          else if (s.StartsWith("{\\a10}"' StringComparison.Ordinal) || s.StartsWith("{\\a10\\"' StringComparison.Ordinal))                          {                              pre = "{\\an5}";                          }                          else if (s.StartsWith("{\\a11}"' StringComparison.Ordinal) || s.StartsWith("{\\a11\\"' StringComparison.Ordinal))                          {                              pre = "{\\an6}";                          }                          else if (s.StartsWith("{\\a5}"' StringComparison.Ordinal) || s.StartsWith("{\\a5\\"' StringComparison.Ordinal))                          {                              pre = "{\\an7}";                          }                          else if (s.StartsWith("{\\a6}"' StringComparison.Ordinal) || s.StartsWith("{\\a6\\"' StringComparison.Ordinal))                          {                              pre = "{\\an8}";                          }                          else if (s.StartsWith("{\\a7}"' StringComparison.Ordinal) || s.StartsWith("{\\a7\\"' StringComparison.Ordinal))                          {                              pre = "{\\an9}";                          }                          int indexOfEnd = p.Text.IndexOf('}');                          p.Text = p.Text.Remove(indexOfBegin' (indexOfEnd - indexOfBegin) + 1);                            indexOfBegin = p.Text.IndexOf('{');                      }                      p.Text = pre + p.Text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The following statement contains a magic number: if (newFormat != null && newFormat.Name == AdvancedSubStationAlpha.NameOfFormat)              {                  // do we need any conversion?              }              else              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      int indexOfBegin = p.Text.IndexOf('{');                      string pre = string.Empty;                      while (indexOfBegin >= 0 && p.Text.IndexOf('}') > indexOfBegin)                      {                          string s = p.Text.Substring(indexOfBegin);                          if (s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 6);                          }                          else if (s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 5) + "}";                          }                          else if (s.StartsWith("{\\a1}"' StringComparison.Ordinal) || s.StartsWith("{\\a1\\"' StringComparison.Ordinal) ||                                   s.StartsWith("{\\a3}"' StringComparison.Ordinal) || s.StartsWith("{\\a3\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 4) + "}";                          }                          else if (s.StartsWith("{\\a9}"' StringComparison.Ordinal) || s.StartsWith("{\\a9\\"' StringComparison.Ordinal))                          {                              pre = "{\\an4}";                          }                          else if (s.StartsWith("{\\a10}"' StringComparison.Ordinal) || s.StartsWith("{\\a10\\"' StringComparison.Ordinal))                          {                              pre = "{\\an5}";                          }                          else if (s.StartsWith("{\\a11}"' StringComparison.Ordinal) || s.StartsWith("{\\a11\\"' StringComparison.Ordinal))                          {                              pre = "{\\an6}";                          }                          else if (s.StartsWith("{\\a5}"' StringComparison.Ordinal) || s.StartsWith("{\\a5\\"' StringComparison.Ordinal))                          {                              pre = "{\\an7}";                          }                          else if (s.StartsWith("{\\a6}"' StringComparison.Ordinal) || s.StartsWith("{\\a6\\"' StringComparison.Ordinal))                          {                              pre = "{\\an8}";                          }                          else if (s.StartsWith("{\\a7}"' StringComparison.Ordinal) || s.StartsWith("{\\a7\\"' StringComparison.Ordinal))                          {                              pre = "{\\an9}";                          }                          int indexOfEnd = p.Text.IndexOf('}');                          p.Text = p.Text.Remove(indexOfBegin' (indexOfEnd - indexOfBegin) + 1);                            indexOfBegin = p.Text.IndexOf('{');                      }                      p.Text = pre + p.Text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,RemoveNativeFormatting,The following statement contains a magic number: if (newFormat != null && newFormat.Name == AdvancedSubStationAlpha.NameOfFormat)              {                  // do we need any conversion?              }              else              {                  foreach (Paragraph p in subtitle.Paragraphs)                  {                      int indexOfBegin = p.Text.IndexOf('{');                      string pre = string.Empty;                      while (indexOfBegin >= 0 && p.Text.IndexOf('}') > indexOfBegin)                      {                          string s = p.Text.Substring(indexOfBegin);                          if (s.StartsWith("{\\an1}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8}"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9}"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 6);                          }                          else if (s.StartsWith("{\\an1\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an2\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an3\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an4\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an5\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an6\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an7\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an8\\"' StringComparison.Ordinal) ||                              s.StartsWith("{\\an9\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 5) + "}";                          }                          else if (s.StartsWith("{\\a1}"' StringComparison.Ordinal) || s.StartsWith("{\\a1\\"' StringComparison.Ordinal) ||                                   s.StartsWith("{\\a3}"' StringComparison.Ordinal) || s.StartsWith("{\\a3\\"' StringComparison.Ordinal))                          {                              pre = s.Substring(0' 4) + "}";                          }                          else if (s.StartsWith("{\\a9}"' StringComparison.Ordinal) || s.StartsWith("{\\a9\\"' StringComparison.Ordinal))                          {                              pre = "{\\an4}";                          }                          else if (s.StartsWith("{\\a10}"' StringComparison.Ordinal) || s.StartsWith("{\\a10\\"' StringComparison.Ordinal))                          {                              pre = "{\\an5}";                          }                          else if (s.StartsWith("{\\a11}"' StringComparison.Ordinal) || s.StartsWith("{\\a11\\"' StringComparison.Ordinal))                          {                              pre = "{\\an6}";                          }                          else if (s.StartsWith("{\\a5}"' StringComparison.Ordinal) || s.StartsWith("{\\a5\\"' StringComparison.Ordinal))                          {                              pre = "{\\an7}";                          }                          else if (s.StartsWith("{\\a6}"' StringComparison.Ordinal) || s.StartsWith("{\\a6\\"' StringComparison.Ordinal))                          {                              pre = "{\\an8}";                          }                          else if (s.StartsWith("{\\a7}"' StringComparison.Ordinal) || s.StartsWith("{\\a7\\"' StringComparison.Ordinal))                          {                              pre = "{\\an9}";                          }                          int indexOfEnd = p.Text.IndexOf('}');                          p.Text = p.Text.Remove(indexOfBegin' (indexOfEnd - indexOfBegin) + 1);                            indexOfBegin = p.Text.IndexOf('{');                      }                      p.Text = pre + p.Text;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,MillisecondsToFrames,The following statement contains a magic number: return (int)Math.Round(milliseconds / (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,MillisecondsToFramesMaxFrameRate,The following statement contains a magic number: int frames = (int)Math.Round(milliseconds / (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,MillisecondsToFramesMaxFrameRate,The following statement contains a magic number: if (frames >= Configuration.CurrentFrameRate)                  frames = (int)(Configuration.CurrentFrameRate - 0.01);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,FramesToMilliseconds,The following statement contains a magic number: return (int)Math.Round(frames * (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,FramesToMillisecondsMax999,The following statement contains a magic number: int ms = (int)Math.Round(frames * (1000.0 / Configuration.CurrentFrameRate));
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,FramesToMillisecondsMax999,The following statement contains a magic number: if (ms > 999)                  ms = 999;
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubtitleFormat,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubtitleFormat.cs,FramesToMillisecondsMax999,The following statement contains a magic number: if (ms > 999)                  ms = 999;
Missing Default,Nikse.SubtitleEdit.PluginLogic.Controls,SubtitleListView,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Controls\SubtitleListView.cs,SubtitleListView_DrawSubItem,The following switch statement is missing a default case: switch (e.Header.TextAlign)                  {                      case HorizontalAlignment.Center:                          sf.Alignment = StringAlignment.Center;                          break;                      case HorizontalAlignment.Right:                          sf.Alignment = StringAlignment.Far;                          break;                  }
Missing Default,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,AdvancedSubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\AdvancedSubStationAlpha.cs,LoadStylesFromSubstationAlpha,The following switch statement is missing a default case: switch (ssaStyle.Alignment)                              {                                  case "1":                                      newAlignment = "1";                                      break;                                  case "3":                                      newAlignment = "3";                                      break;                                  case "9":                                      newAlignment = "4";                                      break;                                  case "10":                                      newAlignment = "5";                                      break;                                  case "11":                                      newAlignment = "6";                                      break;                                  case "5":                                      newAlignment = "7";                                      break;                                  case "6":                                      newAlignment = "8";                                      break;                                  case "7":                                      newAlignment = "9";                                      break;                              }
Missing Default,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubRip,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubRip.cs,ReadLine,The following switch statement is missing a default case: switch (_expecting)              {                  case ExpectingLine.Number:                      int number;                      if (int.TryParse(line' out number))                      {                          _paragraph.Number = number;                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_lastParagraph != null && nextNext != null && (_lastParagraph.Number + 1).ToString(CultureInfo.InvariantCulture) == nextNext)                          {                              _lastParagraph.Text = (_lastParagraph.Text + Environment.NewLine + line.Trim()).Trim();                          }                          else                          {                              if (_errors.Length < 2000)                                  _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                              _errorCount++;                          }                      }                      break;                  case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (!string.IsNullOrWhiteSpace(line))                      {                          if (_errors.Length < 2000)                              _errors.AppendLine(string.Format(lineNumberXExpectedNumberFromSourceLineY' _lineNumber' line));                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                  case ExpectingLine.Text:                      if (!string.IsNullOrWhiteSpace(line))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || RegexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _lastParagraph = _paragraph;                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _lastParagraph = _paragraph;                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
Missing Default,Nikse.SubtitleEdit.PluginLogic.Logic.SubtitleFormats,SubStationAlpha,C:\repos\SubtitleEdit_plugins\MergeTwoSrtToAss\DLL\Logic\SubtitleFormats\SubStationAlpha.cs,LoadStylesFromAdvancedSubstationAlpha,The following switch statement is missing a default case: switch (ssaStyle.Alignment)                              {                                  case "1":                                      newAlignment = "1";                                      break;                                  case "3":                                      newAlignment = "3";                                      break;                                  case "4":                                      newAlignment = "9";                                      break;                                  case "5":                                      newAlignment = "10";                                      break;                                  case "6":                                      newAlignment = "11";                                      break;                                  case "7":                                      newAlignment = "5";                                      break;                                  case "8":                                      newAlignment = "6";                                      break;                                  case "9":                                      newAlignment = "7";                                      break;                              }
