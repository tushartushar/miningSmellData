Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,LoadSubtitle,Cyclomatic complexity of the method is 9
Complex Method,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,ReadLine,Cyclomatic complexity of the method is 13
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,IPlugin,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\IPlugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,ReverseLines,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Plugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\TimeCode.cs,ToString,The length of the statement  "            string s = string.Format("{0:00}:{1:00}:{2:00}'{3:000}"' _time.Hours' _time.Minutes' _time.Seconds' _time.Milliseconds); " is 120.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,ReverseLines,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Plugin.cs,ReverseStringUnicodeSafe,The conditional expression  "input[inputIndex] >= 0xDC00 && input[inputIndex] <= 0xDFFF &&                      inputIndex > 0 && input[inputIndex - 1] >= 0xD800 && input[inputIndex - 1] <= 0xDBFF"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,LoadSubtitle,The conditional expression  "_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      _regexTimeCodes.IsMatch(lines[i + 1])"  is complex.
Magic Number,Nikse.SubtitleEdit.PluginLogic,ReverseLines,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Plugin.cs,DoAction,The following statement contains a magic number: var idx = paragraph.Text.IndexOf("}"' 2' StringComparison.Ordinal) + 1;
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,LoadSubtitle,The following statement contains a magic number: line = line.Trim(Convert.ToChar(127));
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,LoadSubtitle,The following statement contains a magic number: _errorCount < 100
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length > 30 && line[29] == ' '
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length > 30 && line[29] == ' '
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length >= 29 && ":;".Contains(line[8].ToString())
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length >= 29 && ":;".Contains(line[8].ToString())
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString())
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString())
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString())
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int startSeconds = int.Parse(parts[2]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int startMilliseconds = int.Parse(parts[3]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int endHours = int.Parse(parts[4]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int endMinutes = int.Parse(parts[5]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int endSeconds = int.Parse(parts[6]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: int endMilliseconds = int.Parse(parts[7]);
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\Utilities.cs,RemoveHtmlFontTag,The following statement contains a magic number: var endIdx = s.IndexOf('>'' idx + 5);
Missing Default,Nikse.SubtitleEdit.PluginLogic,SubRip,D:\research\architectureSmells\repos1\SubtitleEdit_plugins\ReverseLines\DLL\Logic\SubRip.cs,ReadLine,The following switch statement is missing a default case: switch (_expecting)              {                  case ExpectingLine.Number:                      if (Utilities.IsInteger(line))                      {                          _paragraph.Number = int.Parse(line);                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                      }                      break;                    case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                    case ExpectingLine.Text:                      if (line.Trim().Length > 0)                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || _regexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
