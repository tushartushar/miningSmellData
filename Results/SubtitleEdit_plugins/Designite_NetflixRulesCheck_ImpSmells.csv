Implementation smell,Namespace,Class,File,Method,Description
Long Method,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The method has 192 lines of code.
Long Method,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The method has 214 lines of code.
Long Method,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The method has 339 lines of code.
Long Method,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The method has 143 lines of code.
Complex Method,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,Cyclomatic complexity of the method is 13
Complex Method,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,Cyclomatic complexity of the method is 44
Complex Method,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,Cyclomatic complexity of the method is 35
Complex Method,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,ConvertNumberToString,Cyclomatic complexity of the method is 62
Complex Method,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,LoadSubtitle,Cyclomatic complexity of the method is 8
Complex Method,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,Cyclomatic complexity of the method is 40
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,IPlugin,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\IPlugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,NetflixRulesCheck,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Plugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Identifier,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,,The length of the parameter AutoDetectWordsCroatianAndSerbian is 33.
Long Identifier,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,,The length of the parameter AutoDetectWordsSerbianCyrillic is 30.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,CanBreak,The length of the statement  "            if (s2.EndsWith("? -"' StringComparison.Ordinal) || s2.EndsWith("! -"' StringComparison.Ordinal) || s2.EndsWith(". -"' StringComparison.Ordinal)) " is 145.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The length of the statement  "            if ((arr.Length < 2 && arr[0].Length <= maximumLineLength) || (arr[0].Length <= maximumLineLength && arr[1].Length <= maximumLineLength)) " is 137.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The length of the statement  "                var noTagLines = HtmlUtil.RemoveHtmlTags(text' true).Split(new[] { '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries); " is 120.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The length of the statement  "                    if (arr0.StartsWith('-') && noTagLines[1].TrimStart().StartsWith('-') && arr0.Length > 1 && (".?!)]".Contains(arr0[arr0.Length - 1]) || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith('â€“'))) " is 205.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The length of the statement  "                if (splitPos != maximumLength + 1 || s[maximumLength] != ' ') // allow for maxlength+1 char to be space (does not count) " is 120.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The length of the statement  "                        if (expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language)) " is 131.
Long Statement,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The length of the statement  "                        if (expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language)) " is 131.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The length of the statement  "                        newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true)); " is 125.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The length of the statement  "                        newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true)); " is 125.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The length of the statement  "                        bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1; " is 123.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.button1.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 146.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.listViewFixes.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.labelTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 148.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonInverseSelection.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonSelectAll.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.groupBoxRules.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left)  " is 146.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.comboBoxLanguage.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 152.
Long Statement,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.labelLanguage.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 149.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,ToText,The length of the statement  "                string s = p.Text.Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine).Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 162.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,ReadLine,The length of the statement  "                        _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine); " is 122.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The length of the statement  "                    newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100); " is 152.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,GetIndex,The length of the statement  "                if (p.Number == _paragraphs[i].Number && (p.StartTime.TotalMilliseconds == _paragraphs[i].StartTime.TotalMilliseconds || " is 120.
Long Statement,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The length of the statement  "                if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)) " is 160.
Long Statement,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Utilities.cs,GetCharactersPerSecond,The length of the statement  "            string s = paragraph.Text.Replace(Environment.NewLine' string.Empty).Replace(zeroWidthSpace' string.Empty).Replace(zeroWidthNoBreakSpace' string.Empty).Replace(" "' string.Empty); " is 179.
Long Statement,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The length of the statement  "                int frenchCount = GetCount(text' "[Cc]'est"' "pas"' "vous"' "pour"' "suis"' "Pourquoi"' "maison"' "souviens"' "quelque"); // not spanish words " is 142.
Long Statement,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The length of the statement  "                int frenchCount = GetCount(text' "[Cc]'est"' "pas"' "vous"' "pour"' "suis"' "Pourquoi"' "maison"' "souviens"' "quelque"); // not italian words " is 142.
Complex Conditional,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The conditional expression  "(arr.Length < 2 && arr[0].Length <= maximumLineLength) || (arr[0].Length <= maximumLineLength && arr[1].Length <= maximumLineLength)"  is complex.
Complex Conditional,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The conditional expression  "arr0.StartsWith('-') && noTagLines[1].TrimStart().StartsWith('-') && arr0.Length > 1 && (".?!)]".Contains(arr0[arr0.Length - 1]) || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith('â€“'))"  is complex.
Complex Conditional,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The conditional expression  "expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language)"  is complex.
Complex Conditional,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The conditional expression  "expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language)"  is complex.
Complex Conditional,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The conditional expression  "(arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}"))"  is complex.
Complex Conditional,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The conditional expression  "(arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}"))"  is complex.
Complex Conditional,SubtitleEdit,StringExtensions,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\StringExtensions.cs,FixExtraSpaces,The conditional expression  "(ch == '\n' || ch == '\r') && i + 1 < s.Length && s[i + 1] == 0x20"  is complex.
Complex Conditional,SubtitleEdit,StringExtensions,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\StringExtensions.cs,FixExtraSpaces,The conditional expression  "ch == 0x20 && i + 1 < s.Length && (s[i + 1] == '\n' || s[i + 1] == '\r')"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,LoadSubtitle,The conditional expression  "_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      _regexTimeCodes.IsMatch(lines[i + 1])"  is complex.
Complex Conditional,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The conditional expression  "int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds)"  is complex.
Complex Conditional,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The conditional expression  "b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191"  is complex.
Complex Conditional,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The conditional expression  "b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191"  is complex.
Complex Conditional,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The conditional expression  "b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191"  is complex.
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: return AutoBreakLine(text' 43' 40' language);
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: return AutoBreakLine(text' 43' 40' language);
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The following statement contains a magic number: if (text == null || text.Length < 3)                  return text;
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The following statement contains a magic number: if ((arr.Length < 2 && arr[0].Length <= maximumLineLength) || (arr[0].Length <= maximumLineLength && arr[1].Length <= maximumLineLength))                  return s;
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The following statement contains a magic number: for (int numberOfLines = 3; numberOfLines < 9999; numberOfLines++)              {                  int average = s.Length / numberOfLines + 1;                  for (int len = average; len < maximumLineLength; len++)                  {                      List<int> list = SplitToX(words' numberOfLines' len);                      bool allOk = true;                      foreach (var lineLength in list)                      {                          if (lineLength > maximumLineLength)                              allOk = false;                      }                      if (allOk)                      {                          int index = 0;                          foreach (var item in list)                          {                              index += item;                              htmlTags.Add(index' Environment.NewLine);                          }                          s = ReInsertHtmlTags(s' htmlTags);                          s = s.Replace(" " + Environment.NewLine' Environment.NewLine);                          s = s.Replace(Environment.NewLine + " "' Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</i>"' "</i>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</b>"' "</b>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</u>"' "</u>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</font>"' "</font>" + Environment.NewLine);                          return s.TrimEnd();                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLineMoreThanTwoLines,The following statement contains a magic number: for (int numberOfLines = 3; numberOfLines < 9999; numberOfLines++)              {                  int average = s.Length / numberOfLines + 1;                  for (int len = average; len < maximumLineLength; len++)                  {                      List<int> list = SplitToX(words' numberOfLines' len);                      bool allOk = true;                      foreach (var lineLength in list)                      {                          if (lineLength > maximumLineLength)                              allOk = false;                      }                      if (allOk)                      {                          int index = 0;                          foreach (var item in list)                          {                              index += item;                              htmlTags.Add(index' Environment.NewLine);                          }                          s = ReInsertHtmlTags(s' htmlTags);                          s = s.Replace(" " + Environment.NewLine' Environment.NewLine);                          s = s.Replace(Environment.NewLine + " "' Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</i>"' "</i>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</b>"' "</b>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</u>"' "</u>" + Environment.NewLine);                          s = s.Replace(Environment.NewLine + "</font>"' "</font>" + Environment.NewLine);                          return s.TrimEnd();                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,SplitToX,The following statement contains a magic number: foreach (string word in words)              {                  if (currentCount + word.Length + 3 > average && currentIdx < count)                  {                      list.Add(currentCount);                      currentIdx++;                      currentCount = 0;                  }                  currentCount += word.Length + 1;              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (text == null || text.Length < 3)                  return text;
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (text.Contains('-') && text.Contains(Environment.NewLine))              {                  var noTagLines = HtmlUtil.RemoveHtmlTags(text' true).Split(new[] { '\r'' '\n' }' StringSplitOptions.RemoveEmptyEntries);                  if (noTagLines.Length == 2)                  {                      var arr0 = noTagLines[0].Trim().TrimEnd('"'' '\'').TrimEnd();                      if (arr0.StartsWith('-') && noTagLines[1].TrimStart().StartsWith('-') && arr0.Length > 1 && (".?!)]".Contains(arr0[arr0.Length - 1]) || arr0.EndsWith("--"' StringComparison.Ordinal) || arr0.EndsWith('â€“')))                          return text;                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: int mid = s.Length / 2;
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (s.Contains(" - "))              {                  for (int j = 0; j <= (maximumLength / 2) + 5; j++)                  {                      if (mid + j + 4 < s.Length)                      {                          if (s[mid + j] == '-' && s[mid + j + 1] == ' ' && s[mid + j - 1] == ' ')                          {                              string rest = s.Substring(mid + j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  splitPos = mid + j;                                  break;                              }                          }                      }                      if (mid - (j + 1) > 4)                      {                          if (s[mid - j] == '-' && s[mid - j + 1] == ' ' && s[mid - j - 1] == ' ')                          {                              string rest = s.Substring(mid - j + 1).TrimStart();                              if (rest.Length > 0 && char.IsUpper(rest[0]))                              {                                  if (mid - j > 5 && s[mid - j - 1] == ' ' && @"!?.".Contains(s[mid - j - 2]))                                  {                                      splitPos = mid - j;                                      break;                                  }                              }                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < 0)              {                  const string expectedChars1 = ".!?0123456789";                  const string expectedChars2 = ".!?";                  for (int j = 0; j < 15; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (expectedChars2.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && CanBreak(s' mid + j + 1' language))                          {                              splitPos = mid + j + 1;                              if (expectedChars1.Contains(s[splitPos]))                              { // do not break double/tripple end lines like "!!!" or "..."                                  splitPos++;                                  if (expectedChars1.Contains(s[mid + j + 1]))                                      splitPos++;                              }                              break;                          }                          if (expectedChars2.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              splitPos++;                              break;                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < 0)              {                  const string expectedChars1 = ".!?' ";                  const string expectedChars2 = " .!?";                  const string expectedChars3 = ".!?";                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (expectedChars2.Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (expectedChars2.Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < 0)              {                  const string expectedChars1 = ".!?' ";                  const string expectedChars2 = " .!?";                  const string expectedChars3 = ".!?";                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (expectedChars2.Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (expectedChars2.Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < 0)              {                  const string expectedChars1 = ".!?' ";                  const string expectedChars2 = " .!?";                  const string expectedChars3 = ".!?";                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (expectedChars2.Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (expectedChars2.Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < 0)              {                  const string expectedChars1 = ".!?' ";                  const string expectedChars2 = " .!?";                  const string expectedChars3 = ".!?";                  for (int j = 0; j < 25; j++)                  {                      if (mid + j + 1 < s.Length && mid + j > 0)                      {                          if (expectedChars1.Contains(s[mid + j]) && !IsPartOfNumber(s' mid + j) && s.Length > mid + j + 2 && CanBreak(s' mid + j' language))                          {                              splitPos = mid + j;                              if (expectedChars2.Contains(s[mid + j + 1]))                              {                                  splitPos++;                                  if (expectedChars2.Contains(s[mid + j + 2]))                                      splitPos++;                              }                              break;                          }                          if (expectedChars1.Contains(s[mid - j]) && !IsPartOfNumber(s' mid - j) && s.Length > mid + j + 2 && CanBreak(s' mid - j' language))                          {                              splitPos = mid - j;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              if (expectedChars3.Contains(s[splitPos]))                                  splitPos--;                              break;                          }                      }                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (splitPos < s.Length - 2)                  s = s.Substring(0' splitPos) + Environment.NewLine + s.Substring(splitPos);
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (idx > 2)              {                  var endIdx = s.IndexOf('>'' idx + 2);                  if (endIdx > idx)                  {                      var tag = s.Substring(idx + Environment.NewLine.Length' endIdx - (idx + Environment.NewLine.Length) + 1);                      s = s.Insert(idx' tag);                      s = s.Remove(idx + tag.Length + Environment.NewLine.Length' tag.Length);                  }              }
Magic Number,SubtitleEdit,AutoBreaker,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\AutoBreaker.cs,AutoBreakLine,The following statement contains a magic number: if (idx > 2)              {                  var endIdx = s.IndexOf('>'' idx + 2);                  if (endIdx > idx)                  {                      var tag = s.Substring(idx + Environment.NewLine.Length' endIdx - (idx + Environment.NewLine.Length) + 1);                      s = s.Insert(idx' tag);                      s = s.Remove(idx + tag.Length + Environment.NewLine.Length' tag.Length);                  }              }
Magic Number,SubtitleEdit,HtmlUtil,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\HtmlUtil.cs,RemoveHtmlTags,The following statement contains a magic number: if (s == null || s.Length < 3)                  return s;
Magic Number,SubtitleEdit,HtmlUtil,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\HtmlUtil.cs,FixUpperTags,The following statement contains a magic number: while (idx >= 0)              {                  var endIdx = text.IndexOf('>'' idx + 2);                  if (endIdx < idx)                      break;                  var tag = text.Substring(idx' endIdx - idx).ToLowerInvariant();                  text = text.Remove(idx' endIdx - idx).Insert(idx' tag);                  idx = text.IndexOfAny(UppercaseTags' StringComparison.Ordinal);              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,PluginForm,The following statement contains a magic number: Resize += delegate              {                  int idx = listViewFixes.Columns.Count - 1;                  listViewFixes.Columns[idx].Width = -2;              };
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,buttonOK_Click,The following statement contains a magic number: foreach (ListViewItem item in listViewFixes.Items)              {                  var p = item.Tag as Paragraph;                  if (item.Checked && p != null)                  {                      p.Text = item.SubItems[4].Text.Replace(Configuration.ListViewLineSeparatorString' Environment.NewLine).Trim();                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,FindAndListNetflixRulesFixes,The following statement contains a magic number: for (int i = 0; i < _subtitle.Paragraphs.Count; i++)              {                  var prev = _subtitle.GetParagraphOrDefault(i - 1);                  var p = _subtitle.Paragraphs[i];                  var next = _subtitle.GetParagraphOrDefault(i + 1);                  var text = p.Text.Trim();                    // Maximum duration: 7 seconds per subtitle event                  if (checkBoxMaxDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds > 7000)                      {                          p.Duration.TotalMilliseconds = 7000;                          _totalFixes++;                          AddFixToListView(p' "Maximum duration: 7 seconds per subtitle event"' text' text);                      }                  }                    // Minimum duration: 5/6 second (833 ms) - also see https://github.com/SubtitleEdit/plugins/issues/129                  if (checkBoxMinDuration.Checked)                  {                      if (p.Duration.TotalMilliseconds < 833)                      {                          p.Duration.TotalMilliseconds = 834;                          _totalFixes++;                          AddFixToListView(p' "Minimum duration: 5/6 second (833 ms)"' text' text);                      }                  }                    // Two lines maximum                  if (checkBoxTwoLinesMax.Checked)                  {                      if (p.Text.SplitToLines().Length > 2)                      {                                                  _totalFixes++;                          AddFixToListView(p' "Two lines maximum"' text' AutoBreaker.AutoBreakLine(text));                      }                  }                    // Two frames gap minimum                  if (checkBoxGapMinTwoFrames.Checked)                  {                       double frameRate = 25.0;                      double twoFramesGap = 1000.0 / frameRate * 2.0;                      if (next != null && p.EndTime.TotalMilliseconds + twoFramesGap > next.StartTime.TotalMilliseconds)                      {                          p.EndTime.TotalMilliseconds = next.StartTime.TotalMilliseconds - twoFramesGap;                          //TODO: check for min time/speed                          _totalFixes++;                          AddFixToListView(p' "Mininum two frames gap"' text' text);                      }                  }                    //- Speed - 17 characters per second --- is it max 17 characters per second                  if (checkBox17CharsPerSecond.Checked)                  {                      var charactersPerSeconds = Utilities.GetCharactersPerSecond(p);                      if (charactersPerSeconds > 17)                      {                          var tempP = new Paragraph(p);                          while (Utilities.GetCharactersPerSecond(tempP) > 17)                          {                              tempP.EndTime.TotalMilliseconds++;                          }                          _totalFixes++;                          AddFixToListView(p' "Maximum 17 characters per second"' text' text);                      }                  }                    //- Dual Speakers: Use a hyphen without a space                  if (checkBoxDialogHypenNoSpace.Checked)                  {                      var arr = p.Text.SplitToLines();                      if (arr.Length == 2 && p.Text.Contains("-"))                      {                          string newText = p.Text;                          if (arr[0].StartsWith("- ") && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if (arr[0].StartsWith("<i>- ") && arr[1].StartsWith("- "))                          {                              newText = "<i>-" + arr[0].Remove(0' 5) + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && arr[1].StartsWith("<i>- "))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "<i>-" + arr[1].Remove(0' 5);                          }                          else if ((arr[0].StartsWith("-") || arr[0].StartsWith("<i>-")) && arr[1].StartsWith("- "))                          {                              newText = "-" + arr[0] + Environment.NewLine + "-" + arr[1].Remove(0' 2);                          }                          else if (arr[0].StartsWith("- ") && (arr[1].StartsWith("-") || arr[1].StartsWith("<i>-")))                          {                              newText = "-" + arr[0].Remove(0' 2) + Environment.NewLine + "-" + arr[1];                          }                            if (newText != text)                          {                              _totalFixes++;                              AddFixToListView(p' "Dual Speakers: Use a hyphen without a space"' text' newText);                          }                      }                  }                    //Use brackets[] to enclose speaker IDs or sound effects                  if (checkBoxSquareBracketForHi.Checked)                  {                      string newText = p.Text;                      var arr = p.Text.SplitToLines();                      if (newText.StartsWith("("' StringComparison.Ordinal) && newText.EndsWith(")"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (newText.StartsWith("{"' StringComparison.Ordinal) && newText.EndsWith("}"' StringComparison.Ordinal))                      {                          newText = "[" + newText.Substring(1' newText.Length - 2) + "]";                      }                      else if (arr.Length == 2 && arr[0].StartsWith("-") && arr[1].StartsWith("-"))                      {                          if ((arr[0].StartsWith("-(") && arr[0].EndsWith(")")) || (arr[0].StartsWith("-{") && arr[0].EndsWith("}")))                          {                              arr[0] = "-[" + newText.Substring(2' newText.Length - 3) + "]";                          }                          if ((arr[1].StartsWith("-(") && arr[1].EndsWith(")")) || (arr[1].StartsWith("-{") && arr[1].EndsWith("}")))                          {                              arr[1] = "-[" + arr[1].Substring(2' arr[1].Length - 3) + "]";                          }                          newText = arr[0] + Environment.NewLine + arr[1];                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "Use brackets [ ] to enclose speaker IDs or sound effects"' text' newText);                      }                  }                    //- When a number begins a sentence' it should always be spelled out.                  if (checkBoxSpellOutStartNumbers.Checked)                  {                      string newText = p.Text;                        var m = NumberStart.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 2;                          newText = newText.Remove(m.Index' length).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' length)' true));                          m = NumberStart.Match(newText' m.Index + 1);                      }                        m = NumberStartInside.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 4;                          newText = newText.Remove(m.Index + 2' length).Insert(m.Index + 2' ConvertNumberToString(m.Value.Substring(2' length)' true));                          m = NumberStartInside.Match(newText' m.Index + 1);                      }                        m = NumberStartInside2.Match(newText);                      while (m.Success)                      {                          int length = m.Length - 5;                          newText = newText.Remove(m.Index + 3' length).Insert(m.Index + 3' ConvertNumberToString(m.Value.Substring(3' length)' true));                          m = NumberStartInside2.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "When a number begins a sentence' it should always be spelled out"' text' newText);                      }                  }                    //- From 1 to 10' numbers should be written out: en' to' tre' etc.                                  if (checkBoxWriteOutOneToTen.Checked)                  {                      string newText = p.Text;                      var m = NumberOneToNine.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 1 && !":.".Contains(newText[m.Index + 1].ToString()) || newText.Length <= m.Index + 1;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 1).Insert(m.Index' ConvertNumberToString(m.Value.Substring(0' 1)' false));                          m = NumberOneToNine.Match(newText' m.Index + 1);                      }                        m = NumberTen.Match(newText);                      while (m.Success)                      {                          bool ok = newText.Length > m.Index + 2 && newText[m.Index + 2] != ':' || newText.Length <= m.Index + 2;                          if (ok && m.Index > 0 && ":.".Contains(newText[m.Index - 1].ToString()))                              ok = false;                          if (ok)                              newText = newText.Remove(m.Index' 2).Insert(m.Index' "ten");                          m = NumberTen.Match(newText' m.Index + 1);                      }                        if (newText != text)                      {                          _totalFixes++;                          AddFixToListView(p' "From 1 to 10' numbers should be written out: one' two' three' etc"' text' newText);                      }                  }                    // Glyph List - Only text/ characters included in the NETFLIX Glyph List (version 2) can be used.                  if (checkBoxCheckValidGlyphs.Checked)                  {                      string badGlyphs;                      if (_glyphReader.ContainsIllegalGlyphs(p.Text' out badGlyphs))                      {                                                  _totalFixes++;                          AddFixToListView(p' "Only use valid characters (not " + badGlyphs + ")"' text' _glyphReader.CleanText(text));                      }                  }              }
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(1075' 697);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(1075' 697);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(1156' 697);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Location = new System.Drawing.Point(1156' 697);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.button1.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 180);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 180);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(82' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(82' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 2;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Location = new System.Drawing.Point(12' 199);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Location = new System.Drawing.Point(12' 199);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Size = new System.Drawing.Size(1219' 492);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Size = new System.Drawing.Size(1219' 492);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.TabIndex = 101;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader4.Width = 38;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader5.Width = 50;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader6.Width = 169;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader7.Width = 340;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader8.Width = 318;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Location = new System.Drawing.Point(9' 694);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Location = new System.Drawing.Point(9' 694);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Size = new System.Drawing.Size(34' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Size = new System.Drawing.Size(34' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.TabIndex = 102;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonInverseSelection.Location = new System.Drawing.Point(1126' 170);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonInverseSelection.Location = new System.Drawing.Point(1126' 170);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonInverseSelection.Size = new System.Drawing.Size(105' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonInverseSelection.Size = new System.Drawing.Size(105' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonInverseSelection.TabIndex = 103;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSelectAll.Location = new System.Drawing.Point(1045' 170);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSelectAll.Location = new System.Drawing.Point(1045' 170);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSelectAll.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSelectAll.Size = new System.Drawing.Size(75' 23);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonSelectAll.TabIndex = 104;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxRules.Location = new System.Drawing.Point(15' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxRules.Location = new System.Drawing.Point(15' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxRules.Size = new System.Drawing.Size(1216' 151);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxRules.Size = new System.Drawing.Size(1216' 151);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.groupBoxRules.TabIndex = 105;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGapMinTwoFrames.Location = new System.Drawing.Point(20' 101);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGapMinTwoFrames.Location = new System.Drawing.Point(20' 101);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGapMinTwoFrames.Size = new System.Drawing.Size(168' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGapMinTwoFrames.Size = new System.Drawing.Size(168' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxGapMinTwoFrames.TabIndex = 6;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCheckValidGlyphs.Location = new System.Drawing.Point(410' 124);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCheckValidGlyphs.Location = new System.Drawing.Point(410' 124);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCheckValidGlyphs.Size = new System.Drawing.Size(330' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCheckValidGlyphs.Size = new System.Drawing.Size(330' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxCheckValidGlyphs.TabIndex = 21;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBox17CharsPerSecond.Location = new System.Drawing.Point(20' 78);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBox17CharsPerSecond.Location = new System.Drawing.Point(20' 78);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBox17CharsPerSecond.Size = new System.Drawing.Size(290' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBox17CharsPerSecond.Size = new System.Drawing.Size(290' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBox17CharsPerSecond.TabIndex = 5;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLanguage.Location = new System.Drawing.Point(945' 36);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLanguage.Location = new System.Drawing.Point(945' 36);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLanguage.Size = new System.Drawing.Size(196' 21);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLanguage.Size = new System.Drawing.Size(196' 21);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.comboBoxLanguage.TabIndex = 30;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLanguage.Location = new System.Drawing.Point(942' 20);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLanguage.Location = new System.Drawing.Point(942' 20);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLanguage.Size = new System.Drawing.Size(55' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLanguage.Size = new System.Drawing.Size(55' 13);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelLanguage.TabIndex = 8;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWriteOutOneToTen.Location = new System.Drawing.Point(410' 101);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWriteOutOneToTen.Location = new System.Drawing.Point(410' 101);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWriteOutOneToTen.Size = new System.Drawing.Size(335' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWriteOutOneToTen.Size = new System.Drawing.Size(335' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxWriteOutOneToTen.TabIndex = 17;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSpellOutStartNumbers.Location = new System.Drawing.Point(410' 78);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSpellOutStartNumbers.Location = new System.Drawing.Point(410' 78);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSpellOutStartNumbers.Size = new System.Drawing.Size(341' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSpellOutStartNumbers.Size = new System.Drawing.Size(341' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSpellOutStartNumbers.TabIndex = 15;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSquareBracketForHi.Location = new System.Drawing.Point(410' 55);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSquareBracketForHi.Location = new System.Drawing.Point(410' 55);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSquareBracketForHi.Size = new System.Drawing.Size(286' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSquareBracketForHi.Size = new System.Drawing.Size(286' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxSquareBracketForHi.TabIndex = 11;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDialogHypenNoSpace.Location = new System.Drawing.Point(410' 31);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDialogHypenNoSpace.Location = new System.Drawing.Point(410' 31);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDialogHypenNoSpace.Size = new System.Drawing.Size(249' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDialogHypenNoSpace.Size = new System.Drawing.Size(249' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxDialogHypenNoSpace.TabIndex = 9;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTwoLinesMax.Location = new System.Drawing.Point(20' 124);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTwoLinesMax.Location = new System.Drawing.Point(20' 124);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTwoLinesMax.Size = new System.Drawing.Size(117' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTwoLinesMax.Size = new System.Drawing.Size(117' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxTwoLinesMax.TabIndex = 7;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMinDuration.Location = new System.Drawing.Point(20' 31);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMinDuration.Location = new System.Drawing.Point(20' 31);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMinDuration.Size = new System.Drawing.Size(212' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMinDuration.Size = new System.Drawing.Size(212' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMaxDuration.Location = new System.Drawing.Point(20' 55);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMaxDuration.Location = new System.Drawing.Point(20' 55);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMaxDuration.Size = new System.Drawing.Size(250' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMaxDuration.Size = new System.Drawing.Size(250' 17);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.checkBoxMaxDuration.TabIndex = 3;
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1243' 732);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(1243' 732);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(979' 528);
Magic Number,SubtitleEdit,PluginForm,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(979' 528);
Magic Number,SubtitleEdit,StringExtensions,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\StringExtensions.cs,FixExtraSpaces,The following statement contains a magic number: for (int i = len - 1; i >= 0; i--)              {                  char ch = s[i];                  if (k < 2)                  {                      if (ch == 0x20)                      {                          k = i + 1;                      }                  }                  else if (ch != 0x20)                  {                      // Two or more white-spaces found!                      if (k - (i + 1) > 1)                      {                          // Keep only one white-space.                          s = s.Remove(i + 1' k - (i + 2));                      }                        // No white-space after/before line break.                      if ((ch == '\n' || ch == '\r') && i + 1 < s.Length && s[i + 1] == 0x20)                      {                          s = s.Remove(i + 1' 1);                      }                      // Reset remove length.                      k = -1;                  }                  if (ch == 0x20 && i + 1 < s.Length && (s[i + 1] == '\n' || s[i + 1] == '\r'))                  {                      s = s.Remove(i' 1);                  }              }
Magic Number,SubtitleEdit,StringExtensions,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\StringExtensions.cs,FixExtraSpaces,The following statement contains a magic number: for (int i = len - 1; i >= 0; i--)              {                  char ch = s[i];                  if (k < 2)                  {                      if (ch == 0x20)                      {                          k = i + 1;                      }                  }                  else if (ch != 0x20)                  {                      // Two or more white-spaces found!                      if (k - (i + 1) > 1)                      {                          // Keep only one white-space.                          s = s.Remove(i + 1' k - (i + 2));                      }                        // No white-space after/before line break.                      if ((ch == '\n' || ch == '\r') && i + 1 < s.Length && s[i + 1] == 0x20)                      {                          s = s.Remove(i + 1' 1);                      }                      // Reset remove length.                      k = -1;                  }                  if (ch == 0x20 && i + 1 < s.Length && (s[i + 1] == '\n' || s[i + 1] == '\r'))                  {                      s = s.Remove(i' 1);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,LoadSubtitle,The following statement contains a magic number: for (int i = 0; i < lines.Count; i++)              {                  _lineNumber++;                  string line = lines[i].TrimEnd();                  line = line.Trim(Convert.ToChar(127)); // 127=delete acscii                    string next = string.Empty;                  if (i + 1 < lines.Count)                      next = lines[i + 1];                    // A new line is missing between two paragraphs (buggy srt file)                  if (_expecting == ExpectingLine.Text && i + 1 < lines.Count &&                      _paragraph != null && !string.IsNullOrEmpty(_paragraph.Text) && Utilities.IsInteger(line) &&                      _regexTimeCodes.IsMatch(lines[i + 1]))                  {                      ReadLine(subtitle' string.Empty' string.Empty);                  }                  if (_expecting == ExpectingLine.Number && _regexTimeCodes.IsMatch(line))                  {                      _expecting = ExpectingLine.TimeCodes;                      doRenum = true;                  }                    ReadLine(subtitle' line' next);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length > 30 && line[29] == ' ')                  line = line.Substring(0' 29);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && ":;".Contains(line[8].ToString()))                  line = line.Substring(0' 8) + ''' + line.Substring(8 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (line.Length >= 29 && line.Length <= 30 && ":;".Contains(line[25].ToString()))                  line = line.Substring(0' 25) + ''' + line.Substring(25 + 1);
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,TryReadTimeCodesLine,The following statement contains a magic number: if (_regexTimeCodes.IsMatch(line) || _regexTimeCodes2.IsMatch(line))              {                  string[] parts = line.Replace("-->"' ":").Replace(" "' string.Empty).Split(':'' ''');                  try                  {                      int startHours = int.Parse(parts[0]);                      int startMinutes = int.Parse(parts[1]);                      int startSeconds = int.Parse(parts[2]);                      int startMilliseconds = int.Parse(parts[3]);                      int endHours = int.Parse(parts[4]);                      int endMinutes = int.Parse(parts[5]);                      int endSeconds = int.Parse(parts[6]);                      int endMilliseconds = int.Parse(parts[7]);                      paragraph.StartTime = new TimeCode(startHours' startMinutes' startSeconds' startMilliseconds);                      paragraph.EndTime = new TimeCode(endHours' endMinutes' endSeconds' endMilliseconds);                      return true;                  }                  catch                  {                      return false;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingPercent,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds;                      newEndMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + (((newEndMilliseconds - _paragraphs[i].StartTime.TotalMilliseconds) * percent) / 100);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                      _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * TimeCode.BaseUnit);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * TimeCode.BaseUnit);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Subtitle,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Subtitle.cs,AdjustDisplayTimeUsingSeconds,The following statement contains a magic number: for (int i = 0; i < _paragraphs.Count; i++)              {                  if (selectedIndexes == null || selectedIndexes.Contains(i))                  {                      double nextStartMilliseconds = _paragraphs[_paragraphs.Count - 1].EndTime.TotalMilliseconds + 100000;                      if (i + 1 < _paragraphs.Count)                          nextStartMilliseconds = _paragraphs[i + 1].StartTime.TotalMilliseconds;                        double newEndMilliseconds = _paragraphs[i].EndTime.TotalMilliseconds + (seconds * TimeCode.BaseUnit);                      if (newEndMilliseconds > nextStartMilliseconds)                          newEndMilliseconds = nextStartMilliseconds - 1;                        if (seconds < 0)                      {                          if (_paragraphs[i].StartTime.TotalMilliseconds + 100 > newEndMilliseconds)                              _paragraphs[i].EndTime.TotalMilliseconds = _paragraphs[i].StartTime.TotalMilliseconds + 100;                          else                              _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                      else                      {                          _paragraphs[i].EndTime.TotalMilliseconds = newEndMilliseconds;                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,TimeCode,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\TimeCode.cs,ParseToMilliseconds,The following statement contains a magic number: if (parts.Length == 4)              {                  int hours;                  int minutes;                  int seconds;                  int milliseconds;                  if (int.TryParse(parts[0]' out hours) && int.TryParse(parts[1]' out minutes) && int.TryParse(parts[2]' out seconds) && int.TryParse(parts[3]' out milliseconds))                  {                      TimeSpan ts = new TimeSpan(0' hours' minutes' seconds' milliseconds);                      return ts.TotalMilliseconds;                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Utilities.cs,RemoveHtmlTags,The following statement contains a magic number: if (alsoSSA)              {                  const string ssaStart = "{\\";                  var startIdx = s.IndexOf(ssaStart' StringComparison.Ordinal);                  while (startIdx >= 0)                  {                      var endIdx = s.IndexOf('}'' startIdx + 2);                      if (endIdx < startIdx) // Invalid SSA                          break;                      s = s.Remove(startIdx' endIdx - startIdx + 1);                      startIdx = s.IndexOf(ssaStart' startIdx);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,Utilities,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\Utilities.cs,GetCharactersPerSecond,The following statement contains a magic number: if (paragraph.Duration.TotalMilliseconds < 1)                  return 999;
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: switch (encoding.CodePage)              {                  case 860:                      return "pt"; // Portuguese                  case 28599:                  case 1254:                      return "tr"; // Turkish                  case 28598:                  case 1255:                      return "he"; // Hebrew                  case 28596:                  case 1256:                      return "ar"; // Arabic                  case 1258:                      return "vi"; // Vietnamese                  case 949:                  case 1361:                  case 20949:                  case 51949:                  case 50225:                      return "ko"; // Korean                  case 1253:                  case 28597:                      return "el"; // Greek                  case 50220:                  case 50221:                  case 50222:                  case 51932:                  case 20932:                  case 10001:                      return "ja"; // Japanese                  case 20000:                  case 20002:                  case 20936:                  case 950:                  case 52936:                  case 54936:                  case 51936:                      return "zh"; // Chinese                  default:                      return null;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int norwegianCount = GetCount(text' "ut"' "deg"' "meg"' "merkelig"' "mye"' "spÃ¸rre");                  int dutchCount = GetCount(text' AutoDetectWordsDutch);                  if (norwegianCount < 2 && dutchCount < count)                      return "da";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int danishCount = GetCount(text' "siger"' "dig"' "mig"' "mÃ¦rkelig"' "tilbage"' "spÃ¸rge");                  int dutchCount = GetCount(text' AutoDetectWordsDutch);                  if (danishCount < 2 && dutchCount < count)                      return "no";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int frenchCount = GetCount(text' "[Cc]'est"' "pas"' "vous"' "pour"' "suis"' "Pourquoi"' "maison"' "souviens"' "quelque"); // not spanish words                  int portugueseCount = GetCount(text' "[NnCc]Ã£o"' "EntÃ£o"' "h?ouve"' "pessoal"' "rapariga"' "tivesse"' "fizeste"'                                                       "jantar"' "conheÃ§o"' "atenÃ§Ã£o"' "foste"' "milhÃµes"' "devias"' "ganhar"' "raios"); // not spanish words                  if (frenchCount < 2 && portugueseCount < 2)                      return "es";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int frenchCount = GetCount(text' "[Cc]'est"' "pas"' "vous"' "pour"' "suis"' "Pourquoi"' "maison"' "souviens"' "quelque"); // not spanish words                  int portugueseCount = GetCount(text' "[NnCc]Ã£o"' "EntÃ£o"' "h?ouve"' "pessoal"' "rapariga"' "tivesse"' "fizeste"'                                                       "jantar"' "conheÃ§o"' "atenÃ§Ã£o"' "foste"' "milhÃµes"' "devias"' "ganhar"' "raios"); // not spanish words                  if (frenchCount < 2 && portugueseCount < 2)                      return "es";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int frenchCount = GetCount(text' "[Cc]'est"' "pas"' "vous"' "pour"' "suis"' "Pourquoi"' "maison"' "souviens"' "quelque"); // not italian words                  if (frenchCount < 2)                      return "it";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount)              {                  int romanianCount = GetCount(text' "[Vv]reau"' "[Ss]Ã®nt"' "[Aa]cum"' "pentru"' "domnule"' "aici");                  if (romanianCount < 5)                      return "fr";              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > 10 || count > bestCount)                  return "th";
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > 10 || count > bestCount)                  return "ko";
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount * 2)                  return "ja";
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguage,The following statement contains a magic number: if (count > bestCount * 2)                  return "zh";
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,AutoDetectGoogleLanguageOrNull,The following statement contains a magic number: string languageId = AutoDetectGoogleLanguage(subtitle.GetAllTexts()' subtitle.Paragraphs.Count / 14);
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Magic Number,SubtitleEdit.Logic,LanguageAutoDetect,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\LanguageAutoDetect.cs,IsUtf8,The following statement contains a magic number: while (i < buffer.Length - 3)              {                  byte b = buffer[i];                  if (b > 127)                  {                      if (b >= 194 && b <= 223 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191)                      { // 2-byte sequence                          utf8Count++;                          i++;                      }                      else if (b >= 224 && b <= 239 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191)                      { // 3-byte sequence                          utf8Count++;                          i += 2;                      }                      else if (b >= 240 && b <= 244 && buffer[i + 1] >= 128 && buffer[i + 1] <= 191 &&                                                       buffer[i + 2] >= 128 && buffer[i + 2] <= 191 &&                                                       buffer[i + 3] >= 128 && buffer[i + 3] <= 191)                      { // 4-byte sequence                          utf8Count++;                          i += 3;                      }                      else                      {                          return false;                      }                  }                  i++;              }
Missing Default,Nikse.SubtitleEdit.PluginLogic,SubRip,C:\repos\SubtitleEdit_plugins\NetflixRulesCheck\DLL\Logic\SubRip.cs,ReadLine,The following switch statement is missing a default case: switch (_expecting)              {                  case ExpectingLine.Number:                      if (Utilities.IsInteger(line))                      {                          _paragraph.Number = int.Parse(line);                          _expecting = ExpectingLine.TimeCodes;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                      }                      break;                  case ExpectingLine.TimeCodes:                      if (TryReadTimeCodesLine(line' _paragraph))                      {                          _paragraph.Text = string.Empty;                          _expecting = ExpectingLine.Text;                      }                      else if (line.Trim().Length > 0)                      {                          _errorCount++;                          _expecting = ExpectingLine.Number; // lets go to next paragraph                      }                      break;                  case ExpectingLine.Text:                      if (line.Trim().Length > 0)                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (IsText(next))                      {                          if (_paragraph.Text.Length > 0)                              _paragraph.Text += Environment.NewLine;                          _paragraph.Text += RemoveBadChars(line).TrimEnd().Replace(Environment.NewLine + Environment.NewLine' Environment.NewLine);                      }                      else if (string.IsNullOrEmpty(line) && string.IsNullOrEmpty(_paragraph.Text))                      {                          _paragraph.Text = string.Empty;                          if (!string.IsNullOrEmpty(next) && (Utilities.IsInteger(next) || _regexTimeCodes.IsMatch(next)))                          {                              subtitle.Paragraphs.Add(_paragraph);                              _paragraph = new Paragraph();                              _expecting = ExpectingLine.Number;                          }                      }                      else                      {                          subtitle.Paragraphs.Add(_paragraph);                          _paragraph = new Paragraph();                          _expecting = ExpectingLine.Number;                      }                      break;              }
