Implementation smell,Namespace,Class,File,Method,Description
Long Method,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The method has 158 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The method has 322 lines of code.
Long Method,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The method has 104 lines of code.
Complex Method,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\Utilities.cs,RemoveHtmlTags,Cyclomatic complexity of the method is 8
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,IPlugin,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\IPlugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Parameter List,Nikse.SubtitleEdit.PluginLogic,AmericanToBritish,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Plugin.cs,DoAction,The method has 7 parameters. Parameters: parentForm' subtitle' frameRate' listViewLineSeparatorString' subtitleFileName' videoFileName' rawText
Long Identifier,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,,The length of the parameter toolStripMenuItemRemoveSelected is 31.
Long Identifier,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,,The length of the parameter toolStripMenuItemManageLocalWords is 33.
Long Identifier,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,,The length of the parameter toolStripMenuItemViewBuiltInWords is 33.
Long Statement,Nikse.SubtitleEdit.PluginLogic,AmericanToBritishConverter,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\AmericanToBritishConverter.cs,AddBuiltInWords,The length of the statement  "            using (var stream = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("Nikse.SubtitleEdit.PluginLogic.WordList.xml")) " is 143.
Long Statement,Nikse.SubtitleEdit.PluginLogic,AmericanToBritishConverter,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\AmericanToBritishConverter.cs,AddWordsToLists,The length of the statement  "                        _regexList.Add(new Regex("\\b" + char.ToUpperInvariant(american[0]) + american.Substring(1) + "\\b"' RegexOptions.ExplicitCapture)); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic,AmericanToBritish,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Plugin.cs,DoAction,The length of the statement  "                MessageBox.Show($"{srt.Errors} error{s} found while parsing .srt"' $"SubRip Parse Error{s}"' MessageBoxButtons.OK' MessageBoxIcon.Warning); " is 139.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,toolStripMenuItemViewBuiltInWords_Click,The length of the statement  "            using (var resourceStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("Nikse.SubtitleEdit.PluginLogic.WordList.xml")) " is 133.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,CreateLocalWordList,The length of the statement  "            if (MessageBox.Show("Local word list does not exist' do you want to create one?"' "Local word list not found!"' MessageBoxButtons.YesNo) == DialogResult.Yes) " is 157.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,CreateLocalWordList,The length of the statement  "                    using (var resource = Assembly.GetExecutingAssembly().GetManifestResourceStream("Nikse.SubtitleEdit.PluginLogic.WordList.xml")) " is 127.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonOK.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 147.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.buttonCancel.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right))); " is 151.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.listViewFixes.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom)  " is 149.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.toolStripMenuItemEdit.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.E))); " is 139.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.toolStripMenuItemReset.ShortcutKeys = ((System.Windows.Forms.Keys)((System.Windows.Forms.Keys.Control | System.Windows.Forms.Keys.R))); " is 140.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.labelTotal.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 148.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelIssues.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 153.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelIssues.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelIssues_LinkClicked); " is 128.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelWordList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left))); " is 155.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.linkLabelWordList.LinkClicked += new System.Windows.Forms.LinkLabelLinkClickedEventHandler(this.linkLabelWordList_LinkClicked); " is 132.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.radioButtonBuiltInList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 158.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.radioButtonLocalList.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.radioButtonBothLists.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right))); " is 156.
Long Statement,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The length of the statement  "            this.Font = new System.Drawing.Font("Tahoma"' 8.25F' System.Drawing.FontStyle.Regular' System.Drawing.GraphicsUnit.Point' ((byte)(0))); " is 135.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,ToText,The length of the statement  "                sb.AppendFormat(CultureInfo.InvariantCulture' paragraphWriteFormat' Environment.NewLine' p.Number' p.StartTime' p.EndTime' p.Text); " is 131.
Long Statement,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\Utilities.cs,GetWordListFileName,The length of the statement  "            var path = Path.GetDirectoryName(Assembly.GetExecutingAssembly().CodeBase); // Note: Subtitle edit loads assembly from raw bytes " is 128.
Empty Catch Block,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,PluginForm_FormClosed,The method has an empty catch block.
Magic Number,Nikse.SubtitleEdit.PluginLogic,AmericanToBritishConverter,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\AmericanToBritishConverter.cs,RevertFontColorFix,The following statement contains a magic number: while (tagIndex >= 0)              {                  var tagEndIndex = s.IndexOf('>'' tagIndex + 5);                  if (tagEndIndex < 0)                      break;                  var tag = s.Substring(tagIndex' tagEndIndex - tagIndex);                  var colourIndex = tag.IndexOf("colour"' StringComparison.OrdinalIgnoreCase);                  while (colourIndex >= 0)                  {                      tag = tag.Remove(colourIndex + 4' 1); // colour => color                      colourIndex = tag.IndexOf("colour"' colourIndex + 5' StringComparison.OrdinalIgnoreCase);                  }                  s = s.Remove(tagIndex' tagEndIndex - tagIndex).Insert(tagIndex' tag);                  tagIndex = s.IndexOf("<font"' tagIndex + tag.Length + 1' StringComparison.OrdinalIgnoreCase);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,AmericanToBritishConverter,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\AmericanToBritishConverter.cs,RevertFontColorFix,The following statement contains a magic number: while (tagIndex >= 0)              {                  var tagEndIndex = s.IndexOf('>'' tagIndex + 5);                  if (tagEndIndex < 0)                      break;                  var tag = s.Substring(tagIndex' tagEndIndex - tagIndex);                  var colourIndex = tag.IndexOf("colour"' StringComparison.OrdinalIgnoreCase);                  while (colourIndex >= 0)                  {                      tag = tag.Remove(colourIndex + 4' 1); // colour => color                      colourIndex = tag.IndexOf("colour"' colourIndex + 5' StringComparison.OrdinalIgnoreCase);                  }                  s = s.Remove(tagIndex' tagEndIndex - tagIndex).Insert(tagIndex' tag);                  tagIndex = s.IndexOf("<font"' tagIndex + tag.Length + 1' StringComparison.OrdinalIgnoreCase);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,AmericanToBritishConverter,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\AmericanToBritishConverter.cs,RevertFontColorFix,The following statement contains a magic number: while (tagIndex >= 0)              {                  var tagEndIndex = s.IndexOf('>'' tagIndex + 5);                  if (tagEndIndex < 0)                      break;                  var tag = s.Substring(tagIndex' tagEndIndex - tagIndex);                  var colourIndex = tag.IndexOf("colour"' StringComparison.OrdinalIgnoreCase);                  while (colourIndex >= 0)                  {                      tag = tag.Remove(colourIndex + 4' 1); // colour => color                      colourIndex = tag.IndexOf("colour"' colourIndex + 5' StringComparison.OrdinalIgnoreCase);                  }                  s = s.Remove(tagIndex' tagEndIndex - tagIndex).Insert(tagIndex' tag);                  tagIndex = s.IndexOf("<font"' tagIndex + tag.Length + 1' StringComparison.OrdinalIgnoreCase);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point(12' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Location = new System.Drawing.Point(12' 40);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(620' 283);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.listView1.Size = new System.Drawing.Size(620' 283);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeaderAmerican.Width = 300;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeaderBritish.Width = 299;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(164' 48);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStrip1.Size = new System.Drawing.Size(164' 48);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemRemoveSelected.Size = new System.Drawing.Size(163' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemRemoveSelected.Size = new System.Drawing.Size(163' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSource.Location = new System.Drawing.Point(13' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSource.Location = new System.Drawing.Point(13' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSource.Size = new System.Drawing.Size(44' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelSource.Size = new System.Drawing.Size(44' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(557' 332);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(557' 332);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotalWords.Location = new System.Drawing.Point(12' 332);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotalWords.Location = new System.Drawing.Point(12' 332);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotalWords.Size = new System.Drawing.Size(65' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotalWords.Size = new System.Drawing.Size(65' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotalWords.TabIndex = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelAmerican.Location = new System.Drawing.Point(220' 14);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelAmerican.Location = new System.Drawing.Point(220' 14);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelAmerican.Size = new System.Drawing.Size(54' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelAmerican.Size = new System.Drawing.Size(54' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelAmerican.TabIndex = 4;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelBritish.Location = new System.Drawing.Point(408' 14);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelBritish.Location = new System.Drawing.Point(408' 14);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelBritish.Size = new System.Drawing.Size(38' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelBritish.Size = new System.Drawing.Size(38' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.labelBritish.TabIndex = 5;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxAmerican.Location = new System.Drawing.Point(280' 11);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxAmerican.Location = new System.Drawing.Point(280' 11);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxAmerican.Size = new System.Drawing.Size(125' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxAmerican.Size = new System.Drawing.Size(125' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxAmerican.TabIndex = 6;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxBritish.Location = new System.Drawing.Point(451' 11);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxBritish.Location = new System.Drawing.Point(451' 11);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxBritish.Size = new System.Drawing.Size(125' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxBritish.Size = new System.Drawing.Size(125' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxBritish.TabIndex = 7;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new System.Drawing.Point(585' 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Location = new System.Drawing.Point(585' 10);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new System.Drawing.Size(47' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.Size = new System.Drawing.Size(47' 21);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonAdd.TabIndex = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(644' 355);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(644' 355);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(660' 394);
Magic Number,Nikse.SubtitleEdit.PluginLogic,ManageWordsForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\ManageWordsForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(660' 394);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,PluginForm_SizeChanged,The following statement contains a magic number: var width = Width - (130 + listViewFixes.Left * 2);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,PluginForm_SizeChanged,The following statement contains a magic number: var width = Width - (130 + listViewFixes.Left * 2);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,PluginForm_SizeChanged,The following statement contains a magic number: columnHeader3.Width = width / 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,toolStripMenuItemReset_Click,The following statement contains a magic number: if (listViewFixes.SelectedItems.Count > 0 && _editedParagraphs.Count > 0)              {                  foreach (ListViewItem item in listViewFixes.SelectedItems)                  {                      var conversion = item.Tag as Conversion;                      if (conversion.EditedText != null)                      {                          conversion.EditedText = null;                          item.SubItems[3].Text = conversion.After;                          _editedParagraphs.Remove(conversion.Paragraph);                      }                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,toolStripMenuItemEdit_Click,The following statement contains a magic number: if (listViewFixes.SelectedItems.Count == 1)              {                  _editorItem = listViewFixes.SelectedItems[0];                  var conversion = _editorItem.Tag as Conversion;                  textBoxEditAfter.Text = conversion.EditedText ?? conversion.ConvertedText;                  panelEditAfter.Left = listViewFixes.Left + (listViewFixes.Width - panelEditAfter.Width) / 2;                  panelEditAfter.Top = listViewFixes.Top + (listViewFixes.Height - panelEditAfter.Height) / 2;                  panelEditAfter.Show();                  textBoxEditAfter.Select();                  textBoxEditAfter.Select(0' 0);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,toolStripMenuItemEdit_Click,The following statement contains a magic number: if (listViewFixes.SelectedItems.Count == 1)              {                  _editorItem = listViewFixes.SelectedItems[0];                  var conversion = _editorItem.Tag as Conversion;                  textBoxEditAfter.Text = conversion.EditedText ?? conversion.ConvertedText;                  panelEditAfter.Left = listViewFixes.Left + (listViewFixes.Width - panelEditAfter.Width) / 2;                  panelEditAfter.Top = listViewFixes.Top + (listViewFixes.Height - panelEditAfter.Height) / 2;                  panelEditAfter.Show();                  textBoxEditAfter.Select();                  textBoxEditAfter.Select(0' 0);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,panelEditAfter_Leave,The following statement contains a magic number: if (_editorItem != null)              {                  var conversion = _editorItem.Tag as Conversion;                  var after = textBoxEditAfter.Text;                  if (_editedParagraphs.ContainsKey(conversion.Paragraph))                  {                      conversion.EditedText = after;                  }                  else if (after != conversion.ConvertedText)                  {                      conversion.EditedText = after;                      _editedParagraphs.Add(conversion.Paragraph' conversion);                  }                  _editorItem.SubItems[3].Text = conversion.After;                  _editorItem = null;                  panelEditAfter.Hide();                  listViewFixes.Select();                  panelEditAfter.Top = listViewFixes.Top + 40;                  panelEditAfter.Left = listViewFixes.Left + 20;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,panelEditAfter_Leave,The following statement contains a magic number: if (_editorItem != null)              {                  var conversion = _editorItem.Tag as Conversion;                  var after = textBoxEditAfter.Text;                  if (_editedParagraphs.ContainsKey(conversion.Paragraph))                  {                      conversion.EditedText = after;                  }                  else if (after != conversion.ConvertedText)                  {                      conversion.EditedText = after;                      _editedParagraphs.Add(conversion.Paragraph' conversion);                  }                  _editorItem.SubItems[3].Text = conversion.After;                  _editorItem = null;                  panelEditAfter.Hide();                  listViewFixes.Select();                  panelEditAfter.Top = listViewFixes.Top + 40;                  panelEditAfter.Left = listViewFixes.Left + 20;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,panelEditAfter_Leave,The following statement contains a magic number: if (_editorItem != null)              {                  var conversion = _editorItem.Tag as Conversion;                  var after = textBoxEditAfter.Text;                  if (_editedParagraphs.ContainsKey(conversion.Paragraph))                  {                      conversion.EditedText = after;                  }                  else if (after != conversion.ConvertedText)                  {                      conversion.EditedText = after;                      _editedParagraphs.Add(conversion.Paragraph' conversion);                  }                  _editorItem.SubItems[3].Text = conversion.After;                  _editorItem = null;                  panelEditAfter.Hide();                  listViewFixes.Select();                  panelEditAfter.Top = listViewFixes.Top + 40;                  panelEditAfter.Left = listViewFixes.Left + 20;              }
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(698' 437);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Location = new System.Drawing.Point(698' 437);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonOK.TabIndex = 2;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(779' 437);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Location = new System.Drawing.Point(779' 437);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.Size = new System.Drawing.Size(75' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.buttonCancel.TabIndex = 3;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 27);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Location = new System.Drawing.Point(12' 27);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(82' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.Size = new System.Drawing.Size(82' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelDescription.TabIndex = 4;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Location = new System.Drawing.Point(12' 46);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Location = new System.Drawing.Point(12' 46);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Size = new System.Drawing.Size(842' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.listViewFixes.Size = new System.Drawing.Size(842' 385);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader1.Width = 40;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader2.Width = 50;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader3.Width = 364;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.columnHeader4.Width = 364;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFixes.Size = new System.Drawing.Size(155' 98);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.contextMenuStripFixes.Size = new System.Drawing.Size(155' 98);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemEdit.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemEdit.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemReset.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemReset.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparatorFixes1.Size = new System.Drawing.Size(151' 6);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripSeparatorFixes1.Size = new System.Drawing.Size(151' 6);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemSelectAll.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemSelectAll.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemInvert.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemInvert.Size = new System.Drawing.Size(154' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Location = new System.Drawing.Point(9' 434);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Location = new System.Drawing.Point(9' 434);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Size = new System.Drawing.Size(35' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.labelTotal.Size = new System.Drawing.Size(35' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelIssues.Location = new System.Drawing.Point(12' 451);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelIssues.Location = new System.Drawing.Point(12' 451);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelIssues.Size = new System.Drawing.Size(116' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelIssues.Size = new System.Drawing.Size(116' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelIssues.TabIndex = 8;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelWordList.Location = new System.Drawing.Point(129' 451);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelWordList.Location = new System.Drawing.Point(129' 451);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelWordList.Size = new System.Drawing.Size(84' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelWordList.Size = new System.Drawing.Size(84' 13);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.linkLabelWordList.TabIndex = 9;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBuiltInList.Location = new System.Drawing.Point(576' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBuiltInList.Location = new System.Drawing.Point(576' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBuiltInList.Size = new System.Drawing.Size(94' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBuiltInList.Size = new System.Drawing.Size(94' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBuiltInList.TabIndex = 5;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonLocalList.Location = new System.Drawing.Point(677' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonLocalList.Location = new System.Drawing.Point(677' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonLocalList.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonLocalList.Size = new System.Drawing.Size(83' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonLocalList.TabIndex = 6;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBothLists.Location = new System.Drawing.Point(765' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBothLists.Location = new System.Drawing.Point(765' 23);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBothLists.Size = new System.Drawing.Size(89' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBothLists.Size = new System.Drawing.Size(89' 17);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.radioButtonBothLists.TabIndex = 7;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(866' 24);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.Size = new System.Drawing.Size(866' 24);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.menuStrip1.TabIndex = 10;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemFile.Size = new System.Drawing.Size(37' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemFile.Size = new System.Drawing.Size(37' 20);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemManageLocalWords.Size = new System.Drawing.Size(193' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemManageLocalWords.Size = new System.Drawing.Size(193' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemViewBuiltInWords.Size = new System.Drawing.Size(193' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.toolStripMenuItemViewBuiltInWords.Size = new System.Drawing.Size(193' 22);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.Location = new System.Drawing.Point(32' 86);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.Location = new System.Drawing.Point(32' 86);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.Padding = new System.Windows.Forms.Padding(5);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.Size = new System.Drawing.Size(460' 83);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.Size = new System.Drawing.Size(460' 83);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.panelEditAfter.TabIndex = 11;
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxEditAfter.Location = new System.Drawing.Point(5' 5);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxEditAfter.Location = new System.Drawing.Point(5' 5);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxEditAfter.Size = new System.Drawing.Size(448' 71);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.textBoxEditAfter.Size = new System.Drawing.Size(448' 71);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(866' 473);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.ClientSize = new System.Drawing.Size(866' 473);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(800' 428);
Magic Number,Nikse.SubtitleEdit.PluginLogic,PluginForm,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\PluginForm.cs,InitializeComponent,The following statement contains a magic number: this.MinimumSize = new System.Drawing.Size(800' 428);
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,SubRip,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\SubRip.cs,TryParseLine,The following statement contains a magic number: if (_currentLine.Length == 0)              {                  // Number    : ok' ignore surplus empty line                  // TimeCodes : error' skip up to next number                  // Text      : ok' separator between paragraphs                  if (_expecting == LineType.Text)                  {                      subtitle.Paragraphs.Add(_paragraph);                      _paragraph = new Paragraph();                  }                  else if (_expecting == LineType.TimeCodes)                  {                      success = false;                  }                  _expecting = LineType.Number;              }              else if (int.TryParse(line' NumberStyles.None' CultureInfo.InvariantCulture' out number))              {                  // Number    : ok' as expected                  // TimeCodes : error' discard previous number                  // Text      : ok' text is a number                  if (_expecting == LineType.TimeCodes)                  {                      success = false;                      _expecting = LineType.Number;                  }                  if (_expecting == LineType.Number)                  {                      _paragraph.Number = number;                      _expecting = LineType.TimeCodes;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else if ((timecodes = RegexTimeCodes.Match(line)).Success)              {                  // Number    : error' presume missing number                  // TimeCodes : ok' as expected                  // Text      : odd' but not prohibited                  if (_expecting == LineType.Number)                  {                      success = false;                      _expecting = LineType.TimeCodes;                  }                  if (_expecting == LineType.TimeCodes)                  {                      try                      {                          var hours = int.Parse(timecodes.Groups[1].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[2].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[3].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[4].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.StartTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.StartTime = new TimeCode(99' 59' 59' 999);                      }                      try                      {                          var hours = int.Parse(timecodes.Groups[5].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var minutes = int.Parse(timecodes.Groups[6].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var seconds = int.Parse(timecodes.Groups[7].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          var milliseconds = int.Parse(timecodes.Groups[8].Value' NumberStyles.AllowLeadingSign' CultureInfo.InvariantCulture);                          _paragraph.EndTime = new TimeCode(hours' minutes' seconds' milliseconds);                      }                      catch                      {                          success = false; // oops' overflow!                          _paragraph.EndTime = new TimeCode(99' 59' 59' 999);                      }                      _paragraph.Text = string.Empty;                      _expecting = LineType.Text;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }              else              {                  // Number    : error' skip up to next number                  // TimeCodes : error' skip up to next number                  // Text      : ok' as expected                  if (_expecting != LineType.Text)                  {                      success = false;                      _paragraph = new Paragraph();                      _expecting = LineType.Number;                  }                  else // (_expecting == LineType.Text)                  {                      AddCurrentLineToParagraphText();                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\Utilities.cs,RemoveHtmlTags,The following statement contains a magic number: if (alsoSsa)              {                  const string SSATAg = "{\\";                  idx = s.IndexOf(SSATAg' StringComparison.Ordinal);                  while (idx >= 0)                  {                      var endIdx = s.IndexOf('}'' idx + 2);                      if (endIdx < idx)                          break;                      s = s.Remove(idx' endIdx - idx + 1);                      idx = s.IndexOf(SSATAg' idx' StringComparison.Ordinal);                  }              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\Utilities.cs,RemoveHtmlTags,The following statement contains a magic number: while (idx >= 0)              {                  var endIdx = s.IndexOf('>'' idx + 5);                  if (endIdx < idx)                      break;                  s = s.Remove(idx' endIdx - idx + 1);                  idx = s.IndexOf("<font"' idx' StringComparison.OrdinalIgnoreCase);              }
Magic Number,Nikse.SubtitleEdit.PluginLogic.Logic,Utilities,C:\repos\SubtitleEdit_plugins\AmericanToBritish\DLL\Logic\Utilities.cs,GetWordListFileName,The following statement contains a magic number: if (path.StartsWith("file:\\"' StringComparison.Ordinal))                  path = path.Remove(0' 6);
