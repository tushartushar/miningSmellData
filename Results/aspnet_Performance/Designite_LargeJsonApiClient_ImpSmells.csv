Implementation smell,Namespace,Class,File,Method,Description
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The length of the statement  "            var serverUriOption = app.Option("--server|-s"' $"The URI of the server to target' defaults to {DefaultServerUri}"' CommandOptionType.SingleValue); " is 147.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The length of the statement  "            var runGetOption = app.Option("--get|-g"' "Indicates the program to run the GET test' you must specify at least one of GET or POST"' CommandOptionType.NoValue); " is 160.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The length of the statement  "            var runPostOption = app.Option("--post|-p"' "Indicates the program to run the POST test' you must specify at least one of GET or POST"' CommandOptionType.NoValue); " is 163.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The length of the statement  "            var iterationCountOption = app.Option("--iterations|-i"' "The iteration count for the test' defaults to {DefaultIterationCount}' must be an int"' CommandOptionType.SingleValue); " is 177.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,RunPostScenario,The length of the statement  "                var result = client.PostAsync("/popcorn/movie/0"' new StringContent(DataFactory.MovieStrings[i]' Encoding.UTF8' "application/json")).Result; " is 140.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,RunPostScenario,The length of the statement  "                var result = client.PostAsync("/popcorn/series/0"' new StringContent(DataFactory.SeriesStrings[i]' Encoding.UTF8' "application/json")).Result; " is 142.
Long Statement,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,RunPostScenario,The length of the statement  "                var result = client.PostAsync("/popcorn/season/0"' new StringContent(DataFactory.SeasonStrings[i]' Encoding.UTF8' "application/json")).Result; " is 142.
Magic Number,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The following statement contains a magic number: app.OnExecute(() =>              {                  var serverUri = DefaultServerUri;                  if (serverUriOption.HasValue())                  {                      var serverUriString = serverUriOption.Value();                      if (serverUriString == null)                      {                          app.ShowHelp();                          return 2;                      }                      serverUri = serverUriString;                  }                    var runGet = runGetOption.HasValue();                  var runPost = runPostOption.HasValue();                  if (!(runGet | runPost))                  {                      app.ShowHelp();                      return 3;                  }                    var iterationCount = DefaultIterationCount;                  if (iterationCountOption.HasValue())                  {                      if (!int.TryParse(iterationCountOption.Value()' out iterationCount))                      {                          app.ShowHelp();                          return 4;                      }                  }                    PrintLine($"Targetting { serverUri }");                  PrintLine("Start test...");                  try                  {                      using (var client = new HttpClient())                      {                          client.BaseAddress = new Uri(serverUri);                            for (var i = 1; i <= iterationCount; ++i)                          {                              PrintLine($"Iteration { i }");                                if (runGet)                              {                                  RunGetScenario(client);                              }                              if (runPost)                              {                                  RunPostScenario(client);                              }                          }                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(e.Message);                      Console.Error.WriteLine(e.StackTrace);                  }                  PrintLine("Done.");                    return 0;              });
Magic Number,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The following statement contains a magic number: app.OnExecute(() =>              {                  var serverUri = DefaultServerUri;                  if (serverUriOption.HasValue())                  {                      var serverUriString = serverUriOption.Value();                      if (serverUriString == null)                      {                          app.ShowHelp();                          return 2;                      }                      serverUri = serverUriString;                  }                    var runGet = runGetOption.HasValue();                  var runPost = runPostOption.HasValue();                  if (!(runGet | runPost))                  {                      app.ShowHelp();                      return 3;                  }                    var iterationCount = DefaultIterationCount;                  if (iterationCountOption.HasValue())                  {                      if (!int.TryParse(iterationCountOption.Value()' out iterationCount))                      {                          app.ShowHelp();                          return 4;                      }                  }                    PrintLine($"Targetting { serverUri }");                  PrintLine("Start test...");                  try                  {                      using (var client = new HttpClient())                      {                          client.BaseAddress = new Uri(serverUri);                            for (var i = 1; i <= iterationCount; ++i)                          {                              PrintLine($"Iteration { i }");                                if (runGet)                              {                                  RunGetScenario(client);                              }                              if (runPost)                              {                                  RunPostScenario(client);                              }                          }                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(e.Message);                      Console.Error.WriteLine(e.StackTrace);                  }                  PrintLine("Done.");                    return 0;              });
Magic Number,LargeJsonApiClient,Program,C:\repos\aspnet_Performance\testapp\LargeJsonApi\LargeJsonApiClient\Program.cs,Main,The following statement contains a magic number: app.OnExecute(() =>              {                  var serverUri = DefaultServerUri;                  if (serverUriOption.HasValue())                  {                      var serverUriString = serverUriOption.Value();                      if (serverUriString == null)                      {                          app.ShowHelp();                          return 2;                      }                      serverUri = serverUriString;                  }                    var runGet = runGetOption.HasValue();                  var runPost = runPostOption.HasValue();                  if (!(runGet | runPost))                  {                      app.ShowHelp();                      return 3;                  }                    var iterationCount = DefaultIterationCount;                  if (iterationCountOption.HasValue())                  {                      if (!int.TryParse(iterationCountOption.Value()' out iterationCount))                      {                          app.ShowHelp();                          return 4;                      }                  }                    PrintLine($"Targetting { serverUri }");                  PrintLine("Start test...");                  try                  {                      using (var client = new HttpClient())                      {                          client.BaseAddress = new Uri(serverUri);                            for (var i = 1; i <= iterationCount; ++i)                          {                              PrintLine($"Iteration { i }");                                if (runGet)                              {                                  RunGetScenario(client);                              }                              if (runPost)                              {                                  RunPostScenario(client);                              }                          }                      }                  }                  catch (Exception e)                  {                      Console.Error.WriteLine(e.Message);                      Console.Error.WriteLine(e.StackTrace);                  }                  PrintLine("Done.");                    return 0;              });
