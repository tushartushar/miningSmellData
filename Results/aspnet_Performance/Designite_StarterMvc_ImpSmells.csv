Implementation smell,Namespace,Class,File,Method,Description
Long Method,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The method has 128 lines of code.
Long Method,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The method has 111 lines of code.
Long Method,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The method has 111 lines of code.
Long Parameter List,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,AccountController,The method has 5 parameters. Parameters: userManager' signInManager' emailSender' smsSender' loggerFactory
Long Parameter List,StarterMvc.Controllers,ManageController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\ManageController.cs,ManageController,The method has 5 parameters. Parameters: userManager' signInManager' emailSender' smsSender' loggerFactory
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,Login,The length of the statement  "                var result = await _signInManager.PasswordSignInAsync(model.Email' model.Password' model.RememberMe' lockoutOnFailure: false); " is 126.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,Register,The length of the statement  "                    // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=532713 " is 139.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,Register,The length of the statement  "                    //var callbackUrl = Url.Action("ConfirmEmail"' "Account"' new { userId = user.Id' code = code }' protocol: HttpContext.Request.Scheme); " is 135.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,ForgotPassword,The length of the statement  "                // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=532713 " is 139.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,ForgotPassword,The length of the statement  "                //var callbackUrl = Url.Action("ResetPassword"' "Account"' new { userId = user.Id' code = code }' protocol: HttpContext.Request.Scheme); " is 136.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,SendCode,The length of the statement  "            return RedirectToAction(nameof(VerifyCode)' new { Provider = model.SelectedProvider' ReturnUrl = model.ReturnUrl' RememberMe = model.RememberMe }); " is 147.
Long Statement,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,VerifyCode,The length of the statement  "            var result = await _signInManager.TwoFactorSignInAsync(model.Provider' model.Code' model.RememberMe' model.RememberBrowser); " is 124.
Long Statement,StarterMvc.Controllers,ManageController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\ManageController.cs,LinkLogin,The length of the statement  "            var properties = _signInManager.ConfigureExternalAuthenticationProperties(provider' redirectUrl' _userManager.GetUserId(User)); " is 127.
Empty Catch Block,StarterMvc,Startup,C:\repos\aspnet_Performance\testapp\StarterMvc\Startup.cs,Configure,The method has an empty catch block.
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,Login,The following statement contains a magic number: if (ModelState.IsValid)              {                  // This doesn't count login failures towards account lockout                  // To enable password failures to trigger account lockout' set lockoutOnFailure: true                  var result = await _signInManager.PasswordSignInAsync(model.Email' model.Password' model.RememberMe' lockoutOnFailure: false);                  if (result.Succeeded)                  {                      _logger.LogInformation(1' "User logged in.");                      return RedirectToLocal(returnUrl);                  }                  if (result.RequiresTwoFactor)                  {                      return RedirectToAction(nameof(SendCode)' new { ReturnUrl = returnUrl' RememberMe = model.RememberMe });                  }                  if (result.IsLockedOut)                  {                      _logger.LogWarning(2' "User account locked out.");                      return View("Lockout");                  }                  else                  {                      ModelState.AddModelError(string.Empty' "Invalid login attempt.");                      return View(model);                  }              }
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,Register,The following statement contains a magic number: if (ModelState.IsValid)              {                  var user = new ApplicationUser { UserName = model.Email' Email = model.Email };                  var result = await _userManager.CreateAsync(user' model.Password);                  if (result.Succeeded)                  {                      // For more information on how to enable account confirmation and password reset please visit http://go.microsoft.com/fwlink/?LinkID=532713                      // Send an email with this link                      //var code = await _userManager.GenerateEmailConfirmationTokenAsync(user);                      //var callbackUrl = Url.Action("ConfirmEmail"' "Account"' new { userId = user.Id' code = code }' protocol: HttpContext.Request.Scheme);                      //await _emailSender.SendEmailAsync(model.Email' "Confirm your account"'                      //    "Please confirm your account by clicking this link: <a href=\"" + callbackUrl + "\">link</a>");                      await _signInManager.SignInAsync(user' isPersistent: false);                      _logger.LogInformation(3' "User created a new account with password.");                      return RedirectToAction(nameof(HomeController.Index)' "Home");                  }                  AddErrors(result);              }
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,LogOff,The following statement contains a magic number: _logger.LogInformation(4' "User logged out.");
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,ExternalLoginCallback,The following statement contains a magic number: if (result.Succeeded)              {                  _logger.LogInformation(5' "User logged in with {Name} provider."' info.LoginProvider);                  return RedirectToLocal(returnUrl);              }
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,ExternalLoginConfirmation,The following statement contains a magic number: if (ModelState.IsValid)              {                  // Get the information about the user from the external login provider                  var info = await _signInManager.GetExternalLoginInfoAsync();                  if (info == null)                  {                      return View("ExternalLoginFailure");                  }                  var user = new ApplicationUser { UserName = model.Email' Email = model.Email };                  var result = await _userManager.CreateAsync(user);                  if (result.Succeeded)                  {                      result = await _userManager.AddLoginAsync(user' info);                      if (result.Succeeded)                      {                          await _signInManager.SignInAsync(user' isPersistent: false);                          _logger.LogInformation(6' "User created an account using {Name} provider."' info.LoginProvider);                          return RedirectToLocal(returnUrl);                      }                  }                  AddErrors(result);              }
Magic Number,StarterMvc.Controllers,AccountController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\AccountController.cs,VerifyCode,The following statement contains a magic number: if (result.IsLockedOut)              {                  _logger.LogWarning(7' "User account locked out.");                  return View("Lockout");              }              else              {                  ModelState.AddModelError(""' "Invalid code.");                  return View(model);              }
Magic Number,StarterMvc.Controllers,ManageController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\ManageController.cs,DisableTwoFactorAuthentication,The following statement contains a magic number: if (user != null)              {                  await _userManager.SetTwoFactorEnabledAsync(user' false);                  await _signInManager.SignInAsync(user' isPersistent: false);                  _logger.LogInformation(2' "User disabled two-factor authentication.");              }
Magic Number,StarterMvc.Controllers,ManageController,C:\repos\aspnet_Performance\testapp\StarterMvc\Controllers\ManageController.cs,ChangePassword,The following statement contains a magic number: if (user != null)              {                  var result = await _userManager.ChangePasswordAsync(user' model.OldPassword' model.NewPassword);                  if (result.Succeeded)                  {                      await _signInManager.SignInAsync(user' isPersistent: false);                      _logger.LogInformation(3' "User changed their password successfully.");                      return RedirectToAction(nameof(Index)' new { Message = ManageMessageId.ChangePasswordSuccess });                  }                  AddErrors(result);                  return View(model);              }
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Name = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_IdentityRole"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetRoles"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Name = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_IdentityRole"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(nullable: true' maxLength: 256)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedUserName = table.Column<string>(nullable: true' maxLength: 256)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_ApplicationUser"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(nullable: true' maxLength: 256)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedUserName = table.Column<string>(nullable: true' maxLength: 256)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_ApplicationUser"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(nullable: true' maxLength: 256)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedUserName = table.Column<string>(nullable: true' maxLength: 256)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_ApplicationUser"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,Up,The following statement contains a magic number: migrationBuilder.CreateTable(                  name: "AspNetUsers"'                  columns: table => new                  {                      Id = table.Column<string>(nullable: false)'                      AccessFailedCount = table.Column<int>(nullable: false)'                      ConcurrencyStamp = table.Column<string>(nullable: true)'                      Email = table.Column<string>(nullable: true' maxLength: 256)'                      EmailConfirmed = table.Column<bool>(nullable: false)'                      LockoutEnabled = table.Column<bool>(nullable: false)'                      LockoutEnd = table.Column<DateTimeOffset>(nullable: true)'                      NormalizedEmail = table.Column<string>(nullable: true' maxLength: 256)'                      NormalizedUserName = table.Column<string>(nullable: true' maxLength: 256)'                      PasswordHash = table.Column<string>(nullable: true)'                      PhoneNumber = table.Column<string>(nullable: true)'                      PhoneNumberConfirmed = table.Column<bool>(nullable: false)'                      SecurityStamp = table.Column<string>(nullable: true)'                      TwoFactorEnabled = table.Column<bool>(nullable: false)'                      UserName = table.Column<string>(nullable: true' maxLength: 256)                  }'                  constraints: table =>                  {                      table.PrimaryKey("PK_ApplicationUser"' x => x.Id);                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasAnnotation("Relational:Name"' "RoleNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetRoles");                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasAnnotation("Relational:Name"' "RoleNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetRoles");                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,CreateIdentitySchema,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\00000000000000_CreateIdentitySchema.cs,BuildTargetModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasAnnotation("Relational:Name"' "RoleNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetRoles");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("Microsoft.AspNetCore.Identity.EntityFrameworkCore.IdentityRole"' b =>                  {                      b.Property<string>("Id");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Name")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedName")                          .HasAnnotation("Relational:Name"' "RoleNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetRoles");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
Magic Number,StarterMvc.Migrations,ApplicationDbContextModelSnapshot,C:\repos\aspnet_Performance\testapp\StarterMvc\Migrations\ApplicationDbContextModelSnapshot.cs,BuildModel,The following statement contains a magic number: modelBuilder.Entity("StarterMvc.Models.ApplicationUser"' b =>                  {                      b.Property<string>("Id");                        b.Property<int>("AccessFailedCount");                        b.Property<string>("ConcurrencyStamp")                          .IsConcurrencyToken();                        b.Property<string>("Email")                          .HasAnnotation("MaxLength"' 256);                        b.Property<bool>("EmailConfirmed");                        b.Property<bool>("LockoutEnabled");                        b.Property<DateTimeOffset?>("LockoutEnd");                        b.Property<string>("NormalizedEmail")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("NormalizedUserName")                          .HasAnnotation("MaxLength"' 256);                        b.Property<string>("PasswordHash");                        b.Property<string>("PhoneNumber");                        b.Property<bool>("PhoneNumberConfirmed");                        b.Property<string>("SecurityStamp");                        b.Property<bool>("TwoFactorEnabled");                        b.Property<string>("UserName")                          .HasAnnotation("MaxLength"' 256);                        b.HasKey("Id");                        b.HasIndex("NormalizedEmail")                          .HasAnnotation("Relational:Name"' "EmailIndex");                        b.HasIndex("NormalizedUserName")                          .HasAnnotation("Relational:Name"' "UserNameIndex");                        b.HasAnnotation("Relational:TableName"' "AspNetUsers");                  });
