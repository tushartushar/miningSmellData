Implementation smell,Namespace,Class,File,Method,Description
Long Method,GW2PAO.Modules.Events,EventsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,RefreshEvents,The method has 101 lines of code.
Long Method,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The method has 123 lines of code.
Long Method,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The method has 131 lines of code.
Long Method,GW2PAO.ViewModels,HotkeySettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,The method has 132 lines of code.
Long Method,GW2PAO.Modules.WebBrowser.Views,BrowserView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The method has 106 lines of code.
Complex Method,GW2PAO.Infrastructure.Hotkeys,Hotkey,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\Hotkey.cs,ToString,Cyclomatic complexity of the method is 8
Complex Method,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,Cyclomatic complexity of the method is 9
Complex Method,GW2PAO.Utility,ProcessMonitor,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ProcessMonitor.cs,Refresh,Cyclomatic complexity of the method is 9
Complex Method,GW2PAO.ViewModels,HotkeySettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,Cyclomatic complexity of the method is 38
Complex Method,GW2PAO.Views,HotkeyUserControl,C:\repos\SamHurne_gw2pao\GW2PAO\Views\HotkeyUserControl.xaml.cs,EntryBox_KeyDown,Cyclomatic complexity of the method is 8
Long Parameter List,GW2PAO.Modules.Map.ViewModels,PlayerMarkersViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\PlayerMarkersViewModel.cs,PlayerMarkersViewModel,The method has 6 parameters. Parameters: taskTrackerVm' userData' playerTaskFactory' tasksController' zoneService' playerService
Long Parameter List,GW2PAO.Modules.Map.ViewModels,MapViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\MapViewModel.cs,MapViewModel,The method has 6 parameters. Parameters: zoneController' zoneService' playerService' mapMarkers' zoneItems' userData
Long Parameter List,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,WvWController,The method has 5 parameters. Parameters: wvwService' playerService' hasMap' guildService' userData
Long Parameter List,GW2PAO.Utility,MailUtility,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The method has 8 parameters. Parameters: to' body' subject' fromAddress' fromDisplay' credentialUser' credentialPassword' attachments
Long Parameter List,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,GW2PAO.Utility,User32,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\User32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,GW2PAO.Modules.Dungeons,DungeonsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,DungeonsController,The method has 5 parameters. Parameters: dungeonsService' zoneService' playerService' browserController' userData
Long Parameter List,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The method has 5 parameters. Parameters: zoneService' playerService' systemService' zoneNameObject' userData
Long Parameter List,GW2PAO.Infrastructure.ViewModels,CheckableMenuItem,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\ViewModels\CheckableMenuItem.cs,CheckableMenuItem,The method has 6 parameters. Parameters: header' staysOpen' setter' getter' propertyOwner' isCheckedProperty
Long Parameter List,GW2PAO.ViewModels,ShellViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,ShellViewModel,The method has 7 parameters. Parameters: systemService' settingsViewController' generalSettingsVm' hotkeySettingsVm' container' eventAggregator' processMonitor
Long Identifier,GW2PAO.Infrastructure,HotkeyCommands,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\HotkeyCommands.cs,,The length of the parameter ToggleInteractiveWindowsCommand is 31.
Long Identifier,GW2PAO.Infrastructure,HotkeyCommands,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\HotkeyCommands.cs,,The length of the parameter ToggleNotificationWindowBordersCommand is 38.
Long Identifier,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,,The length of the parameter isSellListingNotificationShown is 30.
Long Identifier,GW2PAO.Modules.Events.ViewModels.EventNotification,MetaEventNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\ViewModels\EventNotification\MetaEventNotificationViewModel.cs,MetaEventNotificationViewModel,The length of the parameter visibleNotificationsCollection is 30.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areBlueBorderlandsNotificationsEnabled is 38.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areGreenBorderlandsNotificationsEnabled is 39.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areRedBorderlandsNotificationsEnabled is 37.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areEternalBattlegroundsNotificationsEnabled is 43.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter notifyWhenOtherTakesOtherObjective is 34.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areBloodlustNotificationsEnabled is 32.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter resetPriceNotificationsInterval is 31.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter areBuyOrderPriceNotificationsEnabled is 36.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter areSellListingPriceNotificationsEnabled is 39.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter ectoplasmThresholdUsesSellListing is 33.
Long Identifier,GW2PAO.Modules.Teamspeak,TeamspeakUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\TeamspeakUserData.cs,,The length of the parameter showEnterExitChannelNotifications is 33.
Long Identifier,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,WvWObjectiveViewModel,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.ViewModels,HotkeySettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,,The length of the parameter toggleInteractiveWindowsHotkey is 30.
Long Identifier,GW2PAO.ViewModels,HotkeySettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,,The length of the parameter toggleNotificationWindowBordersHotkey is 37.
Long Identifier,GW2PAO.Modules.Commerce.ViewModels.PriceNotification,PriceNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\PriceNotification\PriceNotificationViewModel.cs,PriceNotificationViewModel,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.Modules.Commerce.Models,PriceWatch,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Models\PriceWatch.cs,,The length of the parameter isSellListingUpperLimitEnabled is 30.
Long Identifier,GW2PAO.Modules.Commerce.Models,PriceWatch,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Models\PriceWatch.cs,,The length of the parameter isSellListingLowerLimitEnabled is 30.
Long Statement,GW2PAO,App,C:\repos\SamHurne_gw2pao\GW2PAO\App.xaml.cs,OnStartup,The length of the statement  "            logger.Info("Application starting - " + executingAssembly.GetName().Name + " - " + executingAssembly.GetName().Version + " - " + fvi.FileVersion + " - " + fvi.ProductVersion); " is 175.
Long Statement,GW2PAO.Controllers,SettingsViewController,C:\repos\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenHotkeySettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(HotkeySettingsView)))); " is 125.
Long Statement,GW2PAO.Controllers,SettingsViewController,C:\repos\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenEventSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(EventSettingsView)))); " is 123.
Long Statement,GW2PAO.Controllers,SettingsViewController,C:\repos\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenDungeonSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(DungeonSettingsView)))); " is 127.
Long Statement,GW2PAO.Controllers,SettingsViewController,C:\repos\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenCommerceSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(CommerceSettingsView)))); " is 129.
Long Statement,GW2PAO.Infrastructure.Hotkeys,GlobalHotkeyManager,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\GlobalHotkeyManager.cs,Register,The length of the statement  "            bool result = User32.RegisterHotKey(IntPtr.Zero' hotkey.KeyId' (UInt32)hotkey.KeyModifiers' (UInt32)hotkey.VirtualKeyCode); " is 123.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.BuyOrderUpperLimit.Value = this.ItemData.Prices.HighestBuyOrder + 1; // default to +1 so we don't immediately do a notification " is 137.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.BuyOrderLowerLimit.Value = this.ItemData.Prices.HighestBuyOrder - 1; // default to +1 so we don't immediately do a notification " is 137.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.SellListingUpperLimit.Value = this.ItemData.Prices.LowestSellListing + 1; // default to -1 so we don't immediately do a notification " is 142.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.SellListingLowerLimit.Value = this.ItemData.Prices.LowestSellListing - 1; // default to -1 so we don't immediately do a notification " is 142.
Long Statement,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The length of the statement  "                    this.TimeUntilNight = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES + NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes); " is 121.
Long Statement,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The length of the statement  "                    this.DayNightCyclePercentage = ((offsetAdjustedTime.TotalMinutes - NIGHT_START_MINUTES) / (CYCLE_LENGTH_MINUTES - NIGHT_START_MINUTES)) * 100.0; " is 144.
Long Statement,GW2PAO.Modules.Events,EventsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,UserData_PropertyChanged,The length of the statement  "                                var newData = this.eventsService.WorldBossEventTimeTable.WorldEvents.FirstOrDefault(evt => evt.ID == worldBossEvent.EventId); " is 125.
Long Statement,GW2PAO.Views.Events.WorldBossTimers,WorldBossTimerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimerView.xaml.cs,UserControl_MouseDown,The length of the statement  "                ((GW2PAO.Modules.Events.ViewModels.WorldBossTimers.WorldBossEventViewModel)this.DataContext).CopyDataCommand.Execute(null); " is 123.
Long Statement,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The length of the statement  "                double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio; " is 132.
Long Statement,GW2PAO.Modules.Map.ViewModels,PlayerMarkerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\PlayerMarkerViewModel.cs,DetermineCurrentContinent,The length of the statement  "                cont = this.zoneService.GetContinent(1); // Assume default Tyria continent   TODO: Would be nice to use the continent shown on the map " is 134.
Long Statement,GW2PAO.Modules.Tasks,TasksController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The length of the statement  "                    var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' this.UserData.DistanceUnits)); " is 122.
Long Statement,GW2PAO.Modules.Tasks,TasksController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The length of the statement  "                    if (ptask.Task.AutoComplete && CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' API.Data.Enums.Units.Feet) < 10) " is 126.
Long Statement,GW2PAO.Modules.Tasks,TasksController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,EnsureTasksHaveContinentLocation,The length of the statement  "                ptask.Task.ContinentLocation = API.Util.MapsHelper.ConvertToWorldPos(map.ContinentRectangle' map.MapRectangle' CalcUtil.ConvertToMapPosition(ptask.Task.Location)); " is 163.
Long Statement,GW2PAO.Modules.Tasks.ViewModels,NewTaskDialogViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\ViewModels\NewTaskDialogViewModel.cs,RefreshLocation,The length of the statement  "                this.Task.ContinentLocation = API.Util.MapsHelper.ConvertToWorldPos(map.ContinentRectangle' map.MapRectangle' API.Util.CalcUtil.ConvertToMapPosition(this.Task.Location)); " is 170.
Long Statement,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The length of the statement  "                    var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect); " is 134.
Long Statement,GW2PAO.Modules.WebBrowser.ViewModels,BrowserViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\ViewModels\BrowserViewModel.cs,InitializeBookmarks,The length of the statement  "                this.Bookmarks.Add(new Bookmark("Egg Baron Material Promotion Sheet"' new Uri("https://docs.google.com/spreadsheet/lv?key=0As-wCpIszrT9dFB3YjVUVFhfenlDUUpXTVBIdm5qWmc"))); " is 171.
Long Statement,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,InitializeAllObjectivesCollection,The length of the statement  "                // Determine the current match. If this changes' we don't need to re-initialize since the actual objectives don't change - just the owners change " is 145.
Long Statement,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,HandleMatchChange,The length of the statement  "                ConcurrentDictionary<Guid' API.Data.Entities.Guild> guildDict = new ConcurrentDictionary<Guid' API.Data.Entities.Guild>(); " is 122.
Long Statement,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,The length of the statement  "                                logger.Info("{0} - {1}: {2} -> {3}"' objective.Map' objective.Name' objective.PrevWorldOwnerName' objective.WorldOwnerName); " is 124.
Long Statement,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,CalculateDistances,The length of the statement  "            // Calculate time distances for all objectives' based on the player's position' if the player is in the same map as the objective " is 129.
Long Statement,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,CalculateDistances,The length of the statement  "                                objective.DistanceFromPlayer = Math.Round(CalcUtil.CalculateDistance(playerPosition' objective.ModelData.MapLocation' this.UserData.DistanceUnits)); " is 148.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,CopyTo,The length of the statement  "                throw new ArgumentOutOfRangeException("CopyTo() failed:  index parameter was outside the bounds of the supplied array"); " is 120.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,FireEntryAddedNotifications,The length of the statement  "                this.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add' new KeyValuePair<TKey' TVal>((TKey)entry.Key' (TVal)entry.Value)' index)); " is 171.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,FireEntryRemovedNotifications,The length of the statement  "                this.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' new KeyValuePair<TKey' TVal>((TKey)entry.Key' (TVal)entry.Value)' index)); " is 174.
Long Statement,GW2PAO.Utility,Enumerator,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,MoveNext,The length of the statement  "                    _current = new KeyValuePair<Tk' TValue>((Tk)_dictionary.keyedEntryCollection[_index].Key' (TValue)_dictionary.keyedEntryCollection[_index].Value); " is 146.
Long Statement,GW2PAO.Utility,UpdateChecker,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,GetLatestVersion,The length of the statement  "            var request = http.GetStringAsync(new Uri("https://raw.githubusercontent.com/SamHurne/gw2pao/master/latest_version.txt")); " is 122.
Long Statement,GW2PAO.Utility,User32,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\User32.cs,HideFromTaskbar,The length of the statement  "            SetWindowLong(handle' GWL_EXSTYLE' (extendedStyle | ExtendedWindowStyles.WS_EX_TOOLWINDOW) & ~ExtendedWindowStyles.WS_EX_APPWINDOW); " is 132.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                Threading.BeginInvokeOnUI(() => priceWatch.CurrentProfit.Value = (prices.LowestSellListing * 0.85) - prices.HighestBuyOrder); " is 125.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                        this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.BuyOrder' prices.HighestBuyOrder' this.PriceNotifications)); " is 150.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                        this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.SellListing' prices.LowestSellListing' this.PriceNotifications)); " is 155.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                    priceWatch.PastSellListings.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentSellListing.Value)); " is 121.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The length of the statement  "                    logger.Info("Displaying notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType); " is 121.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The length of the statement  "                        logger.Debug("Removing notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType); " is 120.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyUnderAttackText,The length of the statement  "            System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWUnderAttackClipboardText' name' this.Location' this.Type)); " is 125.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyEnemyHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWEnemyHeadedClipboardText' name' this.Location' this.Type)); " is 125.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWPlayerHeadedClipboardText' name' this.Location' this.Type' distance' distanceUnits)); " is 151.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWPlayerHeadedAltClipboardText' name' distance' distanceUnits)); " is 128.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyRIText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWRIClipboardText' name' this.Location' this.Type' this.TimerValue.ToString("mm\\:ss"))); " is 153.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshZone,The length of the statement  "                        logger.Info("Map/Character change detected' resetting zone events. New MapID = {0} | Character Name = {1}"' this.playerService.MapId' this.CharacterName); " is 154.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The length of the statement  "                            var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits)); " is 130.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The length of the statement  "                                var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet)); " is 127.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionUserData.cs,EnableAutoSave,The length of the statement  "            this.HiddenZoneItems.CollectionChanged += (o' e) => ZoneCompletionUserData.SaveData(this' ZoneCompletionUserData.Filename); " is 123.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionUserData.cs,EnableAutoSave,The length of the statement  "                            itemAdded.ZoneItems.CollectionChanged += (a' b) => ZoneCompletionUserData.SaveData(this' ZoneCompletionUserData.Filename); " is 122.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleInteractiveWindowsCommand.RegisterCommand(new DelegateCommand(() => this.IsClickthroughEnabled = !this.IsClickthroughEnabled)); " is 148.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleNotificationWindowBordersCommand.RegisterCommand(new DelegateCommand(() => this.AreNotificationWindowBordersVisible = !this.AreNotificationWindowBordersVisible)); " is 183.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleAutoFadeBordersCommand.RegisterCommand(new DelegateCommand(() => this.AutoFadeBorders = !this.AutoFadeBorders)); " is 133.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleOverlayMenuIconCommand.RegisterCommand(new DelegateCommand(() => this.IsOverlayMenuIconVisible = !this.IsOverlayMenuIconVisible)); " is 151.
Long Statement,GW2PAO.ViewModels,HotkeySettingsViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,The length of the statement  "            this.ToggleNotificationWindowBordersHotkey.Pressed += (o' e) => HotkeyCommands.ToggleNotificationWindowBordersCommand.Execute(null); " is 132.
Long Statement,GW2PAO.ViewModels,ShellViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,OnImportsSatisfied,The length of the statement  "            this.MainMenu.Add(new MenuItem(GW2PAO.Properties.Resources.Settings' () => Commands.OpenGeneralSettingsCommand.Execute(null))); " is 127.
Long Statement,GW2PAO.ViewModels,ShellViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,OnImportsSatisfied,The length of the statement  "            this.MainMenu.Add(new MenuItem(GW2PAO.Properties.Resources.Help' () => Process.Start("https://github.com/SamHurne/gw2pao/wiki"))); " is 130.
Long Statement,GW2PAO.Modules.ZoneCompletion.ViewModels,ZoneCompletionViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ViewModels\ZoneCompletionViewModel.cs,ResetUnlockedPoints_Zone,The length of the statement  "            var characterItems = this.UserData.UnlockedZoneItems.FirstOrDefault(czi => czi.Character == this.controller.CharacterName); " is 123.
Long Statement,GW2PAO.Views,ShellView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\ShellView.xaml.cs,OnSettingsPropertyChanged,The length of the statement  "            else if (e.PropertyName == ReflectionUtility.GetPropertyName(() => Settings.Default.AutoHideAllWindowsWhenGw2LosesFocus)) " is 121.
Complex Conditional,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,The conditional expression  "objective.Type != ObjectiveType.TempleofLostPrayers                                      && objective.Type != ObjectiveType.BattlesHollow                                      && objective.Type != ObjectiveType.BauersEstate                                      && objective.Type != ObjectiveType.OrchardOverlook                                      && objective.Type != ObjectiveType.CarversAscent"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,RefreshVisibility,The conditional expression  "!this.userData.AreBloodlustObjectivesShown &&                          (this.Type == ObjectiveType.TempleofLostPrayers                           || this.Type == ObjectiveType.BattlesHollow                           || this.Type == ObjectiveType.BauersEstate                           || this.Type == ObjectiveType.OrchardOverlook                           || this.Type == ObjectiveType.CarversAscent)"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyEnemyHeadedToText,The conditional expression  "this.Type != ObjectiveType.BattlesHollow                  && this.Type != ObjectiveType.BauersEstate                  && this.Type != ObjectiveType.CarversAscent                  && this.Type != ObjectiveType.OrchardOverlook                  && this.Type != ObjectiveType.TempleofLostPrayers"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The conditional expression  "this.Type != ObjectiveType.BattlesHollow                  && this.Type != ObjectiveType.BauersEstate                  && this.Type != ObjectiveType.CarversAscent                  && this.Type != ObjectiveType.OrchardOverlook                  && this.Type != ObjectiveType.TempleofLostPrayers"  is complex.
Complex Conditional,GW2PAO.Views,HotkeyUserControl,C:\repos\SamHurne_gw2pao\GW2PAO\Views\HotkeyUserControl.xaml.cs,EntryBox_KeyDown,The conditional expression  "e.Key != Key.LeftShift                      && e.Key != Key.RightShift                      && e.Key != Key.LeftCtrl                      && e.Key != Key.RightCtrl                      && e.Key != Key.LeftAlt                      && e.Key != Key.RightAlt                      && e.Key != Key.LWin                      && e.Key != Key.RWin                      && e.Key != Key.Escape"  is complex.
Empty Catch Block,GW2PAO,App,C:\repos\SamHurne_gw2pao\GW2PAO\App.xaml.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,GW2PAO.Utility,MailUtility,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The method has an empty catch block.
Magic Number,GW2PAO.Converters,ProgressToAngleConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\ProgressToAngleConverter.cs,Convert,The following statement contains a magic number: return 359.9999 * (progress / (bar.Maximum - bar.Minimum));
Magic Number,GW2PAO.Converters,EventStateConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\EventStateConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(Visibility))              {                  switch (state)                  {                      case EventState.Active:                      case EventState.Preparation:                      case EventState.Warmup:                          return Visibility.Visible;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return Visibility.Collapsed;                  }              }              else if (targetType == typeof(System.Windows.Media.Color))              {                  switch (state)                  {                      case EventState.Active:                          return System.Windows.Media.Colors.LawnGreen;                      case EventState.Preparation:                      case EventState.Warmup:                          return System.Windows.Media.Colors.Goldenrod;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (state)                  {                      case EventState.Active:                          return System.Windows.Media.Brushes.LawnGreen;                      case EventState.Preparation:                      case EventState.Warmup:                          return System.Windows.Media.Brushes.Yellow;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else if (targetType == typeof(double))              {                  switch (state)                  {                      case EventState.Active:                          return 1.0;                      case EventState.Preparation:                      case EventState.Warmup:                          return 0.75;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return 0.35;                  }              }              else              {                  return state;              }
Magic Number,GW2PAO.Converters,EventStateConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\EventStateConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(Visibility))              {                  switch (state)                  {                      case EventState.Active:                      case EventState.Preparation:                      case EventState.Warmup:                          return Visibility.Visible;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return Visibility.Collapsed;                  }              }              else if (targetType == typeof(System.Windows.Media.Color))              {                  switch (state)                  {                      case EventState.Active:                          return System.Windows.Media.Colors.LawnGreen;                      case EventState.Preparation:                      case EventState.Warmup:                          return System.Windows.Media.Colors.Goldenrod;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (state)                  {                      case EventState.Active:                          return System.Windows.Media.Brushes.LawnGreen;                      case EventState.Preparation:                      case EventState.Warmup:                          return System.Windows.Media.Brushes.Yellow;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else if (targetType == typeof(double))              {                  switch (state)                  {                      case EventState.Active:                          return 1.0;                      case EventState.Preparation:                      case EventState.Warmup:                          return 0.75;                      case EventState.Fail:                      case EventState.Inactive:                      case EventState.Success:                      case EventState.Unknown:                      default:                          return 0.35;                  }              }              else              {                  return state;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Converters,WorldColorConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: if (targetType == typeof(System.Windows.Media.Color))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }              }              else if (targetType == typeof(System.Windows.Media.Brush)                      || targetType == typeof(System.Windows.Media.SolidColorBrush))              {                  switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Brushes.White;                      case WorldColor.Red:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(252' 0' 0));                      case WorldColor.Blue:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 213' 255));                      case WorldColor.Green:                          return new System.Windows.Media.SolidColorBrush(System.Windows.Media.Color.FromRgb(0' 252' 126));                      default:                          return System.Windows.Media.Brushes.White;                  }              }              else              {                  return worldColor;              }
Magic Number,GW2PAO.Infrastructure.Hotkeys,Hotkey,C:\repos\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\Hotkey.cs,ToString,The following statement contains a magic number: if (keyName.StartsWith("Oem"))                  keyName = keyName.Substring(3);
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: if (this.userData.EctoplasmThresholdUsesSellListing)              {                  this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }              else              {                  this.Tax.Value = this.EctoplasmBuyOrder.Value * 0.85;                  this.SalvageThreshold.Value = (this.EctoplasmBuyOrder.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateBreakEvenValues,The following statement contains a magic number: this.BreakEvenBuyPrice.Value = this.SellPrice.Value * 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateBreakEvenValues,The following statement contains a magic number: this.BreakEvenSellPrice.Value = this.BuyPrice.Value / 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateListingFee,The following statement contains a magic number: this.ListingFee.Value = this.Revenue.Value * 0.05;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateSaleFee,The following statement contains a magic number: this.SaleFee.Value = this.Revenue.Value * 0.10;
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int SCHEDULE_OFFSET_MINUTES = 25;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int CYCLE_LENGTH_MINUTES = 120;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int NIGHT_START_MINUTES = 80;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: if (this.DoesCurrentZoneCycle)              {                  // Day starts on the quarter of every hour' every other hour' beginning with 00:25                  // Therefore' we can just offset our time and then mod it so we are comparing against 00:00-02:00'                  DateTimeOffset utcNow = DateTimeOffset.UtcNow;                  TimeSpan offsetAdjustedTime = utcNow.AddMinutes(SCHEDULE_OFFSET_MINUTES * -1).TimeOfDay;                  offsetAdjustedTime = TimeSpan.FromMinutes(offsetAdjustedTime.TotalMinutes % CYCLE_LENGTH_MINUTES);                    // Figure out if we are in day or night by comparing against 01:30                  // > 01:30 means we are in night' otherwise we are in day                  if (offsetAdjustedTime.TotalMinutes > NIGHT_START_MINUTES)                  {                      // Night-time                      this.IsDaytime = false;                      this.TimeUntilDay = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.TimeUntilNight = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES + NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.DayNightCyclePercentage = ((offsetAdjustedTime.TotalMinutes - NIGHT_START_MINUTES) / (CYCLE_LENGTH_MINUTES - NIGHT_START_MINUTES)) * 100.0;                  }                  else                  {                      // Day-time                      this.IsDaytime = true;                      this.TimeUntilDay = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.TimeUntilNight = TimeSpan.FromMinutes(NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.DayNightCyclePercentage = (offsetAdjustedTime.TotalMinutes / NIGHT_START_MINUTES) * 100.0;                  }              }
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: if (this.DoesCurrentZoneCycle)              {                  // Day starts on the quarter of every hour' every other hour' beginning with 00:25                  // Therefore' we can just offset our time and then mod it so we are comparing against 00:00-02:00'                  DateTimeOffset utcNow = DateTimeOffset.UtcNow;                  TimeSpan offsetAdjustedTime = utcNow.AddMinutes(SCHEDULE_OFFSET_MINUTES * -1).TimeOfDay;                  offsetAdjustedTime = TimeSpan.FromMinutes(offsetAdjustedTime.TotalMinutes % CYCLE_LENGTH_MINUTES);                    // Figure out if we are in day or night by comparing against 01:30                  // > 01:30 means we are in night' otherwise we are in day                  if (offsetAdjustedTime.TotalMinutes > NIGHT_START_MINUTES)                  {                      // Night-time                      this.IsDaytime = false;                      this.TimeUntilDay = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.TimeUntilNight = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES + NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.DayNightCyclePercentage = ((offsetAdjustedTime.TotalMinutes - NIGHT_START_MINUTES) / (CYCLE_LENGTH_MINUTES - NIGHT_START_MINUTES)) * 100.0;                  }                  else                  {                      // Day-time                      this.IsDaytime = true;                      this.TimeUntilDay = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.TimeUntilNight = TimeSpan.FromMinutes(NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes);                      this.DayNightCyclePercentage = (offsetAdjustedTime.TotalMinutes / NIGHT_START_MINUTES) * 100.0;                  }              }
Magic Number,GW2PAO.Modules.Events,EventsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,EventsController,The following statement contains a magic number: this.EventRefreshInterval = 1000;
Magic Number,GW2PAO.Modules.Events,EventsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,DisplayEventNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.Events,EventsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,DisplayEventNotification,The following statement contains a magic number: if (this.UserData.AreEventNotificationsEnabled                  && (this.armedEventNotifications[notification.EventId] == true)                  && !notificationCollection.Any((n) => n.EventId == notification.EventId))              {                  Task.Factory.StartNew(() =>                  {                      logger.Info("Displaying notification for \"{0}\""' notification.EventName);                      Threading.InvokeOnUI(() =>                      {                          notificationCollection.Add(notification);                      });                        if (this.UserData.NotificationDuration > 0)                      {                          // For X seconds' loop and sleep' with checks to see if notifications have been disabled                          for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                          {                              System.Threading.Thread.Sleep(SLEEP_TIME);                              if (!this.UserData.AreEventNotificationsEnabled)                              {                                  logger.Debug("Removing notification for \"{0}\""' notification.EventName);                                  Threading.InvokeOnUI(() => notificationCollection.Remove(notification));                              }                          }                            logger.Debug("Removing notification for \"{0}\""' notification.EventName);                            // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                          // This makes it so that the notifications can fade out before they are removed from the notification window                          Threading.InvokeOnUI(() => notification.IsRemovingNotification = true);                          System.Threading.Thread.Sleep(SLEEP_TIME);                          Threading.InvokeOnUI(() =>                          {                              notificationCollection.Remove(notification);                          });                          notification.Cleanup();                      }                  });              }
Magic Number,GW2PAO.Modules.Events,EventsUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsUserData.cs,EventsUserData,The following statement contains a magic number: this.NotificationDuration = 10;
Magic Number,GW2PAO.Modules.Events.Views.EventNotification,EventNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\EventNotification\EventNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.EventNotificationX == -1                  && Properties.Settings.Default.EventNotificationY == -1)              {                  // Use default location (bottom-right corner)                  this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;                  this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - this.ActualHeight;              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.EventNotificationX;                  this.Top = Properties.Settings.Default.EventNotificationY;              }
Magic Number,GW2PAO.Modules.Events.Views.EventNotification,EventNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\EventNotification\EventNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.EventNotificationX == -1                  && Properties.Settings.Default.EventNotificationY == -1)              {                  // Use default location (bottom-right corner)                  this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;                  this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - this.ActualHeight;              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.EventNotificationX;                  this.Top = Properties.Settings.Default.EventNotificationY;              }
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,EventTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,EventTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.EventsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight; // Minimum of 2 events                  if (visibleObjsCount < 2)                      this.MaxHeight = this.MinHeight;                  else                      this.MaxHeight = (visibleObjsCount * eventHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: if (values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent)              {                  var point = values[0] as GW2PAO.API.Data.Entities.Point;                  var continent = values[1] as API.Data.Entities.Continent;                    var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));                    return location;              }              else              {                  return null;              }
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: if (values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent)              {                  var point = values[0] as GW2PAO.API.Data.Entities.Point;                  var continent = values[1] as API.Data.Entities.Continent;                    var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));                    return location;              }              else              {                  return null;              }
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: if (values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent)              {                  var point = values[0] as GW2PAO.API.Data.Entities.Point;                  var continent = values[1] as API.Data.Entities.Continent;                    var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));                    return location;              }              else              {                  return null;              }
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: if (values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent)              {                  var point = values[0] as GW2PAO.API.Data.Entities.Point;                  var continent = values[1] as API.Data.Entities.Continent;                    var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));                    return location;              }              else              {                  return null;              }
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: if (values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent)              {                  var point = values[0] as GW2PAO.API.Data.Entities.Point;                  var continent = values[1] as API.Data.Entities.Continent;                    var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));                    return location;              }              else              {                  return null;              }
Magic Number,GW2PAO.Modules.Map.Converters,ZoomToItemSizeConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ZoomToItemSizeConverter.cs,Convert,The following statement contains a magic number: return (double)value * (35 / 7);
Magic Number,GW2PAO.Modules.Map.Converters,ZoomToItemSizeConverter,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ZoomToItemSizeConverter.cs,Convert,The following statement contains a magic number: return (double)value * (35 / 7);
Magic Number,GW2PAO.Modules.Map,MapUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\MapUserData.cs,MapUserData,The following statement contains a magic number: this.PlayerTrailMaxLength = 100;
Magic Number,GW2PAO.Modules.Map,MapViewController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\MapViewController.cs,Initialize,The following statement contains a magic number: Task.Delay(2000).ContinueWith(o =>              {                  Threading.BeginInvokeOnUI(() =>                  {                      if (Properties.Settings.Default.IsMapOpen && this.CanOpenMap())                          this.OpenMap();                  });              });
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: if (cont != null && map != null)              {                  double charX = map.ContinentRectangle.X + (charPos.X - map.MapRectangle.X) * MapsHelper.MapToWorldRatio;                  double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio;                    var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));                    if (this.CharacterLocation != location)                  {                      if (this.CharacterLocation != null)                      {                          // If the location changed by a large amount' the player probably changed map or used a waypoint                          // In that case' reset the player trail                          var distance = CalcUtil.CalculateDistance(                              new API.Data.Entities.Point(location.Longitude' location.Latitude)'                              new API.Data.Entities.Point(this.CharacterLocation.Longitude' this.CharacterLocation.Latitude));                          if (distance > 1)                          {                              // Since we are dealing with lat/lng values' even a distance of 1 can be considered a                               // warp/teleport                              this.PlayerTrail.Clear();                          }                          else                          {                              // Add the new location to the player trail                              this.PlayerTrail.Add(location);                              if (this.PlayerTrail.Count > this.PlayerTrailMaxLength)                                  this.PlayerTrail.RemoveAt(0);                          }                      }                        this.CharacterLocation = location;                  }              }
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: if (cont != null && map != null)              {                  double charX = map.ContinentRectangle.X + (charPos.X - map.MapRectangle.X) * MapsHelper.MapToWorldRatio;                  double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio;                    var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));                    if (this.CharacterLocation != location)                  {                      if (this.CharacterLocation != null)                      {                          // If the location changed by a large amount' the player probably changed map or used a waypoint                          // In that case' reset the player trail                          var distance = CalcUtil.CalculateDistance(                              new API.Data.Entities.Point(location.Longitude' location.Latitude)'                              new API.Data.Entities.Point(this.CharacterLocation.Longitude' this.CharacterLocation.Latitude));                          if (distance > 1)                          {                              // Since we are dealing with lat/lng values' even a distance of 1 can be considered a                               // warp/teleport                              this.PlayerTrail.Clear();                          }                          else                          {                              // Add the new location to the player trail                              this.PlayerTrail.Add(location);                              if (this.PlayerTrail.Count > this.PlayerTrailMaxLength)                                  this.PlayerTrail.RemoveAt(0);                          }                      }                        this.CharacterLocation = location;                  }              }
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: if (cont != null && map != null)              {                  double charX = map.ContinentRectangle.X + (charPos.X - map.MapRectangle.X) * MapsHelper.MapToWorldRatio;                  double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio;                    var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));                    if (this.CharacterLocation != location)                  {                      if (this.CharacterLocation != null)                      {                          // If the location changed by a large amount' the player probably changed map or used a waypoint                          // In that case' reset the player trail                          var distance = CalcUtil.CalculateDistance(                              new API.Data.Entities.Point(location.Longitude' location.Latitude)'                              new API.Data.Entities.Point(this.CharacterLocation.Longitude' this.CharacterLocation.Latitude));                          if (distance > 1)                          {                              // Since we are dealing with lat/lng values' even a distance of 1 can be considered a                               // warp/teleport                              this.PlayerTrail.Clear();                          }                          else                          {                              // Add the new location to the player trail                              this.PlayerTrail.Add(location);                              if (this.PlayerTrail.Count > this.PlayerTrailMaxLength)                                  this.PlayerTrail.RemoveAt(0);                          }                      }                        this.CharacterLocation = location;                  }              }
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: if (cont != null && map != null)              {                  double charX = map.ContinentRectangle.X + (charPos.X - map.MapRectangle.X) * MapsHelper.MapToWorldRatio;                  double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio;                    var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));                    if (this.CharacterLocation != location)                  {                      if (this.CharacterLocation != null)                      {                          // If the location changed by a large amount' the player probably changed map or used a waypoint                          // In that case' reset the player trail                          var distance = CalcUtil.CalculateDistance(                              new API.Data.Entities.Point(location.Longitude' location.Latitude)'                              new API.Data.Entities.Point(this.CharacterLocation.Longitude' this.CharacterLocation.Latitude));                          if (distance > 1)                          {                              // Since we are dealing with lat/lng values' even a distance of 1 can be considered a                               // warp/teleport                              this.PlayerTrail.Clear();                          }                          else                          {                              // Add the new location to the player trail                              this.PlayerTrail.Add(location);                              if (this.PlayerTrail.Count > this.PlayerTrailMaxLength)                                  this.PlayerTrail.RemoveAt(0);                          }                      }                        this.CharacterLocation = location;                  }              }
Magic Number,GW2PAO.Modules.Tasks,TasksController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,TasksController,The following statement contains a magic number: this.RefreshInterval = 125;
Magic Number,GW2PAO.Modules.Tasks,TasksController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The following statement contains a magic number: if (playerPos != null && cameraDir != null)              {                  var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                  var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                    foreach (var ptask in this.PlayerTasks.Where(pt => pt.Task.Location != null && pt.Task.MapID == this.CurrentMapID))                  {                      var taskMapPosition = CalcUtil.ConvertToMapPosition(ptask.Task.Location);                        // Update distances and angles                      var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' this.UserData.DistanceUnits));                      var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' taskMapPosition)'                                                             CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                        Threading.BeginInvokeOnUI(() =>                          {                              ptask.IsPlayerOnMap = true;                              ptask.DistanceFromPlayer = newDistance;                              ptask.DirectionFromPlayer = newAngle;                          });                        // Check for auto-completion detection                      if (ptask.Task.AutoComplete && CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' API.Data.Enums.Units.Feet) < 10)                      {                          Threading.BeginInvokeOnUI(() =>                          {                              ptask.IsCompleted = true;                          });                      }                  }                    // Player is not on the map                  foreach (var ptask in this.PlayerTasks.Where(pt => pt.Task.MapID != this.CurrentMapID))                  {                      Threading.BeginInvokeOnUI(() =>                         {                             ptask.IsPlayerOnMap = false;                         });                  }              }
Magic Number,GW2PAO.Modules.Map.Views,MapView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Floor(this.Map.ZoomLevel + 1.5));              }
Magic Number,GW2PAO.Modules.Map.Views,MapView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Floor(this.Map.ZoomLevel + 1.5));              }
Magic Number,GW2PAO.Modules.Map.Views,MapView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseRightButtonDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Ceiling(this.Map.ZoomLevel - 1.5));              }
Magic Number,GW2PAO.Modules.Map.Views,MapView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseRightButtonDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Ceiling(this.Map.ZoomLevel - 1.5));              }
Magic Number,GW2PAO.Modules.Map.Views,MapView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapManipulationInertiaStarting,The following statement contains a magic number: e.TranslationBehavior.DesiredDeceleration = 0.0001;
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Tasks.Views.TaskTracker,TaskTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\TaskTracker\TaskTrackerView.xaml.cs,TaskTrackerView_Loaded,The following statement contains a magic number: this.MinHeight = this.taskHeight * 3 + (int)this.TitleBar.ActualHeight;
Magic Number,GW2PAO.Modules.Tasks.Views.TaskTracker,TaskTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\TaskTracker\TaskTrackerView.xaml.cs,CollapseExpandButton_Click,The following statement contains a magic number: if (this.TasksContainer.Visibility == System.Windows.Visibility.Visible)              {                  this.beforeCollapseHeight = this.Height;                  this.MinHeight = this.TitleBar.ActualHeight;                  this.Height = this.TitleBar.ActualHeight;                  this.TasksContainer.Visibility = System.Windows.Visibility.Collapsed;              }              else              {                  this.MinHeight = this.taskHeight * 3 + (int)this.TitleBar.ActualHeight;                  this.Height = this.beforeCollapseHeight;                  this.TasksContainer.Visibility = System.Windows.Visibility.Visible;              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ClientEnteredChannel,The following statement contains a magic number: if (this.UserData.ShowEnterExitChannelNotifications)              {                  Task.Factory.StartNew(() =>                  {                      var notification = new TSNotificationViewModel(e.ClientID' e.ClientName' TSNotificationType.UserEntered);                      Threading.InvokeOnUI(() => this.Notifications.Add(notification));                      Thread.Sleep(5000); // Let channel notifications stay for 5 seconds                      Threading.InvokeOnUI(() => this.Notifications.Remove(notification));                  });                  Threading.InvokeOnUI(() =>                      {                          this.CurrentChannelClients.Add(new ClientViewModel(e.ClientID' e.ClientName));                      });              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ClientExitedChannel,The following statement contains a magic number: if (this.UserData.ShowEnterExitChannelNotifications)              {                  Task.Factory.StartNew(() =>                  {                      var notification = new TSNotificationViewModel(e.ClientID' e.ClientName' TSNotificationType.UserExited);                      Threading.InvokeOnUI(() => this.Notifications.Add(notification));                      Thread.Sleep(5000); // Let channel notifications stay for 5 seconds                      Threading.InvokeOnUI(() => this.Notifications.Remove(notification));                  });                  Threading.InvokeOnUI(() =>                  {                      var client = this.CurrentChannelClients.FirstOrDefault(c => c.ID == e.ClientID);                      if (client != null)                          this.CurrentChannelClients.Remove(client);                  });              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  // Suitable nullity checks etc' of course :)                  hash = hash * 23 + this.ClientID.GetHashCode();                  hash = hash * 23 + this.User.GetHashCode();                  hash = hash * 23 + this.NotificationType.GetHashCode();                  return hash;              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  // Suitable nullity checks etc' of course :)                  hash = hash * 23 + this.ClientID.GetHashCode();                  hash = hash * 23 + this.User.GetHashCode();                  hash = hash * 23 + this.NotificationType.GetHashCode();                  return hash;              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  // Suitable nullity checks etc' of course :)                  hash = hash * 23 + this.ClientID.GetHashCode();                  hash = hash * 23 + this.User.GetHashCode();                  hash = hash * 23 + this.NotificationType.GetHashCode();                  return hash;              }
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: unchecked // Overflow is fine' just wrap              {                  int hash = 17;                  // Suitable nullity checks etc' of course :)                  hash = hash * 23 + this.ClientID.GetHashCode();                  hash = hash * 23 + this.User.GetHashCode();                  hash = hash * 23 + this.NotificationType.GetHashCode();                  return hash;              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,WvWController,The following statement contains a magic number: this.ObjectivesRefreshInterval = 500;
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,InitializeAllObjectivesCollection,The following statement contains a magic number: lock (objectivesRefreshTimerLock)              {                  logger.Debug("Initializing objectives");                    Threading.InvokeOnUI(() => this.AllObjectives.Clear());                    // Determine the current match. If this changes' we don't need to re-initialize since the actual objectives don't change - just the owners change                  var matchID = this.wvwService.GetMatchId(this.UserData.WorldSelection.ID);                  var objectives = this.wvwService.GetAllObjectives(matchID);                    while (objectives.Count() == 0 && this.startCallCount > 0)                  {                      // If we started up while in the middle of a reset' the objectives count will return 0' so loop until we get it                      Thread.Sleep(1000);                      matchID = this.wvwService.GetMatchId(this.UserData.WorldSelection.ID);                      objectives = this.wvwService.GetAllObjectives(matchID);                  }                    Threading.InvokeOnUI(() =>                  {                      foreach (var obj in objectives)                      {                          logger.Debug("Initializing view model for {0} - {1}"' obj.Name' obj.Map);                          var vm = new WvWObjectiveViewModel(obj' this.UserData' this.Worlds' this.WvWNotifications);                          this.AllObjectives.Add(vm);                      }                  });              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,Refresh,The following statement contains a magic number: lock (this.objectivesRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    var matchID = this.wvwService.GetMatchId(this.UserData.WorldSelection.ID);                  if (this.MatchID != matchID)                  {                      this.HandleMatchChange(matchID);                  }                  else                  {                      // Check for new WvW Map                      this.CheckForMapChange();                        // Refresh state of all objectives and refresh the match scores                      // Do this only once every 2 seconds                      this.objectivesRefreshCounter++;                      if (this.objectivesRefreshCounter >= 4) // 500ms * 4 = 2seconds                      {                          this.objectivesRefreshCounter = 0;                          this.RefreshObjectives();                      }                        this.scoresRefreshCounter++;                      if (this.scoresRefreshCounter >= 60) // 500ms * 20 = 30seconds                      {                          this.scoresRefreshCounter = 0;                          Task.Factory.StartNew(this.RefreshWorldScores);                      }                        this.RefreshTimers();                        // Calculate distances                      this.CalculateDistances();                  }                  this.objectivesRefreshTimer.Change(this.ObjectivesRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,Refresh,The following statement contains a magic number: lock (this.objectivesRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    var matchID = this.wvwService.GetMatchId(this.UserData.WorldSelection.ID);                  if (this.MatchID != matchID)                  {                      this.HandleMatchChange(matchID);                  }                  else                  {                      // Check for new WvW Map                      this.CheckForMapChange();                        // Refresh state of all objectives and refresh the match scores                      // Do this only once every 2 seconds                      this.objectivesRefreshCounter++;                      if (this.objectivesRefreshCounter >= 4) // 500ms * 4 = 2seconds                      {                          this.objectivesRefreshCounter = 0;                          this.RefreshObjectives();                      }                        this.scoresRefreshCounter++;                      if (this.scoresRefreshCounter >= 60) // 500ms * 20 = 30seconds                      {                          this.scoresRefreshCounter = 0;                          Task.Factory.StartNew(this.RefreshWorldScores);                      }                        this.RefreshTimers();                        // Calculate distances                      this.CalculateDistances();                  }                  this.objectivesRefreshTimer.Change(this.ObjectivesRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshTimers,The following statement contains a magic number: foreach (var objective in this.AllObjectives)              {                  var timeSinceFlip = DateTime.UtcNow - objective.FlipTime;                  if (timeSinceFlip <= TimeSpan.FromMinutes(5))                  {                      var countdownTime = TimeSpan.FromMinutes(5) - timeSinceFlip;                      Threading.InvokeOnUI(() => objective.TimerValue = countdownTime);                  }                  else                  {                      Threading.InvokeOnUI(() => objective.IsRIActive = false);                  }              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshTimers,The following statement contains a magic number: foreach (var objective in this.AllObjectives)              {                  var timeSinceFlip = DateTime.UtcNow - objective.FlipTime;                  if (timeSinceFlip <= TimeSpan.FromMinutes(5))                  {                      var countdownTime = TimeSpan.FromMinutes(5) - timeSinceFlip;                      Threading.InvokeOnUI(() => objective.TimerValue = countdownTime);                  }                  else                  {                      Threading.InvokeOnUI(() => objective.IsRIActive = false);                  }              }
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,DisplayNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.WvW,WvWController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,DisplayNotification,The following statement contains a magic number: if (this.CanShowNotification(objectiveData))              {                  if (!this.WvWNotifications.Contains(objectiveData))                  {                      Task.Factory.StartNew(() =>                      {                          logger.Info("Displaying notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                          Threading.BeginInvokeOnUI(() => this.WvWNotifications.Add(objectiveData));                            if (this.UserData.NotificationDuration > 0)                          {                              // For X seconds' loop and sleep' with checks to see if notifications have been disabled                              for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                              {                                  System.Threading.Thread.Sleep(SLEEP_TIME);                                  if (!this.CanShowNotification(objectiveData))                                  {                                      logger.Debug("Removing notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                                      Threading.BeginInvokeOnUI(() => this.WvWNotifications.Remove(objectiveData));                                  }                              }                                logger.Debug("Removing notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                                // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                              // This makes it so that the notifications can fade out before they are removed from the notification window                              Threading.BeginInvokeOnUI(() => objectiveData.IsRemovingNotification = true);                              System.Threading.Thread.Sleep(SLEEP_TIME);                              Threading.BeginInvokeOnUI(() =>                              {                                  this.WvWNotifications.Remove(objectiveData);                                  objectiveData.IsRemovingNotification = false;                              });                          }                      });                  }              }
Magic Number,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,WvWUserData,The following statement contains a magic number: this.WorldSelection = new World() { ID = 1019' Name = "Blackgate" };
Magic Number,GW2PAO.Modules.WvW,WvWUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,WvWUserData,The following statement contains a magic number: this.NotificationDuration = 10;
Magic Number,GW2PAO.Utility,MailUtility,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The following statement contains a magic number: try              {                  MailMessage mail = new MailMessage();                  mail.Body = body;                  mail.IsBodyHtml = false;                  mail.To.Add(new MailAddress(to));                  mail.From = new MailAddress(fromAddress' fromDisplay' Encoding.UTF8);                  mail.Subject = subject;                  mail.SubjectEncoding = Encoding.UTF8;                  mail.Priority = MailPriority.Normal;                  foreach (MailAttachment ma in attachments)                  {                      mail.Attachments.Add(ma.File);                  }                  SmtpClient smtp = new SmtpClient("smtp.gmail.com"' 587);                  smtp.Credentials = new System.Net.NetworkCredential(credentialUser' credentialPassword);                  smtp.EnableSsl = true;                  smtp.Send(mail);              }              catch              {                  // Swallow              }
Magic Number,GW2PAO.Utility,ProcessMonitor,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ProcessMonitor.cs,Refresh,The following statement contains a magic number: try              {                  var newGW2RunningState = this.systemService.IsGw2Running;                  if (this.IsGw2Running != newGW2RunningState)                  {                      if (newGW2RunningState)                      {                          // Game just started                          this.eventAggregator.GetEvent<GW2ProcessStarted>().Publish(null);                      }                      else                      {                          // Game just closed                          this.eventAggregator.GetEvent<GW2ProcessClosed>().Publish(null);                            if (this.DoesGw2HaveFocus)                          {                              this.eventAggregator.GetEvent<GW2ProcessLostFocus>().Publish(null);                              this.DoesGw2HaveFocus = false;                          }                      }                  }                  this.IsGw2Running = newGW2RunningState;                    if (this.IsGw2Running)                  {                      var newFocusState = this.systemService.Gw2HasFocus || this.systemService.MyAppHasFocus;                      if (this.DoesGw2HaveFocus != newFocusState)                      {                          if (newFocusState)                          {                              // Game gained focus                              this.eventAggregator.GetEvent<GW2ProcessFocused>().Publish(null);                          }                          else                          {                              // Game lost focus                              this.eventAggregator.GetEvent<GW2ProcessLostFocus>().Publish(null);                          }                      }                      this.DoesGw2HaveFocus = newFocusState;                        // No exception thrown' reset bool that keeps track of admin error                      isAdminRightsErrorShown = false;                        if (this.playerService.HasValidMapId)                      {                          if (this.currentMapId != this.playerService.MapId)                          {                              var newMap = this.playerService.MapId;                                // Map changed                              if (this.IsWvWMap(newMap) && !this.IsWvWMap(this.currentMapId))                              {                                  // Player just entered WvW                                  this.eventAggregator.GetEvent<PlayerEnteredWvW>().Publish(null);                              }                              else if (!this.IsWvWMap(newMap) && this.IsWvWMap(this.currentMapId))                              {                                  // Player just exited WvW                                  this.eventAggregator.GetEvent<PlayerEnteredPvE>().Publish(null);                              }                                this.currentMapId = this.playerService.MapId;                          }                      }                      else                      {                          this.currentMapId = -1;                      }                  }              }              catch (System.ComponentModel.Win32Exception ex)              {                  // An exception can happen if GW2 is running as admin                  // If that occurs' display a notification                  if (ex.NativeErrorCode == 5)                  {                      if (!isAdminRightsErrorShown)                      {                          this.eventAggregator.GetEvent<InsufficientPrivilegesEvent>().Publish(null);                          logger.Warn(ex);                          isAdminRightsErrorShown = true;                      }                  }              }
Magic Number,GW2PAO.Utility,Enumerator,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,MoveNext,The following statement contains a magic number: _index = -2;
Magic Number,GW2PAO.Utility,Enumerator,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,ValidateCurrent,The following statement contains a magic number: if (_index == -1)                  {                      throw new InvalidOperationException("The enumerator has not been started.");                  }                  else if (_index == -2)                  {                      throw new InvalidOperationException("The enumerator has reached the end of the collection.");                  }
Magic Number,GW2PAO.Utility,UpdateChecker,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,CheckForUpdateAndNotify,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      logger.Info("Checking for new version");                        Version latestVersion = GetLatestVersion();                        // Get the assembly version and compare                      Assembly assembly = Assembly.GetExecutingAssembly();                      FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);                      Version myVersion = new Version(fvi.ProductVersion);                        if (latestVersion > myVersion)                      {                          logger.Info("New version available: {0}"' latestVersion);                            // Notify the user                          Threading.BeginInvokeOnUI(() =>                              new NewVersionNotificationView(new NewVersionNotificationViewModel(latestVersion.ToString(2))).Show());                      }                      else                      {                          logger.Info("No new version available");                      }                  });
Magic Number,GW2PAO.Utility,UpdateChecker,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,GetLatestVersion,The following statement contains a magic number: if (request.Wait(500)) // Should be pretty quick              {                  string versionString = request.Result;                  return new Version(versionString);              }              else              {                  return new Version();              }
Magic Number,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,CommerceController,The following statement contains a magic number: this.RefreshInterval = 30000;
Magic Number,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The following statement contains a magic number: lock (this.refreshTimerLock)              {                  // Don't do anything if we are supposed to be stopped                  if (this.isStopped)                      return;                    // Using the UI thread' grab a snapshot of the current price watches                  List<ItemPriceViewModel> itemPrices = null;                  Threading.InvokeOnUI(() => itemPrices = new List<ItemPriceViewModel>(this.ItemPrices));                    if (itemPrices != null)                  {                      // Ignore anything with an itemId of 0 or less                      itemPrices.RemoveAll(pw => pw.Data.ItemID <= 0);                        if (itemPrices.Count > 0)                      {                          // Retrieve price information for all price-watched items                          var allPrices = this.commerceService.GetItemPrices(itemPrices.Select(pw => pw.Data.ItemID).ToArray());                            foreach (var priceWatch in itemPrices)                          {                              // Determine if we need to reset the notifications shown-state                              if (this.NotificationsResetDateTimes.ContainsKey(priceWatch))                              {                                  var lastResetTime = this.NotificationsResetDateTimes[priceWatch];                                  if (DateTime.Now.Subtract(lastResetTime).TotalMilliseconds >= UserData.ResetPriceNotificationsInterval * 60000)                                  {                                      // Time to hide the notifications                                      priceWatch.IsBuyOrderNotificationShown = false;                                      priceWatch.IsSellListingNotificationShown = false;                                  }                              }                              else                              {                                  // Don't have a time for this price watch yet                                  this.NotificationsResetDateTimes.Add(priceWatch' DateTime.Now);                              }                                  if (allPrices.ContainsKey(priceWatch.Data.ItemID))                              {                                  var prices = allPrices[priceWatch.Data.ItemID];                                  // Update the price watch's current buy order' sell listing' and profit                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentBuyOrder.Value = prices.HighestBuyOrder);                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentSellListing.Value = prices.LowestSellListing);                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentProfit.Value = (prices.LowestSellListing * 0.85) - prices.HighestBuyOrder);                                    // Buy Order Limits Check                                  bool buyOrderOutOfLimits = false;                                    if (priceWatch.Data.IsBuyOrderUpperLimitEnabled && priceWatch.Data.IsBuyOrderLowerLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder <= priceWatch.Data.BuyOrderUpperLimit.Value                                                                  && prices.HighestBuyOrder >= priceWatch.Data.BuyOrderLowerLimit.Value;                                  }                                  else if (priceWatch.Data.IsBuyOrderUpperLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder <= priceWatch.Data.BuyOrderUpperLimit.Value;                                  }                                  else if (priceWatch.Data.IsBuyOrderLowerLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder >= priceWatch.Data.BuyOrderLowerLimit.Value;                                  }                                    Threading.BeginInvokeOnUI(() => priceWatch.IsBuyOrderOutOfLimits = buyOrderOutOfLimits);                                    if (buyOrderOutOfLimits)                                  {                                      // Show a notification for the buy order' if enabled                                      if (this.CanShowNotification(priceWatch' PriceNotificationType.BuyOrder))                                      {                                          priceWatch.IsBuyOrderNotificationShown = true;                                          this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.BuyOrder' prices.HighestBuyOrder' this.PriceNotifications));                                          this.NotificationsResetDateTimes[priceWatch] = DateTime.Now;                                      }                                  }                                    // Sell Listing Limits Check                                  bool sellListingOutOfLimits = false;                                    if (priceWatch.Data.IsSellListingUpperLimitEnabled && priceWatch.Data.IsSellListingLowerLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing <= priceWatch.Data.SellListingUpperLimit.Value                                                                      && prices.LowestSellListing >= priceWatch.Data.SellListingLowerLimit.Value;                                  }                                  else if (priceWatch.Data.IsSellListingUpperLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing <= priceWatch.Data.SellListingUpperLimit.Value;                                  }                                  else if (priceWatch.Data.IsSellListingLowerLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing >= priceWatch.Data.SellListingLowerLimit.Value;                                  }                                    Threading.BeginInvokeOnUI(() => priceWatch.IsSellListingOutOfLimits = sellListingOutOfLimits);                                    if (sellListingOutOfLimits)                                  {                                      // Show a notification for the sell listing' if enabled                                      if (this.CanShowNotification(priceWatch' PriceNotificationType.SellListing))                                      {                                          priceWatch.IsSellListingNotificationShown = true;                                          this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.SellListing' prices.LowestSellListing' this.PriceNotifications));                                          this.NotificationsResetDateTimes[priceWatch] = DateTime.Now;                                      }                                  }                              }                                // Update the historical values for the item                              Threading.BeginInvokeOnUI(() =>                                  {                                      priceWatch.PastBuyOrders.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentBuyOrder.Value));                                      priceWatch.PastSellListings.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentSellListing.Value));                                        if (priceWatch.PastBuyOrders.Count > this.UserData.MaxHistoricalDataPoints)                                          priceWatch.PastBuyOrders.RemoveAt(0);                                      if (priceWatch.PastSellListings.Count > this.UserData.MaxHistoricalDataPoints)                                          priceWatch.PastSellListings.RemoveAt(0);                                  });                          }                      }                  }                      // Additionally' update the Ectoplasm Salvage Threshold tracker data                  var ectoPrices = this.commerceService.GetItemPrices(EctoSalvageHelperViewModel.EctoplasmItemID);                  if (ectoPrices != null)                  {                      Threading.BeginInvokeOnUI(() =>                      {                          this.EcoSalvageData.EctoplasmBuyOrder.Value = ectoPrices.HighestBuyOrder;                          this.EcoSalvageData.EctoplasmSellListing.Value = ectoPrices.LowestSellListing;                      });                  }                    this.refreshTimer.Change(this.RefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The following statement contains a magic number: lock (this.refreshTimerLock)              {                  // Don't do anything if we are supposed to be stopped                  if (this.isStopped)                      return;                    // Using the UI thread' grab a snapshot of the current price watches                  List<ItemPriceViewModel> itemPrices = null;                  Threading.InvokeOnUI(() => itemPrices = new List<ItemPriceViewModel>(this.ItemPrices));                    if (itemPrices != null)                  {                      // Ignore anything with an itemId of 0 or less                      itemPrices.RemoveAll(pw => pw.Data.ItemID <= 0);                        if (itemPrices.Count > 0)                      {                          // Retrieve price information for all price-watched items                          var allPrices = this.commerceService.GetItemPrices(itemPrices.Select(pw => pw.Data.ItemID).ToArray());                            foreach (var priceWatch in itemPrices)                          {                              // Determine if we need to reset the notifications shown-state                              if (this.NotificationsResetDateTimes.ContainsKey(priceWatch))                              {                                  var lastResetTime = this.NotificationsResetDateTimes[priceWatch];                                  if (DateTime.Now.Subtract(lastResetTime).TotalMilliseconds >= UserData.ResetPriceNotificationsInterval * 60000)                                  {                                      // Time to hide the notifications                                      priceWatch.IsBuyOrderNotificationShown = false;                                      priceWatch.IsSellListingNotificationShown = false;                                  }                              }                              else                              {                                  // Don't have a time for this price watch yet                                  this.NotificationsResetDateTimes.Add(priceWatch' DateTime.Now);                              }                                  if (allPrices.ContainsKey(priceWatch.Data.ItemID))                              {                                  var prices = allPrices[priceWatch.Data.ItemID];                                  // Update the price watch's current buy order' sell listing' and profit                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentBuyOrder.Value = prices.HighestBuyOrder);                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentSellListing.Value = prices.LowestSellListing);                                  Threading.BeginInvokeOnUI(() => priceWatch.CurrentProfit.Value = (prices.LowestSellListing * 0.85) - prices.HighestBuyOrder);                                    // Buy Order Limits Check                                  bool buyOrderOutOfLimits = false;                                    if (priceWatch.Data.IsBuyOrderUpperLimitEnabled && priceWatch.Data.IsBuyOrderLowerLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder <= priceWatch.Data.BuyOrderUpperLimit.Value                                                                  && prices.HighestBuyOrder >= priceWatch.Data.BuyOrderLowerLimit.Value;                                  }                                  else if (priceWatch.Data.IsBuyOrderUpperLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder <= priceWatch.Data.BuyOrderUpperLimit.Value;                                  }                                  else if (priceWatch.Data.IsBuyOrderLowerLimitEnabled)                                  {                                      buyOrderOutOfLimits = prices.HighestBuyOrder >= priceWatch.Data.BuyOrderLowerLimit.Value;                                  }                                    Threading.BeginInvokeOnUI(() => priceWatch.IsBuyOrderOutOfLimits = buyOrderOutOfLimits);                                    if (buyOrderOutOfLimits)                                  {                                      // Show a notification for the buy order' if enabled                                      if (this.CanShowNotification(priceWatch' PriceNotificationType.BuyOrder))                                      {                                          priceWatch.IsBuyOrderNotificationShown = true;                                          this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.BuyOrder' prices.HighestBuyOrder' this.PriceNotifications));                                          this.NotificationsResetDateTimes[priceWatch] = DateTime.Now;                                      }                                  }                                    // Sell Listing Limits Check                                  bool sellListingOutOfLimits = false;                                    if (priceWatch.Data.IsSellListingUpperLimitEnabled && priceWatch.Data.IsSellListingLowerLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing <= priceWatch.Data.SellListingUpperLimit.Value                                                                      && prices.LowestSellListing >= priceWatch.Data.SellListingLowerLimit.Value;                                  }                                  else if (priceWatch.Data.IsSellListingUpperLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing <= priceWatch.Data.SellListingUpperLimit.Value;                                  }                                  else if (priceWatch.Data.IsSellListingLowerLimitEnabled)                                  {                                      sellListingOutOfLimits = prices.LowestSellListing >= priceWatch.Data.SellListingLowerLimit.Value;                                  }                                    Threading.BeginInvokeOnUI(() => priceWatch.IsSellListingOutOfLimits = sellListingOutOfLimits);                                    if (sellListingOutOfLimits)                                  {                                      // Show a notification for the sell listing' if enabled                                      if (this.CanShowNotification(priceWatch' PriceNotificationType.SellListing))                                      {                                          priceWatch.IsSellListingNotificationShown = true;                                          this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.SellListing' prices.LowestSellListing' this.PriceNotifications));                                          this.NotificationsResetDateTimes[priceWatch] = DateTime.Now;                                      }                                  }                              }                                // Update the historical values for the item                              Threading.BeginInvokeOnUI(() =>                                  {                                      priceWatch.PastBuyOrders.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentBuyOrder.Value));                                      priceWatch.PastSellListings.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentSellListing.Value));                                        if (priceWatch.PastBuyOrders.Count > this.UserData.MaxHistoricalDataPoints)                                          priceWatch.PastBuyOrders.RemoveAt(0);                                      if (priceWatch.PastSellListings.Count > this.UserData.MaxHistoricalDataPoints)                                          priceWatch.PastSellListings.RemoveAt(0);                                  });                          }                      }                  }                      // Additionally' update the Ectoplasm Salvage Threshold tracker data                  var ectoPrices = this.commerceService.GetItemPrices(EctoSalvageHelperViewModel.EctoplasmItemID);                  if (ectoPrices != null)                  {                      Threading.BeginInvokeOnUI(() =>                      {                          this.EcoSalvageData.EctoplasmBuyOrder.Value = ectoPrices.HighestBuyOrder;                          this.EcoSalvageData.EctoplasmSellListing.Value = ectoPrices.LowestSellListing;                      });                  }                    this.refreshTimer.Change(this.RefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.Commerce,CommerceController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The following statement contains a magic number: if (!this.PriceNotifications.Contains(priceNotification))              {                  Task.Factory.StartNew(() =>                  {                      logger.Info("Displaying notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType);                      Threading.BeginInvokeOnUI(() => this.PriceNotifications.Add(priceNotification));                        if (this.UserData.NotificationDuration > 0)                      {                          // For X seconds' loop and sleep                          for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                          {                              System.Threading.Thread.Sleep(SLEEP_TIME);                          }                            logger.Debug("Removing notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType);                            // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                          // This makes it so that the notifications can fade out before they are removed from the notification window                          Threading.BeginInvokeOnUI(() => priceNotification.IsRemovingNotification = true);                          System.Threading.Thread.Sleep(SLEEP_TIME);                          Threading.BeginInvokeOnUI(() =>                          {                              this.PriceNotifications.Remove(priceNotification);                              priceNotification.IsRemovingNotification = false;                          });                      }                  });              }
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.ResetPriceNotificationsInterval = 15;
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.MaxHistoricalDataPoints = 600;
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.NotificationDuration = 20;
Magic Number,GW2PAO.Modules.Dungeons.Views,DungeonTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\Views\DungeonTrackerView.xaml.cs,DungeonTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Dungeons.Views,DungeonTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\Views\DungeonTrackerView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (this.DungeonsContainer.Visibility == System.Windows.Visibility.Visible)              {                  // Expanded                  this.MinHeight = dungeonHeight + this.TitleBar.ActualHeight; // minimum of 1 dungeon                  this.MaxHeight = (visibleObjsCount * dungeonHeight) + this.TitleBar.ActualHeight + 2;              }              else              {                  // Collapsed' don't touch the height              }
Magic Number,GW2PAO.Modules.Dungeons,DungeonsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,DungeonsController,The following statement contains a magic number: this.RefreshInterval = 250;
Magic Number,GW2PAO.Modules.Dungeons,DungeonsController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,UpdateCutsceneCount,The following statement contains a magic number: if (this.playerService.Tick == this.previousPlayerTick)              {                  if (!this.tickStopped)                  {                      // The mumble tick is not updating' so we either entered a cutscene or a loading screen                      this.tickStopped = true;                      this.playerPosBeforeTickStopped = this.playerService.PlayerPosition;                        // Increment the counter used for determining how many cutscenes the user has viewed while at the endpoint                      if (this.DungeonTimerData.CurrentPath != null && this.IsPlayerNear(this.DungeonTimerData.CurrentPath.EndPoint))                      {                          this.playerCutsceneCount++;                          logger.Info("Dungeon endpoint cutscene detected - count = {0}"' this.playerCutsceneCount);                      }                  }              }              else              {                  // Tick was previously stopped - if the player position has significantly moved'                  // that means they waypointed instead of entering a cutscene                  if (this.tickStopped                      && this.playerCutsceneCount > 0                      && !CalcUtil.IsInRadius(this.playerPosBeforeTickStopped' this.playerService.PlayerPosition' 10))                  {                      this.playerCutsceneCount--;                      logger.Info("False cutscene detected - count = {0}"' this.playerCutsceneCount);                  }                  this.tickStopped = false;              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The following statement contains a magic number: this.ZoneRefreshInterval = 1000;
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The following statement contains a magic number: this.LocationsRefreshInterval = 250;
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: lock (locationsRefreshTimerLock)              {                  if (this.isStopped)                      return; // Immediately return if we are supposed to be stopped                    API.Data.Entities.Point playerPos = null;                  API.Data.Entities.Point cameraDir = null;                  try                  {                      playerPos = this.playerService.PlayerPosition;                      cameraDir = this.playerService.CameraDirection;                  }                  catch (ObjectDisposedException)                  {                      // The player service is disposed!                      return;                  }                    if (playerPos != null && cameraDir != null)                  {                      var playerMapPosition = CalcUtil.ConvertToMapPosition(playerPos);                      var cameraDirectionMapPosition = CalcUtil.ConvertToMapPosition(cameraDir);                        Threading.BeginInvokeOnUI(() =>                      {                          if (playerMapPosition.X != this.CharacterPosition.X && playerMapPosition.Y != this.CharacterPosition.Y)                              this.CharacterPosition = playerMapPosition;                          if (cameraDirectionMapPosition.X != this.CameraDirection.X && cameraDirectionMapPosition.Y != this.CameraDirection.Y)                              this.CameraDirection = cameraDirectionMapPosition;                      });                        lock (this.zoneItemsLock)                      {                          foreach (var item in this.ZoneItems)                          {                              var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits));                              var newAngle = CalcUtil.CalculateAngle(CalcUtil.Vector.CreateVector(playerMapPosition' item.ItemModel.Location)'                                                                     CalcUtil.Vector.CreateVector(new API.Data.Entities.Point(0' 0)' cameraDirectionMapPosition));                                if (item.DistanceFromPlayer != newDistance)                              {                                  Threading.BeginInvokeOnUI(() => item.DistanceFromPlayer = newDistance);                              }                                if (item.DirectionFromPlayer != newAngle)                              {                                  Threading.BeginInvokeOnUI(() => item.DirectionFromPlayer = newAngle);                              }                                if (!item.IsUnlocked)                              {                                  // If the zone item isn't already unlocked' check to see if it should be automatically unlocked                                  //  based on the item's distance from the player and based on how long the player has been near the item                                  var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet));                                  switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }                              }                          }                      }                  }                    this.itemLocationsRefreshTimer.Change(this.LocationsRefreshInterval' Timeout.Infinite);              }
Magic Number,GW2PAO.Modules.Commerce.ViewModels.PriceNotification,PriceNotificationViewModel,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\PriceNotification\PriceNotificationViewModel.cs,CloseNotification,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      Threading.InvokeOnUI(() => this.IsRemovingNotification = true);                      System.Threading.Thread.Sleep(250);                      Threading.InvokeOnUI(() =>                      {                          this.displayedNotifications.Remove(this);                          this.IsRemovingNotification = false;                      });                  });
Magic Number,GW2PAO.Views,NewVersionNotificationView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,RestartPromptView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,RestartPromptView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,RestartPromptView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.MinHeight / 2);
Magic Number,GW2PAO.Views,RestartPromptView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.MinHeight / 2);
Magic Number,GW2PAO.Views,SettingsView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,SettingsView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,SettingsView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,SettingsView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,ShellView,C:\repos\SamHurne_gw2pao\GW2PAO\Views\ShellView.xaml.cs,ShellView_Loaded,The following statement contains a magic number: if (Properties.Settings.Default.FirstTimeRun                  && ((ShellViewModel)this.DataContext).IsOverlayMenuIconVisible)              {                  Task.Factory.StartNew(() =>                  {                      System.Threading.Thread.Sleep(500);                      this.Dispatcher.Invoke(() => this.NowRunningPopup.IsOpen = true);                  });              }
Magic Number,GW2PAO.Modules.Commerce.Views.PriceTracker,PriceTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\PriceTracker\PriceTrackerView.xaml.cs,PriceTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = -12;
Magic Number,GW2PAO.Modules.Commerce.Views.PriceTracker,PriceTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\PriceTracker\PriceTrackerView.xaml.cs,CollapseExpandButton_Click,The following statement contains a magic number: if (this.ItemsContainer.Visibility == System.Windows.Visibility.Visible)              {                  this.beforeCollapseHeight = this.Height;                  this.MinHeight = this.TitleBar.ActualHeight;                  this.MaxHeight = this.TitleBar.ActualHeight;                  this.Height = this.TitleBar.ActualHeight;                  this.ItemsContainer.Visibility = System.Windows.Visibility.Collapsed;              }              else              {                  this.ItemsContainer.Visibility = System.Windows.Visibility.Visible;                  this.MaxHeight = 5000;                  this.RefreshWindowHeights();                  this.Height = this.beforeCollapseHeight;              }
Magic Number,GW2PAO.Modules.Commerce.Views.PriceNotification,PriceNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\PriceNotification\PriceNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.PriceNotificationX == -1                  && Properties.Settings.Default.PriceNotificationY == -1)              {                  // Use default location (bottom-right corner)                  this.Left = 0;                  this.Top = 200;              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.PriceNotificationX;                  this.Top = Properties.Settings.Default.PriceNotificationY;              }
Magic Number,GW2PAO.Modules.Teamspeak.Views,TeamspeakView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\Views\TeamspeakView.xaml.cs,Channel_MouseLeftButtonDown,The following statement contains a magic number: if (e.ClickCount == 2)              {                  var dataContext = ((FrameworkElement)sender).DataContext;                  var vm = dataContext as ChannelViewModel;                  if (vm != null)                  {                      vm.SelectChannelCommand.Execute(null);                  }                  this.ChannelListPopup.IsOpen = false;                  e.Handled = true;              }
Magic Number,GW2PAO.Modules.WebBrowser.Views,BrowserView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The following statement contains a magic number: if (e.IsPopup && !e.IsUserSpecsOnly)              {                  // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.                  Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();                    // Set the created native view as the underlying view of the                  // WebControl. This will maintain the relationship between                  // the parent view and the child' usually required when the                   // new view is the result of 'window.open' (JS can access                   // the parent window through 'window.opener'; the parent window                   // can manipulate the child through the 'window' object returned                   // from the 'window.open' call).                  newWindow = new BrowserView(new BrowserViewModel()' e.NewViewInstance);                  // Do not show in the taskbar.                  newWindow.ShowInTaskbar = false;                  // Set a border-style to indicate a popup.                  newWindow.WindowStyle = WindowStyle.None;                  // Set resizing mode depending on the indicated specs.                  newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;                    // If the caller has not indicated a valid size for the                   // new popup window' let it be opened with the default                   // size specified at design time.                  if ((screenRect.Width > 0) && (screenRect.Height > 0))                  {                      // The indicated size' is client size.                      double horizontalBorderHeight = SystemParameters.ResizeFrameHorizontalBorderHeight;                      double verticalBorderWidth = SystemParameters.ResizeFrameVerticalBorderWidth;                      double captionHeight = SystemParameters.CaptionHeight;                        // Set the indicated size.                      newWindow.Width = screenRect.Width + (verticalBorderWidth * 2);                      newWindow.Height = screenRect.Height + captionHeight + (horizontalBorderHeight * 2);                  }                    // Show the window.                  newWindow.Show();                    // If the caller has not indicated a valid position for                   // the new popup window' let it be opened in the default                   // position specified at design time.                  if ((screenRect.Y > 0) && (screenRect.X > 0))                  {                      // Move it to the indicated coordinates.                      newWindow.Top = screenRect.Y;                      newWindow.Left = screenRect.X;                  }              }              else if (e.IsWindowOpen || e.IsPost)              {                  // No specs or only non-standard specs were specified'                   // but the event is still the result of 'window.open'                   // or of an HTML form with tagret="_blank" and method="post".                  // We will open a normal window but we will still wrap                   // the new native child view' maintaining its relationship                   // with the parent window.                  newWindow = new BrowserView(new BrowserViewModel()' e.NewViewInstance);                  // Show the window.                  newWindow.Show();              }              else              {                  // The event is not the result of 'window.open' or of an                   // HTML form with tagret="_blank" and method="post".'                   // therefore it's most probably the result of a link with                   // target='_blank'. We will not be wrapping the created view;                   // we let the WebControl hosted in MainWindow create its own                   // underlying view. Setting Cancel to true tells the core                   // to destroy the created child view.                  //                  // Why don't we always wrap the native view passed to                   // ShowCreatedWebView?                  //                  // - In order to maintain the relationship with their parent                   // view' child views execute and render under the same process                   // (awesomium_process) as their parent view. If for any reason                   // this child process crashes' all views related to it will be                   // affected. When maintaining a parent-child relationship is not                   // important' we prefer taking advantage of the isolated process                   // architecture of Awesomium and let each view be rendered in                   // a separate process.                  e.Cancel = true;                  // Note that we only explicitly navigate to the target URL'                   // when a new view is about to be created' not when we wrap the                   // created child view. This is because navigation to the target                   // URL (if any)' is already queued on created child views.                   // We must not interrupt this navigation as we would still be                   // breaking the parent-child relationship.                  newWindow = new BrowserView(new BrowserViewModel()' e.TargetURL);                  // Show the window.                  newWindow.Show();              }
Magic Number,GW2PAO.Modules.WebBrowser.Views,BrowserView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The following statement contains a magic number: if (e.IsPopup && !e.IsUserSpecsOnly)              {                  // JSWindowOpenSpecs.InitialPosition indicates screen coordinates.                  Int32Rect screenRect = e.Specs.InitialPosition.GetInt32Rect();                    // Set the created native view as the underlying view of the                  // WebControl. This will maintain the relationship between                  // the parent view and the child' usually required when the                   // new view is the result of 'window.open' (JS can access                   // the parent window through 'window.opener'; the parent window                   // can manipulate the child through the 'window' object returned                   // from the 'window.open' call).                  newWindow = new BrowserView(new BrowserViewModel()' e.NewViewInstance);                  // Do not show in the taskbar.                  newWindow.ShowInTaskbar = false;                  // Set a border-style to indicate a popup.                  newWindow.WindowStyle = WindowStyle.None;                  // Set resizing mode depending on the indicated specs.                  newWindow.ResizeMode = e.Specs.Resizable ? ResizeMode.CanResizeWithGrip : ResizeMode.NoResize;                    // If the caller has not indicated a valid size for the                   // new popup window' let it be opened with the default                   // size specified at design time.                  if ((screenRect.Width > 0) && (screenRect.Height > 0))                  {                      // The indicated size' is client size.                      double horizontalBorderHeight = SystemParameters.ResizeFrameHorizontalBorderHeight;                      double verticalBorderWidth = SystemParameters.ResizeFrameVerticalBorderWidth;                      double captionHeight = SystemParameters.CaptionHeight;                        // Set the indicated size.                      newWindow.Width = screenRect.Width + (verticalBorderWidth * 2);                      newWindow.Height = screenRect.Height + captionHeight + (horizontalBorderHeight * 2);                  }                    // Show the window.                  newWindow.Show();                    // If the caller has not indicated a valid position for                   // the new popup window' let it be opened in the default                   // position specified at design time.                  if ((screenRect.Y > 0) && (screenRect.X > 0))                  {                      // Move it to the indicated coordinates.                      newWindow.Top = screenRect.Y;                      newWindow.Left = screenRect.X;                  }              }              else if (e.IsWindowOpen || e.IsPost)              {                  // No specs or only non-standard specs were specified'                   // but the event is still the result of 'window.open'                   // or of an HTML form with tagret="_blank" and method="post".                  // We will open a normal window but we will still wrap                   // the new native child view' maintaining its relationship                   // with the parent window.                  newWindow = new BrowserView(new BrowserViewModel()' e.NewViewInstance);                  // Show the window.                  newWindow.Show();              }              else              {                  // The event is not the result of 'window.open' or of an                   // HTML form with tagret="_blank" and method="post".'                   // therefore it's most probably the result of a link with                   // target='_blank'. We will not be wrapping the created view;                   // we let the WebControl hosted in MainWindow create its own                   // underlying view. Setting Cancel to true tells the core                   // to destroy the created child view.                  //                  // Why don't we always wrap the native view passed to                   // ShowCreatedWebView?                  //                  // - In order to maintain the relationship with their parent                   // view' child views execute and render under the same process                   // (awesomium_process) as their parent view. If for any reason                   // this child process crashes' all views related to it will be                   // affected. When maintaining a parent-child relationship is not                   // important' we prefer taking advantage of the isolated process                   // architecture of Awesomium and let each view be rendered in                   // a separate process.                  e.Cancel = true;                  // Note that we only explicitly navigate to the target URL'                   // when a new view is about to be created' not when we wrap the                   // created child view. This is because navigation to the target                   // URL (if any)' is already queued on created child views.                   // We must not interrupt this navigation as we would still be                   // breaking the parent-child relationship.                  newWindow = new BrowserView(new BrowserViewModel()' e.TargetURL);                  // Show the window.                  newWindow.Show();              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.WvWNotificationX == -1                  && Properties.Settings.Default.WvWNotificationY == -1)              {                  // Use default location (bottom-right corner' without being on top of event notifications)                  this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;                  this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - (this.ActualHeight * 2);              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.WvWNotificationX;                  this.Top = Properties.Settings.Default.WvWNotificationY;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.WvWNotificationX == -1                  && Properties.Settings.Default.WvWNotificationY == -1)              {                  // Use default location (bottom-right corner' without being on top of event notifications)                  this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;                  this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - (this.ActualHeight * 2);              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.WvWNotificationX;                  this.Top = Properties.Settings.Default.WvWNotificationY;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: if (Properties.Settings.Default.WvWNotificationX == -1                  && Properties.Settings.Default.WvWNotificationY == -1)              {                  // Use default location (bottom-right corner' without being on top of event notifications)                  this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;                  this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - (this.ActualHeight * 2);              }              else              {                  // Use saved location                  this.Left = Properties.Settings.Default.WvWNotificationX;                  this.Top = Properties.Settings.Default.WvWNotificationY;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,OnImportsSatisfied,The following statement contains a magic number: if (this.ViewModel.IsHorizontalOrientation)              {                  // Horizontal Orientation                  this.MinHeight = HORIZONTAL_MIN_HEIGHT;                  this.MaxHeight = HORIZONTAL_MAX_HEIGHT;                  this.Height = this.MaxHeight;                  this.MinWidth = HORIZONTAL_MIN_WIDTH;                  this.MaxWidth = HORIZONTAL_MAX_WIDTH;                  this.Width = HORIZONTAL_DEF_WIDTH;              }              else              {                  // Vertical Orientation                  this.MinHeight = VERTICAL_MIN_HEIGHT;                  this.MaxHeight = VERTICAL_MAX_HEIGHT;                  this.Height = VERTICAL_MAX_HEIGHT / 3;                  this.MinWidth = VERTICAL_MIN_WIDTH;                  this.MaxWidth = VERTICAL_MAX_WIDTH;                  this.Width = VERTICAL_DEF_WIDTH;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshResizeSnapping,The following statement contains a magic number: if (this.ViewModel.IsHorizontalOrientation)              {                  this.ResizeHelper.SnappingHeightOffset = 0;                  this.ResizeHelper.SnappingIncrementHeight = 1;                  this.ResizeHelper.SnappingWidthOffset = 3;                  this.ResizeHelper.SnappingIncrementWidth = (int)this.horizontal_objWidth;              }              else              {                  this.ResizeHelper.SnappingHeightOffset = 8;                  this.ResizeHelper.SnappingIncrementHeight = (int)this.vertical_objHeight;                  this.ResizeHelper.SnappingWidthOffset = 0;                  this.ResizeHelper.SnappingIncrementWidth = 1;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshResizeSnapping,The following statement contains a magic number: if (this.ViewModel.IsHorizontalOrientation)              {                  this.ResizeHelper.SnappingHeightOffset = 0;                  this.ResizeHelper.SnappingIncrementHeight = 1;                  this.ResizeHelper.SnappingWidthOffset = 3;                  this.ResizeHelper.SnappingIncrementWidth = (int)this.horizontal_objWidth;              }              else              {                  this.ResizeHelper.SnappingHeightOffset = 8;                  this.ResizeHelper.SnappingIncrementHeight = (int)this.vertical_objHeight;                  this.ResizeHelper.SnappingWidthOffset = 0;                  this.ResizeHelper.SnappingIncrementWidth = 1;              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (objsCount > 0)              {                  if (this.ObjectivesContainer.Visibility == System.Windows.Visibility.Visible)                  {                      // Expanded                      if (this.ViewModel.IsHorizontalOrientation)                      {                          // Horizontal Orientation                          this.MinHeight = HORIZONTAL_MIN_HEIGHT;                          this.MaxHeight = HORIZONTAL_MAX_HEIGHT;                            if (resetHeight)                              this.Height = this.MaxHeight;                      }                      else                      {                          // Vertical Orientation                          this.MinHeight = VERTICAL_MIN_HEIGHT;                          this.MaxHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * objsCount) + 5;                            if (resetHeight)                              this.Height = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }                  else                  {                      // Collapsed' don't touch the height unless we are resetting it                      if (resetHeight)                      {                          if (this.ViewModel.IsHorizontalOrientation)                              this.beforeCollapseHeight = HORIZONTAL_MAX_HEIGHT;                          else                              this.beforeCollapseHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (objsCount > 0)              {                  if (this.ObjectivesContainer.Visibility == System.Windows.Visibility.Visible)                  {                      // Expanded                      if (this.ViewModel.IsHorizontalOrientation)                      {                          // Horizontal Orientation                          this.MinHeight = HORIZONTAL_MIN_HEIGHT;                          this.MaxHeight = HORIZONTAL_MAX_HEIGHT;                            if (resetHeight)                              this.Height = this.MaxHeight;                      }                      else                      {                          // Vertical Orientation                          this.MinHeight = VERTICAL_MIN_HEIGHT;                          this.MaxHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * objsCount) + 5;                            if (resetHeight)                              this.Height = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }                  else                  {                      // Collapsed' don't touch the height unless we are resetting it                      if (resetHeight)                      {                          if (this.ViewModel.IsHorizontalOrientation)                              this.beforeCollapseHeight = HORIZONTAL_MAX_HEIGHT;                          else                              this.beforeCollapseHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: if (objsCount > 0)              {                  if (this.ObjectivesContainer.Visibility == System.Windows.Visibility.Visible)                  {                      // Expanded                      if (this.ViewModel.IsHorizontalOrientation)                      {                          // Horizontal Orientation                          this.MinHeight = HORIZONTAL_MIN_HEIGHT;                          this.MaxHeight = HORIZONTAL_MAX_HEIGHT;                            if (resetHeight)                              this.Height = this.MaxHeight;                      }                      else                      {                          // Vertical Orientation                          this.MinHeight = VERTICAL_MIN_HEIGHT;                          this.MaxHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * objsCount) + 5;                            if (resetHeight)                              this.Height = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }                  else                  {                      // Collapsed' don't touch the height unless we are resetting it                      if (resetHeight)                      {                          if (this.ViewModel.IsHorizontalOrientation)                              this.beforeCollapseHeight = HORIZONTAL_MAX_HEIGHT;                          else                              this.beforeCollapseHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * 5);                      }                  }              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowWidths,The following statement contains a magic number: if (objsCount > 0)              {                  if (this.ViewModel.IsHorizontalOrientation)                  {                      // Horizontal Orientation                      this.MinWidth = HORIZONTAL_MIN_WIDTH;                      this.MaxWidth = this.horizontal_objWidth * objsCount;                        if (resetWidth)                          this.Width = this.horizontal_objWidth * 5;                  }                  else                  {                      // Vertical Orientation                      this.MinWidth = VERTICAL_MIN_WIDTH;                      this.MaxWidth = VERTICAL_MAX_WIDTH;                        if (resetWidth)                          this.Width = VERTICAL_DEF_WIDTH;                  }              }
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,C:\repos\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,CollapseExpandButton_Click,The following statement contains a magic number: if (this.ObjectivesContainer.Visibility == System.Windows.Visibility.Visible)              {                  this.beforeCollapseHeight = this.Height;                  this.MinHeight = this.TitleBar.ActualHeight;                  this.MaxHeight = this.TitleBar.ActualHeight;                  this.Height = this.TitleBar.ActualHeight;                  this.ObjectivesContainer.Visibility = System.Windows.Visibility.Collapsed;              }              else              {                  var objsCount = ((ListCollectionView)this.ObjectivesContainer.ItemsSource).Count;                  if (this.ViewModel.IsHorizontalOrientation)                  {                      // Horizontal Orientation                      this.MinHeight = HORIZONTAL_MIN_HEIGHT;                      this.MaxHeight = HORIZONTAL_MAX_HEIGHT;                  }                  else                  {                      // Vertical Orientation                      this.MinHeight = VERTICAL_MIN_HEIGHT;                      this.MaxHeight = this.TitleBar.ActualHeight + (this.vertical_objHeight * objsCount) + 5;                  }                  this.Height = this.beforeCollapseHeight;                  this.ObjectivesContainer.Visibility = System.Windows.Visibility.Visible;              }
Missing Default,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The following switch statement is missing a default case: switch (msg)              {                  case WM_SIZING:                      RECT bounds = (RECT)Marshal.PtrToStructure(lParam' typeof(RECT));                        int width = bounds.right - bounds.left;                      int height = bounds.bottom - bounds.top;                        switch (wParam.ToInt32())                      {                          case WMSZ_BOTTOM:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_BOTTOMLEFT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_BOTTOMRIGHT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_LEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_RIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_TOP:                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPLEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPRIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                        }                      Marshal.StructureToPtr(bounds' lParam' false);                      break;              }
Missing Default,GW2PAO.Utility,ResizeSnapHelper,C:\repos\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The following switch statement is missing a default case: switch (wParam.ToInt32())                      {                          case WMSZ_BOTTOM:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_BOTTOMLEFT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_BOTTOMRIGHT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_LEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_RIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_TOP:                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPLEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPRIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                        }
