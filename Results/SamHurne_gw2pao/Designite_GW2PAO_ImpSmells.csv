Implementation smell,Namespace,Class,File,Method,Description
Long Method,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,RefreshEvents,The method has 101 lines of code.
Long Method,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The method has 123 lines of code.
Long Method,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The method has 131 lines of code.
Long Method,GW2PAO.ViewModels,HotkeySettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,The method has 132 lines of code.
Long Method,GW2PAO.Modules.WebBrowser.Views,BrowserView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The method has 106 lines of code.
Complex Method,GW2PAO.Converters,EventStateConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\EventStateConverter.cs,Convert,Cyclomatic complexity of the method is 12
Complex Method,GW2PAO.Converters,WvWMapConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WvWMapConverter.cs,Convert,Cyclomatic complexity of the method is 17
Complex Method,GW2PAO.Converters,ObjectiveTypeImageSrcConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\ObjectiveTypeImageSrcConverter.cs,Convert,Cyclomatic complexity of the method is 14
Complex Method,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,Cyclomatic complexity of the method is 11
Complex Method,GW2PAO.Infrastructure.Hotkeys,Hotkey,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\Hotkey.cs,ToString,Cyclomatic complexity of the method is 16
Complex Method,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,RefreshEvents,Cyclomatic complexity of the method is 15
Complex Method,GW2PAO.Modules.Map.ViewModels,PlayerMarkersViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\PlayerMarkersViewModel.cs,PlayerTasksCollection_CollectionChanged,Cyclomatic complexity of the method is 16
Complex Method,GW2PAO.Modules.ZoneCompletion.Models,ContinentZoneItems,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\Models\ZoneItemsStore.cs,Add,Cyclomatic complexity of the method is 8
Complex Method,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,Cyclomatic complexity of the method is 9
Complex Method,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,CanShowNotification,Cyclomatic complexity of the method is 16
Complex Method,GW2PAO.Utility,ProcessMonitor,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ProcessMonitor.cs,Refresh,Cyclomatic complexity of the method is 11
Complex Method,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,Cyclomatic complexity of the method is 20
Complex Method,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,Cyclomatic complexity of the method is 19
Complex Method,GW2PAO.Modules.Dungeons,DungeonsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,Refresh,Cyclomatic complexity of the method is 11
Complex Method,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,RefreshVisibility,Cyclomatic complexity of the method is 11
Complex Method,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,Cyclomatic complexity of the method is 20
Complex Method,GW2PAO.ViewModels,HotkeySettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,Cyclomatic complexity of the method is 38
Complex Method,GW2PAO.Modules.ZoneCompletion.ViewModels,ZoneItemViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ViewModels\ZoneItemViewModel.cs,RefreshVisibility,Cyclomatic complexity of the method is 8
Complex Method,GW2PAO.Views,HotkeyUserControl,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\HotkeyUserControl.xaml.cs,EntryBox_KeyDown,Cyclomatic complexity of the method is 9
Complex Method,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowHeights,Cyclomatic complexity of the method is 8
Long Parameter List,GW2PAO.Modules.Map.ViewModels,PlayerMarkersViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\PlayerMarkersViewModel.cs,PlayerMarkersViewModel,The method has 6 parameters. Parameters: taskTrackerVm' userData' playerTaskFactory' tasksController' zoneService' playerService
Long Parameter List,GW2PAO.Modules.Map.ViewModels,MapViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\MapViewModel.cs,MapViewModel,The method has 6 parameters. Parameters: zoneController' zoneService' playerService' mapMarkers' zoneItems' userData
Long Parameter List,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,WvWController,The method has 5 parameters. Parameters: wvwService' playerService' hasMap' guildService' userData
Long Parameter List,GW2PAO.Utility,MailUtility,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The method has 8 parameters. Parameters: to' body' subject' fromAddress' fromDisplay' credentialUser' credentialPassword' attachments
Long Parameter List,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The method has 5 parameters. Parameters: hwnd' msg' wParam' lParam' handled
Long Parameter List,GW2PAO.Utility,User32,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\User32.cs,SetWindowPos,The method has 7 parameters. Parameters: hWnd' hWndInsertAfter' X' Y' cx' cy' uFlags
Long Parameter List,GW2PAO.Modules.Dungeons,DungeonsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,DungeonsController,The method has 5 parameters. Parameters: dungeonsService' zoneService' playerService' browserController' userData
Long Parameter List,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The method has 5 parameters. Parameters: zoneService' playerService' systemService' zoneNameObject' userData
Long Parameter List,GW2PAO.Infrastructure.ViewModels,CheckableMenuItem,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\ViewModels\CheckableMenuItem.cs,CheckableMenuItem,The method has 6 parameters. Parameters: header' staysOpen' setter' getter' propertyOwner' isCheckedProperty
Long Parameter List,GW2PAO.ViewModels,ShellViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,ShellViewModel,The method has 7 parameters. Parameters: systemService' settingsViewController' generalSettingsVm' hotkeySettingsVm' container' eventAggregator' processMonitor
Long Identifier,GW2PAO.Infrastructure,HotkeyCommands,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\HotkeyCommands.cs,,The length of the parameter ToggleInteractiveWindowsCommand is 31.
Long Identifier,GW2PAO.Infrastructure,HotkeyCommands,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\HotkeyCommands.cs,,The length of the parameter ToggleNotificationWindowBordersCommand is 38.
Long Identifier,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,,The length of the parameter isSellListingNotificationShown is 30.
Long Identifier,GW2PAO.Modules.Events.ViewModels.EventNotification,MetaEventNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\ViewModels\EventNotification\MetaEventNotificationViewModel.cs,MetaEventNotificationViewModel,The length of the parameter visibleNotificationsCollection is 30.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areBlueBorderlandsNotificationsEnabled is 38.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areGreenBorderlandsNotificationsEnabled is 39.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areRedBorderlandsNotificationsEnabled is 37.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areEternalBattlegroundsNotificationsEnabled is 43.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter notifyWhenOtherTakesOtherObjective is 34.
Long Identifier,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,,The length of the parameter areBloodlustNotificationsEnabled is 32.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter resetPriceNotificationsInterval is 31.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter areBuyOrderPriceNotificationsEnabled is 36.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter areSellListingPriceNotificationsEnabled is 39.
Long Identifier,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,,The length of the parameter ectoplasmThresholdUsesSellListing is 33.
Long Identifier,GW2PAO.Modules.Teamspeak,TeamspeakUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\TeamspeakUserData.cs,,The length of the parameter showEnterExitChannelNotifications is 33.
Long Identifier,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,WvWObjectiveViewModel,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.ViewModels,HotkeySettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,,The length of the parameter toggleInteractiveWindowsHotkey is 30.
Long Identifier,GW2PAO.ViewModels,HotkeySettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,,The length of the parameter toggleNotificationWindowBordersHotkey is 37.
Long Identifier,GW2PAO.Modules.Commerce.ViewModels.PriceNotification,PriceNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\PriceNotification\PriceNotificationViewModel.cs,PriceNotificationViewModel,The length of the parameter displayedNotificationsCollection is 32.
Long Identifier,GW2PAO.Modules.Commerce.Models,PriceWatch,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Models\PriceWatch.cs,,The length of the parameter isSellListingUpperLimitEnabled is 30.
Long Identifier,GW2PAO.Modules.Commerce.Models,PriceWatch,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Models\PriceWatch.cs,,The length of the parameter isSellListingLowerLimitEnabled is 30.
Long Statement,GW2PAO,App,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\App.xaml.cs,OnStartup,The length of the statement  "            logger.Info("Application starting - " + executingAssembly.GetName().Name + " - " + executingAssembly.GetName().Version + " - " + fvi.FileVersion + " - " + fvi.ProductVersion); " is 175.
Long Statement,GW2PAO.Controllers,SettingsViewController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenHotkeySettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(HotkeySettingsView)))); " is 125.
Long Statement,GW2PAO.Controllers,SettingsViewController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenEventSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(EventSettingsView)))); " is 123.
Long Statement,GW2PAO.Controllers,SettingsViewController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenDungeonSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(DungeonSettingsView)))); " is 127.
Long Statement,GW2PAO.Controllers,SettingsViewController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Controllers\SettingsViewController.cs,Initialize,The length of the statement  "            Commands.OpenCommerceSettingsCommand.RegisterCommand(new DelegateCommand(() => this.OpenSettings(typeof(CommerceSettingsView)))); " is 129.
Long Statement,GW2PAO.Infrastructure.Hotkeys,GlobalHotkeyManager,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\GlobalHotkeyManager.cs,Register,The length of the statement  "            bool result = User32.RegisterHotKey(IntPtr.Zero' hotkey.KeyId' (UInt32)hotkey.KeyModifiers' (UInt32)hotkey.VirtualKeyCode); " is 123.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.BuyOrderUpperLimit.Value = this.ItemData.Prices.HighestBuyOrder + 1; // default to +1 so we don't immediately do a notification " is 137.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.BuyOrderLowerLimit.Value = this.ItemData.Prices.HighestBuyOrder - 1; // default to +1 so we don't immediately do a notification " is 137.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.SellListingUpperLimit.Value = this.ItemData.Prices.LowestSellListing + 1; // default to -1 so we don't immediately do a notification " is 142.
Long Statement,GW2PAO.Modules.Commerce.ViewModels,ItemPriceViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\ItemPriceViewModel.cs,SetItem,The length of the statement  "                    this.Data.SellListingLowerLimit.Value = this.ItemData.Prices.LowestSellListing - 1; // default to -1 so we don't immediately do a notification " is 142.
Long Statement,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The length of the statement  "                    this.TimeUntilNight = TimeSpan.FromMinutes(CYCLE_LENGTH_MINUTES + NIGHT_START_MINUTES - offsetAdjustedTime.TotalMinutes); " is 121.
Long Statement,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The length of the statement  "                    this.DayNightCyclePercentage = ((offsetAdjustedTime.TotalMinutes - NIGHT_START_MINUTES) / (CYCLE_LENGTH_MINUTES - NIGHT_START_MINUTES)) * 100.0; " is 144.
Long Statement,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,UserData_PropertyChanged,The length of the statement  "                                var newData = this.eventsService.WorldBossEventTimeTable.WorldEvents.FirstOrDefault(evt => evt.ID == worldBossEvent.EventId); " is 125.
Long Statement,GW2PAO.Views.Events.WorldBossTimers,WorldBossTimerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimerView.xaml.cs,UserControl_MouseDown,The length of the statement  "                ((GW2PAO.Modules.Events.ViewModels.WorldBossTimers.WorldBossEventViewModel)this.DataContext).CopyDataCommand.Execute(null); " is 123.
Long Statement,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The length of the statement  "                double charY = map.ContinentRectangle.Y + ((map.MapRectangle.Y + map.MapRectangle.Height) - charPos.Y) * MapsHelper.MapToWorldRatio; " is 132.
Long Statement,GW2PAO.Modules.Map.ViewModels,PlayerMarkerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\PlayerMarkerViewModel.cs,DetermineCurrentContinent,The length of the statement  "                cont = this.zoneService.GetContinent(1); // Assume default Tyria continent   TODO: Would be nice to use the continent shown on the map " is 134.
Long Statement,GW2PAO.Modules.Tasks,TasksController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The length of the statement  "                    var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' this.UserData.DistanceUnits)); " is 122.
Long Statement,GW2PAO.Modules.Tasks,TasksController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The length of the statement  "                    if (ptask.Task.AutoComplete && CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' API.Data.Enums.Units.Feet) < 10) " is 126.
Long Statement,GW2PAO.Modules.Tasks,TasksController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,EnsureTasksHaveContinentLocation,The length of the statement  "                ptask.Task.ContinentLocation = API.Util.MapsHelper.ConvertToWorldPos(map.ContinentRectangle' map.MapRectangle' CalcUtil.ConvertToMapPosition(ptask.Task.Location)); " is 163.
Long Statement,GW2PAO.Modules.Tasks.ViewModels,NewTaskDialogViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\ViewModels\NewTaskDialogViewModel.cs,RefreshLocation,The length of the statement  "                this.Task.ContinentLocation = API.Util.MapsHelper.ConvertToWorldPos(map.ContinentRectangle' map.MapRectangle' API.Util.CalcUtil.ConvertToMapPosition(this.Task.Location)); " is 170.
Long Statement,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The length of the statement  "                    var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect); " is 134.
Long Statement,GW2PAO.Modules.WebBrowser.ViewModels,BrowserViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\ViewModels\BrowserViewModel.cs,InitializeBookmarks,The length of the statement  "                this.Bookmarks.Add(new Bookmark("Egg Baron Material Promotion Sheet"' new Uri("https://docs.google.com/spreadsheet/lv?key=0As-wCpIszrT9dFB3YjVUVFhfenlDUUpXTVBIdm5qWmc"))); " is 171.
Long Statement,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,InitializeAllObjectivesCollection,The length of the statement  "                // Determine the current match. If this changes' we don't need to re-initialize since the actual objectives don't change - just the owners change " is 145.
Long Statement,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,HandleMatchChange,The length of the statement  "                ConcurrentDictionary<Guid' API.Data.Entities.Guild> guildDict = new ConcurrentDictionary<Guid' API.Data.Entities.Guild>(); " is 122.
Long Statement,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,The length of the statement  "                                logger.Info("{0} - {1}: {2} -> {3}"' objective.Map' objective.Name' objective.PrevWorldOwnerName' objective.WorldOwnerName); " is 124.
Long Statement,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,CalculateDistances,The length of the statement  "            // Calculate time distances for all objectives' based on the player's position' if the player is in the same map as the objective " is 129.
Long Statement,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,CalculateDistances,The length of the statement  "                                objective.DistanceFromPlayer = Math.Round(CalcUtil.CalculateDistance(playerPosition' objective.ModelData.MapLocation' this.UserData.DistanceUnits)); " is 148.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset; " is 132.
Long Statement,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The length of the statement  "                                bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset; " is 136.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,CopyTo,The length of the statement  "                throw new ArgumentOutOfRangeException("CopyTo() failed:  index parameter was outside the bounds of the supplied array"); " is 120.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,FireEntryAddedNotifications,The length of the statement  "                this.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Add' new KeyValuePair<TKey' TVal>((TKey)entry.Key' (TVal)entry.Value)' index)); " is 171.
Long Statement,GW2PAO.Utility,ObservableDictionary<TKey;TVal>,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,FireEntryRemovedNotifications,The length of the statement  "                this.OnCollectionChanged(new NotifyCollectionChangedEventArgs(NotifyCollectionChangedAction.Remove' new KeyValuePair<TKey' TVal>((TKey)entry.Key' (TVal)entry.Value)' index)); " is 174.
Long Statement,GW2PAO.Utility,Enumerator,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,MoveNext,The length of the statement  "                    _current = new KeyValuePair<Tk' TValue>((Tk)_dictionary.keyedEntryCollection[_index].Key' (TValue)_dictionary.keyedEntryCollection[_index].Value); " is 146.
Long Statement,GW2PAO.Utility,UpdateChecker,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,GetLatestVersion,The length of the statement  "            var request = http.GetStringAsync(new Uri("https://raw.githubusercontent.com/SamHurne/gw2pao/master/latest_version.txt")); " is 122.
Long Statement,GW2PAO.Utility,User32,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\User32.cs,HideFromTaskbar,The length of the statement  "            SetWindowLong(handle' GWL_EXSTYLE' (extendedStyle | ExtendedWindowStyles.WS_EX_TOOLWINDOW) & ~ExtendedWindowStyles.WS_EX_APPWINDOW); " is 132.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                Threading.BeginInvokeOnUI(() => priceWatch.CurrentProfit.Value = (prices.LowestSellListing * 0.85) - prices.HighestBuyOrder); " is 125.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                        this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.BuyOrder' prices.HighestBuyOrder' this.PriceNotifications)); " is 150.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                        this.DisplayNotification(new PriceNotificationViewModel(priceWatch' PriceNotificationType.SellListing' prices.LowestSellListing' this.PriceNotifications)); " is 155.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The length of the statement  "                                    priceWatch.PastSellListings.Add(new DataPoint(DateTimeAxis.ToDouble(DateTime.Now)' priceWatch.CurrentSellListing.Value)); " is 121.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The length of the statement  "                    logger.Info("Displaying notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType); " is 121.
Long Statement,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The length of the statement  "                        logger.Debug("Removing notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType); " is 120.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyUnderAttackText,The length of the statement  "            System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWUnderAttackClipboardText' name' this.Location' this.Type)); " is 125.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyEnemyHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWEnemyHeadedClipboardText' name' this.Location' this.Type)); " is 125.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWPlayerHeadedClipboardText' name' this.Location' this.Type' distance' distanceUnits)); " is 151.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWPlayerHeadedAltClipboardText' name' distance' distanceUnits)); " is 128.
Long Statement,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyRIText,The length of the statement  "                System.Windows.Clipboard.SetDataObject(string.Format(Resources.WvWRIClipboardText' name' this.Location' this.Type' this.TimerValue.ToString("mm\\:ss"))); " is 153.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshZone,The length of the statement  "                        logger.Info("Map/Character change detected' resetting zone events. New MapID = {0} | Character Name = {1}"' this.playerService.MapId' this.CharacterName); " is 154.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The length of the statement  "                            var newDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' this.UserData.DistanceUnits)); " is 130.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The length of the statement  "                                var ftDistance = Math.Round(CalcUtil.CalculateDistance(playerMapPosition' item.ItemModel.Location' API.Data.Enums.Units.Feet)); " is 127.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionUserData.cs,EnableAutoSave,The length of the statement  "            this.HiddenZoneItems.CollectionChanged += (o' e) => ZoneCompletionUserData.SaveData(this' ZoneCompletionUserData.Filename); " is 123.
Long Statement,GW2PAO.Modules.ZoneCompletion,ZoneCompletionUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionUserData.cs,EnableAutoSave,The length of the statement  "                            itemAdded.ZoneItems.CollectionChanged += (a' b) => ZoneCompletionUserData.SaveData(this' ZoneCompletionUserData.Filename); " is 122.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleInteractiveWindowsCommand.RegisterCommand(new DelegateCommand(() => this.IsClickthroughEnabled = !this.IsClickthroughEnabled)); " is 148.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleNotificationWindowBordersCommand.RegisterCommand(new DelegateCommand(() => this.AreNotificationWindowBordersVisible = !this.AreNotificationWindowBordersVisible)); " is 183.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleAutoFadeBordersCommand.RegisterCommand(new DelegateCommand(() => this.AutoFadeBorders = !this.AutoFadeBorders)); " is 133.
Long Statement,GW2PAO.ViewModels,GeneralSettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\GeneralSettingsViewModel.cs,InitializeHotkeyCommandHandlers,The length of the statement  "            HotkeyCommands.ToggleOverlayMenuIconCommand.RegisterCommand(new DelegateCommand(() => this.IsOverlayMenuIconVisible = !this.IsOverlayMenuIconVisible)); " is 151.
Long Statement,GW2PAO.ViewModels,HotkeySettingsViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\HotkeySettingsViewModel.cs,InitializeHotkeys,The length of the statement  "            this.ToggleNotificationWindowBordersHotkey.Pressed += (o' e) => HotkeyCommands.ToggleNotificationWindowBordersCommand.Execute(null); " is 132.
Long Statement,GW2PAO.ViewModels,ShellViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,OnImportsSatisfied,The length of the statement  "            this.MainMenu.Add(new MenuItem(GW2PAO.Properties.Resources.Settings' () => Commands.OpenGeneralSettingsCommand.Execute(null))); " is 127.
Long Statement,GW2PAO.ViewModels,ShellViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\ViewModels\ShellViewModel.cs,OnImportsSatisfied,The length of the statement  "            this.MainMenu.Add(new MenuItem(GW2PAO.Properties.Resources.Help' () => Process.Start("https://github.com/SamHurne/gw2pao/wiki"))); " is 130.
Long Statement,GW2PAO.Modules.ZoneCompletion.ViewModels,ZoneCompletionViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ViewModels\ZoneCompletionViewModel.cs,ResetUnlockedPoints_Zone,The length of the statement  "            var characterItems = this.UserData.UnlockedZoneItems.FirstOrDefault(czi => czi.Character == this.controller.CharacterName); " is 123.
Long Statement,GW2PAO.Views,ShellView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\ShellView.xaml.cs,OnSettingsPropertyChanged,The length of the statement  "            else if (e.PropertyName == ReflectionUtility.GetPropertyName(() => Settings.Default.AutoHideAllWindowsWhenGw2LosesFocus)) " is 121.
Complex Conditional,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshObjectives,The conditional expression  "objective.Type != ObjectiveType.TempleofLostPrayers                                      && objective.Type != ObjectiveType.BattlesHollow                                      && objective.Type != ObjectiveType.BauersEstate                                      && objective.Type != ObjectiveType.OrchardOverlook                                      && objective.Type != ObjectiveType.CarversAscent"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,RefreshVisibility,The conditional expression  "!this.userData.AreBloodlustObjectivesShown &&                          (this.Type == ObjectiveType.TempleofLostPrayers                           || this.Type == ObjectiveType.BattlesHollow                           || this.Type == ObjectiveType.BauersEstate                           || this.Type == ObjectiveType.OrchardOverlook                           || this.Type == ObjectiveType.CarversAscent)"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyEnemyHeadedToText,The conditional expression  "this.Type != ObjectiveType.BattlesHollow                  && this.Type != ObjectiveType.BauersEstate                  && this.Type != ObjectiveType.CarversAscent                  && this.Type != ObjectiveType.OrchardOverlook                  && this.Type != ObjectiveType.TempleofLostPrayers"  is complex.
Complex Conditional,GW2PAO.Modules.WvW.ViewModels,WvWObjectiveViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\ViewModels\WvWObjectiveViewModel.cs,CopyPlayerHeadedToText,The conditional expression  "this.Type != ObjectiveType.BattlesHollow                  && this.Type != ObjectiveType.BauersEstate                  && this.Type != ObjectiveType.CarversAscent                  && this.Type != ObjectiveType.OrchardOverlook                  && this.Type != ObjectiveType.TempleofLostPrayers"  is complex.
Complex Conditional,GW2PAO.Views,HotkeyUserControl,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\HotkeyUserControl.xaml.cs,EntryBox_KeyDown,The conditional expression  "e.Key != Key.LeftShift                      && e.Key != Key.RightShift                      && e.Key != Key.LeftCtrl                      && e.Key != Key.RightCtrl                      && e.Key != Key.LeftAlt                      && e.Key != Key.RightAlt                      && e.Key != Key.LWin                      && e.Key != Key.RWin                      && e.Key != Key.Escape"  is complex.
Empty Catch Block,GW2PAO,App,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\App.xaml.cs,CurrentDomain_UnhandledException,The method has an empty catch block.
Empty Catch Block,GW2PAO.Utility,MailUtility,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The method has an empty catch block.
Magic Number,GW2PAO.Converters,ProgressToAngleConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\ProgressToAngleConverter.cs,Convert,The following statement contains a magic number: return 359.9999 * (progress / (bar.Maximum - bar.Minimum));
Magic Number,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }
Magic Number,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }
Magic Number,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }
Magic Number,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }
Magic Number,GW2PAO.Converters,WorldColorConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Converters\WorldColorConverter.cs,Convert,The following statement contains a magic number: switch (worldColor)                  {                      case WorldColor.None:                          return System.Windows.Media.Colors.White;                      case WorldColor.Red:                          return System.Windows.Media.Color.FromRgb(252' 0' 0);                      case WorldColor.Blue:                          return System.Windows.Media.Color.FromRgb(0' 213' 255);                      case WorldColor.Green:                          return System.Windows.Media.Color.FromRgb(0' 252' 126);                      default:                          return System.Windows.Media.Colors.White;                  }
Magic Number,GW2PAO.Infrastructure.Hotkeys,Hotkey,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Infrastructure\Hotkeys\Hotkey.cs,ToString,The following statement contains a magic number: keyName = keyName.Substring(3);
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: this.Tax.Value = this.EctoplasmSellListing.Value * 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,EctoSalvageHelperViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\EctoSalvageHelperViewModel.cs,CalculateSalvageThreshold,The following statement contains a magic number: this.SalvageThreshold.Value = (this.EctoplasmSellListing.Value * 0.85 * EctoplasmChanceCoeff - SalvageCost) / 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateBreakEvenValues,The following statement contains a magic number: this.BreakEvenBuyPrice.Value = this.SellPrice.Value * 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateBreakEvenValues,The following statement contains a magic number: this.BreakEvenSellPrice.Value = this.BuyPrice.Value / 0.85;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateListingFee,The following statement contains a magic number: this.ListingFee.Value = this.Revenue.Value * 0.05;
Magic Number,GW2PAO.Modules.Commerce.ViewModels,TPCalculatorViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\TPCalculatorViewModel.cs,CalculateSaleFee,The following statement contains a magic number: this.SaleFee.Value = this.Revenue.Value * 0.10;
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Commerce.Views,RebuildNamesDatabaseView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\RebuildNamesDatabaseView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int SCHEDULE_OFFSET_MINUTES = 25;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int CYCLE_LENGTH_MINUTES = 120;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: const int NIGHT_START_MINUTES = 80;
Magic Number,GW2PAO.Modules.DayNight.ViewModels,DayNightTimerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\DayNight\ViewModels\DayNightTimerViewModel.cs,Refresh,The following statement contains a magic number: this.DayNightCyclePercentage = ((offsetAdjustedTime.TotalMinutes - NIGHT_START_MINUTES) / (CYCLE_LENGTH_MINUTES - NIGHT_START_MINUTES)) * 100.0;
Magic Number,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,EventsController,The following statement contains a magic number: this.EventRefreshInterval = 1000;
Magic Number,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,DisplayEventNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.Events,EventsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsController.cs,DisplayEventNotification,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      logger.Info("Displaying notification for \"{0}\""' notification.EventName);                      Threading.InvokeOnUI(() =>                      {                          notificationCollection.Add(notification);                      });                        if (this.UserData.NotificationDuration > 0)                      {                          // For X seconds' loop and sleep' with checks to see if notifications have been disabled                          for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                          {                              System.Threading.Thread.Sleep(SLEEP_TIME);                              if (!this.UserData.AreEventNotificationsEnabled)                              {                                  logger.Debug("Removing notification for \"{0}\""' notification.EventName);                                  Threading.InvokeOnUI(() => notificationCollection.Remove(notification));                              }                          }                            logger.Debug("Removing notification for \"{0}\""' notification.EventName);                            // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                          // This makes it so that the notifications can fade out before they are removed from the notification window                          Threading.InvokeOnUI(() => notification.IsRemovingNotification = true);                          System.Threading.Thread.Sleep(SLEEP_TIME);                          Threading.InvokeOnUI(() =>                          {                              notificationCollection.Remove(notification);                          });                          notification.Cleanup();                      }                  });
Magic Number,GW2PAO.Modules.Events,EventsUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\EventsUserData.cs,EventsUserData,The following statement contains a magic number: this.NotificationDuration = 10;
Magic Number,GW2PAO.Modules.Events.Views.EventNotification,EventNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\EventNotification\EventNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;
Magic Number,GW2PAO.Modules.Events.Views.EventNotification,EventNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\EventNotification\EventNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - this.ActualHeight;
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,EventTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight;
Magic Number,GW2PAO.Modules.Events.Views.MetaEventTimers,MetaEventTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\MetaEventTimers\MetaEventTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: visibleObjsCount < 2
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,EventTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: this.MinHeight = eventHeight * 2 + this.TitleBar.ActualHeight;
Magic Number,GW2PAO.Modules.Events.Views.WorldBossTimers,WorldBossTimersView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Events\Views\WorldBossTimers\WorldBossTimersView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: visibleObjsCount < 2
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: var location = transform.Transform(new System.Windows.Point(                          (point.X - (continent.Width / 2)) / continent.Width * 360.0'                          ((continent.Height / 2) - point.Y) / continent.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.Converters,ContinentCoordToTileCoordConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ContinentCoordToTileCoordConverter.cs,Convert,The following statement contains a magic number: values.Length >= 2                  && values[0] is GW2PAO.API.Data.Entities.Point                  && values[1] is API.Data.Entities.Continent
Magic Number,GW2PAO.Modules.Map.Converters,ZoomToItemSizeConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ZoomToItemSizeConverter.cs,Convert,The following statement contains a magic number: return (double)value * (35 / 7);
Magic Number,GW2PAO.Modules.Map.Converters,ZoomToItemSizeConverter,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Converters\ZoomToItemSizeConverter.cs,Convert,The following statement contains a magic number: return (double)value * (35 / 7);
Magic Number,GW2PAO.Modules.Map,MapUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\MapUserData.cs,MapUserData,The following statement contains a magic number: this.PlayerTrailMaxLength = 100;
Magic Number,GW2PAO.Modules.Map,MapViewController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\MapViewController.cs,Initialize,The following statement contains a magic number: Task.Delay(2000).ContinueWith(o =>              {                  Threading.BeginInvokeOnUI(() =>                  {                      if (Properties.Settings.Default.IsMapOpen && this.CanOpenMap())                          this.OpenMap();                  });              });
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.ViewModels,CharacterPointerViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\ViewModels\CharacterPointerViewModel.cs,RefreshCharacterLocation,The following statement contains a magic number: var location = this.locationTransform.Transform(new System.Windows.Point(                      (charX - (cont.Width / 2)) / cont.Width * 360.0'                      ((cont.Height / 2) - charY) / cont.Height * 360.0));
Magic Number,GW2PAO.Modules.Map.Views.Controls,Map,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\Controls\Map.cs,OnMouseWheel,The following statement contains a magic number: var zoomDelta = MouseWheelZoomDelta * (double)e.Delta / 120d;
Magic Number,GW2PAO.Modules.Map.Views.Controls,Map,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\Controls\Map.cs,OnManipulationDelta,The following statement contains a magic number: TransformMap(e.ManipulationOrigin'                  (System.Windows.Point)e.DeltaManipulation.Translation' e.DeltaManipulation.Rotation'                  (e.DeltaManipulation.Scale.X + e.DeltaManipulation.Scale.Y) / 2d);
Magic Number,GW2PAO.Modules.Tasks,TasksController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,TasksController,The following statement contains a magic number: this.RefreshInterval = 125;
Magic Number,GW2PAO.Modules.Tasks,TasksController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\TasksController.cs,RefreshTaskDistancesAngles,The following statement contains a magic number: ptask.Task.AutoComplete && CalcUtil.CalculateDistance(playerMapPosition' taskMapPosition' API.Data.Enums.Units.Feet) < 10
Magic Number,GW2PAO.Modules.Map.Views,MapView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseLeftButtonDown,The following statement contains a magic number: this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Floor(this.Map.ZoomLevel + 1.5));
Magic Number,GW2PAO.Modules.Map.Views,MapView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseLeftButtonDown,The following statement contains a magic number: e.ClickCount == 2
Magic Number,GW2PAO.Modules.Map.Views,MapView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseRightButtonDown,The following statement contains a magic number: this.Map.ZoomMap(e.GetPosition(this.Map)' Math.Ceiling(this.Map.ZoomLevel - 1.5));
Magic Number,GW2PAO.Modules.Map.Views,MapView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapMouseRightButtonDown,The following statement contains a magic number: e.ClickCount == 2
Magic Number,GW2PAO.Modules.Map.Views,MapView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Map\Views\MapView.xaml.cs,MapManipulationInertiaStarting,The following statement contains a magic number: e.TranslationBehavior.DesiredDeceleration = 0.0001;
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Tasks.Views,AddNewTaskDialog,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\AddNewTaskDialog.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Modules.Tasks.Views.TaskTracker,TaskTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Tasks\Views\TaskTracker\TaskTrackerView.xaml.cs,TaskTrackerView_Loaded,The following statement contains a magic number: this.MinHeight = this.taskHeight * 3 + (int)this.TitleBar.ActualHeight;
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ConnectionRefused,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var cannotConnectNotification = new TSNotificationViewModel(0' Properties.Resources.StartTeamspeak' TSNotificationType.CannotConnect);                      Threading.InvokeOnUI(() => this.Notifications.Add(cannotConnectNotification));                        // Start a loop attempting to connect once every 5 seconds                      int sleepTime = 250; // ms                      int retryInterval = 5000 / sleepTime;                      int i = 0;                      while (!this.isShuttingDown && this.TeamspeakService.ConnectionState != TS3.Data.Enums.ConnectionState.Connected)                      {                          Thread.Sleep(250);                          i++;                          if (i > retryInterval)                          {                              Threading.InvokeOnUI(() => this.TeamspeakService.Connect());                              i = 0;                          }                      }                        if (!this.isShuttingDown)                      {                          this.TeamspeakService.ConnectionRefused += TeamspeakService_ConnectionRefused;                          Threading.InvokeOnUI(() => this.Notifications.Remove(cannotConnectNotification));                      }                  }' TaskCreationOptions.LongRunning);
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ClientEnteredChannel,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var notification = new TSNotificationViewModel(e.ClientID' e.ClientName' TSNotificationType.UserEntered);                      Threading.InvokeOnUI(() => this.Notifications.Add(notification));                      Thread.Sleep(5000); // Let channel notifications stay for 5 seconds                      Threading.InvokeOnUI(() => this.Notifications.Remove(notification));                  });
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TeamspeakViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TeamspeakViewModel.cs,TeamspeakService_ClientExitedChannel,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      var notification = new TSNotificationViewModel(e.ClientID' e.ClientName' TSNotificationType.UserExited);                      Threading.InvokeOnUI(() => this.Notifications.Add(notification));                      Thread.Sleep(5000); // Let channel notifications stay for 5 seconds                      Threading.InvokeOnUI(() => this.Notifications.Remove(notification));                  });
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + this.ClientID.GetHashCode();
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + this.User.GetHashCode();
Magic Number,GW2PAO.Modules.Teamspeak.ViewModels,TSNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\ViewModels\TSNotificationViewModel.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + this.NotificationType.GetHashCode();
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,WvWController,The following statement contains a magic number: this.ObjectivesRefreshInterval = 500;
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,InitializeAllObjectivesCollection,The following statement contains a magic number: Thread.Sleep(1000);
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshTimers,The following statement contains a magic number: var countdownTime = TimeSpan.FromMinutes(5) - timeSinceFlip;
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,RefreshTimers,The following statement contains a magic number: timeSinceFlip <= TimeSpan.FromMinutes(5)
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,DisplayNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.WvW,WvWController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWController.cs,DisplayNotification,The following statement contains a magic number: Task.Factory.StartNew(() =>                      {                          logger.Info("Displaying notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                          Threading.BeginInvokeOnUI(() => this.WvWNotifications.Add(objectiveData));                            if (this.UserData.NotificationDuration > 0)                          {                              // For X seconds' loop and sleep' with checks to see if notifications have been disabled                              for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                              {                                  System.Threading.Thread.Sleep(SLEEP_TIME);                                  if (!this.CanShowNotification(objectiveData))                                  {                                      logger.Debug("Removing notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                                      Threading.BeginInvokeOnUI(() => this.WvWNotifications.Remove(objectiveData));                                  }                              }                                logger.Debug("Removing notification for \"{0}\" in {1}"' objectiveData.Name' objectiveData.Map);                                // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                              // This makes it so that the notifications can fade out before they are removed from the notification window                              Threading.BeginInvokeOnUI(() => objectiveData.IsRemovingNotification = true);                              System.Threading.Thread.Sleep(SLEEP_TIME);                              Threading.BeginInvokeOnUI(() =>                              {                                  this.WvWNotifications.Remove(objectiveData);                                  objectiveData.IsRemovingNotification = false;                              });                          }                      });
Magic Number,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,WvWUserData,The following statement contains a magic number: this.WorldSelection = new World() { ID = 1019' Name = "Blackgate" };
Magic Number,GW2PAO.Modules.WvW,WvWUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\WvWUserData.cs,WvWUserData,The following statement contains a magic number: this.NotificationDuration = 10;
Magic Number,GW2PAO.Utility,MailUtility,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\MailUtility.cs,Email,The following statement contains a magic number: SmtpClient smtp = new SmtpClient("smtp.gmail.com"' 587);
Magic Number,GW2PAO.Utility,Enumerator,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ObservableDictionary.cs,MoveNext,The following statement contains a magic number: _index = -2;
Magic Number,GW2PAO.Utility,UpdateChecker,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,CheckForUpdateAndNotify,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      logger.Info("Checking for new version");                        Version latestVersion = GetLatestVersion();                        // Get the assembly version and compare                      Assembly assembly = Assembly.GetExecutingAssembly();                      FileVersionInfo fvi = FileVersionInfo.GetVersionInfo(assembly.Location);                      Version myVersion = new Version(fvi.ProductVersion);                        if (latestVersion > myVersion)                      {                          logger.Info("New version available: {0}"' latestVersion);                            // Notify the user                          Threading.BeginInvokeOnUI(() =>                              new NewVersionNotificationView(new NewVersionNotificationViewModel(latestVersion.ToString(2))).Show());                      }                      else                      {                          logger.Info("No new version available");                      }                  });
Magic Number,GW2PAO.Utility,UpdateChecker,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\UpdateChecker.cs,GetLatestVersion,The following statement contains a magic number: request.Wait(500)
Magic Number,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,CommerceController,The following statement contains a magic number: this.RefreshInterval = 30000;
Magic Number,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The following statement contains a magic number: DateTime.Now.Subtract(lastResetTime).TotalMilliseconds >= UserData.ResetPriceNotificationsInterval * 60000
Magic Number,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,Refresh,The following statement contains a magic number: Threading.BeginInvokeOnUI(() => priceWatch.CurrentProfit.Value = (prices.LowestSellListing * 0.85) - prices.HighestBuyOrder);
Magic Number,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The following statement contains a magic number: const int SLEEP_TIME = 250;
Magic Number,GW2PAO.Modules.Commerce,CommerceController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceController.cs,DisplayNotification,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      logger.Info("Displaying notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType);                      Threading.BeginInvokeOnUI(() => this.PriceNotifications.Add(priceNotification));                        if (this.UserData.NotificationDuration > 0)                      {                          // For X seconds' loop and sleep                          for (int i = 0; i < (this.UserData.NotificationDuration * 1000 / SLEEP_TIME); i++)                          {                              System.Threading.Thread.Sleep(SLEEP_TIME);                          }                            logger.Debug("Removing notification for \"{0}\" - {1}"' priceNotification.ItemName' priceNotification.NotificationType);                            // TODO: I hate having this here' but due to a limitation in WPF' there's no reasonable way around this at this time                          // This makes it so that the notifications can fade out before they are removed from the notification window                          Threading.BeginInvokeOnUI(() => priceNotification.IsRemovingNotification = true);                          System.Threading.Thread.Sleep(SLEEP_TIME);                          Threading.BeginInvokeOnUI(() =>                          {                              this.PriceNotifications.Remove(priceNotification);                              priceNotification.IsRemovingNotification = false;                          });                      }                  });
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.ResetPriceNotificationsInterval = 15;
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.MaxHistoricalDataPoints = 600;
Magic Number,GW2PAO.Modules.Commerce,CommerceUserData,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\CommerceUserData.cs,CommerceUserData,The following statement contains a magic number: this.NotificationDuration = 20;
Magic Number,GW2PAO.Modules.Dungeons.Views,DungeonTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\Views\DungeonTrackerView.xaml.cs,DungeonTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = 12;
Magic Number,GW2PAO.Modules.Dungeons.Views,DungeonTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\Views\DungeonTrackerView.xaml.cs,RefreshWindowHeights,The following statement contains a magic number: this.MaxHeight = (visibleObjsCount * dungeonHeight) + this.TitleBar.ActualHeight + 2;
Magic Number,GW2PAO.Modules.Dungeons,DungeonsController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Dungeons\DungeonsController.cs,DungeonsController,The following statement contains a magic number: this.RefreshInterval = 250;
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The following statement contains a magic number: this.ZoneRefreshInterval = 1000;
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,ZoneCompletionController,The following statement contains a magic number: this.LocationsRefreshInterval = 250;
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.ZoneCompletion,ZoneCompletionController,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\ZoneCompletion\ZoneCompletionController.cs,RefreshLocations,The following statement contains a magic number: switch (item.ItemType)                                  {                                      case API.Data.Enums.ZoneItemType.Waypoint:                                          if (this.UserData.AutoUnlockWaypoints                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.PointOfInterest:                                          if (this.UserData.AutoUnlockPois                                              && ftDistance >= 0 && ftDistance < 75)                                          {                                              Threading.InvokeOnUI(() => item.IsUnlocked = true);                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.Vista:                                          if (this.UserData.AutoUnlockVistas                                              && ftDistance >= 0 && ftDistance < 8)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 4)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeartQuest:                                          if (this.UserData.AutoUnlockHeartQuests                                              && ftDistance >= 0 && ftDistance < 400)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 90)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      case API.Data.Enums.ZoneItemType.HeroPoint:                                          if (this.UserData.AutoUnlockSkillChallenges                                              && ftDistance >= 0 && ftDistance < 25)                                          {                                              if (this.playerInProximityCounters[item.ItemId] > 15)                                              {                                                  this.playerInProximityCounters[item.ItemId] = 0;                                                  Threading.InvokeOnUI(() => item.IsUnlocked = true);                                              }                                              else                                              {                                                  this.playerInProximityCounters[item.ItemId] += 1;                                              }                                          }                                          else                                          {                                              this.playerInProximityCounters[item.ItemId] = 0;                                          }                                          break;                                      default:                                          break;                                  }
Magic Number,GW2PAO.Modules.Commerce.ViewModels.PriceNotification,PriceNotificationViewModel,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\ViewModels\PriceNotification\PriceNotificationViewModel.cs,CloseNotification,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      Threading.InvokeOnUI(() => this.IsRemovingNotification = true);                      System.Threading.Thread.Sleep(250);                      Threading.InvokeOnUI(() =>                      {                          this.displayedNotifications.Remove(this);                          this.IsRemovingNotification = false;                      });                  });
Magic Number,GW2PAO.Views,NewVersionNotificationView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,NewVersionNotificationView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\NewVersionNotificationView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,RestartPromptView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,RestartPromptView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,RestartPromptView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.MinHeight / 2);
Magic Number,GW2PAO.Views,RestartPromptView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\RestartPromptView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.MinHeight / 2);
Magic Number,GW2PAO.Views,SettingsView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,SettingsView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Left = (screenWidth / 2) - (this.Width / 2);
Magic Number,GW2PAO.Views,SettingsView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,SettingsView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\SettingsView.xaml.cs,CenterWindowOnScreen,The following statement contains a magic number: this.Top = (screenHeight / 2) - (this.Height / 2);
Magic Number,GW2PAO.Views,ShellView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Views\ShellView.xaml.cs,ShellView_Loaded,The following statement contains a magic number: Task.Factory.StartNew(() =>                  {                      System.Threading.Thread.Sleep(500);                      this.Dispatcher.Invoke(() => this.NowRunningPopup.IsOpen = true);                  });
Magic Number,GW2PAO.Modules.Commerce.Views.PriceTracker,PriceTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\PriceTracker\PriceTrackerView.xaml.cs,PriceTrackerView_Loaded,The following statement contains a magic number: this.ResizeHelper.SnappingHeightOffset = -12;
Magic Number,GW2PAO.Modules.Commerce.Views.PriceNotification,PriceNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Commerce\Views\PriceNotification\PriceNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Top = 200;
Magic Number,GW2PAO.Modules.Teamspeak.Views,TeamspeakView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\Teamspeak\Views\TeamspeakView.xaml.cs,Channel_MouseLeftButtonDown,The following statement contains a magic number: e.ClickCount == 2
Magic Number,GW2PAO.Modules.WebBrowser.Views,BrowserView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The following statement contains a magic number: newWindow.Width = screenRect.Width + (verticalBorderWidth * 2);
Magic Number,GW2PAO.Modules.WebBrowser.Views,BrowserView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WebBrowser\Views\BrowserView.xaml.cs,webControl_ShowCreatedWebView,The following statement contains a magic number: newWindow.Height = screenRect.Height + captionHeight + (horizontalBorderHeight * 2);
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Left = System.Windows.SystemParameters.WorkArea.Width - 5 - this.ActualWidth;
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - (this.ActualHeight * 2);
Magic Number,GW2PAO.Modules.WvW.Views.WvWNotification,WvWNotificationWindow,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWNotification\WvWNotificationWindow.xaml.cs,LoadWindowLocation,The following statement contains a magic number: this.Top = System.Windows.SystemParameters.WorkArea.Height - 5 - (this.ActualHeight * 2);
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshResizeSnapping,The following statement contains a magic number: this.ResizeHelper.SnappingWidthOffset = 3;
Magic Number,GW2PAO.Modules.WvW.Views.WvWTracker,WvWTrackerView,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Modules\WvW\Views\WvWTracker\WvWTrackerView.xaml.cs,RefreshWindowWidths,The following statement contains a magic number: this.Width = this.horizontal_objWidth * 5;
Missing Default,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The following switch statement is missing a default case: switch (msg)              {                  case WM_SIZING:                      RECT bounds = (RECT)Marshal.PtrToStructure(lParam' typeof(RECT));                        int width = bounds.right - bounds.left;                      int height = bounds.bottom - bounds.top;                        switch (wParam.ToInt32())                      {                          case WMSZ_BOTTOM:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_BOTTOMLEFT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_BOTTOMRIGHT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_LEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_RIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_TOP:                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPLEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPRIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                        }                      Marshal.StructureToPtr(bounds' lParam' false);                      break;              }
Missing Default,GW2PAO.Utility,ResizeSnapHelper,D:\research\architectureSmells\repos1\SamHurne_gw2pao\GW2PAO\Utility\ResizeSnapHelper.cs,WindowProc,The following switch statement is missing a default case: switch (wParam.ToInt32())                      {                          case WMSZ_BOTTOM:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_BOTTOMLEFT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_BOTTOMRIGHT:                              if (height > SnappingThresholdHeight)                                  bounds.bottom = bounds.top + ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_LEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_RIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              break;                          case WMSZ_TOP:                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPLEFT:                              if (width > SnappingThresholdWidth)                                  bounds.left = bounds.right - ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                          case WMSZ_TOPRIGHT:                              if (width > SnappingThresholdWidth)                                  bounds.right = bounds.left + ((int)((double)width / (double)SnappingIncrementWidth) * SnappingIncrementWidth) + SnappingWidthOffset;                              if (height > SnappingThresholdHeight)                                  bounds.top = bounds.bottom - ((int)((double)height / (double)SnappingIncrementHeight) * SnappingIncrementHeight) + SnappingHeightOffset;                              break;                        }
