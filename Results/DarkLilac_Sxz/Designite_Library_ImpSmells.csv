Implementation smell,Namespace,Class,File,Method,Description
Long Method,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The method has 140 lines of code.
Complex Method,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,GetDataList,Cyclomatic complexity of the method is 12
Complex Method,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetDataList,Cyclomatic complexity of the method is 12
Complex Method,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,Cyclomatic complexity of the method is 14
Complex Method,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,GetDataList,Cyclomatic complexity of the method is 16
Complex Method,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetDataList,Cyclomatic complexity of the method is 16
Complex Method,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,GetDataList,Cyclomatic complexity of the method is 16
Complex Method,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetDataList,Cyclomatic complexity of the method is 16
Complex Conditional,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,GetSelected,The conditional expression  "x >= origin.X && y >= origin.Y && x < (boundingBox.X) && y < (boundingBox.Y)"  is complex.
Magic Number,Library,BackgroundChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BackgroundChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,BlackWhiteBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,Container,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: int index = 3;
Magic Number,Library,Container,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: string label = Encoding.ASCII.GetString(data' index' 2);
Magic Number,Library,Container,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,Container,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: index += 4;
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte red = (byte)Convert.ToInt32(colorValue.Substring(0' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte red = (byte)Convert.ToInt32(colorValue.Substring(0' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: string label = Encoding.ASCII.GetString(data' index' 2);
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: int size = BitConverter.ToInt16(data' index + 2);
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: byte[] chunkData = new byte[size + 4];
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: index += size + 4;
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SizeOfBitPlaneInBytes,The following statement contains a magic number: int divisor = (int)(size / 8);
Magic Number,Library,Frame,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Frame.cs,SizeOfBitPlaneInBytes,The following statement contains a magic number: size % 8 == 0
Magic Number,Library,BitPlane,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\BitPlane.cs,ConvertBoolsToBytes,The following statement contains a magic number: counter > 7
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,MonoBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,MonoRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,PaletteChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\PaletteChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: int hash = 17;
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 23 + Red.GetHashCode();
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 29 + Green.GetHashCode();
Magic Number,Library,SxzColor,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: hash = hash * 31 + Blue.GetHashCode();
Magic Number,Library,Print,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Print.cs,GetString,The following statement contains a magic number: i < 3
Magic Number,Library,Print,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Print.cs,GetString,The following statement contains a magic number: i < 6
Magic Number,Library,Print,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Print.cs,PrintLine,The following statement contains a magic number: b > 47 && b < 91
Magic Number,Library,Print,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Print.cs,PrintLine,The following statement contains a magic number: b > 47 && b < 91
Magic Number,Library,Print,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Print.cs,ConvertByteToBitString,The following statement contains a magic number: i < 8
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,GetData,The following statement contains a magic number: int size = result.Count - 2;
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,TransparentRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes,The following statement contains a magic number: byte b1 = (byte)(value >> 8);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes32,The following statement contains a magic number: list.Add(byteArray[2]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes32,The following statement contains a magic number: list.Add(byteArray[3]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: int value = list.Count - 2;
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: byte b1 = (byte)(value >> 8);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: list.Insert(2' b0);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: list.Insert(3' b1);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: int value = list.Count - 2;
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(2' byteArray[0]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(3' byteArray[1]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(4' byteArray[2]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(4' byteArray[2]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(5' byteArray[3]);
Magic Number,Library,Writer,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(5' byteArray[3]);
Missing Default,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;              }
Missing Default,Library,ColorRectangleChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;              }
Missing Default,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;              }
Missing Default,Library,ColorBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;              }
Missing Default,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;              }
Missing Default,Library,GrayBitPlaneChunk,D:\research\architectureSmells\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;              }
