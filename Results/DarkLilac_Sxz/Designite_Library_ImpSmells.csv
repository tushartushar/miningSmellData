Implementation smell,Namespace,Class,File,Method,Description
Long Method,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The method has 140 lines of code.
Complex Conditional,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,GetSelected,The conditional expression  "x >= origin.X && y >= origin.Y && x < (boundingBox.X) && y < (boundingBox.Y)"  is complex.
Magic Number,Library,BackgroundChunk,C:\repos\DarkLilac_Sxz\Library\BackgroundChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,BlackWhiteBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,BlackWhiteBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\BlackWhiteBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,Container,C:\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: int index = 3;
Magic Number,Library,Container,C:\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                  index += 2;                  if (label.Equals(Frame.Label))                  {                      int size = BitConverter.ToInt32(data' index);                      index += 4;                      byte[] frameData = new byte[size];                      Array.Copy(data' index' frameData' 0' frameData.Length);                      Frame frame = new Frame();                      frame.SetData(frameData);                      this.Frames.Add(frame);                      index += size;                  }              }
Magic Number,Library,Container,C:\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                  index += 2;                  if (label.Equals(Frame.Label))                  {                      int size = BitConverter.ToInt32(data' index);                      index += 4;                      byte[] frameData = new byte[size];                      Array.Copy(data' index' frameData' 0' frameData.Length);                      Frame frame = new Frame();                      frame.SetData(frameData);                      this.Frames.Add(frame);                      index += size;                  }              }
Magic Number,Library,Container,C:\repos\DarkLilac_Sxz\Library\Container.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                  index += 2;                  if (label.Equals(Frame.Label))                  {                      int size = BitConverter.ToInt32(data' index);                      index += 4;                      byte[] frameData = new byte[size];                      Array.Copy(data' index' frameData' 0' frameData.Length);                      Frame frame = new Frame();                      frame.SetData(frameData);                      this.Frames.Add(frame);                      index += size;                  }              }
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte red = (byte)Convert.ToInt32(colorValue.Substring(0' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte red = (byte)Convert.ToInt32(colorValue.Substring(0' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte green = (byte)Convert.ToInt32(colorValue.Substring(2' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,DefaultPaletteChunk,C:\repos\DarkLilac_Sxz\Library\DefaultPaletteChunk.cs,GetColor,The following statement contains a magic number: byte blue = (byte)Convert.ToInt32(colorValue.Substring(4' 2)' 16);
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SetData,The following statement contains a magic number: while (index < data.Length)              {                  string label = Encoding.ASCII.GetString(data' index' 2);                    //case statement would work better here                  if (label.Equals(ColorBitPlaneChunk.Label))                  {                    int size = BitConverter.ToInt16(data' index + 2);                    byte[] chunkData = new byte[size + 4];                    Array.Copy(data' index' chunkData' 0' chunkData.Length);                    ColorBitPlaneChunk colorChunk = new ColorBitPlaneChunk();                    colorChunk.Palette = paletteChunk;                    colorChunk.SetData(chunkData);                    Chunks.Add(colorChunk);                    index += size + 4;                  }                  else if (label.Equals(ColorRectangleChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      ColorRectangleChunk colorRectangleChunk = new ColorRectangleChunk();                      colorRectangleChunk.Palette = paletteChunk;                      colorRectangleChunk.SetData(chunkData);                      Chunks.Add(colorRectangleChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      MonoBitPlaneChunk monoChunk = new MonoBitPlaneChunk();                      monoChunk.Palette = paletteChunk;                      monoChunk.SetData(chunkData);                      Chunks.Add(monoChunk);                      index += size + 4;                  }                  else if (label.Equals(TransparentBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      TransparentBitPlaneChunk transparentChunk = new TransparentBitPlaneChunk();                      transparentChunk.SetData(chunkData);                      Chunks.Add(transparentChunk);                      index += size + 4;                  }                  else if (label.Equals(MonoRectangleChunk.Label))                  {                      //must be background                      MonoRectangleChunk chunk = new MonoRectangleChunk();                      byte[] chunkData = new byte[11];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.Palette = paletteChunk;                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(TransparentRectangleChunk.Label))                  {                      //must be background                      TransparentRectangleChunk chunk = new TransparentRectangleChunk();                      byte[] chunkData = new byte[10];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                  }                  else if (label.Equals(PaletteChunk.Label))                  {                      //must be background                      PaletteChunk chunk = new PaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(DefaultPaletteChunk.Label))                  {                      //must be background                      DefaultPaletteChunk chunk = new DefaultPaletteChunk();                      int count = (data[index + 2] + 1) * 3;                      byte[] chunkData = new byte[count + 3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += chunkData.Length;                      paletteChunk = chunk;                  }                  else if (label.Equals(GrayBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      GrayBitPlaneChunk chunk = new GrayBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BlackWhiteBitPlaneChunk.Label))                  {                      int size = BitConverter.ToInt16(data' index + 2);                      byte[] chunkData = new byte[size + 4];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      BlackWhiteBitPlaneChunk chunk = new BlackWhiteBitPlaneChunk();                      chunk.SetData(chunkData);                      Chunks.Add(chunk);                      index += size + 4;                  }                  else if (label.Equals(BackgroundChunk.Label))                  {                      //Console.WriteLine("default to background with label " + label);                      //must be background                      BackgroundChunk background = new BackgroundChunk();                      background.Palette = paletteChunk;                      byte[] chunkData = new byte[3];                      Array.Copy(data' index' chunkData' 0' chunkData.Length);                      background.SetData(chunkData);                      Chunks.Add(background);                      index += chunkData.Length;                  }                  else                  {                      Console.WriteLine("Invalid chunk label " + label);                      Console.WriteLine("At " + index + " " + Chunks.Count);                      if (Chunks.Last() != null)                      {                          Console.WriteLine("Last chunk was " + Chunks.Last().Origin.ToString());                      }                        return;                  }              }
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SizeOfBitPlaneInBytes,The following statement contains a magic number: int divisor = (int)(size / 8);
Magic Number,Library,Frame,C:\repos\DarkLilac_Sxz\Library\Frame.cs,SizeOfBitPlaneInBytes,The following statement contains a magic number: if (size % 8 == 0)              {                  return divisor;              }
Magic Number,Library,BitPlane,C:\repos\DarkLilac_Sxz\Library\BitPlane.cs,ConvertBoolsToBytes,The following statement contains a magic number: foreach (bool b in data)              {                  //write to next location on eightBits                    if (b)                  {                      eightBits |= Writer.Masks[counter];                  }                    counter++;                    if (counter > 7)                  {                      counter = 0;                      result.Add(eightBits);                      eightBits = 0;                  }              }
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,MonoBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\MonoBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,C:\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,MonoRectangleChunk,C:\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,C:\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,C:\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,MonoRectangleChunk,C:\repos\DarkLilac_Sxz\Library\MonoRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,PaletteChunk,C:\repos\DarkLilac_Sxz\Library\PaletteChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,Hex,The following statement contains a magic number: return new SxzColor(byte.Parse(hexString.Substring(0' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(2' 2)' System.Globalization.NumberStyles.HexNumber)'                  byte.Parse(hexString.Substring(4' 2)' System.Globalization.NumberStyles.HexNumber));
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + Red.GetHashCode();                  hash = hash * 29 + Green.GetHashCode();                  hash = hash * 31 + Blue.GetHashCode();                  return hash;              }
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + Red.GetHashCode();                  hash = hash * 29 + Green.GetHashCode();                  hash = hash * 31 + Blue.GetHashCode();                  return hash;              }
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + Red.GetHashCode();                  hash = hash * 29 + Green.GetHashCode();                  hash = hash * 31 + Blue.GetHashCode();                  return hash;              }
Magic Number,Library,SxzColor,C:\repos\DarkLilac_Sxz\Library\SxzColor.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  int hash = 17;                  hash = hash * 23 + Red.GetHashCode();                  hash = hash * 29 + Green.GetHashCode();                  hash = hash * 31 + Blue.GetHashCode();                  return hash;              }
Magic Number,Library,Print,C:\repos\DarkLilac_Sxz\Library\Print.cs,GetString,The following statement contains a magic number: for (int i = 0; i < 3; i++)              {                  PrintLine(result' containerBytes[i]);              }
Magic Number,Library,Print,C:\repos\DarkLilac_Sxz\Library\Print.cs,GetString,The following statement contains a magic number: for (int i = 0; i < 6; i++)              {                  PrintLine(result' output[i]);              }
Magic Number,Library,Print,C:\repos\DarkLilac_Sxz\Library\Print.cs,PrintLine,The following statement contains a magic number: if (b > 47 && b < 91)              {                  c = (char)b;              }
Magic Number,Library,Print,C:\repos\DarkLilac_Sxz\Library\Print.cs,PrintLine,The following statement contains a magic number: if (b > 47 && b < 91)              {                  c = (char)b;              }
Magic Number,Library,Print,C:\repos\DarkLilac_Sxz\Library\Print.cs,ConvertByteToBitString,The following statement contains a magic number: for (int i = 0; i < 8; i++)              {                  bool aByte = (b & Writer.Masks[i]) != 0;                  if (aByte)                  {                      result.Append("1");                  }                  else                  {                      result.Append("0");                  }              }
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,GetData,The following statement contains a magic number: int size = result.Count - 2;
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: int index = 4;
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\TransparentBitPlaneChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,C:\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: int index = 2;
Magic Number,Library,TransparentRectangleChunk,C:\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,C:\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,C:\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,TransparentRectangleChunk,C:\repos\DarkLilac_Sxz\Library\TransparentRectangleChunk.cs,SetData,The following statement contains a magic number: index += 2;
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes,The following statement contains a magic number: byte b1 = (byte)(value >> 8);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes32,The following statement contains a magic number: list.Add(byteArray[2]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,AddBytes32,The following statement contains a magic number: list.Add(byteArray[3]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: int value = list.Count - 2;
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: byte b1 = (byte)(value >> 8);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: list.Insert(2' b0);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeShort,The following statement contains a magic number: list.Insert(3' b1);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: int value = list.Count - 2;
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(2' byteArray[0]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(3' byteArray[1]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(4' byteArray[2]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(4' byteArray[2]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(5' byteArray[3]);
Magic Number,Library,Writer,C:\repos\DarkLilac_Sxz\Library\Writer.cs,WriteSizeInt,The following statement contains a magic number: list.Insert(5' byteArray[3]);
Missing Default,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              result.Add(GetByteIndex(x' y));                          }                      }                        break;              }
Missing Default,Library,ColorRectangleChunk,C:\repos\DarkLilac_Sxz\Library\ColorRectangleChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              SetByteIndex(values[index++]' x' y);                          }                      }                        break;              }
Missing Default,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;              }
Missing Default,Library,ColorBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\ColorBitPlaneChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;              }
Missing Default,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,GetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  result.Add(GetByteIndex(x' y));                              }                          }                      }                        break;              }
Missing Default,Library,GrayBitPlaneChunk,C:\repos\DarkLilac_Sxz\Library\GrayBitPlaneChunk.cs,SetDataList,The following switch statement is missing a default case: switch (Direction)              {                  case Direction.Left:                      for (int x = Width - 1; x >= 0; x--)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Right:                      for (int x = 0; x < Width; x++)                      {                          for (int y = 0; y < Height; y++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Up:                      for (int y = Height - 1; y >= 0; y--)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;                  case Direction.Down:                      for (int y = 0; y < Height; y++)                      {                          for (int x = 0; x < Width; x++)                          {                              if (BitPlane.HasColor(x' y))                              {                                  SetByteIndex(values[index++]' x' y);                              }                              else                              {                                  SetByteIndex(0' x' y);                              }                          }                      }                        break;              }
