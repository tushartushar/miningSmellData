Implementation smell,Namespace,Class,File,Method,Description
Long Method,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The method has 103 lines of code.
Long Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The method has 183 lines of code.
Long Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The method has 120 lines of code.
Complex Method,Bespoke.Common,CommandLineParser,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\CommandLineParser.cs,ParseSpecialCommandLine,Cyclomatic complexity of the method is 8
Complex Method,Bespoke.Common,InputManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\InputManager.cs,SendKeys,Cyclomatic complexity of the method is 11
Complex Method,Bespoke.Common,InputManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\InputManager.cs,MouseButtonToFlag,Cyclomatic complexity of the method is 22
Complex Method,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,Cyclomatic complexity of the method is 20
Complex Method,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,Cyclomatic complexity of the method is 8
Complex Method,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ToString,Cyclomatic complexity of the method is 14
Complex Method,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,GetValueFromString,Cyclomatic complexity of the method is 34
Complex Method,Bespoke.Common.Data,RecordUtility,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\RecordUtility.cs,Equals,Cyclomatic complexity of the method is 9
Complex Method,Bespoke.Common.Data,SqlDataProvider,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Data\SqlDataProvider.cs,ReadValue,Cyclomatic complexity of the method is 13
Complex Method,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,INV,Cyclomatic complexity of the method is 20
Complex Method,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,inverse,Cyclomatic complexity of the method is 9
Complex Method,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,det,Cyclomatic complexity of the method is 21
Complex Method,Bespoke.Common.Net,UdpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\UdpServer.cs,Start,Cyclomatic complexity of the method is 21
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,Cyclomatic complexity of the method is 53
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,Cyclomatic complexity of the method is 65
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,Cyclomatic complexity of the method is 33
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,Cyclomatic complexity of the method is 129
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,SetReportType,Cyclomatic complexity of the method is 10
Complex Method,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,Cyclomatic complexity of the method is 26
Long Parameter List,Bespoke.Common,ProgressIndicator,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\ProgressIndicator.cs,ProgressIndicator,The method has 5 parameters.
Long Parameter List,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,GetAttribute,The method has 5 parameters.
Long Parameter List,Bespoke.Common.Data,MySqlDataProvider,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Data\MySqlDataProvider.cs,AddParameter,The method has 5 parameters.
Long Parameter List,Bespoke.Common.Data,SqlDataProvider,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Data\SqlDataProvider.cs,AddParameter,The method has 5 parameters.
Long Parameter List,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,TcpServer,The method has 5 parameters.
Long Parameter List,Bespoke.Common.Wiimote,HIDImports,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\HIDImports.cs,SetupDiEnumDeviceInterfaces,The method has 5 parameters.
Long Parameter List,Bespoke.Common.Wiimote,HIDImports,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\HIDImports.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,Bespoke.Common.Wiimote,HIDImports,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\HIDImports.cs,SetupDiGetDeviceInterfaceDetail,The method has 6 parameters.
Long Parameter List,Bespoke.Common.Wiimote,HIDImports,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\HIDImports.cs,CreateFile,The method has 7 parameters.
Long Statement,Bespoke.Common,Library,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Library.cs,CopyDirectory,The length of the statement  "		CopyDirectory (subDirectoryInfo.FullName' destinationDirectoryInfo.FullName + Path.DirectorySeparatorChar + subDirectoryInfo.Name); " is 131.
Long Statement,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Write,The length of the statement  "			string s = "[" + currentTime.Hour.ToString ("00") + ":" + currentTime.Minute.ToString ("00") + ":" + currentTime.Second.ToString ("00") + "] " + message; " is 153.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "	XmlCollectionAttribute[] xmlCollectionClassAttributes = (XmlCollectionAttribute[])elementType.GetCustomAttributes (typeof(XmlCollectionAttribute)' true); " is 153.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "			XmlIgnoreAttribute[] ignoreAttributes = (XmlIgnoreAttribute[])property.GetCustomAttributes (typeof(XmlIgnoreAttribute)' true); " is 126.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "			XmlRequiredAttribute[] xmlRequiredAttributes = (XmlRequiredAttribute[])property.GetCustomAttributes (typeof(XmlRequiredAttribute)' true); " is 137.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "			XmlHasChildElementsAttribute[] xmlHasChildElementsAttributes = (XmlHasChildElementsAttribute[])propertyType.GetCustomAttributes (typeof(XmlHasChildElementsAttribute)' true); " is 173.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "				XmlElementNameAttribute[] xmlElementNameAttributes = (XmlElementNameAttribute[])propertyType.GetCustomAttributes (typeof(XmlElementNameAttribute)' true); " is 153.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "				string childElementName = (xmlElementNameAttributes.Length > 0 ? xmlElementNameAttributes [0].XmlElementName : property.Name); " is 126.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "				XmlAttributeNameAttribute[] xmlAttributeNameAttributes = (XmlAttributeNameAttribute[])property.GetCustomAttributes (typeof(XmlAttributeNameAttribute)' true); " is 157.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "				string attributeName = (xmlAttributeNameAttributes.Length > 0 ? xmlAttributeNameAttributes [0].XmlAttributeName : property.Name); " is 129.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseElement,The length of the statement  "			XmlCollectionAttribute[] xmlCollectionAttributes = (XmlCollectionAttribute[])property.GetCustomAttributes (typeof(XmlCollectionAttribute)' true); " is 145.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "	XmlElementNameAttribute[] xmlElementNameAttributes = (XmlElementNameAttribute[])type.GetCustomAttributes (typeof(XmlElementNameAttribute)' true); " is 145.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "		XmlIgnoreAttribute[] ignoreAttributes = (XmlIgnoreAttribute[])property.GetCustomAttributes (typeof(XmlIgnoreAttribute)' true); " is 126.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "			XmlAttributeNameAttribute[] xmlAttributeNameAttributes = (XmlAttributeNameAttribute[])property.GetCustomAttributes (typeof(XmlAttributeNameAttribute)' true); " is 157.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "			string attributeName = (xmlAttributeNameAttributes.Length > 0 ? xmlAttributeNameAttributes [0].XmlAttributeName : property.Name); " is 129.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "				XmlHasChildElementsAttribute[] xmlHasChildElementsAttributes = (XmlHasChildElementsAttribute[])propertyType.GetCustomAttributes (typeof(XmlHasChildElementsAttribute)' true); " is 173.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "					XmlCollectionAttribute[] xmlCollectionAttributes = (XmlCollectionAttribute[])property.GetCustomAttributes (typeof(XmlCollectionAttribute)' true); " is 145.
Long Statement,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,SaveToXml,The length of the statement  "						writer.WriteAttributeString (attributeName' (propertyValue != null ? XmlHelper.ToString (propertyValue) : String.Empty)); " is 121.
Long Statement,Bespoke.Common.Data,RecordUtility,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\RecordUtility.cs,Equals,The length of the statement  "			EqualityExclusionAttribute[] equalityExclusionAttributes = (EqualityExclusionAttribute[])property.GetCustomAttributes (typeof(EqualityExclusionAttribute)' true); " is 161.
Long Statement,Bespoke.Common.Net,TcpConnection,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpConnection.cs,InitDataReceivedCallback,The length of the statement  "		mClient.BeginReceive (mReceivedDataBuffer' 0' mReceivedDataBuffer.Length' SocketFlags.None' mDataReceivedCallback' this); " is 121.
Long Statement,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,RunWorker,The length of the statement  "			AsyncCallback dataReceivedCallback = ((mReceiveDataInline) && (mUseSynchronousCommunication == false) ? new AsyncCallback (OnDataReceived) : null); " is 147.
Long Statement,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,RunWorker,The length of the statement  "				ThreadStartDelegateWrapper threadStartWrapper = new ThreadStartDelegateWrapper (new ThreadStartWrapperHandler (SynchronousReceiveData)' connection); " is 148.
Long Statement,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,InitConfigParams,The length of the statement  "	int hr = captureGraph.FindInterface (PinCategory.Capture' MediaType.Video' captureFilter' typeof(IAMStreamConfig).GUID' out obj); " is 129.
Long Statement,Bespoke.Common.Video,WebCamService,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamService.cs,RetrieveImages,The length of the statement  "				bitmap = new Bitmap (mCaptureSystem.Width' mCaptureSystem.Height' mCaptureSystem.Stride' PixelFormat.Format24bppRgb' ptr); " is 122.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The length of the statement  "	// Fun fact:  DIGCF_PRESENT worked on my machine just fine.  I reinstalled Vista' and now it no longer finds the Wiimote with that parameter enabled... " is 151.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The length of the statement  "			mHandle = HIDImports.CreateFile (diDetail.DevicePath' FileAccess.ReadWrite' FileShare.ReadWrite' IntPtr.Zero' FileMode.Open' HIDImports.EFileAttributes.Overlapped' IntPtr.Zero); " is 177.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,OpenWiimoteDeviceHandle,The length of the statement  "	mHandle = HIDImports.CreateFile (devicePath' FileAccess.ReadWrite' FileShare.ReadWrite' IntPtr.Zero' FileMode.Open' HIDImports.EFileAttributes.Overlapped' IntPtr.Zero); " is 168.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The length of the statement  "		// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible " is 124.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The length of the statement  "				WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension)); " is 124.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The length of the statement  "	long type = ((long)buff [0] << 40) | ((long)buff [1] << 32) | ((long)buff [2]) << 24 | ((long)buff [3]) << 16 | ((long)buff [4]) << 8 | buff [5]; " is 145.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The length of the statement  "	mWiimoteState.AccelState.Values.X = (float)((float)mWiimoteState.AccelState.RawValues.X - ((int)mWiimoteState.AccelCalibrationInfo.X0)) / ((float)mWiimoteState.AccelCalibrationInfo.XG - ((int)mWiimoteState.AccelCalibrationInfo.X0)); " is 232.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The length of the statement  "	mWiimoteState.AccelState.Values.Y = (float)((float)mWiimoteState.AccelState.RawValues.Y - mWiimoteState.AccelCalibrationInfo.Y0) / ((float)mWiimoteState.AccelCalibrationInfo.YG - mWiimoteState.AccelCalibrationInfo.Y0); " is 218.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The length of the statement  "	mWiimoteState.AccelState.Values.Z = (float)((float)mWiimoteState.AccelState.RawValues.Z - mWiimoteState.AccelCalibrationInfo.Z0) / ((float)mWiimoteState.AccelCalibrationInfo.ZG - mWiimoteState.AccelCalibrationInfo.Z0); " is 218.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The length of the statement  "		mWiimoteState.IRState.RawMidpoint.X = (mWiimoteState.IRState.IRSensors [1].RawPosition.X + mWiimoteState.IRState.IRSensors [0].RawPosition.X) / 2; " is 146.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The length of the statement  "		mWiimoteState.IRState.RawMidpoint.Y = (mWiimoteState.IRState.IRSensors [1].RawPosition.Y + mWiimoteState.IRState.IRSensors [0].RawPosition.Y) / 2; " is 146.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The length of the statement  "		mWiimoteState.IRState.Midpoint.X = (mWiimoteState.IRState.IRSensors [1].Position.X + mWiimoteState.IRState.IRSensors [0].Position.X) / 2.0f; " is 140.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The length of the statement  "		mWiimoteState.IRState.Midpoint.Y = (mWiimoteState.IRState.IRSensors [1].Position.Y + mWiimoteState.IRState.IRSensors [0].Position.Y) / 2.0f; " is 140.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0); " is 319.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0); " is 319.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0); " is 319.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX); " is 256.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY); " is 256.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3); " is 151.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5)); " is 120.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL); " is 311.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL); " is 311.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR); " is 311.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR); " is 311.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL); " is 242.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "			mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR); " is 242.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3; " is 127.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]); " is 121.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]); " is 120.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft); " is 327.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight); " is 332.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft); " is 342.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight); " is 347.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB); " is 122.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB); " is 124.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB); " is 128.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB); " is 130.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f; " is 286.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f; " is 286.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight); " is 249.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The length of the statement  "		float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight); " is 249.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,SetLEDs,The length of the statement  "	mBuff [1] = (byte)((led1 ? 0x10 : 0x00) | (led2 ? 0x20 : 0x00) | (led3 ? 0x40 : 0x00) | (led4 ? 0x80 : 0x00) | GetRumbleBit ()); " is 128.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,SetLEDs,The length of the statement  "	mBuff [1] = (byte)(((leds & 0x01) > 0 ? 0x10 : 0x00) | ((leds & 0x02) > 0 ? 0x20 : 0x00) | ((leds & 0x04) > 0 ? 0x40 : 0x00) | ((leds & 0x08) > 0 ? 0x80 : 0x00) | GetRumbleBit ()); " is 180.
Long Statement,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,SetRumble,The length of the statement  "	SetLEDs (mWiimoteState.LEDState.LED1' mWiimoteState.LEDState.LED2' mWiimoteState.LEDState.LED3' mWiimoteState.LEDState.LED4); " is 125.
Empty Catch Block,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The method has an empty catch block.
Empty Catch Block,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Write,The method has an empty catch block.
Empty Catch Block,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Write,The method has an empty catch block.
Empty Catch Block,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,CloseConnection,The method has an empty catch block.
Empty Catch Block,Bespoke.Common.Net,UdpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\UdpServer.cs,EndReceive,The method has an empty catch block.
Magic Number,Bespoke.Common,RandomHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\RandomHelper.cs,RandomBoolean,The following statement contains a magic number: return (sRandom.NextDouble () > 0.5);  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: try {  	FileStream file = new FileStream (sFileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite);  	// Check if file is too large (more than 2 MB)' if so' recreate it.  	if (file.Length > 2 * 1024 * 1024) {  		file.Close ();  		file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  	}  	sWriter = (file.Length == 0 ? new StreamWriter (file' System.Text.Encoding.UTF8) : new StreamWriter (file));  	sWriter.BaseStream.Seek (0' SeekOrigin.End);  	sWriter.AutoFlush = true;  	sWriter.WriteLine (Environment.NewLine + "/// Session started at: " + DateTime.Now.ToString ());  	sWriter.WriteLine ("/// Application: " + sApplicationName + Environment.NewLine);  }  catch (IOException) {  	// Ignore any file exceptions  }  catch (UnauthorizedAccessException) {  	// Ignore any file exceptions  }  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: try {  	FileStream file = new FileStream (sFileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite);  	// Check if file is too large (more than 2 MB)' if so' recreate it.  	if (file.Length > 2 * 1024 * 1024) {  		file.Close ();  		file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  	}  	sWriter = (file.Length == 0 ? new StreamWriter (file' System.Text.Encoding.UTF8) : new StreamWriter (file));  	sWriter.BaseStream.Seek (0' SeekOrigin.End);  	sWriter.AutoFlush = true;  	sWriter.WriteLine (Environment.NewLine + "/// Session started at: " + DateTime.Now.ToString ());  	sWriter.WriteLine ("/// Application: " + sApplicationName + Environment.NewLine);  }  catch (IOException) {  	// Ignore any file exceptions  }  catch (UnauthorizedAccessException) {  	// Ignore any file exceptions  }  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: try {  	FileStream file = new FileStream (sFileName' FileMode.OpenOrCreate' FileAccess.Write' FileShare.ReadWrite);  	// Check if file is too large (more than 2 MB)' if so' recreate it.  	if (file.Length > 2 * 1024 * 1024) {  		file.Close ();  		file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  	}  	sWriter = (file.Length == 0 ? new StreamWriter (file' System.Text.Encoding.UTF8) : new StreamWriter (file));  	sWriter.BaseStream.Seek (0' SeekOrigin.End);  	sWriter.AutoFlush = true;  	sWriter.WriteLine (Environment.NewLine + "/// Session started at: " + DateTime.Now.ToString ());  	sWriter.WriteLine ("/// Application: " + sApplicationName + Environment.NewLine);  }  catch (IOException) {  	// Ignore any file exceptions  }  catch (UnauthorizedAccessException) {  	// Ignore any file exceptions  }  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: if (file.Length > 2 * 1024 * 1024) {  	file.Close ();  	file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  }  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: if (file.Length > 2 * 1024 * 1024) {  	file.Close ();  	file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  }  
Magic Number,Bespoke.Common,LogManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LogManager.cs,Initialize,The following statement contains a magic number: if (file.Length > 2 * 1024 * 1024) {  	file.Close ();  	file = new FileStream (sFileName' FileMode.Create' FileAccess.Write' FileShare.ReadWrite);  }  
Magic Number,Bespoke.Common,InputManager,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\InputManager.cs,MouseClick,The following statement contains a magic number: SendInput (2' buffer' Marshal.SizeOf (buffer [0]));  
Magic Number,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseColor,The following statement contains a magic number: try {  	string[] values = value.Split (DELIMITERS);  	if (values.Length == 3) {  		byte r = byte.Parse (values [0].Trim ());  		byte g = byte.Parse (values [1].Trim ());  		byte b = byte.Parse (values [2].Trim ());  		return Color.FromArgb (r' g' b);  	}  	#if WINDOWS  					else if (values.Length == 4) 				{ 					byte r = byte.Parse(values[0].Trim()); 					byte g = byte.Parse(values[1].Trim()); 					byte b = byte.Parse(values[2].Trim()); 					byte a = byte.Parse(values[3].Trim());  					return Color.FromArgb(r' g' b' a); 				} #endif  	else {  		MemberInfo[] colorMemberInfoList = typeof(Color).GetMember (value);  		if (colorMemberInfoList.Length != 1) {  			throw new Exception ("Could not find color value: " + value);  		}  		return (Color)typeof(Color).InvokeMember (colorMemberInfoList [0].Name' BindingFlags.GetProperty' null' null' null);  	}  }  catch (Exception ex) {  	throw new InvalidCastException ("Could not parse color"' ex);  }  
Magic Number,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseColor,The following statement contains a magic number: try {  	string[] values = value.Split (DELIMITERS);  	if (values.Length == 3) {  		byte r = byte.Parse (values [0].Trim ());  		byte g = byte.Parse (values [1].Trim ());  		byte b = byte.Parse (values [2].Trim ());  		return Color.FromArgb (r' g' b);  	}  	#if WINDOWS  					else if (values.Length == 4) 				{ 					byte r = byte.Parse(values[0].Trim()); 					byte g = byte.Parse(values[1].Trim()); 					byte b = byte.Parse(values[2].Trim()); 					byte a = byte.Parse(values[3].Trim());  					return Color.FromArgb(r' g' b' a); 				} #endif  	else {  		MemberInfo[] colorMemberInfoList = typeof(Color).GetMember (value);  		if (colorMemberInfoList.Length != 1) {  			throw new Exception ("Could not find color value: " + value);  		}  		return (Color)typeof(Color).InvokeMember (colorMemberInfoList [0].Name' BindingFlags.GetProperty' null' null' null);  	}  }  catch (Exception ex) {  	throw new InvalidCastException ("Could not parse color"' ex);  }  
Magic Number,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseColor,The following statement contains a magic number: if (values.Length == 3) {  	byte r = byte.Parse (values [0].Trim ());  	byte g = byte.Parse (values [1].Trim ());  	byte b = byte.Parse (values [2].Trim ());  	return Color.FromArgb (r' g' b);  }  #if WINDOWS  				else if (values.Length == 4) 				{ 					byte r = byte.Parse(values[0].Trim()); 					byte g = byte.Parse(values[1].Trim()); 					byte b = byte.Parse(values[2].Trim()); 					byte a = byte.Parse(values[3].Trim());  					return Color.FromArgb(r' g' b' a); 				} #endif  else {  	MemberInfo[] colorMemberInfoList = typeof(Color).GetMember (value);  	if (colorMemberInfoList.Length != 1) {  		throw new Exception ("Could not find color value: " + value);  	}  	return (Color)typeof(Color).InvokeMember (colorMemberInfoList [0].Name' BindingFlags.GetProperty' null' null' null);  }  
Magic Number,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParseColor,The following statement contains a magic number: if (values.Length == 3) {  	byte r = byte.Parse (values [0].Trim ());  	byte g = byte.Parse (values [1].Trim ());  	byte b = byte.Parse (values [2].Trim ());  	return Color.FromArgb (r' g' b);  }  #if WINDOWS  				else if (values.Length == 4) 				{ 					byte r = byte.Parse(values[0].Trim()); 					byte g = byte.Parse(values[1].Trim()); 					byte b = byte.Parse(values[2].Trim()); 					byte a = byte.Parse(values[3].Trim());  					return Color.FromArgb(r' g' b' a); 				} #endif  else {  	MemberInfo[] colorMemberInfoList = typeof(Color).GetMember (value);  	if (colorMemberInfoList.Length != 1) {  		throw new Exception ("Could not find color value: " + value);  	}  	return (Color)typeof(Color).InvokeMember (colorMemberInfoList [0].Name' BindingFlags.GetProperty' null' null' null);  }  
Magic Number,Bespoke.Common,XmlHelper,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Xml\XmlHelper.cs,ParsePoint,The following statement contains a magic number: if (values.Length != 2) {  	throw new InvalidCastException ("Could not parse point");  }  
Magic Number,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,inverse,The following statement contains a magic number: for (int p = 0; p < ro; p++) {  	for (int q = 0; q < co; q++) {  		double['] s = submat (a' p' q);  		double ds = det (s);  		ai [p' q] = Math.Pow (-1' p + q + 2) * ds / de;  	}  }  
Magic Number,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,inverse,The following statement contains a magic number: for (int q = 0; q < co; q++) {  	double['] s = submat (a' p' q);  	double ds = det (s);  	ai [p' q] = Math.Pow (-1' p + q + 2) * ds / de;  }  
Magic Number,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,inverse,The following statement contains a magic number: ai [p' q] = Math.Pow (-1' p + q + 2) * ds / de;  
Magic Number,Bespoke.Common.LinearAlgebra,Matrix,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\LinearAlgebra\Matrix.cs,det,The following statement contains a magic number: if (ro == 2) {  	return ((a [0' 0] * a [1' 1]) - (a [0' 1] * a [1' 0]));  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,TcpServer,The following statement contains a magic number: mMessageLengthData = new byte[4];  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: lock (this) {  	if (mIsShuttingDown)  		return;  	try {  		int bytesReceived = connection.Client.EndReceive (asyncResult);  		if (bytesReceived == 0) {  			// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  			connection.ClearReceivedData ();  			return;  		}  		var bytes = new List<byte> (connection.ReceivedData);  		// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  		connection.ClearReceivedData ();  		bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  		while (true) {  			if (mMessageLength == int.MinValue) {  				if (bytes.Count < 4)  					break;  				var messageLengthData = bytes.Take (4).ToArray ();  				if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  					messageLengthData = Library.SwapEndian (messageLengthData);  				mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  				Assert.IsTrue (mMessageLength > 0);  				bytes.RemoveRange (0' 4);  			}  			else {  				if (bytes.Count < mMessageLength)  					break;  				OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  				bytes.RemoveRange (0' mMessageLength);  				mMessageLength = int.MinValue;  			}  		}  		connection.AppendReceivedData (bytes);  		connection.InitDataReceivedCallback (OnDataReceived);  	}  	catch {  		CloseConnection (connection);  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: lock (this) {  	if (mIsShuttingDown)  		return;  	try {  		int bytesReceived = connection.Client.EndReceive (asyncResult);  		if (bytesReceived == 0) {  			// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  			connection.ClearReceivedData ();  			return;  		}  		var bytes = new List<byte> (connection.ReceivedData);  		// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  		connection.ClearReceivedData ();  		bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  		while (true) {  			if (mMessageLength == int.MinValue) {  				if (bytes.Count < 4)  					break;  				var messageLengthData = bytes.Take (4).ToArray ();  				if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  					messageLengthData = Library.SwapEndian (messageLengthData);  				mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  				Assert.IsTrue (mMessageLength > 0);  				bytes.RemoveRange (0' 4);  			}  			else {  				if (bytes.Count < mMessageLength)  					break;  				OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  				bytes.RemoveRange (0' mMessageLength);  				mMessageLength = int.MinValue;  			}  		}  		connection.AppendReceivedData (bytes);  		connection.InitDataReceivedCallback (OnDataReceived);  	}  	catch {  		CloseConnection (connection);  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: lock (this) {  	if (mIsShuttingDown)  		return;  	try {  		int bytesReceived = connection.Client.EndReceive (asyncResult);  		if (bytesReceived == 0) {  			// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  			connection.ClearReceivedData ();  			return;  		}  		var bytes = new List<byte> (connection.ReceivedData);  		// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  		connection.ClearReceivedData ();  		bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  		while (true) {  			if (mMessageLength == int.MinValue) {  				if (bytes.Count < 4)  					break;  				var messageLengthData = bytes.Take (4).ToArray ();  				if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  					messageLengthData = Library.SwapEndian (messageLengthData);  				mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  				Assert.IsTrue (mMessageLength > 0);  				bytes.RemoveRange (0' 4);  			}  			else {  				if (bytes.Count < mMessageLength)  					break;  				OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  				bytes.RemoveRange (0' mMessageLength);  				mMessageLength = int.MinValue;  			}  		}  		connection.AppendReceivedData (bytes);  		connection.InitDataReceivedCallback (OnDataReceived);  	}  	catch {  		CloseConnection (connection);  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: try {  	int bytesReceived = connection.Client.EndReceive (asyncResult);  	if (bytesReceived == 0) {  		// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  		connection.ClearReceivedData ();  		return;  	}  	var bytes = new List<byte> (connection.ReceivedData);  	// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  	connection.ClearReceivedData ();  	bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  	while (true) {  		if (mMessageLength == int.MinValue) {  			if (bytes.Count < 4)  				break;  			var messageLengthData = bytes.Take (4).ToArray ();  			if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  				messageLengthData = Library.SwapEndian (messageLengthData);  			mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  			Assert.IsTrue (mMessageLength > 0);  			bytes.RemoveRange (0' 4);  		}  		else {  			if (bytes.Count < mMessageLength)  				break;  			OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  			bytes.RemoveRange (0' mMessageLength);  			mMessageLength = int.MinValue;  		}  	}  	connection.AppendReceivedData (bytes);  	connection.InitDataReceivedCallback (OnDataReceived);  }  catch {  	CloseConnection (connection);  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: try {  	int bytesReceived = connection.Client.EndReceive (asyncResult);  	if (bytesReceived == 0) {  		// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  		connection.ClearReceivedData ();  		return;  	}  	var bytes = new List<byte> (connection.ReceivedData);  	// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  	connection.ClearReceivedData ();  	bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  	while (true) {  		if (mMessageLength == int.MinValue) {  			if (bytes.Count < 4)  				break;  			var messageLengthData = bytes.Take (4).ToArray ();  			if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  				messageLengthData = Library.SwapEndian (messageLengthData);  			mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  			Assert.IsTrue (mMessageLength > 0);  			bytes.RemoveRange (0' 4);  		}  		else {  			if (bytes.Count < mMessageLength)  				break;  			OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  			bytes.RemoveRange (0' mMessageLength);  			mMessageLength = int.MinValue;  		}  	}  	connection.AppendReceivedData (bytes);  	connection.InitDataReceivedCallback (OnDataReceived);  }  catch {  	CloseConnection (connection);  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: try {  	int bytesReceived = connection.Client.EndReceive (asyncResult);  	if (bytesReceived == 0) {  		// bytesReceived == 0 when the socket gets shutdown; therefore' remove the connection.  		connection.ClearReceivedData ();  		return;  	}  	var bytes = new List<byte> (connection.ReceivedData);  	// ReceivedData creates unnecessary array copy each call. Call it as few times as possible.  	connection.ClearReceivedData ();  	bytes.AddRange (connection.ReceivedDataBuffer.Take (bytesReceived));  	while (true) {  		if (mMessageLength == int.MinValue) {  			if (bytes.Count < 4)  				break;  			var messageLengthData = bytes.Take (4).ToArray ();  			if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  				messageLengthData = Library.SwapEndian (messageLengthData);  			mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  			Assert.IsTrue (mMessageLength > 0);  			bytes.RemoveRange (0' 4);  		}  		else {  			if (bytes.Count < mMessageLength)  				break;  			OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  			bytes.RemoveRange (0' mMessageLength);  			mMessageLength = int.MinValue;  		}  	}  	connection.AppendReceivedData (bytes);  	connection.InitDataReceivedCallback (OnDataReceived);  }  catch {  	CloseConnection (connection);  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: while (true) {  	if (mMessageLength == int.MinValue) {  		if (bytes.Count < 4)  			break;  		var messageLengthData = bytes.Take (4).ToArray ();  		if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  			messageLengthData = Library.SwapEndian (messageLengthData);  		mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  		Assert.IsTrue (mMessageLength > 0);  		bytes.RemoveRange (0' 4);  	}  	else {  		if (bytes.Count < mMessageLength)  			break;  		OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  		bytes.RemoveRange (0' mMessageLength);  		mMessageLength = int.MinValue;  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: while (true) {  	if (mMessageLength == int.MinValue) {  		if (bytes.Count < 4)  			break;  		var messageLengthData = bytes.Take (4).ToArray ();  		if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  			messageLengthData = Library.SwapEndian (messageLengthData);  		mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  		Assert.IsTrue (mMessageLength > 0);  		bytes.RemoveRange (0' 4);  	}  	else {  		if (bytes.Count < mMessageLength)  			break;  		OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  		bytes.RemoveRange (0' mMessageLength);  		mMessageLength = int.MinValue;  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: while (true) {  	if (mMessageLength == int.MinValue) {  		if (bytes.Count < 4)  			break;  		var messageLengthData = bytes.Take (4).ToArray ();  		if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  			messageLengthData = Library.SwapEndian (messageLengthData);  		mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  		Assert.IsTrue (mMessageLength > 0);  		bytes.RemoveRange (0' 4);  	}  	else {  		if (bytes.Count < mMessageLength)  			break;  		OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  		bytes.RemoveRange (0' mMessageLength);  		mMessageLength = int.MinValue;  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: if (mMessageLength == int.MinValue) {  	if (bytes.Count < 4)  		break;  	var messageLengthData = bytes.Take (4).ToArray ();  	if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  		messageLengthData = Library.SwapEndian (messageLengthData);  	mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  	Assert.IsTrue (mMessageLength > 0);  	bytes.RemoveRange (0' 4);  }  else {  	if (bytes.Count < mMessageLength)  		break;  	OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  	bytes.RemoveRange (0' mMessageLength);  	mMessageLength = int.MinValue;  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: if (mMessageLength == int.MinValue) {  	if (bytes.Count < 4)  		break;  	var messageLengthData = bytes.Take (4).ToArray ();  	if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  		messageLengthData = Library.SwapEndian (messageLengthData);  	mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  	Assert.IsTrue (mMessageLength > 0);  	bytes.RemoveRange (0' 4);  }  else {  	if (bytes.Count < mMessageLength)  		break;  	OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  	bytes.RemoveRange (0' mMessageLength);  	mMessageLength = int.MinValue;  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: if (mMessageLength == int.MinValue) {  	if (bytes.Count < 4)  		break;  	var messageLengthData = bytes.Take (4).ToArray ();  	if (BitConverter.IsLittleEndian != mLittleEndianByteOrder)  		messageLengthData = Library.SwapEndian (messageLengthData);  	mMessageLength = BitConverter.ToInt32 (messageLengthData' 0);  	Assert.IsTrue (mMessageLength > 0);  	bytes.RemoveRange (0' 4);  }  else {  	if (bytes.Count < mMessageLength)  		break;  	OnDataReceived (new TcpDataReceivedEventArgs (connection' bytes.Take (mMessageLength).ToArray ()));  	bytes.RemoveRange (0' mMessageLength);  	mMessageLength = int.MinValue;  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: if (bytes.Count < 4)  	break;  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,OnDataReceived,The following statement contains a magic number: bytes.RemoveRange (0' 4);  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,SynchronousReceiveData,The following statement contains a magic number: while (mReceiveData) {  	try {  		byte[] data = connection.Reader.ReadBytes (4);  		if (BitConverter.IsLittleEndian != mLittleEndianByteOrder) {  			data = Library.SwapEndian (data);  		}  		int length = BitConverter.ToInt32 (data' 0);  		data = connection.Reader.ReadBytes (length);  		OnDataReceived (new TcpDataReceivedEventArgs (connection' data));  	}  	catch {  		CloseConnection (connection);  		break;  	}  }  
Magic Number,Bespoke.Common.Net,TcpServer,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Net\TcpServer.cs,SynchronousReceiveData,The following statement contains a magic number: try {  	byte[] data = connection.Reader.ReadBytes (4);  	if (BitConverter.IsLittleEndian != mLittleEndianByteOrder) {  		data = Library.SwapEndian (data);  	}  	int length = BitConverter.ToInt32 (data' 0);  	data = connection.Reader.ReadBytes (length);  	OnDataReceived (new TcpDataReceivedEventArgs (connection' data));  }  catch {  	CloseConnection (connection);  	break;  }  
Magic Number,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,GetBitMap,The following statement contains a magic number: try {  	mPictureReady.Reset ();  	mImageCaptured = false;  	Start ();  	if (mPictureReady.WaitOne (5000' false) == false) {  		throw new Exception ("Timeout waiting to get picture");  	}  }  catch (Exception ex) {  	Marshal.FreeCoTaskMem (mHandle);  	LogManager.Write ("Error retrieving camera frame: " + ex.Message);  }  
Magic Number,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,GetBitMap,The following statement contains a magic number: if (mPictureReady.WaitOne (5000' false) == false) {  	throw new Exception ("Timeout waiting to get picture");  }  
Magic Number,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,InitConfigParams,The following statement contains a magic number: if (mFrameRate > 0) {  	infoHeader.AvgTimePerFrame = 10000000 / mFrameRate;  }  
Magic Number,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,InitConfigParams,The following statement contains a magic number: infoHeader.AvgTimePerFrame = 10000000 / mFrameRate;  
Magic Number,Bespoke.Common.Video,WebCamCapture,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Video\WebCamCapture.cs,SaveSizeInfo,The following statement contains a magic number: mStride = mWidth * (infoHeader.BmiHeader.BitCount / 8);  
Magic Number,Bespoke.Common.Wiimote,WiimoteState,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\DataTypes.cs,WiimoteState,The following statement contains a magic number: IRState.IRSensors = new IRSensor[4];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: while (HIDImports.SetupDiEnumDeviceInterfaces (hDevInfo' IntPtr.Zero' ref guid' index' ref diData)) {  	UInt32 size;  	// get the buffer size for this device detail instance (returned in the size parameter)  	HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' IntPtr.Zero' 0' out size' IntPtr.Zero);  	// create a detail struct and set its size  	HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA diDetail = new HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA ();  	// yeah' yeah...well' see' on Win x86' cbSize must be 5 for some reason.  On x64' apparently 8 is what it wants.  	// someday I should figure this out.  Thanks to Paul Miller on this...  	diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  	// actually get the detail struct  	if (HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' ref diDetail' size' out size' IntPtr.Zero)) {  		//Debug.WriteLine(string.Format("{0}: {1} - {2}"' index' diDetail.DevicePath' Marshal.GetLastWin32Error()));  		// open a read/write handle to our device using the DevicePath returned  		mHandle = HIDImports.CreateFile (diDetail.DevicePath' FileAccess.ReadWrite' FileShare.ReadWrite' IntPtr.Zero' FileMode.Open' HIDImports.EFileAttributes.Overlapped' IntPtr.Zero);  		// create an attributes struct and initialize the size  		HIDImports.HIDD_ATTRIBUTES attrib = new HIDImports.HIDD_ATTRIBUTES ();  		attrib.Size = Marshal.SizeOf (attrib);  		// get the attributes of the current device  		if (HIDImports.HidD_GetAttributes (mHandle.DangerousGetHandle ()' ref attrib)) {  			// if the vendor and product IDs match up  			if (attrib.VendorID == VID && attrib.ProductID == PID) {  				found = true;  				// fire the callback function...if the callee doesn't care about more Wiimotes' break out  				if (!wiimoteFound (diDetail.DevicePath))  					break;  			}  		}  		mHandle.Close ();  	}  	else {  		// failed to get the detail struct  		throw new WiimoteException ("SetupDiGetDeviceInterfaceDetail failed on index " + index);  	}  	// move to the next device  	index++;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: while (HIDImports.SetupDiEnumDeviceInterfaces (hDevInfo' IntPtr.Zero' ref guid' index' ref diData)) {  	UInt32 size;  	// get the buffer size for this device detail instance (returned in the size parameter)  	HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' IntPtr.Zero' 0' out size' IntPtr.Zero);  	// create a detail struct and set its size  	HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA diDetail = new HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA ();  	// yeah' yeah...well' see' on Win x86' cbSize must be 5 for some reason.  On x64' apparently 8 is what it wants.  	// someday I should figure this out.  Thanks to Paul Miller on this...  	diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  	// actually get the detail struct  	if (HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' ref diDetail' size' out size' IntPtr.Zero)) {  		//Debug.WriteLine(string.Format("{0}: {1} - {2}"' index' diDetail.DevicePath' Marshal.GetLastWin32Error()));  		// open a read/write handle to our device using the DevicePath returned  		mHandle = HIDImports.CreateFile (diDetail.DevicePath' FileAccess.ReadWrite' FileShare.ReadWrite' IntPtr.Zero' FileMode.Open' HIDImports.EFileAttributes.Overlapped' IntPtr.Zero);  		// create an attributes struct and initialize the size  		HIDImports.HIDD_ATTRIBUTES attrib = new HIDImports.HIDD_ATTRIBUTES ();  		attrib.Size = Marshal.SizeOf (attrib);  		// get the attributes of the current device  		if (HIDImports.HidD_GetAttributes (mHandle.DangerousGetHandle ()' ref attrib)) {  			// if the vendor and product IDs match up  			if (attrib.VendorID == VID && attrib.ProductID == PID) {  				found = true;  				// fire the callback function...if the callee doesn't care about more Wiimotes' break out  				if (!wiimoteFound (diDetail.DevicePath))  					break;  			}  		}  		mHandle.Close ();  	}  	else {  		// failed to get the detail struct  		throw new WiimoteException ("SetupDiGetDeviceInterfaceDetail failed on index " + index);  	}  	// move to the next device  	index++;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: while (HIDImports.SetupDiEnumDeviceInterfaces (hDevInfo' IntPtr.Zero' ref guid' index' ref diData)) {  	UInt32 size;  	// get the buffer size for this device detail instance (returned in the size parameter)  	HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' IntPtr.Zero' 0' out size' IntPtr.Zero);  	// create a detail struct and set its size  	HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA diDetail = new HIDImports.SP_DEVICE_INTERFACE_DETAIL_DATA ();  	// yeah' yeah...well' see' on Win x86' cbSize must be 5 for some reason.  On x64' apparently 8 is what it wants.  	// someday I should figure this out.  Thanks to Paul Miller on this...  	diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  	// actually get the detail struct  	if (HIDImports.SetupDiGetDeviceInterfaceDetail (hDevInfo' ref diData' ref diDetail' size' out size' IntPtr.Zero)) {  		//Debug.WriteLine(string.Format("{0}: {1} - {2}"' index' diDetail.DevicePath' Marshal.GetLastWin32Error()));  		// open a read/write handle to our device using the DevicePath returned  		mHandle = HIDImports.CreateFile (diDetail.DevicePath' FileAccess.ReadWrite' FileShare.ReadWrite' IntPtr.Zero' FileMode.Open' HIDImports.EFileAttributes.Overlapped' IntPtr.Zero);  		// create an attributes struct and initialize the size  		HIDImports.HIDD_ATTRIBUTES attrib = new HIDImports.HIDD_ATTRIBUTES ();  		attrib.Size = Marshal.SizeOf (attrib);  		// get the attributes of the current device  		if (HIDImports.HidD_GetAttributes (mHandle.DangerousGetHandle ()' ref attrib)) {  			// if the vendor and product IDs match up  			if (attrib.VendorID == VID && attrib.ProductID == PID) {  				found = true;  				// fire the callback function...if the callee doesn't care about more Wiimotes' break out  				if (!wiimoteFound (diDetail.DevicePath))  					break;  			}  		}  		mHandle.Close ();  	}  	else {  		// failed to get the detail struct  		throw new WiimoteException ("SetupDiGetDeviceInterfaceDetail failed on index " + index);  	}  	// move to the next device  	index++;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,FindWiimote,The following statement contains a magic number: diDetail.cbSize = (uint)(IntPtr.Size == 8 ? 8 : 5);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: switch (type) {  case InputReport.Buttons:  	ParseButtons (buff);  	break;  case InputReport.ButtonsAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	break;  case InputReport.IRAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	break;  case InputReport.ButtonsExtension:  	ParseButtons (buff);  	ParseExtension (buff' 3);  	break;  case InputReport.ExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseExtension (buff' 6);  	break;  case InputReport.IRExtensionAccel:  	ParseButtons (buff);  	ParseAccel (buff);  	ParseIR (buff);  	ParseExtension (buff' 16);  	break;  case InputReport.Status:  	ParseButtons (buff);  	mWiimoteState.BatteryRaw = buff [6];  	mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  	// get the real LED values in case the values from SetLEDs() somehow becomes out of sync' which really shouldn't be possible  	mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  	mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  	mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  	mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  	// extension connected?  	bool extension = (buff [3] & 0x02) != 0;  	Debug.WriteLine ("Extension: " + extension);  	if (mWiimoteState.Extension != extension) {  		mWiimoteState.Extension = extension;  		if (extension) {  			BeginAsyncRead ();  			InitializeExtension ();  		}  		else  			mWiimoteState.ExtensionType = ExtensionType.None;  		// only fire the extension changed event if we have a real extension (i.e. not a balance board)  		if (WiimoteExtensionChanged != null && mWiimoteState.ExtensionType != ExtensionType.BalanceBoard)  			WiimoteExtensionChanged (this' new WiimoteExtensionChangedEventArgs (mWiimoteState.ExtensionType' mWiimoteState.Extension));  	}  	mStatusDone.Set ();  	break;  case InputReport.ReadData:  	ParseButtons (buff);  	ParseReadData (buff);  	break;  case InputReport.OutputReportAck:  	Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  	mWriteDone.Set ();  	break;  default:  	Debug.WriteLine ("Unknown report type: " + type.ToString ("x"));  	return false;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: ParseExtension (buff' 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: ParseExtension (buff' 6);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: ParseExtension (buff' 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.BatteryRaw = buff [6];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.Battery = (((100.0f * 48.0f * (float)((int)buff [6] / 48.0f))) / 192.0f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.LEDState.LED1 = (buff [3] & 0x10) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.LEDState.LED2 = (buff [3] & 0x20) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.LEDState.LED3 = (buff [3] & 0x40) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: mWiimoteState.LEDState.LED4 = (buff [3] & 0x80) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseInputReport,The following statement contains a magic number: Debug.WriteLine ("ack: " + buff [0] + " " + buff [1] + " " + buff [2] + " " + buff [3] + " " + buff [4]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.A = (buff [2] & 0x08) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.B = (buff [2] & 0x04) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.Minus = (buff [2] & 0x10) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.Home = (buff [2] & 0x80) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.One = (buff [2] & 0x02) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseButtons,The following statement contains a magic number: mWiimoteState.ButtonState.Two = (buff [2] & 0x01) != 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The following statement contains a magic number: mWiimoteState.AccelState.RawValues.X = buff [3];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The following statement contains a magic number: mWiimoteState.AccelState.RawValues.Y = buff [4];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseAccel,The following statement contains a magic number: mWiimoteState.AccelState.RawValues.Z = buff [5];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.X = buff [6] | ((buff [8] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.X = buff [6] | ((buff [8] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.X = buff [6] | ((buff [8] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.X = buff [6] | ((buff [8] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.Y = buff [7] | ((buff [8] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.Y = buff [7] | ((buff [8] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.Y = buff [7] | ((buff [8] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].RawPosition.Y = buff [7] | ((buff [8] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Size = 0x00;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Size = 0x00;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Position.X = (float)(mWiimoteState.IRState.IRSensors [2].RawPosition.X / 1023.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Position.X = (float)(mWiimoteState.IRState.IRSensors [2].RawPosition.X / 1023.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Position.X = (float)(mWiimoteState.IRState.IRSensors [3].RawPosition.X / 1023.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Position.X = (float)(mWiimoteState.IRState.IRSensors [3].RawPosition.X / 1023.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Position.Y = (float)(mWiimoteState.IRState.IRSensors [2].RawPosition.Y / 767.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [2].Position.Y = (float)(mWiimoteState.IRState.IRSensors [2].RawPosition.Y / 767.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Position.Y = (float)(mWiimoteState.IRState.IRSensors [3].RawPosition.Y / 767.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.IRSensors [3].Position.Y = (float)(mWiimoteState.IRState.IRSensors [3].RawPosition.Y / 767.5f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: if (mWiimoteState.IRState.IRSensors [0].Found && mWiimoteState.IRState.IRSensors [1].Found) {  	mWiimoteState.IRState.RawMidpoint.X = (mWiimoteState.IRState.IRSensors [1].RawPosition.X + mWiimoteState.IRState.IRSensors [0].RawPosition.X) / 2;  	mWiimoteState.IRState.RawMidpoint.Y = (mWiimoteState.IRState.IRSensors [1].RawPosition.Y + mWiimoteState.IRState.IRSensors [0].RawPosition.Y) / 2;  	mWiimoteState.IRState.Midpoint.X = (mWiimoteState.IRState.IRSensors [1].Position.X + mWiimoteState.IRState.IRSensors [0].Position.X) / 2.0f;  	mWiimoteState.IRState.Midpoint.Y = (mWiimoteState.IRState.IRSensors [1].Position.Y + mWiimoteState.IRState.IRSensors [0].Position.Y) / 2.0f;  }  else  	mWiimoteState.IRState.Midpoint.X = mWiimoteState.IRState.Midpoint.Y = 0.0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: if (mWiimoteState.IRState.IRSensors [0].Found && mWiimoteState.IRState.IRSensors [1].Found) {  	mWiimoteState.IRState.RawMidpoint.X = (mWiimoteState.IRState.IRSensors [1].RawPosition.X + mWiimoteState.IRState.IRSensors [0].RawPosition.X) / 2;  	mWiimoteState.IRState.RawMidpoint.Y = (mWiimoteState.IRState.IRSensors [1].RawPosition.Y + mWiimoteState.IRState.IRSensors [0].RawPosition.Y) / 2;  	mWiimoteState.IRState.Midpoint.X = (mWiimoteState.IRState.IRSensors [1].Position.X + mWiimoteState.IRState.IRSensors [0].Position.X) / 2.0f;  	mWiimoteState.IRState.Midpoint.Y = (mWiimoteState.IRState.IRSensors [1].Position.Y + mWiimoteState.IRState.IRSensors [0].Position.Y) / 2.0f;  }  else  	mWiimoteState.IRState.Midpoint.X = mWiimoteState.IRState.Midpoint.Y = 0.0f;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.RawMidpoint.X = (mWiimoteState.IRState.IRSensors [1].RawPosition.X + mWiimoteState.IRState.IRSensors [0].RawPosition.X) / 2;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following statement contains a magic number: mWiimoteState.IRState.RawMidpoint.Y = (mWiimoteState.IRState.IRSensors [1].RawPosition.Y + mWiimoteState.IRState.IRSensors [0].RawPosition.Y) / 2;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: switch (buff [offset + 2] & 0x1f) {  case 0x04:  	mWiimoteState.GuitarState.TouchbarState.Green = true;  	break;  case 0x07:  	mWiimoteState.GuitarState.TouchbarState.Green = true;  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	break;  case 0x0a:  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	break;  case 0x0c:  case 0x0d:  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	break;  case 0x12:  case 0x13:  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	break;  case 0x14:  case 0x15:  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	break;  case 0x17:  case 0x18:  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	break;  case 0x1a:  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	mWiimoteState.GuitarState.TouchbarState.Orange = true;  	break;  case 0x1f:  	mWiimoteState.GuitarState.TouchbarState.Orange = true;  	break;  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if ((buff [offset + 2] & 0x40) == 0) {  	int pad = (buff [offset + 2] >> 1) & 0x1f;  	int velocity = (buff [offset + 3] >> 5);  	if (velocity != 7) {  		switch (pad) {  		case 0x1b:  			mWiimoteState.DrumsState.PedalVelocity = velocity;  			break;  		case 0x19:  			mWiimoteState.DrumsState.RedVelocity = velocity;  			break;  		case 0x11:  			mWiimoteState.DrumsState.YellowVelocity = velocity;  			break;  		case 0x0f:  			mWiimoteState.DrumsState.BlueVelocity = velocity;  			break;  		case 0x0e:  			mWiimoteState.DrumsState.OrangeVelocity = velocity;  			break;  		case 0x12:  			mWiimoteState.DrumsState.GreenVelocity = velocity;  			break;  		}  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if ((buff [offset + 2] & 0x40) == 0) {  	int pad = (buff [offset + 2] >> 1) & 0x1f;  	int velocity = (buff [offset + 3] >> 5);  	if (velocity != 7) {  		switch (pad) {  		case 0x1b:  			mWiimoteState.DrumsState.PedalVelocity = velocity;  			break;  		case 0x19:  			mWiimoteState.DrumsState.RedVelocity = velocity;  			break;  		case 0x11:  			mWiimoteState.DrumsState.YellowVelocity = velocity;  			break;  		case 0x0f:  			mWiimoteState.DrumsState.BlueVelocity = velocity;  			break;  		case 0x0e:  			mWiimoteState.DrumsState.OrangeVelocity = velocity;  			break;  		case 0x12:  			mWiimoteState.DrumsState.GreenVelocity = velocity;  			break;  		}  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if ((buff [offset + 2] & 0x40) == 0) {  	int pad = (buff [offset + 2] >> 1) & 0x1f;  	int velocity = (buff [offset + 3] >> 5);  	if (velocity != 7) {  		switch (pad) {  		case 0x1b:  			mWiimoteState.DrumsState.PedalVelocity = velocity;  			break;  		case 0x19:  			mWiimoteState.DrumsState.RedVelocity = velocity;  			break;  		case 0x11:  			mWiimoteState.DrumsState.YellowVelocity = velocity;  			break;  		case 0x0f:  			mWiimoteState.DrumsState.BlueVelocity = velocity;  			break;  		case 0x0e:  			mWiimoteState.DrumsState.OrangeVelocity = velocity;  			break;  		case 0x12:  			mWiimoteState.DrumsState.GreenVelocity = velocity;  			break;  		}  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if ((buff [offset + 2] & 0x40) == 0) {  	int pad = (buff [offset + 2] >> 1) & 0x1f;  	int velocity = (buff [offset + 3] >> 5);  	if (velocity != 7) {  		switch (pad) {  		case 0x1b:  			mWiimoteState.DrumsState.PedalVelocity = velocity;  			break;  		case 0x19:  			mWiimoteState.DrumsState.RedVelocity = velocity;  			break;  		case 0x11:  			mWiimoteState.DrumsState.YellowVelocity = velocity;  			break;  		case 0x0f:  			mWiimoteState.DrumsState.BlueVelocity = velocity;  			break;  		case 0x0e:  			mWiimoteState.DrumsState.OrangeVelocity = velocity;  			break;  		case 0x12:  			mWiimoteState.DrumsState.GreenVelocity = velocity;  			break;  		}  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if ((buff [offset + 2] & 0x40) == 0) {  	int pad = (buff [offset + 2] >> 1) & 0x1f;  	int velocity = (buff [offset + 3] >> 5);  	if (velocity != 7) {  		switch (pad) {  		case 0x1b:  			mWiimoteState.DrumsState.PedalVelocity = velocity;  			break;  		case 0x19:  			mWiimoteState.DrumsState.RedVelocity = velocity;  			break;  		case 0x11:  			mWiimoteState.DrumsState.YellowVelocity = velocity;  			break;  		case 0x0f:  			mWiimoteState.DrumsState.BlueVelocity = velocity;  			break;  		case 0x0e:  			mWiimoteState.DrumsState.OrangeVelocity = velocity;  			break;  		case 0x12:  			mWiimoteState.DrumsState.GreenVelocity = velocity;  			break;  		}  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: if (velocity != 7) {  	switch (pad) {  	case 0x1b:  		mWiimoteState.DrumsState.PedalVelocity = velocity;  		break;  	case 0x19:  		mWiimoteState.DrumsState.RedVelocity = velocity;  		break;  	case 0x11:  		mWiimoteState.DrumsState.YellowVelocity = velocity;  		break;  	case 0x0f:  		mWiimoteState.DrumsState.BlueVelocity = velocity;  		break;  	case 0x0e:  		mWiimoteState.DrumsState.OrangeVelocity = velocity;  		break;  	case 0x12:  		mWiimoteState.DrumsState.GreenVelocity = velocity;  		break;  	}  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following statement contains a magic number: mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseReadData,The following statement contains a magic number: if ((buff [3] & 0x08) != 0)  	throw new WiimoteException ("Error reading data from Wiimote: Bytes do not exist.");  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseReadData,The following statement contains a magic number: if ((buff [3] & 0x07) != 0)  	throw new WiimoteException ("Error reading data from Wiimote: Attempt to read from write-only registers.");  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseReadData,The following statement contains a magic number: Array.Copy (buff' 6' mReadBuff' offset - mAddress' size);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadWiimoteCalibration,The following statement contains a magic number: mWiimoteState.AccelCalibrationInfo.Z0 = buff [2];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadWiimoteCalibration,The following statement contains a magic number: mWiimoteState.AccelCalibrationInfo.XG = buff [4];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadWiimoteCalibration,The following statement contains a magic number: mWiimoteState.AccelCalibrationInfo.YG = buff [5];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadWiimoteCalibration,The following statement contains a magic number: mWiimoteState.AccelCalibrationInfo.ZG = buff [6];  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,SetReportType,The following statement contains a magic number: mBuff [2] = (byte)type;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,GetStatus,The following statement contains a magic number: if (!mStatusDone.WaitOne (3000' false))  	throw new WiimoteException ("Timed out waiting for status report");  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: switch (irSensitivity) {  case IRSensitivity.WiiLevel1:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x64'  		0x00'  		0xfe  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xfd'  		0x05  	});  	break;  case IRSensitivity.WiiLevel2:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x96'  		0x00'  		0xb4  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0xb3'  		0x04  	});  	break;  case IRSensitivity.WiiLevel3:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xaa'  		0x00'  		0x64  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x63'  		0x03  	});  	break;  case IRSensitivity.WiiLevel4:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0xc8'  		0x00'  		0x36  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x35'  		0x03  	});  	break;  case IRSensitivity.WiiLevel5:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x07'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x72'  		0x00'  		0x20  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x1'  		0x03  	});  	break;  case IRSensitivity.Maximum:  	WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  		0x02'  		0x00'  		0x00'  		0x71'  		0x01'  		0x00'  		0x90'  		0x00'  		0x41  	});  	WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  		0x40'  		0x00  	});  	break;  default:  	throw new ArgumentOutOfRangeException ("irSensitivity");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x02'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0x64'  	0x00'  	0xfe  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0xfd'  	0x05  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x02'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0x96'  	0x00'  	0xb4  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0xb3'  	0x04  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x02'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0xaa'  	0x00'  	0x64  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0x63'  	0x03  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x02'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0xc8'  	0x00'  	0x36  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0x35'  	0x03  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x07'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0x72'  	0x00'  	0x20  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0x1'  	0x03  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_1' 9' new byte[] {  	0x02'  	0x00'  	0x00'  	0x71'  	0x01'  	0x00'  	0x90'  	0x00'  	0x41  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,EnableIR,The following statement contains a magic number: WriteData (REGISTER_IR_SENSITIVITY_2' 2' new byte[] {  	0x40'  	0x00  });  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteReport,The following statement contains a magic number: try {  	Debug.WriteLine ("WriteReport: " + mBuff [0].ToString ("x"));  	if (mAltWriteMethod)  		HIDImports.HidD_SetOutputReport (this.mHandle.DangerousGetHandle ()' mBuff' (uint)mBuff.Length);  	else if (mStream != null)  		mStream.Write (mBuff' 0' REPORT_LENGTH);  	if (mBuff [0] == (byte)OutputReport.WriteMemory) {  		Debug.WriteLine ("Wait");  		if (!mWriteDone.WaitOne (1000' false))  			Debug.WriteLine ("Wait failed");  	}  }  catch (Exception ex) {  	Debug.Write (ex.Message);  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteReport,The following statement contains a magic number: if (mBuff [0] == (byte)OutputReport.WriteMemory) {  	Debug.WriteLine ("Wait");  	if (!mWriteDone.WaitOne (1000' false))  		Debug.WriteLine ("Wait failed");  }  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteReport,The following statement contains a magic number: if (!mWriteDone.WaitOne (1000' false))  	Debug.WriteLine ("Wait failed");  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [1] = (byte)(((address & 0xff000000) >> 24) | GetRumbleBit ());  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [2] = (byte)((address & 0x00ff0000) >> 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [2] = (byte)((address & 0x00ff0000) >> 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [3] = (byte)((address & 0x0000ff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [3] = (byte)((address & 0x0000ff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [4] = (byte)(address & 0x000000ff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [5] = (byte)((size & 0xff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [5] = (byte)((size & 0xff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: mBuff [6] = (byte)(size & 0xff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ReadData,The following statement contains a magic number: if (!mReadDone.WaitOne (1000' false))  	throw new WiimoteException ("Error reading data from Wiimote...is it connected?");  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [1] = (byte)(((address & 0xff000000) >> 24) | GetRumbleBit ());  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [2] = (byte)((address & 0x00ff0000) >> 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [2] = (byte)((address & 0x00ff0000) >> 16);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [3] = (byte)((address & 0x0000ff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [3] = (byte)((address & 0x0000ff00) >> 8);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [4] = (byte)(address & 0x000000ff);  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: mBuff [5] = size;  
Magic Number,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,WriteData,The following statement contains a magic number: Array.Copy (buff' 0' mBuff' 6' size);  
Missing Default,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,InitializeExtension,The following switch statement is missing a default case: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0 = buff [0];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0 = buff [1];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0 = buff [2];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG = buff [4];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG = buff [5];  	mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG = buff [6];  	mWiimoteState.NunchukState.CalibrationInfo.MaxX = buff [8];  	mWiimoteState.NunchukState.CalibrationInfo.MinX = buff [9];  	mWiimoteState.NunchukState.CalibrationInfo.MidX = buff [10];  	mWiimoteState.NunchukState.CalibrationInfo.MaxY = buff [11];  	mWiimoteState.NunchukState.CalibrationInfo.MinY = buff [12];  	mWiimoteState.NunchukState.CalibrationInfo.MidY = buff [13];  	break;  case ExtensionType.ClassicController:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 16);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL = (byte)(buff [0] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL = (byte)(buff [1] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL = (byte)(buff [2] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL = (byte)(buff [3] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL = (byte)(buff [4] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL = (byte)(buff [5] >> 2);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR = (byte)(buff [6] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR = (byte)(buff [7] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR = (byte)(buff [8] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR = (byte)(buff [9] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR = (byte)(buff [10] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR = (byte)(buff [11] >> 3);  	// this doesn't seem right...  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerL = (byte)(buff[12] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerL = (byte)(buff[14] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MinTriggerR = (byte)(buff[13] >> 3);  	//					mWiimoteState.ClassicControllerState.AccelCalibrationInfo.MaxTriggerR = (byte)(buff[15] >> 3);  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL = 31;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR = 0;  	mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR = 31;  	break;  case ExtensionType.Guitar:  case ExtensionType.Drums:  	// there appears to be no calibration data returned by the guitar controller  	break;  case ExtensionType.BalanceBoard:  	buff = ReadData (REGISTER_EXTENSION_CALIBRATION' 32);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight = (short)((short)buff [4] << 8 | buff [5]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight = (short)((short)buff [6] << 8 | buff [7]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft = (short)((short)buff [8] << 8 | buff [9]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft = (short)((short)buff [10] << 8 | buff [11]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight = (short)((short)buff [12] << 8 | buff [13]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight = (short)((short)buff [14] << 8 | buff [15]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft = (short)((short)buff [16] << 8 | buff [17]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft = (short)((short)buff [18] << 8 | buff [19]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight = (short)((short)buff [20] << 8 | buff [21]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight = (short)((short)buff [22] << 8 | buff [23]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft = (short)((short)buff [24] << 8 | buff [25]);  	mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft = (short)((short)buff [26] << 8 | buff [27]);  	break;  }  
Missing Default,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseIR,The following switch statement is missing a default case: switch (mWiimoteState.IRState.Mode) {  case IRMode.Basic:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [8] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [8] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [11] | ((buff [13] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [12] | ((buff [13] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [14] | ((buff [13] >> 0) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [15] | ((buff [13] >> 2) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = 0x00;  	mWiimoteState.IRState.IRSensors [1].Size = 0x00;  	mWiimoteState.IRState.IRSensors [2].Size = 0x00;  	mWiimoteState.IRState.IRSensors [3].Size = 0x00;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [11] == 0xff && buff [12] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [14] == 0xff && buff [15] == 0xff);  	break;  case IRMode.Extended:  	mWiimoteState.IRState.IRSensors [1].RawPosition.X = buff [9] | ((buff [11] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [1].RawPosition.Y = buff [10] | ((buff [11] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.X = buff [12] | ((buff [14] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [2].RawPosition.Y = buff [13] | ((buff [14] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.X = buff [15] | ((buff [17] >> 4) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [3].RawPosition.Y = buff [16] | ((buff [17] >> 6) & 0x03) << 8;  	mWiimoteState.IRState.IRSensors [0].Size = buff [8] & 0x0f;  	mWiimoteState.IRState.IRSensors [1].Size = buff [11] & 0x0f;  	mWiimoteState.IRState.IRSensors [2].Size = buff [14] & 0x0f;  	mWiimoteState.IRState.IRSensors [3].Size = buff [17] & 0x0f;  	mWiimoteState.IRState.IRSensors [0].Found = !(buff [6] == 0xff && buff [7] == 0xff && buff [8] == 0xff);  	mWiimoteState.IRState.IRSensors [1].Found = !(buff [9] == 0xff && buff [10] == 0xff && buff [11] == 0xff);  	mWiimoteState.IRState.IRSensors [2].Found = !(buff [12] == 0xff && buff [13] == 0xff && buff [14] == 0xff);  	mWiimoteState.IRState.IRSensors [3].Found = !(buff [15] == 0xff && buff [16] == 0xff && buff [17] == 0xff);  	break;  }  
Missing Default,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following switch statement is missing a default case: switch (mWiimoteState.ExtensionType) {  case ExtensionType.Nunchuk:  	mWiimoteState.NunchukState.RawJoystick.X = buff [offset];  	mWiimoteState.NunchukState.RawJoystick.Y = buff [offset + 1];  	mWiimoteState.NunchukState.AccelState.RawValues.X = buff [offset + 2];  	mWiimoteState.NunchukState.AccelState.RawValues.Y = buff [offset + 3];  	mWiimoteState.NunchukState.AccelState.RawValues.Z = buff [offset + 4];  	mWiimoteState.NunchukState.C = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.NunchukState.Z = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.NunchukState.AccelState.Values.X = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.X - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.XG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.X0);  	mWiimoteState.NunchukState.AccelState.Values.Y = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Y - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.YG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Y0);  	mWiimoteState.NunchukState.AccelState.Values.Z = (float)((float)mWiimoteState.NunchukState.AccelState.RawValues.Z - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0) / ((float)mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.ZG - mWiimoteState.NunchukState.CalibrationInfo.AccelCalibration.Z0);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxX != 0x00)  		mWiimoteState.NunchukState.Joystick.X = (float)((float)mWiimoteState.NunchukState.RawJoystick.X - mWiimoteState.NunchukState.CalibrationInfo.MidX) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxX - mWiimoteState.NunchukState.CalibrationInfo.MinX);  	if (mWiimoteState.NunchukState.CalibrationInfo.MaxY != 0x00)  		mWiimoteState.NunchukState.Joystick.Y = (float)((float)mWiimoteState.NunchukState.RawJoystick.Y - mWiimoteState.NunchukState.CalibrationInfo.MidY) / ((float)mWiimoteState.NunchukState.CalibrationInfo.MaxY - mWiimoteState.NunchukState.CalibrationInfo.MinY);  	break;  case ExtensionType.ClassicController:  	mWiimoteState.ClassicControllerState.RawJoystickL.X = (byte)(buff [offset] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickL.Y = (byte)(buff [offset + 1] & 0x3f);  	mWiimoteState.ClassicControllerState.RawJoystickR.X = (byte)((buff [offset + 2] >> 7) | (buff [offset + 1] & 0xc0) >> 5 | (buff [offset] & 0xc0) >> 3);  	mWiimoteState.ClassicControllerState.RawJoystickR.Y = (byte)(buff [offset + 2] & 0x1f);  	mWiimoteState.ClassicControllerState.RawTriggerL = (byte)(((buff [offset + 2] & 0x60) >> 2) | (buff [offset + 3] >> 5));  	mWiimoteState.ClassicControllerState.RawTriggerR = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.ClassicControllerState.ButtonState.TriggerR = (buff [offset + 4] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Home = (buff [offset + 4] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.TriggerL = (buff [offset + 4] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Down = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Right = (buff [offset + 4] & 0x80) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Up = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Left = (buff [offset + 5] & 0x02) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZR = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.X = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.A = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.Y = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.B = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.ClassicControllerState.ButtonState.ZL = (buff [offset + 5] & 0x80) == 0;  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL != 0x00)  		mWiimoteState.ClassicControllerState.JoystickL.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickL.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.X = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.X - mWiimoteState.ClassicControllerState.CalibrationInfo.MidXR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxXR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinXR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR != 0x00)  		mWiimoteState.ClassicControllerState.JoystickR.Y = (float)((float)mWiimoteState.ClassicControllerState.RawJoystickR.Y - mWiimoteState.ClassicControllerState.CalibrationInfo.MidYR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxYR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinYR);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL != 0x00)  		mWiimoteState.ClassicControllerState.TriggerL = (mWiimoteState.ClassicControllerState.RawTriggerL) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerL - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerL);  	if (mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR != 0x00)  		mWiimoteState.ClassicControllerState.TriggerR = (mWiimoteState.ClassicControllerState.RawTriggerR) / (float)(mWiimoteState.ClassicControllerState.CalibrationInfo.MaxTriggerR - mWiimoteState.ClassicControllerState.CalibrationInfo.MinTriggerR);  	break;  case ExtensionType.Guitar:  	mWiimoteState.GuitarState.GuitarType = ((buff [offset] & 0x80) == 0) ? GuitarType.GuitarHeroWorldTour : GuitarType.GuitarHero3;  	mWiimoteState.GuitarState.ButtonState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.GuitarState.ButtonState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumDown = (buff [offset + 4] & 0x40) == 0;  	mWiimoteState.GuitarState.ButtonState.StrumUp = (buff [offset + 5] & 0x01) == 0;  	mWiimoteState.GuitarState.FretButtonState.Yellow = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.GuitarState.FretButtonState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.GuitarState.FretButtonState.Blue = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.GuitarState.FretButtonState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.GuitarState.FretButtonState.Orange = (buff [offset + 5] & 0x80) == 0;  	// it appears the joystick values are only 6 bits  	mWiimoteState.GuitarState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.GuitarState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	// and the whammy bar is only 5 bits  	mWiimoteState.GuitarState.RawWhammyBar = (byte)(buff [offset + 3] & 0x1f);  	mWiimoteState.GuitarState.Joystick.X = (float)(mWiimoteState.GuitarState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.Joystick.Y = (float)(mWiimoteState.GuitarState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.GuitarState.WhammyBar = (float)(mWiimoteState.GuitarState.RawWhammyBar) / 0x0a;  	// seems like there are 10 positions?  	mWiimoteState.GuitarState.TouchbarState.Yellow = false;  	mWiimoteState.GuitarState.TouchbarState.Green = false;  	mWiimoteState.GuitarState.TouchbarState.Blue = false;  	mWiimoteState.GuitarState.TouchbarState.Red = false;  	mWiimoteState.GuitarState.TouchbarState.Orange = false;  	switch (buff [offset + 2] & 0x1f) {  	case 0x04:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		break;  	case 0x07:  		mWiimoteState.GuitarState.TouchbarState.Green = true;  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0a:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		break;  	case 0x0c:  	case 0x0d:  		mWiimoteState.GuitarState.TouchbarState.Red = true;  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x12:  	case 0x13:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		break;  	case 0x14:  	case 0x15:  		mWiimoteState.GuitarState.TouchbarState.Yellow = true;  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x17:  	case 0x18:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		break;  	case 0x1a:  		mWiimoteState.GuitarState.TouchbarState.Blue = true;  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	case 0x1f:  		mWiimoteState.GuitarState.TouchbarState.Orange = true;  		break;  	}  	break;  case ExtensionType.Drums:  	// it appears the joystick values are only 6 bits  	mWiimoteState.DrumsState.RawJoystick.X = (buff [offset + 0] & 0x3f);  	mWiimoteState.DrumsState.RawJoystick.Y = (buff [offset + 1] & 0x3f);  	mWiimoteState.DrumsState.Plus = (buff [offset + 4] & 0x04) == 0;  	mWiimoteState.DrumsState.Minus = (buff [offset + 4] & 0x10) == 0;  	mWiimoteState.DrumsState.Pedal = (buff [offset + 5] & 0x04) == 0;  	mWiimoteState.DrumsState.Blue = (buff [offset + 5] & 0x08) == 0;  	mWiimoteState.DrumsState.Green = (buff [offset + 5] & 0x10) == 0;  	mWiimoteState.DrumsState.Yellow = (buff [offset + 5] & 0x20) == 0;  	mWiimoteState.DrumsState.Red = (buff [offset + 5] & 0x40) == 0;  	mWiimoteState.DrumsState.Orange = (buff [offset + 5] & 0x80) == 0;  	mWiimoteState.DrumsState.Joystick.X = (float)(mWiimoteState.DrumsState.RawJoystick.X - 0x1f) / 0x3f;  	// not fully accurate' but close  	mWiimoteState.DrumsState.Joystick.Y = (float)(mWiimoteState.DrumsState.RawJoystick.Y - 0x1f) / 0x3f;  	// not fully accurate' but close  	if ((buff [offset + 2] & 0x40) == 0) {  		int pad = (buff [offset + 2] >> 1) & 0x1f;  		int velocity = (buff [offset + 3] >> 5);  		if (velocity != 7) {  			switch (pad) {  			case 0x1b:  				mWiimoteState.DrumsState.PedalVelocity = velocity;  				break;  			case 0x19:  				mWiimoteState.DrumsState.RedVelocity = velocity;  				break;  			case 0x11:  				mWiimoteState.DrumsState.YellowVelocity = velocity;  				break;  			case 0x0f:  				mWiimoteState.DrumsState.BlueVelocity = velocity;  				break;  			case 0x0e:  				mWiimoteState.DrumsState.OrangeVelocity = velocity;  				break;  			case 0x12:  				mWiimoteState.DrumsState.GreenVelocity = velocity;  				break;  			}  		}  	}  	break;  case ExtensionType.BalanceBoard:  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight = (short)((short)buff [offset + 0] << 8 | buff [offset + 1]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight = (short)((short)buff [offset + 2] << 8 | buff [offset + 3]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft = (short)((short)buff [offset + 4] << 8 | buff [offset + 5]);  	mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft = (short)((short)buff [offset + 6] << 8 | buff [offset + 7]);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.TopRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.TopRight);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomLeft' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomLeft);  	mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight = GetBalanceBoardSensorValue (mWiimoteState.BalanceBoardState.SensorValuesRaw.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg0.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg17.BottomRight' mWiimoteState.BalanceBoardState.CalibrationInfo.Kg34.BottomRight);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft * KG2LB);  	mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight = (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight * KG2LB);  	mWiimoteState.BalanceBoardState.WeightKg = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight) / 4.0f;  	mWiimoteState.BalanceBoardState.WeightLb = (mWiimoteState.BalanceBoardState.SensorValuesLb.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.TopRight + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesLb.BottomRight) / 4.0f;  	float Kx = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft) / (mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	float Ky = (mWiimoteState.BalanceBoardState.SensorValuesKg.TopLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.TopRight) / (mWiimoteState.BalanceBoardState.SensorValuesKg.BottomLeft + mWiimoteState.BalanceBoardState.SensorValuesKg.BottomRight);  	mWiimoteState.BalanceBoardState.CenterOfGravity.X = ((float)(Kx - 1) / (float)(Kx + 1)) * (float)(-BSL / 2);  	mWiimoteState.BalanceBoardState.CenterOfGravity.Y = ((float)(Ky - 1) / (float)(Ky + 1)) * (float)(-BSW / 2);  	break;  }  
Missing Default,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following switch statement is missing a default case: switch (buff [offset + 2] & 0x1f) {  case 0x04:  	mWiimoteState.GuitarState.TouchbarState.Green = true;  	break;  case 0x07:  	mWiimoteState.GuitarState.TouchbarState.Green = true;  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	break;  case 0x0a:  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	break;  case 0x0c:  case 0x0d:  	mWiimoteState.GuitarState.TouchbarState.Red = true;  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	break;  case 0x12:  case 0x13:  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	break;  case 0x14:  case 0x15:  	mWiimoteState.GuitarState.TouchbarState.Yellow = true;  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	break;  case 0x17:  case 0x18:  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	break;  case 0x1a:  	mWiimoteState.GuitarState.TouchbarState.Blue = true;  	mWiimoteState.GuitarState.TouchbarState.Orange = true;  	break;  case 0x1f:  	mWiimoteState.GuitarState.TouchbarState.Orange = true;  	break;  }  
Missing Default,Bespoke.Common.Wiimote,Wiimote,C:\repos\maceyldn_CasparCGPlayout\Dependencies\OSCFramework\Bespoke.Common\src\Wiimote\Wiimote.cs,ParseExtension,The following switch statement is missing a default case: switch (pad) {  case 0x1b:  	mWiimoteState.DrumsState.PedalVelocity = velocity;  	break;  case 0x19:  	mWiimoteState.DrumsState.RedVelocity = velocity;  	break;  case 0x11:  	mWiimoteState.DrumsState.YellowVelocity = velocity;  	break;  case 0x0f:  	mWiimoteState.DrumsState.BlueVelocity = velocity;  	break;  case 0x0e:  	mWiimoteState.DrumsState.OrangeVelocity = velocity;  	break;  case 0x12:  	mWiimoteState.DrumsState.GreenVelocity = velocity;  	break;  }  
