Implementation smell,Namespace,Class,File,Method,Description
Long Method,GoogleMapsApi.StaticMaps,StaticMapsEngine,C:\repos\maximn_google-maps\GoogleMapsApi\StaticMaps\StaticMapsEngine.cs,GenerateStaticMapURL,The method has 235 lines of code.
Complex Method,GoogleMapsApi,HttpClientExtensions,C:\repos\maximn_google-maps\GoogleMapsApi\HttpClientExtensions.cs,DownloadData,Cyclomatic complexity of the method is 8
Complex Method,GoogleMapsApi.Entities.Directions.Request,DirectionsRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Request\DirectionsRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 14
Complex Method,GoogleMapsApi.Entities.DistanceMatrix.Request,DistanceMatrixRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\DistanceMatrix\Request\DistanceMatrixRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 17
Complex Method,GoogleMapsApi.Entities.Geocoding.Request,GeocodingRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Geocoding\Request\GeocodingRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 8
Complex Method,GoogleMapsApi.Entities.PlaceAutocomplete.Request,PlaceAutocompleteRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\PlaceAutocomplete\Request\PlaceAutocompleteRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 9
Complex Method,GoogleMapsApi.Entities.PlacesNearBy.Request,PlacesNearByRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\PlacesNearBy\Request\PlacesNearByRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 13
Complex Method,GoogleMapsApi.Entities.PlacesRadar.Request,PlacesRadarRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\PlacesRadar\Request\PlacesRadarRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 10
Complex Method,GoogleMapsApi.Entities.Places.Request,PlacesRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Places\Request\PlacesRequest.cs,GetQueryStringParameters,Cyclomatic complexity of the method is 13
Complex Method,GoogleMapsApi.StaticMaps,StaticMapsEngine,C:\repos\maximn_google-maps\GoogleMapsApi\StaticMaps\StaticMapsEngine.cs,GenerateStaticMapURL,Cyclomatic complexity of the method is 34
Long Statement,GoogleMapsApi,EngineFacade<TRequest;TResponse>,C:\repos\maximn_google-maps\GoogleMapsApi\EngineFacade.cs,QueryAsync,The length of the statement  "            return MapsAPIGenericEngine<TRequest' TResponse>.QueryGoogleAPIAsync(request' TimeSpan.FromMilliseconds(Timeout.Infinite)' token); " is 130.
Long Statement,GoogleMapsApi,HttpClientExtensions,C:\repos\maximn_google-maps\GoogleMapsApi\HttpClientExtensions.cs,DownloadData,The length of the statement  "                throw new ArgumentOutOfRangeException("address"' timeout' "The timeout value must be a positive or equal to InfiniteTimeout."); " is 127.
Long Statement,GoogleMapsApi,HttpClientExtensions,C:\repos\maximn_google-maps\GoogleMapsApi\HttpClientExtensions.cs,DownloadData,The length of the statement  "                throw new HttpRequestException($"Failed with HttpResponse: {httpResponse.StatusCode} and message: {httpResponse.ReasonPhrase}"); " is 128.
Long Statement,GoogleMapsApi.Entities.Directions.Request,DirectionsRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Request\DirectionsRequest.cs,GetQueryStringParameters,The length of the statement  "				parameters.Add("arrival_time"' UnixTimeConverter.DateTimeToUnixTimestamp(ArrivalTime).ToString(CultureInfo.InvariantCulture)); " is 126.
Long Statement,GoogleMapsApi.Entities.Directions.Request,DirectionsRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Request\DirectionsRequest.cs,GetQueryStringParameters,The length of the statement  "				parameters.Add("departure_time"' UnixTimeConverter.DateTimeToUnixTimestamp(DepartureTime).ToString(CultureInfo.InvariantCulture)); " is 130.
Long Statement,GoogleMapsApi.Entities.Directions.Response,DirectionsResponse,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\DirectionsResponse.cs,ToString,The length of the statement  "			return string.Format("DirectionsResponse - Status: {0}' Results count: {1}"' Status' Routes != null ? Routes.Count() : 0); " is 122.
Long Statement,GoogleMapsApi.Entities.DistanceMatrix.Request,DistanceMatrixRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\DistanceMatrix\Request\DistanceMatrixRequest.cs,GetQueryStringParameters,The length of the statement  "                throw new ArgumentException("A TrafficModel must not be specified unless the Mode is Driving and a DepartureTime is provided"); " is 127.
Long Statement,GoogleMapsApi.Entities.Elevation.Response,ElevationResponse,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Elevation\Response\ElevationResponse.cs,ToString,The length of the statement  "			return string.Format("ElevationResponse - Status: {0}' Results count: {1}"' Status' Results != null ? Results.Count() : 0); " is 123.
Long Statement,GoogleMapsApi.Entities.Geocoding.Response,GeocodingResponse,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Geocoding\Response\GeocodingResponse.cs,ToString,The length of the statement  "			return string.Format("GeocodingResponse - Status: {0}' Results count: {1}"' Status' Results != null ? Results.Count() : 0); " is 123.
Complex Conditional,GoogleMapsApi.Entities.DistanceMatrix.Request,DistanceMatrixRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\DistanceMatrix\Request\DistanceMatrixRequest.cs,GetQueryStringParameters,The conditional expression  "(!(Mode == null || Mode == DistanceMatrixTravelModes.driving) || DepartureTime == null)                  && TrafficModel != null"  is complex.
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.Directions.Response,OverviewPolyline,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Directions\Response\OverviewPolyline.cs,DecodePoints,The following statement contains a magic number: try  			{  				var poly = new List<Location>();  				int index = 0;  				int lat = 0;  				int lng = 0;    				while (index < EncodedPoints.Length)  				{  					int b' shift = 0' result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlat = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lat += dlat;    					shift = 0;  					result = 0;  					do  					{  						b = EncodedPoints[index++] - 63;  						result |= (b & 0x1f) << shift;  						shift += 5;  					} while (b >= 0x20);  					int dlng = ((result & 1) != 0 ? ~(result >> 1) : (result >> 1));  					lng += dlng;    					poly.Add(new Location(lat / 1E5' lng / 1E5));  				}    				points = poly.ToArray();  			}  			catch (Exception ex)  			{  				throw new PointsDecodingException("Couldn't decode points"' EncodedPoints' ex);  			}
Magic Number,GoogleMapsApi.Entities.PlacesNearBy.Request,PlacesNearByRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\PlacesNearBy\Request\PlacesNearByRequest.cs,GetQueryStringParameters,The following statement contains a magic number: if (Radius.HasValue && (Radius > 50000 || Radius < 1))  				throw new ArgumentException("Radius must be greater than or equal to 1 and less than or equal to 50000.");
Magic Number,GoogleMapsApi.Entities.PlacesRadar.Request,PlacesRadarRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\PlacesRadar\Request\PlacesRadarRequest.cs,GetQueryStringParameters,The following statement contains a magic number: if ((Radius > 50000 || Radius < 1)) 				throw new ArgumentException("Radius must be greater than or equal to 1 and less than or equal to 50000.");
Magic Number,GoogleMapsApi.Entities.Places.Request,PlacesRequest,C:\repos\maximn_google-maps\GoogleMapsApi\Entities\Places\Request\PlacesRequest.cs,GetQueryStringParameters,The following statement contains a magic number: if (Radius.HasValue && (Radius > 50000 || Radius < 1))  				throw new ArgumentException("Radius must be greater than or equal to 1 and less than or equal to 50000.");
