Implementation smell,Namespace,Class,File,Method,Description
Complex Method,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,Cyclomatic complexity of the method is 8
Long Parameter List,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The method has 5 parameters.
Long Statement,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The length of the statement  "				using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) { " is 128.
Long Statement,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,TestAsync,The length of the statement  "		var temp = await environment.ObjectMetadataAsync (new HashSet<NavObjectIdRange> ()' cancellationToken).ConfigureAwait (false); " is 126.
Long Statement,Statical.NavAdapter,NavObjectMetadata,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavObjectMetadata.cs,ToString,The length of the statement  "	return (new StringBuilder ()).Append ("NavObjectMetadata{").Append ("ObjectReference=").Append (ObjectReference.ToString ()).Append ("'").Append ("Name=").Append (Name).Append ("'").Append ("BlobSize=").Append (BlobSize).Append ("'").Append ("VersionList=").Append (VersionList).Append ("'").Append ("Time=").Append (Time).Append ("'").Append ("RowVersion=").Append (RowVersion).Append ("}").ToString (); " is 404.
Long Statement,Statical.NavAdapter,NavObjectReference,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavObjectReference.cs,ToString,The length of the statement  "	return (new StringBuilder ()).Append ("NavObjectReference{").Append ("Type=").Append (Type.ToString ()).Append ("'").Append ("Id=").Append (Id).Append ("}").ToString (); " is 169.
Empty Catch Block,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,TryEndProcess,The method has an empty catch block.
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var connection = new SqlConnection (environment.DbConnectionString)) {  	NavObjectType[] allObjectTypes = (NavObjectType[])Enum.GetValues (typeof(NavObjectType));  	var typeWhereClause = " Type IN (" + string.Join ("'"' allObjectTypes.Select (t => (int)t)) + ")";  	var idWhereClause = (idRanges.Count == 0) ? "1=1" : NavObjectIdRange.SqlWhereClause (idRanges);  	var query = @"SELECT                          ID'                          Type'                          Name'                          [BLOB Size]'                          [Version List]'                          Date'                          Time'                          timestamp                      FROM dbo.Object WITH (NOLOCK)                     WHERE " + typeWhereClause + " AND (" + idWhereClause + ")";  	await connection.OpenAsync (cancellationToken).ConfigureAwait (false);  	try {  		using (var command = new SqlCommand (query' connection)) {  			using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  				while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  					// fetch values  					var id = reader.GetInt32 (0);  					var type = reader.GetInt32 (1);  					var name = reader.GetString (2);  					var blobSize = reader.GetInt32 (3);  					var versionList = reader.GetString (4);  					var date = reader.GetDateTime (5);  					var time = reader.GetDateTime (6);  					var timestamp = reader.GetSqlBinary (7);  					var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  					var metadata = new NavObjectMetadata () {  						ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  						Name = name'  						BlobSize = blobSize'  						VersionList = versionList'  						Time = dateTime'  						RowVersion = ToHex (timestamp.Value)  					};  					result.Add (metadata);  				}  			}  		}  	}  	finally {  		connection.Close ();  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: try {  	using (var command = new SqlCommand (query' connection)) {  		using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  			while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  				// fetch values  				var id = reader.GetInt32 (0);  				var type = reader.GetInt32 (1);  				var name = reader.GetString (2);  				var blobSize = reader.GetInt32 (3);  				var versionList = reader.GetString (4);  				var date = reader.GetDateTime (5);  				var time = reader.GetDateTime (6);  				var timestamp = reader.GetSqlBinary (7);  				var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  				var metadata = new NavObjectMetadata () {  					ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  					Name = name'  					BlobSize = blobSize'  					VersionList = versionList'  					Time = dateTime'  					RowVersion = ToHex (timestamp.Value)  				};  				result.Add (metadata);  			}  		}  	}  }  finally {  	connection.Close ();  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var command = new SqlCommand (query' connection)) {  	using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  		while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  			// fetch values  			var id = reader.GetInt32 (0);  			var type = reader.GetInt32 (1);  			var name = reader.GetString (2);  			var blobSize = reader.GetInt32 (3);  			var versionList = reader.GetString (4);  			var date = reader.GetDateTime (5);  			var time = reader.GetDateTime (6);  			var timestamp = reader.GetSqlBinary (7);  			var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  			var metadata = new NavObjectMetadata () {  				ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  				Name = name'  				BlobSize = blobSize'  				VersionList = versionList'  				Time = dateTime'  				RowVersion = ToHex (timestamp.Value)  			};  			result.Add (metadata);  		}  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: using (var reader = await command.ExecuteReaderAsync (CommandBehavior.SingleResult' cancellationToken).ConfigureAwait (false)) {  	while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  		// fetch values  		var id = reader.GetInt32 (0);  		var type = reader.GetInt32 (1);  		var name = reader.GetString (2);  		var blobSize = reader.GetInt32 (3);  		var versionList = reader.GetString (4);  		var date = reader.GetDateTime (5);  		var time = reader.GetDateTime (6);  		var timestamp = reader.GetSqlBinary (7);  		var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  		var metadata = new NavObjectMetadata () {  			ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  			Name = name'  			BlobSize = blobSize'  			VersionList = versionList'  			Time = dateTime'  			RowVersion = ToHex (timestamp.Value)  		};  		result.Add (metadata);  	}  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,ObjectMetadataAsync,The following statement contains a magic number: while (await reader.ReadAsync (cancellationToken).ConfigureAwait (false)) {  	// fetch values  	var id = reader.GetInt32 (0);  	var type = reader.GetInt32 (1);  	var name = reader.GetString (2);  	var blobSize = reader.GetInt32 (3);  	var versionList = reader.GetString (4);  	var date = reader.GetDateTime (5);  	var time = reader.GetDateTime (6);  	var timestamp = reader.GetSqlBinary (7);  	var dateTime = new DateTime (date.Year' date.Month' date.Day' time.Hour' time.Minute' time.Second);  	var metadata = new NavObjectMetadata () {  		ObjectReference = new NavObjectReference ((NavObjectType)type' id)'  		Name = name'  		BlobSize = blobSize'  		VersionList = versionList'  		Time = dateTime'  		RowVersion = ToHex (timestamp.Value)  	};  	result.Add (metadata);  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,WaitAsync,The following statement contains a magic number: while (true) {  	cancellationToken.ThrowIfCancellationRequested ();  	if (process.HasExited) {  		break;  	}  	await Task.Run (() => process.WaitForExit (100));  }  
Magic Number,Statical.NavAdapter,NavAdapterHelper,C:\repos\StaticalCompany_PrismAdapter\src\NavAdapter\NavAdapterHelper.cs,WaitAsync,The following statement contains a magic number: await Task.Run (() => process.WaitForExit (100));  
