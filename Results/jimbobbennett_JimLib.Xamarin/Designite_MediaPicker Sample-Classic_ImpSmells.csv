Implementation smell,Namespace,Class,File,Method,Description
Long Method,MediaPickerSample,AppDelegate,D:\research\architectureSmells\repos\jimbobbennett_JimLib.Xamarin\Components\xamarin.mobile-0.7.2\samples\Xamarin.Mobile.iOS-Classic.Samples\MediaPickerSample-Classic\AppDelegate.cs,FinishedLaunching,The method has 102 lines of code.
Magic Number,MediaPickerSample,AppDelegate,D:\research\architectureSmells\repos\jimbobbennett_JimLib.Xamarin\Components\xamarin.mobile-0.7.2\samples\Xamarin.Mobile.iOS-Classic.Samples\MediaPickerSample-Classic\AppDelegate.cs,FinishedLaunching,The following statement contains a magic number: takeVideo.Tapped += () => {  				// Make sure video is supported and a camera is available  				if (!mediaPicker.VideosSupported || !mediaPicker.IsCameraAvailable) {  					ShowUnsupported();  					return;  				}    				// When capturing video' we can hint at the desired quality and length.  				// DesiredLength is only a hint' however' and the resulting video may  				// be longer than desired.  				mediaPickerController = mediaPicker.GetTakeVideoUI (new StoreVideoOptions {  					Quality = VideoQuality.Medium'  					DesiredLength = TimeSpan.FromSeconds (10)'  					Directory = "MediaPickerSample"'  					Name = "test.mp4"  				});    				dialogController.PresentViewController (mediaPickerController' true' null);    				mediaPickerController.GetResultAsync().ContinueWith (t => {  					// We need to dismiss the controller ourselves  					dialogController.DismissViewController (true' () => {  						// User canceled or something went wrong  						if (t.IsCanceled || t.IsFaulted)  							return;    						// We get back a MediaFile  						MediaFile media = t.Result;  						ShowVideo (media);  					});  				}' uiScheduler); // Make sure we use the UI thread to show our video.  			};
