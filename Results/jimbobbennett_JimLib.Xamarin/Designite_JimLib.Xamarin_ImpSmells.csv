Implementation smell,Namespace,Class,File,Method,Description
Long Parameter List,JimBobBennett.JimLib.Xamarin.Images,IImageHelper,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Images\IImageHelper.cs,GetImageAsync,The method has 8 parameters. Parameters: baseUrl' resource' username' password' timeout' headers' options' canCache
Long Identifier,JimBobBennett.JimLib.Xamarin.Controls,ToolBar,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Controls\ToolBar.cs,ButtonsOnCollectionChanged,The length of the parameter notifyCollectionChangedEventArgs is 32.
Long Identifier,JimBobBennett.JimLib.Xamarin.Controls,ExtendedLabel,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Controls\ExtendedLabel.cs,,The length of the parameter AdjustFontSizeToFitWidthProperty is 32.
Long Identifier,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,,The length of the parameter OpacityBackgroundColorProperty is 30.
Long Identifier,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,,The length of the parameter BusyIndicatorBackgroundColorProperty is 36.
Long Identifier,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,,The length of the parameter BackgroundImageOpacityProperty is 30.
Long Statement,JimBobBennett.JimLib.Xamarin.Controls,ImageSourceConverter,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Controls\ImageSourceConverter.cs,ConvertFrom,The length of the statement  "                throw new InvalidOperationException(string.Format("Conversion failed: \"{0}\" into {1}"' new[] {value' typeof (ImageSource)})); " is 127.
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Address,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Address.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (StreetAddress != null ? StreetAddress.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (City != null ? City.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Region != null ? Region.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Country != null ? Country.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (PostalCode != null ? PostalCode.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Email,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Email.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Address != null ? Address.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) AddressType;                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Email,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Email.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Address != null ? Address.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (int) AddressType;                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,InstantMessagingAccount,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\InstantMessagingAccount.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Service;                  hashCode = (hashCode*397) ^ (ServiceLabel != null ? ServiceLabel.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Account != null ? Account.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,InstantMessagingAccount,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\InstantMessagingAccount.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Service;                  hashCode = (hashCode*397) ^ (ServiceLabel != null ? ServiceLabel.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Account != null ? Account.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Phone,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Phone.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Number != null ? Number.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Contacts,Phone,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Contacts\Phone.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (int) Type;                  hashCode = (hashCode*397) ^ (Label != null ? Label.GetHashCode() : 0);                  hashCode = (hashCode*397) ^ (Number != null ? Number.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Controls,CardView,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Controls\CardView.cs,CreateViewCard,The following statement contains a magic number: var view = new ContentView              {                  Content = (View) ItemTemplate.CreateContent()'                  BindingContext = o'                  Padding = new Thickness(2)'                  HorizontalOptions = LayoutOptions.Center'                  VerticalOptions = LayoutOptions.Start'                  WidthRequest = (Width / columnCount) - 20              };
Magic Number,JimBobBennett.JimLib.Xamarin.Controls,CardView,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Controls\CardView.cs,CreateViewCard,The following statement contains a magic number: var view = new ContentView              {                  Content = (View) ItemTemplate.CreateContent()'                  BindingContext = o'                  Padding = new Thickness(2)'                  HorizontalOptions = LayoutOptions.Center'                  VerticalOptions = LayoutOptions.Start'                  WidthRequest = (Width / columnCount) - 20              };
Magic Number,JimBobBennett.JimLib.Xamarin.SocialMedia,Account,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\SocialMedia\Account.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (UserId != null ? UserId.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.SocialMedia,Account,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\SocialMedia\Account.cs,GetHashCode,The following statement contains a magic number: unchecked              {                  var hashCode = (Name != null ? Name.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (Type != null ? Type.GetHashCode() : 0);                  hashCode = (hashCode * 397) ^ (UserId != null ? UserId.GetHashCode() : 0);                  return hashCode;              }
Magic Number,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,BaseContentPage,The following statement contains a magic number: _opacityGrid.Opacity = 0.75;
Magic Number,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,BaseContentPage,The following statement contains a magic number: Padding = new Thickness(0' Device.OnPlatform(20' 0' 0)' 0' 0);
Magic Number,JimBobBennett.JimLib.Xamarin.Views,BaseContentPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\BaseContentPage.cs,SetPadding,The following statement contains a magic number: if (ParentIsNavigationPage(Parent) && Padding == new Thickness(0' Device.OnPlatform(20' 0' 0)' 0' 0))                  Padding = new Thickness(0' 0' 0' 0);
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: var doneButtonContentView = new ContentView              {                  Padding = new Thickness(0' 0' 20' 0)'                  Content = doneButton              };
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: var imageContentView = new ContentView              {                  Padding = new Thickness(10' 0' 10' 0)'                  Content = image              };
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: var imageContentView = new ContentView              {                  Padding = new Thickness(10' 0' 10' 0)'                  Content = image              };
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: Grid.SetRow(titleLabel' 2);
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: Grid.SetRow(textLabel' 3);
Magic Number,JimBobBennett.JimLib.Xamarin.Views,ImageViewerPage,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Views\ImageViewerPage.cs,BuildControls,The following statement contains a magic number: Grid.SetRow(toolBar' 4);
Missing Default,JimBobBennett.JimLib.Xamarin.Navigation,NavigationStackManager,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Navigation\NavigationStackManager.cs,PopAsync,The following switch statement is missing a default case: switch (top.Item2)              {                  case PageState.Normal:                      _pages.Pop();                      await top.Item1.Navigation.PopAsync();                      OnPagePopped(top.Item1);                      break;                  case PageState.Modal:                      _pages.Pop();                      await top.Item1.Navigation.PopModalAsync();                      OnPagePopped(top.Item1);                      break;              }
Missing Default,JimBobBennett.JimLib.Xamarin.Navigation,NavigationStackManager,C:\repos\jimbobbennett_JimLib.Xamarin\JimLib.Xamarin\Navigation\NavigationStackManager.cs,RollbackToRootAsync,The following switch statement is missing a default case: switch (top.Item2)                  {                      case PageState.Modal:                          await top.Item1.Navigation.PopModalAsync();                          break;                      case PageState.Normal:                          await top.Item1.Navigation.PopAsync();                          break;                  }
