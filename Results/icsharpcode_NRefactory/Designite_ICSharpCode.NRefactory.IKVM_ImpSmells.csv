Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,LoadAssembly,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,CreateTypeReference,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,Cyclomatic complexity of the method is 19
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ConvertMarshalInfo,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,InitMembers,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadMethod,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadConstructor,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadParameter,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadProperty,Cyclomatic complexity of the method is 8
Long Identifier,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,,The length of the parameter assemblyVersionAttributeTypeRef is 31.
Long Identifier,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,,The length of the parameter permissionSetAttributeTypeReference is 35.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,LoadAssemblyFile,The length of the statement  "			using (var universe = new Universe (UniverseOptions.DisablePseudoCustomAttributeRetrieval | UniverseOptions.SupressReferenceTypeIdentityConversion | UniverseOptions.ResolveMissingMembers)) { " is 190.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,LoadAssemblyFile,The length of the statement  "			using (var universe = new Universe (UniverseOptions.DisablePseudoCustomAttributeRetrieval | UniverseOptions.SupressReferenceTypeIdentityConversion)) { " is 150.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,CreateTypeReference,The length of the statement  "				return TypeParameterReference.Create (type.DeclaringMethod != null ? SymbolKind.Method : SymbolKind.TypeDefinition' type.GenericParameterPosition); " is 147.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,CreateTypeReference,The length of the statement  "			return interningProvider.Intern (new GetClassTypeReference (GetAssemblyReference (type.Assembly)' ns' name' typeParameterCount)); " is 129.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The length of the statement  "				var assemblyVersion = new DefaultUnresolvedAttribute(assemblyVersionAttributeTypeRef' new[] { KnownTypeReference.String }); " is 123.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The length of the statement  "						dllImport.AddNamedFieldArgument("CallingConvention"' CreateSimpleConstantValue(callingConventionTypeRef' (int)callingConvention)); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The length of the statement  "				LayoutKind defaultLayoutKind = (typeDefinition.IsValueType && !typeDefinition.IsEnum) ? LayoutKind.Sequential: LayoutKind.Auto; " is 127.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ConvertMarshalInfo,The length of the statement  "			DefaultUnresolvedAttribute attr = new DefaultUnresolvedAttribute(marshalAsAttributeTypeRef' new[] { unmanagedTypeTypeRef }); " is 124.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ConvertMarshalInfo,The length of the statement  "					attr.AddNamedFieldArgument("ArraySubType"' CreateSimpleConstantValue(unmanagedTypeTypeRef' (int)marshalInfo.ArraySubType.Value)); " is 129.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ConvertMarshalInfo,The length of the statement  "				attr.AddNamedFieldArgument("SafeArraySubType"' CreateSimpleConstantValue(typeof(VarEnum).ToTypeReference()' (int)marshalInfo.SafeArraySubType)); " is 144.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ConvertMarshalInfo,The length of the statement  "					attr.AddNamedFieldArgument("ArraySubType"' CreateSimpleConstantValue(unmanagedTypeTypeRef' (int)marshalInfo.ArraySubType)); " is 123.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddCustomAttributes,The length of the statement  "					if (type.__Name == "DynamicAttribute" || type.__Name == "ExtensionAttribute" || type.__Name == "DecimalConstantAttribute") " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,CreateTopLevelTypeDefinition,The length of the statement  "			var td = new DefaultUnresolvedTypeDefinition(typeDefinition.Namespace ?? ""' ReflectionHelper.SplitTypeParameterCountFromReflectionName (typeDefinition.Name)); " is 159.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,InitMembers,The length of the statement  "						else if (property.Name.EndsWith(".Item"' StringComparison.Ordinal) /*&& (property.GetMethod ?? property.SetMethod).HasOverrides*/) { " is 132.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadConstructor,The length of the statement  "			m.HasBody = !method.DeclaringType.IsInterface && (method.GetMethodImplementationFlags () & MethodImplAttributes.CodeTypeMask) == MethodImplAttributes.IL; " is 153.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			// DecimalConstantAttribute has the arguments (byte scale' byte sign' uint hi' uint mid' uint low) or (byte scale' byte sign' int hi' int mid' int low) " is 151.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			// Both of these invoke the Decimal constructor (int lo' int mid' int hi' bool isNegative' byte scale) with explicit argument conversions if required. " is 150.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			if (!ctorArgs.Select(a => a.GetType()).SequenceEqual(new[] { typeof(byte)' typeof(byte)' typeof(int)' typeof(int)' typeof(int) })) " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,ReadProperty,The length of the statement  "				p.Accessibility = MergePropertyAccessibility (GetAccessibility (property.GetMethod.Attributes)' GetAccessibility (property.SetMethod.Attributes)); " is 146.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The conditional expression  "layoutKind != defaultLayoutKind || charSet != CharSet.Ansi || packingSize > 0 || typeSize > 0"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,InitNestedTypes,The conditional expression  "IncludeInternalMembers  					|| nestedTypeDef.IsNestedPublic  				    || nestedTypeDef.IsNestedFamily  				    || nestedTypeDef.IsNestedFamORAssem"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,IsModule,The conditional expression  "dt.__Name == "StandardModuleAttribute" && dt.__Namespace == "Microsoft.VisualBasic.CompilerServices"   				    || dt.__Name == "CompilerGlobalScopeAttribute" && dt.__Namespace == "System.Runtime.CompilerServices""  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,MergePropertyAccessibility,The conditional expression  "left == Accessibility.Protected && right == Accessibility.Internal ||   			    left == Accessibility.Internal && right == Accessibility.Protected"  is complex.
Magic Number,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: if (attribute.ConstructorArguments.Count != 5)  				return null;
Magic Number,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Magic Number,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Magic Number,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Magic Number,ICSharpCode.NRefactory.TypeSystem.Implementation,ListComparer,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\NonFrozenInterningProvider.cs,GetHashCode,The following statement contains a magic number: unchecked {  					foreach (object o in obj) {  						hashCode *= 27;  						hashCode += RuntimeHelpers.GetHashCode(o);  					}  				}
Missing Default,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (flags & ImplMapFlags.CharSetMask) {  						case ImplMapFlags.CharSetAnsi:  							charSet = CharSet.Ansi;  							break;  						case ImplMapFlags.CharSetAuto:  							charSet = CharSet.Auto;  							break;  						case ImplMapFlags.CharSetUnicode:  							charSet = CharSet.Unicode;  							break;  					}
Missing Default,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.LayoutMask) {  				case TypeAttributes.SequentialLayout:  				layoutKind = LayoutKind.Sequential;  				break;  				case TypeAttributes.ExplicitLayout:  				layoutKind = LayoutKind.Explicit;  				break;  			}
Missing Default,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.StringFormatMask) {  				case TypeAttributes.AnsiClass:  				charSet = CharSet.Ansi;  				break;  				case TypeAttributes.AutoClass:  				charSet = CharSet.Auto;  				break;  				case TypeAttributes.UnicodeClass:  				charSet = CharSet.Unicode;  				break;  			}
Missing Default,ICSharpCode.NRefactory.TypeSystem,IkvmLoader,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.IKVM\IkvmLoader.cs,InitTypeModifiers,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.VisibilityMask) {  				case TypeAttributes.NotPublic:  				case TypeAttributes.NestedAssembly:  					td.Accessibility = Accessibility.Internal;  					break;  				case TypeAttributes.Public:  				case TypeAttributes.NestedPublic:  					td.Accessibility = Accessibility.Public;  					break;  				case TypeAttributes.NestedPrivate:  					td.Accessibility = Accessibility.Private;  					break;  				case TypeAttributes.NestedFamily:  					td.Accessibility = Accessibility.Protected;  					break;  				case TypeAttributes.NestedFamANDAssem:  					td.Accessibility = Accessibility.ProtectedAndInternal;  					break;  				case TypeAttributes.NestedFamORAssem:  					td.Accessibility = Accessibility.ProtectedOrInternal;  					break;  			}
