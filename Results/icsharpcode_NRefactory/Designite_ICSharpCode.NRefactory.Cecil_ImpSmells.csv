Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The method has 107 lines of code.
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,LoadModule,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,CreateType,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,Cyclomatic complexity of the method is 26
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ConvertMarshalInfo,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,InitMembers,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ReadMethod,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ReadParameter,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ReadProperty,Cyclomatic complexity of the method is 9
Long Identifier,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,LoadModule,The length of the parameter cecilLoaderCloneForLazyLoading is 30.
Long Identifier,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,,The length of the parameter assemblyVersionAttributeTypeRef is 31.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,LoadModule,The length of the statement  "			this.currentAssembly = new CecilUnresolvedAssembly(assemblyDefinition != null ? assemblyDefinition.Name.FullName : moduleDefinition.Name' this.DocumentationProvider); " is 166.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,CreateType,The length of the statement  "				return TypeParameterReference.Create(typeGP.Owner is MethodReference ? SymbolKind.Method : SymbolKind.TypeDefinition' typeGP.Position); " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,CreateType,The length of the statement  "					return interningProvider.Intern(new GetClassTypeReference(GetAssemblyReference(type.Scope)' ns' name' typeParameterCount)); " is 123.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "				var assemblyVersion = new DefaultUnresolvedAttribute(assemblyVersionAttributeTypeRef' new[] { KnownTypeReference.String }); " is 123.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "				assemblyVersion.PositionalArguments.Add(CreateSimpleConstantValue(KnownTypeReference.String' assembly.Name.Version.ToString())); " is 128.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "					dllImport.AddNamedFieldArgument("CallingConvention"' CreateSimpleConstantValue(callingConventionTypeRef' (int)callingConvention)); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "			LayoutKind defaultLayoutKind = (typeDefinition.IsValueType && !typeDefinition.IsEnum) ? LayoutKind.Sequential: LayoutKind.Auto; " is 127.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "			if (layoutKind != defaultLayoutKind || charSet != CharSet.Ansi || typeDefinition.PackingSize > 0 || typeDefinition.ClassSize > 0) { " is 131.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "				DefaultUnresolvedAttribute structLayout = new DefaultUnresolvedAttribute(structLayoutAttributeTypeRef' new[] { layoutKindTypeRef }); " is 132.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "					structLayout.AddNamedFieldArgument("Pack"' CreateSimpleConstantValue(KnownTypeReference.Int32' (int)typeDefinition.PackingSize)); " is 129.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "					structLayout.AddNamedFieldArgument("Size"' CreateSimpleConstantValue(KnownTypeReference.Int32' (int)typeDefinition.ClassSize)); " is 127.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The length of the statement  "				DefaultUnresolvedAttribute fieldOffset = new DefaultUnresolvedAttribute(fieldOffsetAttributeTypeRef' new[] { KnownTypeReference.Int32 }); " is 137.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ConvertMarshalInfo,The length of the statement  "			DefaultUnresolvedAttribute attr = new DefaultUnresolvedAttribute(marshalAsAttributeTypeRef' new[] { unmanagedTypeTypeRef }); " is 124.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ConvertMarshalInfo,The length of the statement  "				attr.AddNamedFieldArgument("SafeArraySubType"' CreateSimpleConstantValue(typeof(VarEnum).ToTypeReference()' (int)sami.ElementType)); " is 132.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ConvertMarshalInfo,The length of the statement  "					attr.AddNamedFieldArgument("SizeParamIndex"' CreateSimpleConstantValue(KnownTypeReference.Int16' (short)ami.SizeParameterIndex)); " is 129.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ConvertMarshalInfo,The length of the statement  "					attr.AddNamedFieldArgument("MarshalType"' CreateSimpleConstantValue(KnownTypeReference.String' cmi.ManagedType.FullName)); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,InitMembers,The length of the statement  "							} else if (property.Name.EndsWith(".Item"' StringComparison.Ordinal) && (property.GetMethod ?? property.SetMethod).HasOverrides) { " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,HasExtensionAttribute,The length of the statement  "					if (attr.AttributeType.Name == "ExtensionAttribute" && attr.AttributeType.Namespace == "System.Runtime.CompilerServices") " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			// DecimalConstantAttribute has the arguments (byte scale' byte sign' uint hi' uint mid' uint low) or (byte scale' byte sign' int hi' int mid' int low) " is 151.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			// Both of these invoke the Decimal constructor (int lo' int mid' int hi' bool isNegative' byte scale) with explicit argument conversions if required. " is 150.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The length of the statement  "			if (!ctorArgs.Select(a => a.GetType()).SequenceEqual(new[] { typeof(byte)' typeof(byte)' typeof(int)' typeof(int)' typeof(int) })) " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ReadField,The length of the statement  "				var decConstant = field.CustomAttributes.FirstOrDefault(a => a.AttributeType.FullName == "System.Runtime.CompilerServices.DecimalConstantAttribute"); " is 149.
Long Statement,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,ReadProperty,The length of the statement  "				p.Accessibility = MergePropertyAccessibility (GetAccessibility (property.GetMethod.Attributes)' GetAccessibility (property.SetMethod.Attributes)); " is 146.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The conditional expression  "layoutKind != defaultLayoutKind || charSet != CharSet.Ansi || typeDefinition.PackingSize > 0 || typeDefinition.ClassSize > 0"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,InitNestedTypes,The conditional expression  "this.IncludeInternalMembers  				    || visibility == TypeAttributes.NestedPublic  				    || visibility == TypeAttributes.NestedFamily  				    || visibility == TypeAttributes.NestedFamORAssem"  is complex.
Complex Conditional,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,MergePropertyAccessibility,The conditional expression  "left == Accessibility.Protected && right == Accessibility.Internal ||  			    left == Accessibility.Internal && right == Accessibility.Protected"  is complex.
Virtual Method Call from Constructor,ICSharpCode.NRefactory.TypeSystem,LazyCecilTypeDefinition,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,LazyCecilTypeDefinition,The constructor "LazyCecilTypeDefinition" calls a virtual method "ApplyInterningProvider".
Magic Number,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: attribute.ConstructorArguments.Count != 5
Magic Number,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Magic Number,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Magic Number,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,TryDecodeDecimalConstantAttribute,The following statement contains a magic number: return new decimal((int)ctorArgs[4]' (int)ctorArgs[3]' (int)ctorArgs[2]' (byte)ctorArgs[1] != 0' (byte)ctorArgs[0]);
Missing Default,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (info.Attributes & PInvokeAttributes.CharSetMask) {  					case PInvokeAttributes.CharSetAnsi:  						charSet = CharSet.Ansi;  						break;  					case PInvokeAttributes.CharSetAuto:  						charSet = CharSet.Auto;  						break;  					case PInvokeAttributes.CharSetUnicode:  						charSet = CharSet.Unicode;  						break;  				}
Missing Default,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.LayoutMask) {  				case TypeAttributes.SequentialLayout:  					layoutKind = LayoutKind.Sequential;  					break;  				case TypeAttributes.ExplicitLayout:  					layoutKind = LayoutKind.Explicit;  					break;  			}
Missing Default,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddAttributes,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.StringFormatMask) {  				case TypeAttributes.AnsiClass:  					charSet = CharSet.Ansi;  					break;  				case TypeAttributes.AutoClass:  					charSet = CharSet.Auto;  					break;  				case TypeAttributes.UnicodeClass:  					charSet = CharSet.Unicode;  					break;  			}
Missing Default,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,InitTypeModifiers,The following switch statement is missing a default case: switch (typeDefinition.Attributes & TypeAttributes.VisibilityMask) {  				case TypeAttributes.NotPublic:  				case TypeAttributes.NestedAssembly:  					td.Accessibility = Accessibility.Internal;  					break;  				case TypeAttributes.Public:  				case TypeAttributes.NestedPublic:  					td.Accessibility = Accessibility.Public;  					break;  				case TypeAttributes.NestedPrivate:  					td.Accessibility = Accessibility.Private;  					break;  				case TypeAttributes.NestedFamily:  					td.Accessibility = Accessibility.Protected;  					break;  				case TypeAttributes.NestedFamANDAssem:  					td.Accessibility = Accessibility.ProtectedAndInternal;  					break;  				case TypeAttributes.NestedFamORAssem:  					td.Accessibility = Accessibility.ProtectedOrInternal;  					break;  			}
Missing Default,ICSharpCode.NRefactory.TypeSystem,CecilLoader,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Cecil\CecilLoader.cs,AddConstraints,The following switch statement is missing a default case: switch (g.Attributes & GenericParameterAttributes.VarianceMask) {  				case GenericParameterAttributes.Contravariant:  					tp.Variance = VarianceModifier.Contravariant;  					break;  				case GenericParameterAttributes.Covariant:  					tp.Variance = VarianceModifier.Covariant;  					break;  			}
