Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,GetAction,The method has 136 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,ExtractExpression,The method has 101 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The method has 117 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The method has 108 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The method has 153 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The method has 217 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The method has 152 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,The method has 139 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The method has 192 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The method has 122 lines of code.
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,GetActions,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,GetAction,Cyclomatic complexity of the method is 26
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetExpressionToReplace,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetTransformedAssignmentExpression,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,ExtractExpression,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ChangeAccessModifierAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ChangeAccessModifierAction.cs,GetActions,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,StatementsToInitializerConverter,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\StatementsToInitializerConverter.cs,TryHandleAddCall,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CopyCommentsFromInterface,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CopyCommentsFromInterface.cs,GetAction,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,AddImplementation,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEnumValue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEnumValue.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromInvocation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetAction,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetDefaultValueExpression,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreatePropertyAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreatePropertyAction.cs,GetActions,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GenerateImplementation,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,Cyclomatic complexity of the method is 29
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBracesAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBracesAction.cs,IsSpecialNode,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,FixLockThisIssue,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterizedEntityDeclaration,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNamedResolveResult,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeExpression,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsExplicitImplementation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckTypeCast,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIndexerDeclaration,Cyclomatic complexity of the method is 15
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitReturnStatement,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckConversion,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,Cyclomatic complexity of the method is 22
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitLambdaExpression,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,FindReferences,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,SplitNode,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNullComparison,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckParameters,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitArrayCreateExpression,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetValidParameterNames,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CollectIssues,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessNodes,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessNode,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,RecursiveDetector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\FunctionNeverReturnsIssue.cs,CheckRecursion,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,ConvertToValidName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddExceptionDescriptionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddExceptionDescriptionAction.cs,GetAction,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CS0126ReturnMustBeFollowedByAnyExpression,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\CompilerErrors\CS0126ReturnMustBeFollowedByAnyExpression.cs,GetRequestedReturnType,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Subtract,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Add,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetAction,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddOptionalParameterToInvocationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddOptionalParameterToInvocationAction.cs,GetActions,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,VariableOnlyAssignedIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\VariableOnlyAssignedIssue.cs,TestOnlyAssigned,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,GetActions,Cyclomatic complexity of the method is 9
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ChangeAccessModifierAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ChangeAccessModifierAction.cs,GetActionForLevel,The method has 5 parameters. Parameters: context' accessName' access' node' selectedNode
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The method has 6 parameters. Parameters: context' declaringType' eventDeclaration' initializer' invokeMethod' useExplictType
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateAction,The method has 8 parameters. Parameters: context' createFromNode' methodName' returnType' parameters' createInOtherType' isStatic' targetResolveResult
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBody,The method has 5 parameters. Parameters: entityType' node' body' member' accessorRole
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNamedResolveResult,The method has 5 parameters. Parameters: resolveResult' node' entity' identifier' accessibilty
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The method has 5 parameters. Parameters: outerTypeCastNode' typeCastNode' expr' start' end
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,HandleMemberReference,The method has 6 parameters. Parameters: wholeNode' targetNode' memberName' typeArguments' mode' action
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The method has 6 parameters. Parameters: validInvocations' isVoid' isParameterizedTask' returnedContinuation' taskCompletionSourceIdentifier' blockStatement
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,CheckName,The method has 5 parameters. Parameters: ctx' name' entity' accessibilty' isStatic
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToReturnStatementAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToReturnStatementAction.cs,GetMatch,The method has 5 parameters. Parameters: ifElseStatement' condition' expr1' expr2' returnStatement
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The method has 5 parameters. Parameters: ctx' ifElseStatement' match' isExpression' foundCastCount
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,SearchCasts,The method has 5 parameters. Parameters: ctx' embeddedStatement' obj' type' rr
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The method has 5 parameters. Parameters: condition' initializer' direction' step' newInitializer
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,MoveToOuterScopeAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\MoveToOuterScopeAction.cs,RemoveInitializer,The length of the parameter newVariableDeclarationStatement is 31.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetChecker,The length of the parameter initializerDependsOnReferenceType is 33.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The length of the parameter taskCompletionSourceIdentifier is 30.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The length of the parameter taskCompletionSourceResolveResult is 33.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The length of the parameter taskCompletionSourceIdentifier is 30.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The length of the parameter continuationLambdaResolveResult is 31.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssuesForClauses,The length of the parameter removeAllRedundantClausesAction is 31.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,,The length of the parameter errorsIndicatingWrongNumberOfArguments is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,,The length of the parameter inUsingStatementResourceAcquisition is 35.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,GetAction,The length of the parameter comparedNodeIdentifierExpression is 32.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,,The length of the parameter ReturnTaskCompletionSourcePattern is 33.
Long Identifier,ICSharpCode.NRefactory.CSharp,GatherVisitorBase<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp,RefactoringExtensions,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\RefactoringExtensions.cs,,The length of the parameter localVariableDeclarationSpaceCreators is 37.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,CreateNotImplementedBody,The length of the statement  "			throwStatement = new ThrowStatement(new ObjectCreateExpression(context.CreateShortType("System"' "NotImplementedException"))); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The length of the statement  "			yield return new CodeAction (pdecl.Setter.IsNull ? context.TranslateString("Add setter") : context.TranslateString("Add getter")' script => { " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,BuildAccessorStatement,The length of the statement  "					return new AssignmentExpression (new IdentifierExpression (field.Name)' AssignmentOperatorType.Assign' new IdentifierExpression ("value")); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,CollectNodes,The length of the statement  "						if (children.ElementAt(j) is Expression && children.ElementAt(j).Role == Roles.Argument && !(children.ElementAt(j) is NamedArgumentExpression)) { " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddUsingAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddUsingAction.cs,NewUsingAction,The length of the statement  "			return new CodeAction("using " + ns + ";"' s => UsingHelper.InsertUsingAndRemoveRedundantNamespaceUsage(context' s' ns)' node); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,IsUnaryModifierExpression,The length of the statement  "			return expr.Operator == UnaryOperatorType.Increment || expr.Operator == UnaryOperatorType.PostIncrement || expr.Operator == UnaryOperatorType.Decrement || expr.Operator == UnaryOperatorType.PostDecrement; " is 204.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CheckIfParameterIsNullAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs,GetAction,The length of the statement  "					Condition = new BinaryOperatorExpression (new IdentifierExpression (parameter.Name)' BinaryOperatorType.Equality' new NullReferenceExpression ())' " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CheckIfParameterIsNullAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs,GetAction,The length of the statement  "					TrueStatement = new ThrowStatement (new ObjectCreateExpression (context.CreateShortType("System"' "ArgumentNullException")' new PrimitiveExpression (parameter.Name))) " is 166.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CheckNullVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs,VisitIfElseStatement,The length of the statement  "					if ((binOp.Operator == BinaryOperatorType.Equality || binOp.Operator == BinaryOperatorType.InEquality) && pattern.IsMatch(binOp)) { " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,GenerateTarget,The length of the statement  "			var rr = context.Resolver.GetResolverStateBefore(bOp).LookupSimpleNameOrTypeName("Equals"' emptyTypes' NameLookupMode.Expression) as MethodGroupResolveResult; " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The length of the statement  "			if (rr == null || rr.IsError || rr.Member.Name != "Equals" || !rr.Member.DeclaringType.IsKnownType(KnownTypeCode.Object)) " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "				var initializer = hasIndexAccess ? new VariableDeclarationStatement(new PrimitiveType("int")' name' new PrimitiveExpression(0)) : " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "				                  new VariableDeclarationStatement(new SimpleType("var")' name' new InvocationExpression(new MemberReferenceExpression (inExpression.Clone ()' "GetEnumerator"))); " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "					hasIndexAccess ? (Expression)new IndexerExpression(inExpression.Clone()' id3) : new MemberReferenceExpression(id1' "Current") " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "					Condition = hasIndexAccess ? (Expression)new BinaryOperatorExpression (id1' BinaryOperatorType.LessThan' new MemberReferenceExpression (inExpression.Clone ()' countProperty)) : " is 176.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "				initializer.Variables.Add(new VariableInitializer(optimizedUpperBound' new MemberReferenceExpression (inExpression.Clone ()' countProperty))); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "					Condition = new BinaryOperatorExpression (id1' BinaryOperatorType.LessThan' new IdentifierExpression(optimizedUpperBound))' " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMethodGroupToAnonymousMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToAnonymousMethodAction.cs,GetActions,The length of the statement  "					var expr = new InvocationExpression(node.Clone()' invocationMethod.Parameters.Select(p => new IdentifierExpression(context.GetNameProposal(p.Name)))); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMethodGroupToLambdaAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToLambdaAction.cs,GetActions,The length of the statement  "					var invocation = new InvocationExpression(node.Clone()' invocationMethod.Parameters.Select(p => new IdentifierExpression(context.GetNameProposal(p.Name)))); " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InitializerConversionVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\ConvertInitializerToExplicitInitializationsAction.cs,VisitChildren,The length of the statement  "				if (node is Expression && !(node is ObjectCreateExpression || node is ArrayInitializerExpression || node is NamedExpression)){ " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementsToInitializerConverter,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\StatementsToInitializerConverter.cs,VariableHasBeenConverted,The length of the statement  "			return accessPaths.Any(item => item.Key != null && item.Key.VariableRoot != null && item.Key.VariableRoot.Equals(variable)); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,GetActions,The length of the statement  "				var methodDeclaration = CreateEventInvocatorAction.CreateEventInvocator (context' type' eventDeclaration' eventDeclaration.Variables.First ()' resolvedType.GetDelegateInvokeMethod ()' false); " is 191.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,CreateChangedEventDeclaration,The length of the statement  "				Modifiers = propertyDeclaration.HasModifier (Modifiers.Static) ? Modifiers.Public | Modifiers.Static : Modifiers.Public' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,ImplementConstraints,The length of the statement  "				result.AddChild (new ConstructorDeclaration { Modifiers = Modifiers.Public' Body = new BlockStatement () }' Roles.TypeMemberRole); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,CreateClassFromObjectCreation,The length of the statement  "			if (guessedType.Kind == TypeKind.Interface || guessedType.Kind == TypeKind.Class && guessedType.GetDefinition ().IsAbstract) { " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateConstructorDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateConstructorDeclarationAction.cs,GetActions,The length of the statement  "			if (resolveResult == null || !resolveResult.IsError || resolveResult.Member.DeclaringTypeDefinition == null || resolveResult.Member.DeclaringTypeDefinition.IsSealed || resolveResult.Member.DeclaringTypeDefinition.Region.IsEmpty) " is 228.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEnumValue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEnumValue.cs,GetCreatePropertyOrFieldNode,The length of the statement  "			return context.GetNode(n => n is IdentifierExpression || n is MemberReferenceExpression || n is NamedExpression) as Expression; " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "				arguments.Add(eventDeclaration.HasModifier (Modifiers.Static) ? (Expression)new PrimitiveExpression (null) : new ThisReferenceExpression()); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "			var modifiers = eventDeclaration.HasModifier(Modifiers.Static) ? Modifiers.Static : Modifiers.Protected | Modifiers.Virtual; " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "						Condition = new BinaryOperatorExpression (new IdentifierExpression (handlerName)' BinaryOperatorType.InEquality' new PrimitiveExpression (null))' " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,GetActions,The length of the statement  "				var methodDeclaration = CreateEventInvocator (context' type' eventDeclaration' initializer' invokeMethod' UseExplictType); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetCreatePropertyOrFieldNode,The length of the statement  "			return context.GetNode(n => n is IdentifierExpression || n is MemberReferenceExpression || n is NamedExpression) as Expression; " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetActions,The length of the statement  "//			if (service != null && !service.IsValidName(identifier.Identifier' AffectedEntity.Field' Modifiers.Private' isStatic)) {  " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateIndexerAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateIndexerAction.cs,GetActions,The length of the statement  "					script.InsertWithCursor(context.TranslateString("Create indexer")' targetResolveResult.Type.GetDefinition()' (s' c) => decl); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActions,The length of the statement  "			if (identifier != null && !(identifier.Parent is InvocationExpression && ((InvocationExpression)identifier.Parent).Target == identifier)) " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActions,The length of the statement  "			if (memberReference != null && !(memberReference.Parent is InvocationExpression && ((InvocationExpression)memberReference.Parent).Target == memberReference)) " is 157.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromMemberReferenceExpression,The length of the statement  "				invocationMethod.Parameters.Select(parameter => new ParameterDeclaration(context.CreateShortType(parameter.Type)' parameter.Name) {  " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromIdentifier,The length of the statement  "				invocationMethod.Parameters.Select(parameter => new ParameterDeclaration(context.CreateShortType(parameter.Type)' parameter.Name) {  " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromInvocation,The length of the statement  "			var guessedType = invocation.Parent is ExpressionStatement ? new PrimitiveType("void") : TypeGuessing.GuessAstType(context' invocation); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateAction,The length of the statement  "			}' createFromNode.GetNodeAt(context.Location) ?? createFromNode)  { Severity = ICSharpCode.NRefactory.Refactoring.Severity.Error }; " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GenerateParameters,The length of the statement  "				var type = resolveResult.Type.Kind == TypeKind.Unknown || resolveResult.Type.Kind == TypeKind.Null ? new PrimitiveType("object") : context.CreateShortType(resolveResult.Type); " is 175.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreatePropertyAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreatePropertyAction.cs,GetActions,The length of the statement  "			}' identifier.GetNodeAt(context.Location) ?? identifier) { Severity = ICSharpCode.NRefactory.Refactoring.Severity.Error }; " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CS1520MethodMustHaveAReturnTypeAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CS1520MethodMustHaveAReturnTypeAction.cs,GetActions,The length of the statement  "			yield return new CodeAction(context.TranslateString("This is a constructor")' script => script.Replace(entity.NameToken' Identifier.Create(typeDeclaration.Name' TextLocation.Empty))' entity) { " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetActions,The length of the statement  "				yield return new CodeAction(string.Format(context.TranslateString("Declare local variable (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetDelegateType,The length of the statement  "				genericType = context.Compilation.GetAllTypeDefinitions().FirstOrDefault(t => t.FullName == "System.Action" && t.TypeParameterCount == parameters.Count); " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetDelegateType,The length of the statement  "				genericType = context.Compilation.GetAllTypeDefinitions().FirstOrDefault(t => t.FullName == "System.Func" && t.TypeParameterCount == parameters.Count); " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,GetActions,The length of the statement  "				MemberReferenceExpression thisField = new MemberReferenceExpression(new ThisReferenceExpression()' idntf.Name' new AstType[]{}); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,CannotExtractField,The length of the statement  "			return result == null || result.Variables.Count != 1 || ContainsAnonymousType(context.Resolve(varInit.Initializer).Type); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The length of the statement  "			if (target == null || target.MemberNameToken.StartLocation > context.Location || invocation.LParToken.StartLocation < context.Location) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The length of the statement  "			if (rr == null || rr.Member.Name != "Equals" || rr.Member.IsStatic || !rr.Member.ReturnType.IsKnownType(KnownTypeCode.Boolean)) " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipOperatorArgumentsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipOperatorArgumentsAction.cs,GetActions,The length of the statement  "			yield return new CodeAction(string.Format(context.TranslateString("Flip '{0}' operator arguments")' binop.OperatorToken.ToString())' script => { " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipOperatorArgumentsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipOperatorArgumentsAction.cs,GetBinaryOperatorExpression,The length of the statement  "			if (result == null || (result.Operator != BinaryOperatorType.Equality && result.Operator != BinaryOperatorType.InEquality)) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GenerateSwitchLabelsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateSwitchLabelsAction.cs,GetActions,The length of the statement  "					var insertNode = (AstNode)switchStatement.SwitchSections.LastOrDefault(s => !s.CaseLabels.Any(label => label.Expression.IsNull)) ?? switchStatement.LBraceToken; " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementAbstractMembersAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementAbstractMembersAction.cs,GetActions,The length of the statement  "			if (resolveResult.Type.Kind != TypeKind.Class || resolveResult.Type.GetDefinition() == null || !resolveResult.Type.GetDefinition().IsAbstract) " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementAbstractMembersAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementAbstractMembersAction.cs,GetActions,The length of the statement  "					state.CurrentTypeDefinition' (s' c) => ImplementInterfaceAction.GenerateImplementation(c' toImplement.Select(m => Tuple.Create(m' false))' true) " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GetActions,The length of the statement  "			var toImplement = CollectMembersToImplement(state.CurrentTypeDefinition' resolveResult.Type' false' out interfaceMissing); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "								alreadyImplemented |= !needsExplicitly /*|| cmet.InterfaceImplementations.Any (impl => impl.InterfaceType.Equals (interfaceType))*/; " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "								alreadyImplemented |= !needsExplicitly /*|| cmet.InterfaceImplementations.Any (impl => impl.InterfaceType.Equals (interfaceType))*/; " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "					alreadyImplemented = implementingType.GetMembers().Any(m => m.ImplementedInterfaceMembers.Any(im => IsImplementation (im' prop))); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "									alreadyImplemented |= !needsExplicitly/* || cprop.InterfaceImplementations.Any (impl => impl.InterfaceType.Resolve (ctx).Equals (interfaceType))*/; " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceExplicitAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceExplicitAction.cs,GetActions,The length of the statement  "					(s' c) => ImplementInterfaceAction.GenerateImplementation (c' toImplement.Select (t => Tuple.Create (t.Item1' true))' interfaceMissing).ToList() " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,GetActions,The length of the statement  "				refFinder.FindLocalReferences(resolveResult.Variable' context.UnresolvedFile' unit' context.Compilation' (n' r) => script.Replace(n' AddParensIfRequired (n' initializer.Initializer.Clone()))' default(CancellationToken)); " is 220.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InsertAnonymousMethodSignatureAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InsertAnonymousMethodSignatureAction.cs,GetAnonymousMethodExpression,The length of the statement  "			if (anonymousMethodExpression == null || !anonymousMethodExpression.DelegateToken.Contains (context.Location) || anonymousMethodExpression.HasParameterList) " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The length of the statement  "				yield return new CodeAction(string.Format(context.TranslateString("Create local constant (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The length of the statement  "				yield return new CodeAction(string.Format(context.TranslateString("Create constant field (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,GetActions,The length of the statement  "				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 1) && new TextLocation(context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) { " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,AddFormatCallToInvocation,The length of the statement  "			newInvocation.Arguments.First ().ReplaceWith (CreateFormatString (context' pExpr' newInvocation.Arguments.Count () - 1)); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,CreateFormatString,The length of the statement  "			return new PrimitiveExpression(""' context.GetText(start' sStart - start) + "{" + argumentNumber + "}" + context.GetText(sEnd' end - sEnd)); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The length of the statement  "			if (context.Location != conditionalExpr.Condition.StartLocation && context.Location < conditionalExpr.Condition.EndLocation || " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The length of the statement  "			    context.Location != conditionalExpr.TrueExpression.StartLocation && conditionalExpr.TrueExpression.Contains(context.Location) || " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The length of the statement  "			    context.Location != conditionalExpr.FalseExpression.StartLocation && conditionalExpr.FalseExpression.Contains(context.Location)) " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertIfAndSimplify,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs,GenerateNewTrueStatement,The length of the statement  "				if (blockStatement.Children.Count(n => n.Role != Roles.NewLine && n.Role != Roles.LBrace && n.Role != Roles.RBrace) == 1) " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertIfAndSimplify,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs,GetIfElseStatement,The length of the statement  "			if (isQuitingStatement is ReturnStatement || isQuitingStatement is ContinueStatement || isQuitingStatement is BreakStatement) " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertLogicalExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertLogicalExpressionAction.cs,GetActions,The length of the statement  "			var newExpression = new UnaryOperatorExpression(UnaryOperatorType.Not' new ParenthesizedExpression(negativeExpression)); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IterateViaForeachAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IterateViaForeachAction.cs,ActionFromVariableInitializer,The length of the statement  "			if (initializer == null || initializer.Parent.Parent is ForStatement || !initializer.NameToken.Contains(context.Location)) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,GetAction,The length of the statement  "						var declaredNames = variableDeclarations.SelectMany(variableDeclaration => variableDeclaration.Variables).Select(variable => variable.Name).ToList(); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The length of the statement  "			if (propertyDeclaration == null || propertyDeclaration.Getter.IsNull || propertyDeclaration.Setter.IsNull || propertyDeclaration.Getter.Body.IsNull || propertyDeclaration.Setter.Body.IsNull) " is 190.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The length of the statement  "			if (!context.Supports(csharp3) || propertyDeclaration.HasModifier (ICSharpCode.NRefactory.CSharp.Modifiers.Abstract) || ((TypeDeclaration)propertyDeclaration.Parent).ClassType == ClassType.Interface) " is 199.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBracesAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBracesAction.cs,GetActions,The length of the statement  "				keyword != null ? string.Format(context.TranslateString("Remove braces from '{0}'")' keyword) : context.TranslateString("Remove braces")'  " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveRegionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRegionAction.cs,GetActions,The length of the statement  "			PreProcessorDirective endDirective = directive.Type == PreProcessorDirectiveType.Region ? GetEndDirective(directive) : GetStartDirective(directive); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveRegionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRegionAction.cs,GetDirective,The length of the statement  "			if (directive == null || directive.Type != PreProcessorDirectiveType.Region && directive.Type != PreProcessorDirectiveType.Endregion) " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SplitDeclarationAndAssignmentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitDeclarationAndAssignmentAction.cs,GetActions,The length of the statement  "				var assign = new AssignmentExpression (new IdentifierExpression (varInitializer.Name)' AssignmentOperatorType.Assign' varInitializer.Initializer.Clone()); " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The length of the statement  "				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 1) && new TextLocation(context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) { " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseExplicitTypeAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs,GetVariableDeclarationStatement,The length of the statement  "			if (result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location.Line' context.Location.Column) && result.Type.IsVar ()) { " is 198.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseVarKeywordAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseVarKeywordAction.cs,GetVariableDeclarationStatement,The length of the statement  "			if (result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location) && !result.Type.IsVar ()) " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "					var varDeclaration = ifElseStatement.GetPrevSibling(s => s.Role == BlockStatement.StatementRole) as VariableDeclarationStatement; " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "						if (initializer != null && target is IdentifierExpression && ((IdentifierExpression)target).Identifier != initializer.Name) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitAttribute,The length of the statement  "					AddIssue(new CodeIssue(attribute' ctx.TranslateString("Found [MethodImpl(MethodImplOptions.Synchronized)]")' fixAction)); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,FixLockThisIssue,The length of the statement  "				List<BlockStatement> synchronizedStatements = FixMethodsWithMethodImplAttribute(script' containerType' isStatic).ToList(); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IdentifierNameExists,The length of the statement  "					ResolveResult result = resolverState.LookupSimpleNameOrTypeName(nameProposal' new List<IType>()' NameLookupMode.Expression); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "				AddIssue (new CodeIssue(unaryOperatorExpression' ctx.TranslateString ("Simplify negative relational expression")' ctx.TranslateString ("Simplify negative relational expression")' " is 178.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitThrowStatement,The length of the statement  "					AddIssue(new CodeIssue(throwStatement' ctx.TranslateString("NotImplemented exception thrown")) { IssueMarker = IssueMarker.None }); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "						AddIssue(new CodeIssue(token' ctx.TranslateString("Keyword 'internal' is redundant.  This is the default modifier.")' ctx.TranslateString("Remove 'internal' modifier")' script => { " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNode,The length of the statement  "						AddIssue(new CodeIssue(token' ctx.TranslateString("Keyword 'private' is redundant. This is the default modifier.")' ctx.TranslateString("Remove redundant 'private' modifier")' script => { " is 187.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The length of the statement  "										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value)); " is 173.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The length of the statement  "								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref") " is 199.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The length of the statement  "								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value)); " is 168.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The length of the statement  "										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value)); " is 170.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The length of the statement  "									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message)); " is 172.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessParameter,The length of the statement  "                     where !tryResolve || ParameterCanBeDeclaredWithBaseTypeIssue.TypeChangeResolvesCorrectly(ctx' parameter' rootResolutionNode' type) " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,The length of the statement  "				var firstInitializerChangeNode = GetFirstInitializerChange(variableDeclarationStatement' pathToCheck' variableInitializer.Initializer); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,The length of the statement  "					AddIssue(new CodeIssue(variableDeclarationStatement' context.TranslateString("Variable could be moved to a nested scope")' " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetFirstInitializerChange,The length of the statement  "					for (AstNode node = path[i].PrevSibling; node != null && node != variableDeclarationStatement; node = node.PrevSibling) { " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "				AddIssue (new CodeIssue (operatorToken' ctx.TranslateString ("Bitwise Operations on enum not marked with Flags attribute"))); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIsZeroIssue,The length of the statement  "					ctx.TranslateString ("Comparison of floating point numbers can be unequal due to the differing precision of the two values.")' " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIsZeroIssue,The length of the statement  "						var op = binaryOperatorExpression.Operator == BinaryOperatorType.Equality ? BinaryOperatorType.LessThan : BinaryOperatorType.GreaterThan; " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The length of the statement  "						ctx.TranslateString("Comparison of floating point numbers can be unequal due to the differing precision of the two values.")' " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConditionalExpression,The length of the statement  "					script => script.Replace (conditionalExpression' conditionalExpression.TrueExpression.Clone ())' conditionalExpression.QuestionMarkToken); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCatchClause,The length of the statement  "				AddIssue(new CodeIssue(catchClause.CatchToken' ctx.TranslateString("Empty general catch clause suppresses any error"))); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The length of the statement  "					AddIssue(binaryOperatorExpression' binaryOperatorExpression.OperatorToken' binaryOperatorExpression.Operator == BinaryOperatorType.Equality); " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "					if (CSharpUtil.AreConditionsEqual(invocationExpression.Arguments.FirstOrDefault()' invocationExpression.Arguments.Last())) { " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						if ((invocationExpression.Parent is UnaryOperatorExpression) && ((UnaryOperatorExpression)invocationExpression.Parent).Operator == UnaryOperatorType.Not) { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						if ((invocationExpression.Parent is UnaryOperatorExpression) && ((UnaryOperatorExpression)invocationExpression.Parent).Operator == UnaryOperatorType.Not) { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBody,The length of the statement  "					AddIssue(new CodeIssue(node' ctx.TranslateString(string.Format("{0} never reaches its end or a 'return' statement."' entityType)))); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterizedEntityDeclaration,The length of the statement  "				// Ignore explicit interface implementations (those should have no optional parameters as there can't be any direct calls)  " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "							         string.Format(ctx.TranslateString("Optional parameter value {0} differs from base " + memberType + " '{1}'")' parameterName' baseMethod.DeclaringType.FullName)' " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "							         string.Format(ctx.TranslateString("Optional parameter value {0} differs from base " + memberType + " '{1}'")' parameterName' baseMethod.DeclaringType.FullName)' " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "								script => script.Replace(parameterDeclaration.DefaultExpression' CreateDefaultValueExpression(ctx' parameterDeclaration' baseParameter.Type' baseParameter.ConstantValue)))); " is 173.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "							string.Format(ctx.TranslateString("Parameter {0} has default value in base method '{1}'")' parameterName' baseMethod.FullName)' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "							string.Format(ctx.TranslateString("Add default value from base '{0}'")' CreateDefaultValueExpression(ctx' parameterDeclaration' baseParameter.Type' baseParameter.ConstantValue))' " is 178.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CompareMethods,The length of the statement  "								newParameter.DefaultExpression = CreateDefaultValueExpression(ctx' parameterDeclaration' baseParameter.Type' baseParameter.ConstantValue); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterDeclaration,The length of the statement  "				if (parameterDeclaration.ParameterModifier != ParameterModifier.Ref && parameterDeclaration.ParameterModifier != ParameterModifier.Out) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "                if (eventDeclaration.AddAccessor.Body.Statements.Count == 0 && eventDeclaration.RemoveAccessor.Body.Statements.Count == 0) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckName,The length of the statement  "				if (typeDef != null && typeDef.Attributes.Any(attr => attr.AttributeType.FullName == "NUnit.Framework.TestFixtureAttribute")) { " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckName,The length of the statement  "					if (member.SymbolKind == SymbolKind.Method && member.Attributes.Any(attr => attr.AttributeType.FullName == "NUnit.Framework.TestAttribute")) { " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNamedResolveResult,The length of the statement  "							if (typeSystemEntity == null || !typeSystemEntity.HasModifier (Modifiers.Static) || typeSystemEntity.HasModifier (Modifiers.Sealed)) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNamedResolveResult,The length of the statement  "							if (typeSystemEntity == null || typeSystemEntity.HasModifier (Modifiers.Static) || typeSystemEntity.HasModifier (Modifiers.Sealed)) { " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNamedResolveResult,The length of the statement  "						var actions = new List<CodeAction>(suggestedNames.Select(n => new CodeAction(string.Format(ctx.TranslateString("Rename to '{0}'")' n)' (Script script) => { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitNamespaceDeclaration,The length of the statement  "					CheckNamedResolveResult(null' namespaceDeclaration' AffectedEntity.Namespace' ((SimpleType)type).IdentifierToken' Modifiers.None); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "				CheckName(typeDeclaration' entity' typeDeclaration.NameToken' GetAccessibiltiy(typeDeclaration' typeDeclaration.Parent is TypeDeclaration ? Modifiers.Private : Modifiers.Internal)); " is 181.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitDelegateDeclaration,The length of the statement  "				CheckName(delegateDeclaration' AffectedEntity.Delegate' delegateDeclaration.NameToken' GetAccessibiltiy(delegateDeclaration' delegateDeclaration.Parent is TypeDeclaration ? Modifiers.Private : Modifiers.Internal)); " is 214.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,The length of the statement  "				CheckName(propertyDeclaration' AffectedEntity.Property' propertyDeclaration.NameToken' GetAccessibiltiy(propertyDeclaration' Modifiers.Private)); " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIndexerDeclaration,The length of the statement  "					var method = baseType != null ? baseType.GetProperties (m => m.IsIndexer && m.IsOverridable && m.Parameters.Count == indexerDeclaration.Parameters.Count).FirstOrDefault () : null; " is 179.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "					var method = baseType != null ? baseType.GetMethods (m => m.Name == rr.Member.Name && m.IsOverridable && m.Parameters.Count == methodDeclaration.Parameters.Count).FirstOrDefault () : null; " is 188.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "				CheckName(methodDeclaration' methodDeclaration.Modifiers.HasFlag(Modifiers.Async) ? AffectedEntity.AsyncMethod : AffectedEntity.Method' methodDeclaration.NameToken' GetAccessibiltiy(methodDeclaration' Modifiers.Private)); " is 221.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitFixedFieldDeclaration,The length of the statement  "				CheckName(fixedFieldDeclaration' entity' fixedFieldDeclaration.NameToken' GetAccessibiltiy(fixedFieldDeclaration' Modifiers.Private)); " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "				CheckName(eventDeclaration' AffectedEntity.Event' eventDeclaration.NameToken' GetAccessibiltiy(eventDeclaration' Modifiers.Private)); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitEnumMemberDeclaration,The length of the statement  "				CheckName(enumMemberDeclaration' AffectedEntity.EnumMember' enumMemberDeclaration.NameToken' GetAccessibiltiy(enumMemberDeclaration' Modifiers.Private)); " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterDeclaration,The length of the statement  "				CheckNamedResolveResult(null' parameterDeclaration' parameterDeclaration.Parent is LambdaExpression ? AffectedEntity.LambdaParameter : AffectedEntity.Parameter' parameterDeclaration.NameToken' Modifiers.None); " is 209.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeParameterDeclaration,The length of the statement  "				CheckNamedResolveResult(null' typeParameterDeclaration' AffectedEntity.TypeParameter' typeParameterDeclaration.NameToken' Modifiers.None); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableDeclarationStatement,The length of the statement  "				var entity = variableDeclarationStatement.Modifiers.HasFlag(Modifiers.Const) ? AffectedEntity.LocalConstant : AffectedEntity.LocalVariable; " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "				if (!member.Attributes.Any(attr => attr.AttributeType.Name == "TestAttribute" && attr.AttributeType.Namespace == "NUnit.Framework")) " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeExpression,The length of the statement  "					isValidReturnType = rr.Member.ReturnType == invokeMethod.ReturnType || rr.Member.ReturnType.GetAllBaseTypes().Contains(invokeMethod.ReturnType); " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeExpression,The length of the statement  "				         expression is AnonymousMethodExpression ? ctx.TranslateString("Anonymous method can be simplified to method group") : ctx.TranslateString("Lambda expression can be simplified to method group")'  " is 193.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeExpression,The length of the statement  "					if (validTypes.Any (t => t.FullName == "System.Func" && t.TypeParameterCount == 1 + parameters.Count) && validTypes.Any (t => t.FullName == "System.Action")) { " is 159.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,UnpackImplicitIdentityOrReferenceConversion,The length of the statement  "				if (crr != null && crr.Conversion.IsImplicit && (crr.Conversion.IsIdentityConversion || crr.Conversion.IsReferenceConversion)) " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConditionalExpression,The length of the statement  "					AddIssue(new CodeIssue(conditionalExpression' ctx.TranslateString("'?:' expression can be re-written as '??' expression")' new CodeAction ( " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "				){ IssueMarker = IssueMarker.DottedLine' ActionProvider = { typeof(ConvertIfStatementToConditionalTernaryExpressionAction) } }); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "				){ IssueMarker = IssueMarker.DottedLine' ActionProvider = { typeof(ConvertIfStatementToNullCoalescingExpressionAction) } }); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "				AddIssue(new CodeIssue(variableDeclarationStatement.Type' ctx.TranslateString("Use 'var' keyword")) { IssueMarker = IssueMarker.DottedLine' ActionProvider = { typeof(UseVarKeywordAction) } }); " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMemberReferenceExpression,The length of the statement  "				HandleMember(memberReferenceExpression' memberReferenceExpression.Target' memberResolveResult.Member' memberResolveResult.TargetResult); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "				HandleMember(invocationExpression' memberReference.Target' invocationResolveResult.Member' invocationResolveResult.TargetResult); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "					if (fieldDeclaration.HasModifier(Modifiers.Public) || fieldDeclaration.HasModifier(Modifiers.Protected) || fieldDeclaration.HasModifier(Modifiers.Internal)) " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "					if (fieldDeclaration.HasModifier(Modifiers.Public) || fieldDeclaration.HasModifier(Modifiers.Protected) || fieldDeclaration.HasModifier(Modifiers.Internal)) " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "					script => script.ChangeModifier(methodDeclaration' methodDeclaration.Modifiers | Modifiers.Static)) { IssueMarker = IssueMarker.DottedLine }); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,The length of the statement  "					script => script.ChangeModifier(propertyDeclaration' propertyDeclaration.Modifiers | Modifiers.Static)) { IssueMarker = IssueMarker.DottedLine }); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "				if (!eventDeclaration.AddAccessor.IsNull && StaticVisitor.UsesNotStaticMember(ctx' eventDeclaration.AddAccessor.Body) || " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "				    !eventDeclaration.RemoveAccessor.IsNull && StaticVisitor.UsesNotStaticMember(ctx' eventDeclaration.RemoveAccessor.Body)) " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "					script => script.ChangeModifier(eventDeclaration' eventDeclaration.Modifiers | Modifiers.Static)) { IssueMarker = IssueMarker.DottedLine }); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorDeclaration,The length of the statement  "                    var makeProtected = new CodeAction(ctx.TranslateString("Make constructor protected")' script => script.Replace(constructorDeclaration.ModifierTokens.First(t => t.Modifier == Modifiers.Public)' new CSharpModifierToken(TextLocation.Empty' Modifiers.Protected))' constructorDeclaration.NameToken); " is 294.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorDeclaration,The length of the statement  "                    var makePrivate = new CodeAction(ctx.TranslateString("Make constructor private")' script => script.Remove(constructorDeclaration.ModifierTokens.First(t => t.Modifier == Modifiers.Public))' constructorDeclaration.NameToken); " is 223.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorDeclaration,The length of the statement  "					AddIssue(new CodeIssue(constructorDeclaration.NameToken' ctx.TranslateString("Constructor in Abstract Class should not be public")' new[] { makeProtected' makePrivate })); " is 171.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The length of the statement  "						isNegated ? ctx.TranslateString("Expression can be replaced with !string.IsNullOrEmpty") : ctx.TranslateString("Expression can be replaced with string.IsNullOrEmpty")' " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddMatch,The length of the statement  "						Expression expr = new InvocationExpression(new MemberReferenceExpression(match.Get<Expression>("expr").First().Clone()' "Any")); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetAnalysis,The length of the statement  "				analysis = new NullValueAnalysis(ctx' parentFunction.GetChildByRole(Roles.Body)' parentFunction.GetChildrenByRole(Roles.Parameter)' ctx.CancellationToken); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "				AddIssue(new CodeIssue(unaryOperatorExpression' ctx.TranslateString ("Double negation is redundant")' ctx.TranslateString ("Remove '!!'")' " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitAttribute,The length of the statement  "				AddIssue(new CodeIssue(attribute.LParToken.StartLocation' attribute.RParToken.EndLocation' ctx.TranslateString("Parentheses are redundant if attribute has no arguments")' ctx.TranslateString("Remove '()'")' script => " is 216.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeThisReferenceExpression,The length of the statement  "				var result = state.LookupSimpleNameOrTypeName(memberReference.MemberName' EmptyList<IType>.Instance' NameLookupMode.Expression); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The length of the statement  "					boolConstant ? ctx.TranslateString ("Comparison with 'true' is redundant") : ctx.TranslateString ("Comparison with 'false' is redundant")' " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsExplicitImplementation,The length of the statement  "							if (member.IsExplicitInterfaceImplementation && member.ImplementedInterfaceMembers.Contains(memberResolveResult.Member)) { " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsExplicitImplementation,The length of the statement  "							if (member.IsExplicitInterfaceImplementation && member.ImplementedInterfaceMembers.Any(m => methodGroupResolveResult.Methods.Contains((IMethod)m))) { " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "				AddIssue(new CodeIssue(start' end' ctx.TranslateString("Type cast is redundant")' string.Format(ctx.TranslateString("Remove cast to '{0}'")' type)' " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckTypeCast,The length of the statement  "						if (IsRequiredToSelectOverload(mrr.Member.DeclaringTypeDefinition.GetMethods(m => m.Name == mrr.Member.Name)' expectedType' nArg)) " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "				if (!ElseIsRedundantControlFlow(ifElseStatement) || HasConflictingNames(ifElseStatement.Parent' ifElseStatement.FalseStatement)) " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "				AddIssue(new CodeIssue(ifElseStatement.ElseToken' ctx.TranslateString("Redundant 'else' keyword")' ctx.TranslateString("Remove redundant 'else'")' script =>  { " is 159.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMemberReferenceExpression,The length of the statement  "					memberReferenceExpression' memberReferenceExpression.Target' memberReferenceExpression.MemberNameToken' memberReferenceExpression.TypeArguments' NameLookupMode.Expression' " is 171.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitObjectCreateExpression,The length of the statement  "				AddIssue(new CodeIssue(objectCreateExpression.Initializer' ctx.TranslateString("Empty object or collection initializer is redundant")' ctx.TranslateString("Remove initializer")' " is 177.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeThisReferenceExpression,The length of the statement  "				var result = state.LookupSimpleNameOrTypeName(memberReference.MemberName' EmptyList<IType>.Instance' NameLookupMode.Expression); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AnalyzeThisReferenceExpression,The length of the statement  "					AddIssue(new CodeIssue(thisReferenceExpression.StartLocation' memberReference.MemberNameToken.StartLocation' issueDescription' actionDescription' script => { " is 157.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Collect,The length of the statement  "						ctx.TranslateString("Using directive is not used by code and can be removed safely.")' ctx.TranslateString("Remove redundant using directives")' " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitNamespaceDeclaration,The length of the statement  "					AddIssue(new CodeIssue(namespaceDeclaration.NamespaceToken' ctx.TranslateString("Empty namespace declaration is redundant")' " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitVariableInitializer,The length of the statement  "					string.Format(ctx.TranslateString("Local variable '{0}' is never used")' resolveResult.Variable.Name)' ctx.TranslateString("Remove unused local variable")' " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorDeclaration,The length of the statement  "				AddIssue(new CodeIssue(constructorDeclaration.Initializer.StartLocation' constructorDeclaration.Initializer.EndLocation' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "				AddIssue(new CodeIssue(methodDeclaration' title' ctx.TranslateString("Remove redundant method override")' script => script.Remove(methodDeclaration)) { " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "							if (rr.Member.DeclaringType.GetMethods(m => m.Name == "Equals" && m.IsOverride' GetMemberOptions.IgnoreInheritedMembers).Any()) " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,The length of the statement  "				AddIssue(new CodeIssue(propertyDeclaration' title' ctx.TranslateString("Remove redundant property override")' script => script.Remove(propertyDeclaration)) { IssueMarker = IssueMarker.GrayOut }); " is 195.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIndexerDeclaration,The length of the statement  "				AddIssue(new CodeIssue(indexerDeclaration' title' ctx.TranslateString("Remove redundant indexer override")' script => script.Remove(indexerDeclaration)) { IssueMarker = IssueMarker.GrayOut }); " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The length of the statement  "				AddIssue(new CodeIssue(eventDeclaration' title' ctx.TranslateString("Remove event override")' script => script.Remove(eventDeclaration)) { IssueMarker = IssueMarker.GrayOut }); " is 176.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeParameterDeclaration,The length of the statement  "				AddIssue(new CodeIssue(decl.NameToken' ctx.TranslateString("Type parameter is never used")) { IssueMarker = IssueMarker.GrayOut }); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "				if (resolveResult == null || !(resolveResult.TargetResult is ThisResolveResult) || resolveResult.Member.Name != "GetHashCode" || " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "				AddIssue(new CodeIssue(invocationExpression' ctx.TranslateString("Call resolves to Object.GetHashCode' which is reference based"))); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitExpressionStatement,The length of the statement  "					AddIssue(new CodeIssue(GetNodeToUnderline (invocation.Target)' ctx.TranslateString("Exceptions in async call will be silently ignored because the returned task is unused"))); " is 174.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetAnalysis,The length of the statement  "				analysis = new NullValueAnalysis(ctx' parentFunction.GetChildByRole(Roles.Body)' parentFunction.GetChildrenByRole(Roles.Parameter)' ctx.CancellationToken); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "				bool endsReversed = invocations.Count(invocation => ((MemberReferenceExpression)invocation.Target).MemberName == "Reverse") % 2 != 0; " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "					ctx.TranslateString("Convert to 'switch' statement")) { IssueMarker = IssueMarker.DottedLine' ActionProvider = { typeof(ConvertIfStatementToSwitchStatementAction) } }); " is 168.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsEnumerable,The length of the statement  "				return type.Name == "IEnumerable" && (type.Namespace == "System.Collections.Generic" || type.Namespace == "System.Collections"); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,The length of the statement  "				if (!(rr.Member.Name == "Length" && rr.Member.DeclaringType.Name == "Array" && rr.Member.DeclaringType.Namespace == "System") && " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,The length of the statement  "				!(rr.Member.Name == "Count" && (IsEnumerable(rr.TargetResult.Type) || rr.TargetResult.Type.GetAllBaseTypes().Any(IsEnumerable)))) " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitReturnStatement,The length of the statement  "						string.Format(ctx.TranslateString("`{0}': A return keyword must be followed by any expression when method returns a value")' currentMethodName)' " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "					         string.Format(ctx.TranslateString("CS0759: A partial method `{0}' implementation is missing a partial method declaration")' method.FullName)' " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckConversion,The length of the statement  "					title = string.Format(ctx.TranslateString("Cannot implicitly convert type `{0}' to `{1}'. An explicit conversion exists (are you missing a cast?)")' " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "					var varDeclaration = ifElseStatement.GetPrevSibling(s => s.Role == BlockStatement.StatementRole) as VariableDeclarationStatement; " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "						if (initializer == null || !(target is IdentifierExpression) || ((IdentifierExpression)target).Identifier != initializer.Name) " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,The length of the statement  "							i + 1 < arguments.Count ? ctx.TranslateString("Argument values are redundant") : ctx.TranslateString("Argument value is redundant")' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,The length of the statement  "							i + 1 < arguments.Count ? ctx.TranslateString("Remove redundant arguments") : ctx.TranslateString("Remove redundant argument")' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "					new CodeAction(ctx.TranslateString("Use ordinal comparison")' script => AddArgument(script' invocationExpression' "Ordinal")' invocationExpression)' " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "					new CodeAction(ctx.TranslateString("Use culture-aware comparison")' script => AddArgument(script' invocationExpression' "CurrentCulture")' invocationExpression) " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						script => AddArgument(script' invocationExpression' CreateCompareArgument (invocationExpression' ignoreCase' caseArg' "Ordinal"))'  " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						script => AddArgument(script' invocationExpression' CreateCompareArgument (invocationExpression' ignoreCase' caseArg' "Ordinal"))'  " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CreateCompareArgument,The length of the statement  "					return astBuilder.ConvertType(new TopLevelTypeName("System"' "StringComparison")).Member(ignoreCase == true ? stringComparison + "IgnoreCase" : stringComparison); " is 162.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckStaticRequired,The length of the statement  "				if (!curType.Peek().HasModifier(Modifiers.Static) || entity.HasModifier(Modifiers.Static) || entity.HasModifier(Modifiers.Const)) " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckVirtual,The length of the statement  "				if (!curType.Peek().HasModifier(Modifiers.Static) && !curType.Peek().HasModifier(Modifiers.Sealed) && entity.HasModifier(Modifiers.Virtual)) { " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckVirtual,The length of the statement  "					if (!entity.HasModifier(Modifiers.Public) && !entity.HasModifier(Modifiers.Protected)  && !entity.HasModifier(Modifiers.Internal)) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The length of the statement  "							var containingFunctionBlock = node is LambdaExpression ? (BlockStatement)node.GetChildByRole(LambdaExpression.BodyRole) : node.GetChildByRole(Roles.Body); " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The length of the statement  "				                      invocation.Arguments.First().Children.OfType<Statement>().First().DescendantNodesAndSelf(node => node is Statement).OfType<ReturnStatement>().Any(returnStatement => !returnStatement.Expression.IsNull)); " is 202.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueFor,The length of the statement  "					TransformBody(invocations' isVoid' resultType != null' returnedContinuation' taskCompletionSourceIdentifier' newFunction.GetChildByRole(Roles.Body)); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The length of the statement  "							var resultDeclarationType = argumentType == SpecialType.NullType ? new PrimitiveType("object") : CreateShortType(originalInvocation' argumentType); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,TransformBody,The length of the statement  "							replacements.Add(new VariableDeclarationStatement(CreateShortType(originalInvocation' precedentResultType)' resultName' awaitedExpression)); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitLambdaExpression,The length of the statement  "				if (!ConvertLambdaBodyStatementToExpressionAction.TryGetConvertableExpression(lambdaExpression.Body' out block' out expr)) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitAnonymousMethodExpression,The length of the statement  "				if (!ConvertLambdaBodyStatementToExpressionAction.TryGetConvertableExpression(anonymousMethodExpression.Body' out block' out expr)) " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "				if (typeDeclaration == null || typeDeclaration.ClassType != ClassType.Class || typeDeclaration.HasModifier(Modifiers.Static)) " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "				if (!typeDeclaration.Members.Any() || typeDeclaration.HasModifier(Modifiers.Abstract) || typeDeclaration.HasModifier(Modifiers.Partial)) " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "				if (typeDeclaration.Members.Where(m => !(m is TypeDeclaration)).Any(f => !f.HasModifier(Modifiers.Static) && !f.HasModifier(Modifiers.Const))) " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "						Expression expression = new IsExpression(CSharpUtil.AddParensForUnaryExpressionIfRequired(match.Get<Expression>("object").Single().Clone())' match.Get<AstType>("Type").Single().Clone()); " is 186.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						AddIssue(new CodeIssue(formatArguments[i]' ctx.TranslateString("Argument is not used in format string")) { IssueMarker = IssueMarker.GrayOut }); " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssuesForClauses,The length of the statement  "					AddIssue(new CodeIssue(closureLocalCatchClause' redundantCatchClauseMessage' actions) { IssueMarker = IssueMarker.GrayOut }); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssueForTryCatchStatement,The length of the statement  "				AddIssue(new CodeIssue(tryCatchStatement.TryBlock.EndLocation' lastCatch.EndLocation' removeTryCatchMessage' fixes) { IssueMarker = IssueMarker.GrayOut }); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ResolveIssue,The length of the statement  "				var varDec = new VariableDeclarationStatement(new PrimitiveType("var")' varName' new BinaryOperatorExpression(new AsExpression((Expression)node.Clone()' type (astBuilder))' BinaryOperatorType.NullCoalescing' new InvocationExpression(new MemberReferenceExpression((Expression)node.Clone()' methodCall)))); " is 304.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "							s => ResolveIssue(s' node' ab => new ComposedType { BaseType = ab.ConvertType(elementType)' ArraySpecifiers =  { new ArraySpecifier() } }' "ToArray")' " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "								ResolveIssue(s' node' ab => ab.ConvertType(new ParameterizedType(listType.GetDefinition()' new IType[]{ elementType }))' "ToList"); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNullComparison,The length of the statement  "				if (binaryOperatorExpression.Operator != BinaryOperatorType.Equality && binaryOperatorExpression.Operator != BinaryOperatorType.InEquality) " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitAssignmentExpression,The length of the statement  "				if (assignmentExpression.Operator != AssignmentOperatorType.Add && assignmentExpression.Operator != AssignmentOperatorType.Subtract) " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "													Body = new BinaryOperatorExpression(new IdentifierExpression(name)' BinaryOperatorType.InEquality' new NullReferenceExpression()) " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "					var toImplement = ImplementInterfaceAction.CollectMembersToImplement(rr.Type.GetDefinition()' bt.Type' false' out interfaceMissing); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "					AddIssue(new CodeIssue(baseType' ctx.TranslateString("Missing interface member implementations")) { ActionProvider = { typeof(ImplementInterfaceAction)' typeof(ImplementInterfaceExplicitAction)} }); " is 198.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitArrayCreateExpression,The length of the statement  "					AddIssue(new CodeIssue(argument' ctx.TranslateString("Unmatched size specification with array initializer")' ctx.TranslateString("Correct array size specification")' script => { " is 177.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The length of the statement  "				AddIssue(new CodeIssue(ifElseStatement.ElseToken' ctx.TranslateString("Blocks in if/else or switch branches can be simplified to any of the branches if they have the same block.")) " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "				if (methodDeclaration.Name != "GetHashCode" || !methodDeclaration.HasModifier(Modifiers.Override) || methodDeclaration.Parameters.Any()) " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The length of the statement  "				if (HasEntryPointSignature(methodDeclaration) || methodDeclaration.HasModifier(Modifiers.Public) || methodDeclaration.HasModifier(Modifiers.Protected)) " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessParameter,The length of the statement  "					 where (!tryResolve || TypeChangeResolvesCorrectly(ctx' parameter' rootResolutionNode' type)) && !FilterOut (variable.Type' type) " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessParameter,The length of the statement  "					AddIssue(new CodeIssue(parameter.Type' ctx.TranslateString("Parameter can be declared with base type")' GetActions(parameter' validTypes)) { " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,The length of the statement  "						ctx.TranslateString("Assignment to a property of a readonly field can be useless. Type parameter is not known to be a reference type."))); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "				if (unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "					unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement) { " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The length of the statement  "				    type.Name == typeof(ArgumentOutOfRangeException).Name && type.Namespace == typeof(ArgumentOutOfRangeException).Namespace || " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The length of the statement  "				    type.Name == typeof(DuplicateWaitObjectException).Name && type.Namespace == typeof(DuplicateWaitObjectException).Namespace) { " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The length of the statement  "					AddIssue(new CodeIssue(binaryOperatorExpression' ctx.TranslateString("Delegate subtraction has unpredictable result"))); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterDeclaration,The length of the statement  "					string.Format(ctx.TranslateString("Parameter '{0}' is never used")' parameterDeclaration.Name)) { IssueMarker = IssueMarker.GrayOut }); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIsExpression,The length of the statement  "				AddIssue(new CodeIssue(isExpression' ctx.TranslateString("Given expression is always of the provided type. Consider comparing with 'null' instead")' new [] { action })); " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "						string.Format(ctx.TranslateString("The event `{0}' can only appear on the left hand side of `+=' or `-=' operator")' evt.Name) " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,The length of the statement  "				var attr = member.Attributes.FirstOrDefault(a => a.AttributeType.Name == "ObsoleteAttribute" && a.AttributeType.Namespace == "System"); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,Check,The length of the statement  "					AddIssue(new CodeIssue(nodeToMark' string.Format(ctx.TranslateString("'{0}' is obsolete: '{1}'")' member.FullName' message.ConstantValue))); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The length of the statement  "					if (fieldDeclaration.HasModifier(Modifiers.Public) || fieldDeclaration.HasModifier(Modifiers.Protected) || fieldDeclaration.HasModifier(Modifiers.Internal)) " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "				var invocationExpression = new InvocationExpression(new MemberReferenceExpression(new BaseReferenceExpression()'"GetHashCode")); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorInitializer,The length of the statement  "					IType targetType = constructorInitializer.ConstructorInitializerType == ConstructorInitializerType.Base ? baseType : currentType; " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConstructorInitializer,The length of the statement  "					AddIssue(new CodeIssue(constructorInitializer.Keyword' GetIssueText(targetType' constructorInitializer.Arguments.Count))); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetIssueText,The length of the statement  "				return string.Format(ctx.TranslateString("CS1729: The type '{0}' does not contain a constructor that takes '{1}' arguments")' targetType.Name' argumentCount); " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The length of the statement  "				if (memberExpression == null || memberExpression.MemberName != "Equals" || !(memberExpression.Target is BaseReferenceExpression)) { " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetActions,The length of the statement  "					var args = Enumerable.Concat(new [] { new ThisReferenceExpression() }' invocationExpression.Arguments.Select(arg => arg.Clone())); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitNamespaceDeclaration,The length of the statement  "					string.Format(ctx.TranslateString("Namespace does not correspond to file location' should be: '{0}'")' ctx.DefaultNamespace) " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeCastExpression,The length of the statement  "				if (exprType.Kind == TypeKind.Unknown || castToType.Kind == TypeKind.Unknown || castToType.Kind == TypeKind.TypeParameter) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsValidReferenceOrBoxingConversion,The length of the statement  "				return c.IsValid && (c.IsIdentityConversion || c.IsReferenceConversion || c.IsBoxingConversion || c.IsUnboxingConversion); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "						if (isDeclareStatement && !containsRefOrOut && !containsLaterAssignments && !ContainsOtherAssignments(variableInitializer.Parent)) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "						if (isDeclareStatement && !containsRefOrOut && !containsLaterAssignments&& !ContainsOtherAssignments(variableInitializer.Parent)) { " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "					AddIssue(new CodeIssue(assignmentExpr.Parent' issueDescription' actionDescription' script => script.Remove(assignmentExpr.Parent)) { IssueMarker = IssueMarker.GrayOut }); " is 170.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The length of the statement  "					AddIssue(new CodeIssue(assignmentExpr.Left.StartLocation' assignmentExpr.OperatorToken.EndLocation' issueDescription' actionDescription' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitConditionalExpression,The length of the statement  "					AddIssue(new CodeIssue(unreachableExpr' ctx.TranslateString("Code is unreachable")' ctx.TranslateString("Remove unreachable code")' " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableHidesMemberIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LocalVariableHidesMemberIssue.cs,IsAccessible,The length of the statement  "					return IsInternalAccessible(sourceMember.ParentAssembly' targetMember.ParentAssembly) || IsProtectedAccessible(sourceType' targetType); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableHidesMemberIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LocalVariableHidesMemberIssue.cs,IsAccessible,The length of the statement  "					return IsInternalAccessible(sourceMember.ParentAssembly' targetMember.ParentAssembly) && IsProtectedAccessible(sourceType' targetType); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DefaultRules,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\DefaultRules.cs,GetFdgRules,The length of the statement  "			yield return new NamingRule(AffectedEntity.Class | AffectedEntity.Struct | AffectedEntity.Enum | AffectedEntity.Delegate) { " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "					errorMessage = string.Format(ctx.TranslateString("Name should have prefix '{0}'. (Rule '{1}').")' RequiredPrefixes [0]' Name); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "					errorMessage = string.Format(ctx.TranslateString("Name has forbidden prefix '{0}'. (Rule '{1}')")' requiredPrefix' Name); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "					errorMessage = string.Format(ctx.TranslateString("Name should have suffix '{0}'. (Rule '{1}')")' RequiredSuffixes [0]' Name); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "						errorMessage = string.Format(ctx.TranslateString("'{0}' contains an upper case letter after the first. (Rule '{1}')")' name' Name); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,ToString,The length of the statement  "			return string.Format("[NamingRule: Name={0}' AffectedEntity={1}' VisibilityMask={2}' NamingStyle={3}' IncludeStaticEntities={4}' IncludeInstanceMembers={5}]"' Name' AffectedEntity' VisibilityMask' NamingStyle' IncludeStaticEntities' IncludeInstanceMembers); " is 257.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexCondition,The length of the statement  "			if (expr is PrimitiveExpression || expr is IdentifierExpression || expr is MemberReferenceExpression || expr is InvocationExpression) " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitIdentifierExpression,The length of the statement  "				if (startLocation.IsEmpty || startLocation <= identifierExpression.StartLocation && identifierExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitAssignmentExpression,The length of the statement  "				if (startLocation.IsEmpty || startLocation <= assignmentExpression.StartLocation && assignmentExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitDirectionExpression,The length of the statement  "				if (startLocation.IsEmpty || startLocation <= directionExpression.StartLocation && directionExpression.EndLocation <= endLocation) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "				if (startLocation.IsEmpty || startLocation <= unaryOperatorExpression.StartLocation && unaryOperatorExpression.EndLocation <= endLocation) { " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "					if (unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitUnaryOperatorExpression,The length of the statement  "					    unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement) { " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "				if (whereResolve == null || whereResolve.Member.Name != "Where" || !IsQueryExtensionClass(whereResolve.Member.DeclaringTypeDefinition)) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "					anyInvoke' string.Format(ctx.TranslateString("Redundant Where() call with predicate followed by {0}()")' anyResolve.Member.Name)' " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "							script.Replace (anyInvoke' new InvocationExpression (new MemberReferenceExpression (target' anyResolve.Member.Name)' arg)); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "				if (!(rr.Member.DeclaringTypeDefinition != null && rr.Member.DeclaringTypeDefinition.KnownTypeCode == KnownTypeCode.String)) { " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "					string.Format(ctx.TranslateString("'{0}' is culture-aware and missing a StringComparison argument")' rr.Member.FullName)' " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "					new CodeAction(ctx.TranslateString("Add 'StringComparison.Ordinal'")' script => AddArgument(script' invocationExpression' "Ordinal")' invocationExpression)' " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "					new CodeAction(ctx.TranslateString("Add 'StringComparison.CurrentCulture'")' script => AddArgument(script' invocationExpression' "CurrentCulture")' invocationExpression) " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "				if (selectResolve == null || selectResolve.Member.Name != "Select" || !IsQueryExtensionClass(selectResolve.Member.DeclaringTypeDefinition)) " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "					invocationExpression' string.Format(ctx.TranslateString("Redundant Select() call with predicate followed by {0}()")' averageResolve.Member.Name)' " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The length of the statement  "							script.Replace (invocationExpression' new InvocationExpression (new MemberReferenceExpression (target' averageResolve.Member.Name)' arg)); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToFirstOrDefaultIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToFirstOrDefaultIssue.cs,CreateVisitor,The length of the statement  "			return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToFirstOrDefaultIssue>(context' "FirstOrDefault"); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToLastOrDefaultIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToLastOrDefaultIssue.cs,CreateVisitor,The length of the statement  "			return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToLastOrDefaultIssue>(context' "LastOrDefault"); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToSingleOrDefaultIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToSingleOrDefaultIssue.cs,CreateVisitor,The length of the statement  "			return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToSingleOrDefaultIssue>(context' "SingleOrDefault"); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringEndsWithIsCultureSpecificIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringEndsWithIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "			return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringEndsWithIsCultureSpecificIssue>(context' "EndsWith"); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringLastIndexOfIsCultureSpecificIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "			return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringLastIndexOfIsCultureSpecificIssue>(context' "LastIndexOf"); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringStartsWithIsCultureSpecificIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringStartsWithIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "			return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringStartsWithIsCultureSpecificIssue>(context' "StartsWith"); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddExceptionDescriptionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddExceptionDescriptionAction.cs,SearchInsertionNode,The length of the statement  "			while (result != null && (result.Role == Roles.Comment || result.Role == Roles.NewLine || result.Role == Roles.Whitespace)) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,CheckNode,The length of the statement  "			var expressionPattern = new AssignmentExpression(leftExpressionPattern' AssignmentOperatorType.Assign' new AnyNode(valueOnNullGroupName)); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,IsEmpty,The length of the statement  "				!statement.DescendantsAndSelf.OfType<Statement>().Any(descendant => !(descendant is EmptyStatement || descendant is BlockStatement)); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertReturnStatementToIfAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertReturnStatementToIfAction.cs,CreateForConditionalExpression,The length of the statement  "					var ifStatement = new IfElseStatement(conditionalExpression.Condition.Clone()' new ReturnStatement(conditionalExpression.TrueExpression.Clone())); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertReturnStatementToIfAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertReturnStatementToIfAction.cs,CreateForNullCoalesingExpression,The length of the statement  "					var ifStatement = new IfElseStatement(new BinaryOperatorExpression(bOp.Left.Clone()' BinaryOperatorType.InEquality' new NullReferenceExpression())' new ReturnStatement(bOp.Left.Clone())); " is 187.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "			var foundCasts = ifElseStatement.GetParent<BlockStatement>().DescendantNodes(n => n.StartLocation >= ifElseStatement.StartLocation && !cast.IsMatch(n)).Where(n => cast.IsMatch(n)).ToList(); " is 189.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "				var varName = ctx.GetNameProposal(CreateMethodDeclarationAction.GuessNameFromType(rr.Type)' ifElseStatement.StartLocation); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "				var varDec = new VariableDeclarationStatement(new PrimitiveType("var")' varName' new AsExpression(obj.Clone()' castToType.Clone())); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "				var binaryOperatorExpression = new BinaryOperatorExpression(binaryOperatorIdentifier' BinaryOperatorType.Equality' new NullReferenceExpression()); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "				var varName = ctx.GetNameProposal(CreateMethodDeclarationAction.GuessNameFromType(rr.Type)' ifElseStatement.StartLocation); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "				var varDec = new VariableDeclarationStatement(new PrimitiveType("var")' varName' new AsExpression(obj.Clone()' castToType.Clone())); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "				var binaryOperatorExpression = new BinaryOperatorExpression(binaryOperatorIdentifier' BinaryOperatorType.InEquality' new NullReferenceExpression()); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "					var varName = ctx.GetNameProposal(CreateMethodDeclarationAction.GuessNameFromType(rr.Type)' ifElseStatement.StartLocation); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "					var varDec = new VariableDeclarationStatement(new PrimitiveType("var")' varName' new AsExpression(isExpr.Expression.Clone()' isExpr.Type.Clone())); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "					var binaryOperatorExpression = new BinaryOperatorExpression(binaryOperatorIdentifier' BinaryOperatorType.Equality' new NullReferenceExpression()); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "			var foundCasts2 = isExpr.GetParent<Statement>().DescendantNodesAndSelf(n => !cast.IsMatch(n)).Where(n => isExpr.StartLocation < n.StartLocation && cast.IsMatch(n)).ToList(); " is 173.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "				var varName = ctx.GetNameProposal(CreateMethodDeclarationAction.GuessNameFromType(rr2.Type)' ifElseStatement.StartLocation); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "				var varDec = new VariableDeclarationStatement(new PrimitiveType("var")' varName' new AsExpression(obj.Clone()' castToType.Clone())); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "				var binaryOperatorExpression = new BinaryOperatorExpression(binaryOperatorIdentifier' BinaryOperatorType.InEquality' new NullReferenceExpression()); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForToWhileAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForToWhileAction.cs,GetAction,The length of the statement  "					var whileStatement = new WhileStatement(node.Condition.IsNull ? new PrimitiveExpression(true) : node.Condition.Clone()' blockStatement); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CS0126ReturnMustBeFollowedByAnyExpression,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\CompilerErrors\CS0126ReturnMustBeFollowedByAnyExpression.cs,GetRequestedReturnType,The length of the statement  "			entityNode = returnStatement.GetParent(p => p is LambdaExpression || p is AnonymousMethodExpression || !(p is Accessor) && p is EntityDeclaration); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UnsafeState,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\RedundanciesInCode\RedundantUnsafeContextIssue.cs,ToString,The length of the statement  "					return string.Format("[UnsafeState: InUnsafeContext={0}' UseUnsafeConstructs={1}]"' InUnsafeContext' UseUnsafeConstructs); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new UnaryOperatorExpression (UnaryOperatorType.Increment' new IdentifierExpression(name)))' " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new UnaryOperatorExpression (UnaryOperatorType.PostIncrement' new IdentifierExpression(name)))' " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new AssignmentExpression (new IdentifierExpression(name)' AssignmentOperatorType.Add' PatternHelper.OptionalParentheses(new AnyNode("step")))) " is 176.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new UnaryOperatorExpression (UnaryOperatorType.Decrement' new IdentifierExpression(name)))' " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new UnaryOperatorExpression (UnaryOperatorType.PostDecrement' new IdentifierExpression(name)))' " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "				PatternHelper.OptionalParentheses(new AssignmentExpression (new IdentifierExpression(name)' AssignmentOperatorType.Subtract' PatternHelper.OptionalParentheses(new AnyNode("step")))) " is 181.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "					PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new IdentifierExpression(name))' BinaryOperatorType.LessThan' PatternHelper.OptionalParentheses(new AnyNode("bound"))))' " is 217.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "					PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new AnyNode("bound"))' BinaryOperatorType.GreaterThan' PatternHelper.OptionalParentheses(new IdentifierExpression(name)))) " is 219.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "					PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new IdentifierExpression(name))' BinaryOperatorType.LessThanOrEqual' PatternHelper.OptionalParentheses(new AnyNode("bound"))))' " is 224.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "					PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new AnyNode("bound"))' BinaryOperatorType.GreaterThanOrEqual' PatternHelper.OptionalParentheses(new IdentifierExpression(name)))) " is 226.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "				PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new IdentifierExpression(name))' BinaryOperatorType.GreaterThanOrEqual' PatternHelper.OptionalParentheses(new AnyNode("bound"))))' " is 227.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "				PatternHelper.OptionalParentheses(new BinaryOperatorExpression(PatternHelper.OptionalParentheses(new AnyNode("bound"))' BinaryOperatorType.LessThanOrEqual' PatternHelper.OptionalParentheses(new IdentifierExpression(name)))) " is 223.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Subtract,The length of the statement  "			return new BinaryOperatorExpression(expr.Clone()' BinaryOperatorType.Subtract' CSharpUtil.AddParensForUnaryExpressionIfRequired(step.Clone())); " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Add,The length of the statement  "			return new BinaryOperatorExpression(expr.Clone()' BinaryOperatorType.Add' CSharpUtil.AddParensForUnaryExpressionIfRequired(step.Clone())); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,CreateVariableName,The length of the statement  "				.Select(identifier => identifier.Name).Where(identifier => identifier.StartsWith(proposedName' StringComparison.InvariantCulture)).ToList(); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertShiftToMultiplyAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertShiftToMultiplyAction.cs,GetAction,The length of the statement  "			if (node.Operator != BinaryOperatorType.ShiftLeft && node.Operator != BinaryOperatorType.ShiftRight || !(node.Right is PrimitiveExpression)) " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertShiftToMultiplyAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertShiftToMultiplyAction.cs,GetAction,The length of the statement  "				node.Operator == BinaryOperatorType.ShiftLeft ? context.TranslateString("Replace with '*'") : context.TranslateString("Replace with '/'")' " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMultiplyToShiftAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs,GetAction,The length of the statement  "			if (node.Operator != BinaryOperatorType.Multiply && node.Operator != BinaryOperatorType.Divide || !(node.Right is PrimitiveExpression)) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMultiplyToShiftAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs,GetAction,The length of the statement  "				node.Operator == BinaryOperatorType.Multiply ? context.TranslateString("Replace with '<<'") : context.TranslateString("Replace with '>>'")' " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceAssignmentWithPostfixExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs,GetAction,The length of the statement  "			if (node.Operator != AssignmentOperatorType.Add && node.Operator != AssignmentOperatorType.Subtract || !onePattern.IsMatch (node.Right)) " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceAssignmentWithPostfixExpressionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs,GetAction,The length of the statement  "			string desc = node.Operator == AssignmentOperatorType.Add ? context.TranslateString("Replace with '{0}++'") : context.TranslateString("Replace with '{0}--'"); " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplacePostfixExpressionWithAssignmentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplacePostfixExpressionWithAssignmentAction.cs,GetAction,The length of the statement  "			string desc = node.Operator == UnaryOperatorType.PostIncrement ? context.TranslateString("Replace with '{0} += 1'") : context.TranslateString("Replace with '{0} -= 1'"); " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithOperatorAssignmentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceWithOperatorAssignmentAction.cs,CreateAssignment,The length of the statement  "			return new AssignmentExpression(node.Left.Clone()' op' SplitIfAction.GetRightSide((BinaryOperatorExpression)outerLeft.Parent)); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeCriteriaCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,VisitIndexerExpression,The length of the statement  "					var criterion = new SupportsIndexingCriterion(arrayType.ElementType' parameterTypes' CSharpConversions.Get(context.Compilation)); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeCriteriaCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,VisitIndexerExpression,The length of the statement  "				var criterion = new SupportsIndexingCriterion(invocationResolveResult.Member.ReturnType' parameterTypes' CSharpConversions.Get(context.Compilation)); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "			if (rr.Member.Name != "HasFlag" || rr.Member.DeclaringType.GetDefinition().KnownTypeCode != ICSharpCode.NRefactory.TypeSystem.KnownTypeCode.Enum) " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "			if (!arg.DescendantsAndSelf.All(x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr)) " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,BuildHasFlagExpression,The length of the statement  "			return new InvocationExpression(new MemberReferenceExpression(target.Clone()' "HasFlag")' MakeFlatExpression (bOp' BinaryOperatorType.BitwiseOr)); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,CreateAction,The length of the statement  "			if (!expr.DescendantsAndSelf.All(x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr) && " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,CreateAction,The length of the statement  "				!expr.DescendantsAndSelf.All(x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseAnd)) " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SearchRefOrOutVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\RedundantAssignmentIssue.cs,VisitInvocationExpression,The length of the statement  "						if (directionExpression.FieldDirection != FieldDirection.Out && directionExpression.FieldDirection != FieldDirection.Ref) " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementIssueCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\UnreachableCodeIssue.cs,AddStatement,The length of the statement  "					if (statement is BlockStatement && statement.GetChildrenByRole<Statement>(BlockStatement.StatementRole).Any(reachability.IsReachable)) { " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementIssueCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\UnreachableCodeIssue.cs,AddStatement,The length of the statement  "						while ((nextStatement = (Statement)statement.GetNextSibling(s => s is Statement)) != null && !(nextStatement is LabelStatement)) { " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementIssueCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\UnreachableCodeIssue.cs,AddStatement,The length of the statement  "					visitor.AddIssue(new CodeIssue(start' end' visitor.ctx.TranslateString("Code is unreachable")' actions) { IssueMarker = IssueMarker.GrayOut }); " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "					var argumentExpression = invocation.Arguments.OfType<DirectionExpression>().First(a => a.FieldDirection == FieldDirection.Out); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "							script.InsertBefore (statements [0]' new VariableDeclarationStatement (context.CreateShortType(variable.Type)' variable.Name)); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "							invocationStatement = new VariableDeclarationStatement (new SimpleType ("var")' generatedReturnVariable.Name' invocation); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableLookupVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableLookupVisitor.cs,VisitIdentifierExpression,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= identifierExpression.StartLocation && identifierExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitIdentifierExpression,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= identifierExpression.StartLocation && identifierExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitAssignmentExpression,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= assignmentExpression.StartLocation && assignmentExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitDirectionExpression,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= directionExpression.StartLocation && directionExpression.EndLocation <= endLocation) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitVariableInitializer,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= variableInitializer.StartLocation && variableInitializer.EndLocation <= endLocation) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitVariableInitializer,The length of the statement  "					SetState(variableInitializer.Name' variableInitializer.Initializer.IsNull ?  VariableState.None : VariableState.Changed); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The length of the statement  "			if (startLocation.IsEmpty || startLocation <= unaryOperatorExpression.StartLocation && unaryOperatorExpression.EndLocation <= endLocation) { " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The length of the statement  "				if (unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The length of the statement  "					unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement) { " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp,GatherVisitorBase<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitAttribute,The length of the statement  "			if (resolveResult.Type.Name == "SuppressMessageAttribute" && resolveResult.Type.Namespace == "System.Diagnostics.CodeAnalysis") { " is 129.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,GetActions,The conditional expression  "(node is EventDeclaration && node is CustomEventDeclaration || selectedNode.Role != Roles.Identifier) &&   				    selectedNode.Role != IndexerDeclaration.ThisKeywordRole"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The conditional expression  "pdecl == null || !pdecl.Getter.IsNull && !pdecl.Setter.IsNull || !pdecl.NameToken.Contains(context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The conditional expression  "!pdecl.Getter.IsNull && !pdecl.Getter.Body.IsNull || !pdecl.Setter.IsNull && !pdecl.Setter.Body.IsNull"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddUsingAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddUsingAction.cs,GetActionsForType,The conditional expression  "(typeDefinition.Name == identifier || typeDefinition.Name == attributeIdentifier)  				    && typeDefinition.TypeParameterCount == tc  				    && lookup.IsAccessible(typeDefinition' false)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertDecToHexAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertDecToHexAction.cs,GetActions,The conditional expression  "value is string || value is bool || value is float || value is double || value is char"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,GetActions,The conditional expression  "node == null ||   			    (node.Operator != BinaryOperatorType.Equality && node.Operator != BinaryOperatorType.InEquality) ||  			    !node.OperatorToken.Contains(context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The conditional expression  "rr == null || rr.IsError || rr.Member.Name != "Equals" || !rr.Member.DeclaringType.IsKnownType(KnownTypeCode.Object)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHexToDecAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHexToDecAction.cs,GetActions,The conditional expression  "!((pexpr.Value is int) || (pexpr.Value is long) || (pexpr.Value is short) || (pexpr.Value is sbyte) ||  				(pexpr.Value is uint) || (pexpr.Value is ulong) || (pexpr.Value is ushort) || (pexpr.Value is byte))"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,InitializerConversionVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\ConvertInitializerToExplicitInitializationsAction.cs,VisitChildren,The conditional expression  "node is Expression && !(node is ObjectCreateExpression || node is ArrayInitializerExpression || node is NamedExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,CreateBackingStoreAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateBackingStoreAction.cs,GetActions,The conditional expression  "!(!property.Getter.IsNull && !property.Setter.IsNull && // automatic properties always need getter & setter  			      property.Getter.Body.IsNull &&  			      property.Setter.Body.IsNull)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,CreateConstructorDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateConstructorDeclarationAction.cs,GetActions,The conditional expression  "resolveResult == null || !resolveResult.IsError || resolveResult.Member.DeclaringTypeDefinition == null || resolveResult.Member.DeclaringTypeDefinition.IsSealed || resolveResult.Member.DeclaringTypeDefinition.Region.IsEmpty"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The conditional expression  "rr == null || rr.Member.Name != "Equals" || rr.Member.IsStatic || !rr.Member.ReturnType.IsKnownType(KnownTypeCode.Boolean)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,AddParensIfRequired,The conditional expression  "(expression is BinaryOperatorExpression) ||  			    (expression is UnaryOperatorExpression) ||  			    (expression is CastExpression) ||  			    (expression is AssignmentExpression) ||  				(expression is AsExpression) ||  			    (expression is IsExpression) ||  			    (expression is LambdaExpression) ||  			    (expression is ConditionalExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,RequiresParens,The conditional expression  "!(replaceWithNode is BinaryOperatorExpression) &&  			    !(replaceWithNode is AssignmentExpression) &&  			    !(replaceWithNode is AsExpression) &&  			    !(replaceWithNode is IsExpression) &&  			    !(replaceWithNode is CastExpression) &&  			    !(replaceWithNode is LambdaExpression) &&  				!(replaceWithNode is ConditionalExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The conditional expression  "context.Location != conditionalExpr.Condition.StartLocation && context.Location < conditionalExpr.Condition.EndLocation ||  			    context.Location != conditionalExpr.TrueExpression.StartLocation && conditionalExpr.TrueExpression.Contains(context.Location) ||  			    context.Location != conditionalExpr.FalseExpression.StartLocation && conditionalExpr.FalseExpression.Contains(context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,JoinStringAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs,GetAction,The conditional expression  "left == null || right == null ||  				!(left.Value is string) || !(right.Value is string) || !node.OperatorToken.Contains(context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The conditional expression  "propertyDeclaration == null || propertyDeclaration.Getter.IsNull || propertyDeclaration.Setter.IsNull || propertyDeclaration.Getter.Body.IsNull || propertyDeclaration.Setter.Body.IsNull"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,UseExplicitTypeAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs,GetVariableDeclarationStatement,The conditional expression  "result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location.Line' context.Location.Column) && result.Type.IsVar ()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,UseVarKeywordAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseVarKeywordAction.cs,GetVariableDeclarationStatement,The conditional expression  "result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location) && !result.Type.IsVar ()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,FixMethodsWithMethodImplAttribute,The conditional expression  "(methodDeclaration != null && IsEntityStatic(methodDeclaration) != isStatic) ||  					    (accessor != null && IsEntityStatic(accessor.GetParent<EntityDeclaration>()) != isStatic)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The conditional expression  "name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref""  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessParameter,The conditional expression  "!(typeKind == TypeKind.Class ||                        typeKind == TypeKind.Struct ||                        typeKind == TypeKind.Interface ||                        typeKind == TypeKind.Array) ||                      !collector.UsedVariables.Contains(variable)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetChecker,The conditional expression  "(node is InvocationExpression || node is ObjectCreateExpression) &&  						    (initializerDependsOnMembers || initializerDependsOnReferenceType)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsZero,The conditional expression  "pe.Value is double && (double)pe.Value == 0d ||   					pe.Value is float && (float)pe.Value == 0f ||   					pe.Value is decimal && (decimal)pe.Value == 0m"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The conditional expression  "binaryOperatorExpression.Operator != BinaryOperatorType.Equality &&  				    binaryOperatorExpression.Operator != BinaryOperatorType.InEquality &&  				    binaryOperatorExpression.Operator != BinaryOperatorType.GreaterThan &&  				    binaryOperatorExpression.Operator != BinaryOperatorType.GreaterThanOrEqual &&  				    binaryOperatorExpression.Operator != BinaryOperatorType.LessThan &&  				    binaryOperatorExpression.Operator != BinaryOperatorType.LessThanOrEqual"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitParameterDeclaration,The conditional expression  "parent.IsOverride || parent.IsAbstract || parent.IsPublic || parent.IsProtected"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitXmlChildren,The conditional expression  "child != null && (child is Comment || child is PreProcessorDirective || child.Role == Roles.NewLine)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,UnpackImplicitIdentityOrReferenceConversion,The conditional expression  "crr != null && crr.Conversion.IsImplicit && (crr.Conversion.IsIdentityConversion || crr.Conversion.IsReferenceConversion)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckType,The conditional expression  "rr == null || rr.IsError || rr.Type.Namespace != "System" || rr.Type.Name != "Nullable""  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The conditional expression  "methodDeclaration.HasModifier(Modifiers.Static) ||  				    methodDeclaration.HasModifier(Modifiers.Virtual) ||  				    methodDeclaration.HasModifier(Modifiers.Override) ||  				    methodDeclaration.HasModifier(Modifiers.New) ||  				    methodDeclaration.Attributes.Any()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,The conditional expression  "propertyDeclaration.HasModifier(Modifiers.Static) ||  				    propertyDeclaration.HasModifier(Modifiers.Virtual) ||  				    propertyDeclaration.HasModifier(Modifiers.Override) ||  				    propertyDeclaration.HasModifier(Modifiers.New) ||  				    propertyDeclaration.Attributes.Any()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPropertyDeclaration,The conditional expression  "!propertyDeclaration.Getter.IsNull && StaticVisitor.UsesNotStaticMember(ctx' propertyDeclaration.Getter.Body) ||  				    !propertyDeclaration.Setter.IsNull && StaticVisitor.UsesNotStaticMember(ctx' propertyDeclaration.Setter.Body)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The conditional expression  "eventDeclaration.HasModifier(Modifiers.Static) ||  				    eventDeclaration.HasModifier(Modifiers.Virtual) ||  				    eventDeclaration.HasModifier(Modifiers.Override) ||  				    eventDeclaration.HasModifier(Modifiers.New) ||  				    eventDeclaration.Attributes.Any()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitCustomEventDeclaration,The conditional expression  "!eventDeclaration.AddAccessor.IsNull && StaticVisitor.UsesNotStaticMember(ctx' eventDeclaration.AddAccessor.Body) ||  				    !eventDeclaration.RemoveAccessor.IsNull && StaticVisitor.UsesNotStaticMember(ctx' eventDeclaration.RemoveAccessor.Body)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitBinaryOperatorExpression,The conditional expression  "(binaryOperatorExpression.Operator == BinaryOperatorType.InEquality && boolConstant) ||  							(binaryOperatorExpression.Operator == BinaryOperatorType.Equality && !boolConstant)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The conditional expression  "resolveResult == null || !(resolveResult.TargetResult is ThisResolveResult) || resolveResult.Member.Name != "GetHashCode" ||  				    !resolveResult.Member.DeclaringTypeDefinition.IsKnownType(KnownTypeCode.Object)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,The conditional expression  "typeNode == null || varDecl == null || iterator == null || upperBound == null"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitForStatement,The conditional expression  "!(rr.Member.Name == "Length" && rr.Member.DeclaringType.Name == "Array" && rr.Member.DeclaringType.Namespace == "System") &&  				!(rr.Member.Name == "Count" && (IsEnumerable(rr.TargetResult.Type) || rr.TargetResult.Type.GetAllBaseTypes().Any(IsEnumerable)))"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The conditional expression  "rr.Member.Name != "CompareTo" ||   				    !rr.Member.DeclaringType.IsKnownType (KnownTypeCode.String) ||  				    rr.Member.Parameters.Count != 1 ||  				    !rr.Member.Parameters[0].Type.IsKnownType(KnownTypeCode.String)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The conditional expression  "!rr.Member.IsStatic ||  					rr.Member.Name != "Compare" ||   				    !rr.Member.DeclaringType.IsKnownType (KnownTypeCode.String) ||  				    !rr.Member.Parameters[0].Type.IsKnownType(KnownTypeCode.String)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The conditional expression  "rr.Member.Parameters.Count != 2 &&  				    rr.Member.Parameters.Count != 3 &&  				    rr.Member.Parameters.Count != 5 &&  				    rr.Member.Parameters.Count != 6"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The conditional expression  "resolveResult == null ||  				    resolveResult.Member.DeclaringTypeDefinition == null ||  				    resolveResult.Member.DeclaringTypeDefinition.KnownTypeCode != KnownTypeCode.Object ||  				    resolveResult.Member.Name != "ReferenceEquals" ||  				    invocationExpression.Arguments.All(arg => ctx.Resolve(arg).Type.IsReferenceType ?? true)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsSafeExpression,The conditional expression  "ope == UnaryOperatorType.Decrement || ope == UnaryOperatorType.Increment   							|| ope == UnaryOperatorType.PostDecrement || ope == UnaryOperatorType.PostIncrement"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessParameter,The conditional expression  "!(typeKind == TypeKind.Class ||  					  typeKind == TypeKind.Struct ||  					  typeKind == TypeKind.Interface ||  					  typeKind == TypeKind.Array) ||  				    parameter.Type is PrimitiveType ||  					!collector.UsedVariables.Contains(variable)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,IsSafeExpression,The conditional expression  "ope == UnaryOperatorType.Decrement || ope == UnaryOperatorType.Increment   							|| ope == UnaryOperatorType.PostDecrement || ope == UnaryOperatorType.PostIncrement"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The conditional expression  "unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement ||  					unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The conditional expression  "type.Name == typeof(ArgumentNullException).Name && type.Namespace == typeof(ArgumentNullException).Namespace ||  				    type.Name == typeof(ArgumentOutOfRangeException).Name && type.Namespace == typeof(ArgumentOutOfRangeException).Namespace ||  				    type.Name == typeof(DuplicateWaitObjectException).Name && type.Namespace == typeof(DuplicateWaitObjectException).Namespace"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CollectIssues,The conditional expression  "!(parent == null || parent is Statement || parent is LambdaExpression || parent is QueryExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The conditional expression  "isDeclareStatement && !containsRefOrOut && !containsLaterAssignments && !ContainsOtherAssignments(variableInitializer.Parent)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddIssue,The conditional expression  "isDeclareStatement && !containsRefOrOut && !containsLaterAssignments&& !ContainsOtherAssignments(variableInitializer.Parent)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetNodeKind,The conditional expression  "unaryExpr != null && unaryExpr.Expression == node &&  				(unaryExpr.Operator == UnaryOperatorType.Increment ||  				 unaryExpr.Operator == UnaryOperatorType.PostIncrement ||  				 unaryExpr.Operator == UnaryOperatorType.Decrement ||  				 unaryExpr.Operator == UnaryOperatorType.PostDecrement)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,RecursiveDetector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\FunctionNeverReturnsIssue.cs,CheckRecursion,The conditional expression  "operatorType == UnaryOperatorType.Increment ||  							operatorType == UnaryOperatorType.Decrement ||  							operatorType == UnaryOperatorType.PostIncrement ||  							operatorType == UnaryOperatorType.PostDecrement"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,CheckName,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,IsValidName,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,HasValidRule,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexCondition,The conditional expression  "expr is PrimitiveExpression || expr is IdentifierExpression || expr is MemberReferenceExpression || expr is InvocationExpression"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertToConstantIssue.cs,VisitUnaryOperatorExpression,The conditional expression  "unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement ||  					    unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddExceptionDescriptionAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddExceptionDescriptionAction.cs,SearchInsertionNode,The conditional expression  "result != null && (result.Role == Roles.Comment || result.Role == Roles.NewLine || result.Role == Roles.Whitespace)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,HasReachableNonReturnNodes,The conditional expression  "!(nextStatement is ReturnStatement ||  					    nextStatement is GotoStatement ||  					    nextStatement is GotoCaseStatement ||  					    nextStatement is GotoDefaultStatement ||  					    nextStatement is ContinueStatement ||  					    nextStatement is BreakStatement)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AnalysisStatementCollector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\PossibleMultipleEnumerationIssue.cs,GetStatements,The conditional expression  "parent is BlockStatement || parent is MethodDeclaration ||  						parent is AnonymousMethodExpression || parent is LambdaExpression"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,CreateAction,The conditional expression  "!expr.DescendantsAndSelf.All(x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr) &&  				!expr.DescendantsAndSelf.All(x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseAnd)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,GetActions,The conditional expression  "!(node is Statement) && !(node is Comment) && !(node is NewLineNode) && !(node is PreProcessorDirective)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The conditional expression  "unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement ||  					unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement"  is complex.
Virtual Method Call from Constructor,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GatherVisitor,The constructor "GatherVisitor" calls a virtual method "TranslateString".
Empty Catch Block,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The method has an empty catch block.
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,HasDifferentEqualsMethod,The following statement contains a magic number: foreach (var method in methods) {  				if (method.Parameters.Count == 2 && method.FullName != "System.Object.Equals") {  					return true;  				}  			}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The following statement contains a magic number: if (node.Arguments.Count != 2 && (memberRefExpr == null || node.Arguments.Count != 1))  				yield break;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetName,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  				foreach (var vn in variableNames) {  					string id = i > 0 ? vn + i : vn;  					var rr = state.LookupSimpleNameOrTypeName(id' new IType[0]' NameLookupMode.Expression);  					if (rr.IsError)   						return id;  				}  			}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AccessPath,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\AccessPath.cs,GetHashCode,The following statement contains a magic number: int hash = VariableRoot != null ? VariableRoot.GetHashCode() : 37;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AccessPath,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\AccessPath.cs,GetHashCode,The following statement contains a magic number: foreach (var member in MemberPath)  				hash ^= 31 * member.GetHashCode();
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,JoinStringAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs,GetAction,The following statement contains a magic number: return new CodeAction (context.TranslateString ("Join strings")' script => {  				var start = context.GetOffset (left.EndLocation) - 1;  				var end = context.GetOffset (right.StartLocation) + (isLeftVerbatim ? 2 : 1);  				script.RemoveText (start' end - start);  			}' node.OperatorToken);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,GetAction,The following statement contains a magic number: return new CodeAction(context.TranslateString("Convert to query syntax")' script => {  				List<string> newNames = new List<string>();  				var identifiers = newNode.Descendants.OfType<Identifier>().ToList();  				foreach (var identifier in identifiers.Where(id => id.Name.StartsWith("<>")))  				{  					int nameId = int.Parse(identifier.Name.Substring(2)) - 1;  					while (newNames.Count <= nameId) {  						//Find new name    						//This might skip some legitimate names' but that's not a real problem.  						var topMostBlock = node.AncestorsAndSelf.OfType<BlockStatement>().Last();  						var variableDeclarations = topMostBlock.Descendants.OfType<VariableDeclarationStatement>();  						var declaredNames = variableDeclarations.SelectMany(variableDeclaration => variableDeclaration.Variables).Select(variable => variable.Name).ToList();    						int currentId = 1;  						while (identifiers.Any(id => id.Name == "_" + currentId) || declaredNames.Contains("_" + currentId)) {  							++currentId;  						}    						newNames.Add("_" + currentId);  					}    					identifier.Name = newNames[nameId];  				}    				if (NeedsParenthesis(node)) {  					newNode = new ParenthesizedExpression(newNode);  				}    				script.Replace(node' newNode);  			}' node);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitDeclarationListAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitDeclarationListAction.cs,GetAction,The following statement contains a magic number: if (initializers.Count < 2)  				yield break;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (pexpr.LiteralValue.StartsWith("@"' StringComparison.Ordinal)) {  				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 2) &&  					new TextLocation(context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  					yield break;  				}  			} else {  				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 1) && new TextLocation(context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) {  					yield break;  				}  			}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (pexpr.LiteralValue.StartsWith("@"' StringComparison.Ordinal)) {  				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 2) &&  					new TextLocation(context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  					yield break;  				}  			} else {  				if (!(pexpr.StartLocation < new TextLocation(context.Location.Line' context.Location.Column - 1) && new TextLocation(context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) {  					yield break;  				}  			}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction(context.TranslateString("Use 'string.Format()'")'  			                             script => {  				var stringType = new PrimitiveType("string");  				var formatInvocation = stringType.Invoke("Format");  				var formatLiteral = new PrimitiveExpression("");  				var counter = 0;  				var arguments = new List<Expression>();    				formatInvocation.Arguments.Add(formatLiteral);  				var concatItems = GetConcatItems(context' expr);  				bool hasVerbatimStrings = false;  				bool hasNonVerbatimStrings = false;    				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;  						if (stringLiteral.LiteralValue[0] == '@') {  							hasVerbatimStrings = true;  						} else {  							hasNonVerbatimStrings = true;  						}  					}  				}  					  				var format = new StringBuilder();  				var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  				format.Append('"');  				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;    						string rawLiteral;  						if (hasVerbatimStrings && hasNonVerbatimStrings) {  							rawLiteral = stringLiteral.Value.ToString().Replace("\""' "\"\"");  						} else {  							if (stringLiteral.LiteralValue[0] == '@') {  								verbatim = true;  								rawLiteral = stringLiteral.LiteralValue.Substring(2' stringLiteral.LiteralValue.Length - 3);  							} else {  								rawLiteral = stringLiteral.LiteralValue.Substring(1' stringLiteral.LiteralValue.Length - 2);  							}  						}  						format.Append(QuoteBraces(rawLiteral));  					} else {  						Expression myItem = RemoveUnnecessaryToString(item);  						string itemFormatStr = DetermineItemFormatString(ref myItem);  							  						var index = IndexOf(arguments' myItem);  						if (index == -1) {  							// new item  							formatInvocation.Arguments.Add(myItem.Clone());  							arguments.Add(item);  							format.Append("{" + counter++ + itemFormatStr + "}");  						} else {  							// existing item  							format.Append("{" + index + itemFormatStr + "}");  						}  					}  				}  				format.Append('"');  				if (verbatim)  					format.Insert(0' '@');  				formatLiteral.SetValue(format.ToString()' format.ToString());  				if (arguments.Count > 0)  					script.Replace(expr' formatInvocation);  				else  					script.Replace(expr' formatLiteral);  			}' node);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction(context.TranslateString("Use 'string.Format()'")'  			                             script => {  				var stringType = new PrimitiveType("string");  				var formatInvocation = stringType.Invoke("Format");  				var formatLiteral = new PrimitiveExpression("");  				var counter = 0;  				var arguments = new List<Expression>();    				formatInvocation.Arguments.Add(formatLiteral);  				var concatItems = GetConcatItems(context' expr);  				bool hasVerbatimStrings = false;  				bool hasNonVerbatimStrings = false;    				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;  						if (stringLiteral.LiteralValue[0] == '@') {  							hasVerbatimStrings = true;  						} else {  							hasNonVerbatimStrings = true;  						}  					}  				}  					  				var format = new StringBuilder();  				var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  				format.Append('"');  				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;    						string rawLiteral;  						if (hasVerbatimStrings && hasNonVerbatimStrings) {  							rawLiteral = stringLiteral.Value.ToString().Replace("\""' "\"\"");  						} else {  							if (stringLiteral.LiteralValue[0] == '@') {  								verbatim = true;  								rawLiteral = stringLiteral.LiteralValue.Substring(2' stringLiteral.LiteralValue.Length - 3);  							} else {  								rawLiteral = stringLiteral.LiteralValue.Substring(1' stringLiteral.LiteralValue.Length - 2);  							}  						}  						format.Append(QuoteBraces(rawLiteral));  					} else {  						Expression myItem = RemoveUnnecessaryToString(item);  						string itemFormatStr = DetermineItemFormatString(ref myItem);  							  						var index = IndexOf(arguments' myItem);  						if (index == -1) {  							// new item  							formatInvocation.Arguments.Add(myItem.Clone());  							arguments.Add(item);  							format.Append("{" + counter++ + itemFormatStr + "}");  						} else {  							// existing item  							format.Append("{" + index + itemFormatStr + "}");  						}  					}  				}  				format.Append('"');  				if (verbatim)  					format.Insert(0' '@');  				formatLiteral.SetValue(format.ToString()' format.ToString());  				if (arguments.Count > 0)  					script.Replace(expr' formatInvocation);  				else  					script.Replace(expr' formatLiteral);  			}' node);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction(context.TranslateString("Use 'string.Format()'")'  			                             script => {  				var stringType = new PrimitiveType("string");  				var formatInvocation = stringType.Invoke("Format");  				var formatLiteral = new PrimitiveExpression("");  				var counter = 0;  				var arguments = new List<Expression>();    				formatInvocation.Arguments.Add(formatLiteral);  				var concatItems = GetConcatItems(context' expr);  				bool hasVerbatimStrings = false;  				bool hasNonVerbatimStrings = false;    				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;  						if (stringLiteral.LiteralValue[0] == '@') {  							hasVerbatimStrings = true;  						} else {  							hasNonVerbatimStrings = true;  						}  					}  				}  					  				var format = new StringBuilder();  				var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  				format.Append('"');  				foreach (var item in concatItems) {  					if (IsStringLiteral(item)) {  						var stringLiteral = (PrimitiveExpression)item;    						string rawLiteral;  						if (hasVerbatimStrings && hasNonVerbatimStrings) {  							rawLiteral = stringLiteral.Value.ToString().Replace("\""' "\"\"");  						} else {  							if (stringLiteral.LiteralValue[0] == '@') {  								verbatim = true;  								rawLiteral = stringLiteral.LiteralValue.Substring(2' stringLiteral.LiteralValue.Length - 3);  							} else {  								rawLiteral = stringLiteral.LiteralValue.Substring(1' stringLiteral.LiteralValue.Length - 2);  							}  						}  						format.Append(QuoteBraces(rawLiteral));  					} else {  						Expression myItem = RemoveUnnecessaryToString(item);  						string itemFormatStr = DetermineItemFormatString(ref myItem);  							  						var index = IndexOf(arguments' myItem);  						if (index == -1) {  							// new item  							formatInvocation.Arguments.Add(myItem.Clone());  							arguments.Add(item);  							format.Append("{" + counter++ + itemFormatStr + "}");  						} else {  							// existing item  							format.Append("{" + index + itemFormatStr + "}");  						}  					}  				}  				format.Append('"');  				if (verbatim)  					format.Insert(0' '@');  				formatLiteral.SetValue(format.ToString()' format.ToString());  				if (arguments.Count > 0)  					script.Replace(expr' formatInvocation);  				else  					script.Replace(expr' formatLiteral);  			}' node);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following statement contains a magic number: while (stack.Count > 0) {  					var cur = stack.Pop();  					var el = cur as AXmlElement;  					if (el != null) {  						switch (el.Name) {  							case "typeparam":  							case "typeparamref":  								var name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								if (member != null && member.SymbolKind == SymbolKind.TypeDefinition) {  									var type = (ITypeDefinition)member;  									if (!type.TypeArguments.Any(arg => arg.Name == name.Value)) {  										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value));  									}  								}  								break;  							case "param":  							case "paramref":  								name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								var m = member as IParameterizedMember;  								if (m != null && m.Parameters.Any(p => p.Name == name.Value))  									break;  								var dtype = member as ITypeDefinition;  								if ((dtype != null) && (dtype.Kind == TypeKind.Delegate)) {  									var invokeMethod = dtype.Methods.FirstOrDefault(method => method.Name == "Invoke");  									if ((invokeMethod != null) && invokeMethod.Parameters.Any(p => p.Name == name.Value))  										break;  								}  								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref")  									break;  								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value));  								break;  							case "exception":  							case "seealso":  							case "see":  								var cref = el.Attributes.FirstOrDefault(attr => attr.Name == "cref");  								if (cref == null)  									break;  								try {  									var trctx = ctx.Resolver.TypeResolveContext;  									if (member is IMember)  										trctx = trctx.WithCurrentTypeDefinition(member.DeclaringTypeDefinition).WithCurrentMember((IMember)member);  									if (member is ITypeDefinition)  										trctx = trctx.WithCurrentTypeDefinition((ITypeDefinition)member);  									var state = ctx.Resolver.GetResolverStateBefore(node);  									if (state.CurrentUsingScope != null)  										trctx = trctx.WithUsingScope(state.CurrentUsingScope);  									var cdc = new CSharpDocumentationComment (emptySource' trctx);  									var entity = cdc.ResolveCref(cref.Value);  									  									if (entity == null) {  										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value));  									}  								} catch (Exception e) {  									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message));  								}  								break;  								  					}  					}  					foreach (var child in cur.Children)  						stack.Push(child);  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following statement contains a magic number: while (stack.Count > 0) {  					var cur = stack.Pop();  					var el = cur as AXmlElement;  					if (el != null) {  						switch (el.Name) {  							case "typeparam":  							case "typeparamref":  								var name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								if (member != null && member.SymbolKind == SymbolKind.TypeDefinition) {  									var type = (ITypeDefinition)member;  									if (!type.TypeArguments.Any(arg => arg.Name == name.Value)) {  										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value));  									}  								}  								break;  							case "param":  							case "paramref":  								name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								var m = member as IParameterizedMember;  								if (m != null && m.Parameters.Any(p => p.Name == name.Value))  									break;  								var dtype = member as ITypeDefinition;  								if ((dtype != null) && (dtype.Kind == TypeKind.Delegate)) {  									var invokeMethod = dtype.Methods.FirstOrDefault(method => method.Name == "Invoke");  									if ((invokeMethod != null) && invokeMethod.Parameters.Any(p => p.Name == name.Value))  										break;  								}  								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref")  									break;  								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value));  								break;  							case "exception":  							case "seealso":  							case "see":  								var cref = el.Attributes.FirstOrDefault(attr => attr.Name == "cref");  								if (cref == null)  									break;  								try {  									var trctx = ctx.Resolver.TypeResolveContext;  									if (member is IMember)  										trctx = trctx.WithCurrentTypeDefinition(member.DeclaringTypeDefinition).WithCurrentMember((IMember)member);  									if (member is ITypeDefinition)  										trctx = trctx.WithCurrentTypeDefinition((ITypeDefinition)member);  									var state = ctx.Resolver.GetResolverStateBefore(node);  									if (state.CurrentUsingScope != null)  										trctx = trctx.WithUsingScope(state.CurrentUsingScope);  									var cdc = new CSharpDocumentationComment (emptySource' trctx);  									var entity = cdc.ResolveCref(cref.Value);  									  									if (entity == null) {  										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value));  									}  								} catch (Exception e) {  									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message));  								}  								break;  								  					}  					}  					foreach (var child in cur.Children)  						stack.Push(child);  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following statement contains a magic number: while (stack.Count > 0) {  					var cur = stack.Pop();  					var el = cur as AXmlElement;  					if (el != null) {  						switch (el.Name) {  							case "typeparam":  							case "typeparamref":  								var name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								if (member != null && member.SymbolKind == SymbolKind.TypeDefinition) {  									var type = (ITypeDefinition)member;  									if (!type.TypeArguments.Any(arg => arg.Name == name.Value)) {  										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value));  									}  								}  								break;  							case "param":  							case "paramref":  								name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								var m = member as IParameterizedMember;  								if (m != null && m.Parameters.Any(p => p.Name == name.Value))  									break;  								var dtype = member as ITypeDefinition;  								if ((dtype != null) && (dtype.Kind == TypeKind.Delegate)) {  									var invokeMethod = dtype.Methods.FirstOrDefault(method => method.Name == "Invoke");  									if ((invokeMethod != null) && invokeMethod.Parameters.Any(p => p.Name == name.Value))  										break;  								}  								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref")  									break;  								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value));  								break;  							case "exception":  							case "seealso":  							case "see":  								var cref = el.Attributes.FirstOrDefault(attr => attr.Name == "cref");  								if (cref == null)  									break;  								try {  									var trctx = ctx.Resolver.TypeResolveContext;  									if (member is IMember)  										trctx = trctx.WithCurrentTypeDefinition(member.DeclaringTypeDefinition).WithCurrentMember((IMember)member);  									if (member is ITypeDefinition)  										trctx = trctx.WithCurrentTypeDefinition((ITypeDefinition)member);  									var state = ctx.Resolver.GetResolverStateBefore(node);  									if (state.CurrentUsingScope != null)  										trctx = trctx.WithUsingScope(state.CurrentUsingScope);  									var cdc = new CSharpDocumentationComment (emptySource' trctx);  									var entity = cdc.ResolveCref(cref.Value);  									  									if (entity == null) {  										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value));  									}  								} catch (Exception e) {  									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message));  								}  								break;  								  					}  					}  					foreach (var child in cur.Children)  						stack.Push(child);  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following statement contains a magic number: while (stack.Count > 0) {  					var cur = stack.Pop();  					var el = cur as AXmlElement;  					if (el != null) {  						switch (el.Name) {  							case "typeparam":  							case "typeparamref":  								var name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								if (member != null && member.SymbolKind == SymbolKind.TypeDefinition) {  									var type = (ITypeDefinition)member;  									if (!type.TypeArguments.Any(arg => arg.Name == name.Value)) {  										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value));  									}  								}  								break;  							case "param":  							case "paramref":  								name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								var m = member as IParameterizedMember;  								if (m != null && m.Parameters.Any(p => p.Name == name.Value))  									break;  								var dtype = member as ITypeDefinition;  								if ((dtype != null) && (dtype.Kind == TypeKind.Delegate)) {  									var invokeMethod = dtype.Methods.FirstOrDefault(method => method.Name == "Invoke");  									if ((invokeMethod != null) && invokeMethod.Parameters.Any(p => p.Name == name.Value))  										break;  								}  								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref")  									break;  								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value));  								break;  							case "exception":  							case "seealso":  							case "see":  								var cref = el.Attributes.FirstOrDefault(attr => attr.Name == "cref");  								if (cref == null)  									break;  								try {  									var trctx = ctx.Resolver.TypeResolveContext;  									if (member is IMember)  										trctx = trctx.WithCurrentTypeDefinition(member.DeclaringTypeDefinition).WithCurrentMember((IMember)member);  									if (member is ITypeDefinition)  										trctx = trctx.WithCurrentTypeDefinition((ITypeDefinition)member);  									var state = ctx.Resolver.GetResolverStateBefore(node);  									if (state.CurrentUsingScope != null)  										trctx = trctx.WithUsingScope(state.CurrentUsingScope);  									var cdc = new CSharpDocumentationComment (emptySource' trctx);  									var entity = cdc.ResolveCref(cref.Value);  									  									if (entity == null) {  										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value));  									}  								} catch (Exception e) {  									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message));  								}  								break;  								  					}  					}  					foreach (var child in cur.Children)  						stack.Push(child);  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ComputeConflicts,The following statement contains a magic number: foreach (var list in dict.Values.Where(list => list.Count >= 2)) {  					for (var i = 0; i < list.Count - 1; i++) {  						var firstMethod = list [i];  						for (var j = i + 1; j < list.Count; j++) {  							var secondMethod = list [j];  							if (firstMethod.Body.IsMatch(secondMethod.Body)) {  								AddIssue(new CodeIssue(secondMethod.NameToken'  								         string.Format("Method '{0}' has the same with '{1}' "' secondMethod.Name'  								              firstMethod.Name)' string.Format("Method '{0}' has the same with '{1}' "' secondMethod.Name'  								                                 firstMethod.Name)'  								                                 script => {  									InvokeMethod(script' firstMethod' secondMethod); }  								));  							}  						}  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.IsStatic) {  					if (rr.Member.Parameters.Count != 2)  						return;  					if (CSharpUtil.AreConditionsEqual(invocationExpression.Arguments.FirstOrDefault()' invocationExpression.Arguments.Last())) {  						if ((invocationExpression.Parent is UnaryOperatorExpression) && ((UnaryOperatorExpression)invocationExpression.Parent).Operator == UnaryOperatorType.Not) {  							AddIssue(invocationExpression.Parent' invocationExpression.Parent' false);  						} else {  							AddIssue(invocationExpression' invocationExpression' true);  						}  					}  				} else {  					if (rr.Member.Parameters.Count != 1)  						return;  					var target = invocationExpression.Target as MemberReferenceExpression;  					if (target == null)  						return;  					if (CSharpUtil.AreConditionsEqual(invocationExpression.Arguments.FirstOrDefault()' target.Target)) {  						if ((invocationExpression.Parent is UnaryOperatorExpression) && ((UnaryOperatorExpression)invocationExpression.Parent).Operator == UnaryOperatorType.Not) {  							AddIssue(invocationExpression.Parent' invocationExpression.Parent' false);  						} else {  							AddIssue(invocationExpression' invocationExpression' true);  						}  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPrimitiveExpression,The following statement contains a magic number: if (literalValue.Length < 2) {  					return;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitPrimitiveExpression,The following statement contains a magic number: char prevChar = literalValue [literalValue.Length - 2];
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddXmlIssue,The following statement contains a magic number: AddIssue(new CodeIssue(new TextLocation(cmt.StartLocation.Line' cmt.StartLocation.Column + 3 + col)'  				         new TextLocation(cmt.StartLocation.Line' cmt.StartLocation.Column + 3 + col + length)'  					str));
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddXmlIssue,The following statement contains a magic number: AddIssue(new CodeIssue(new TextLocation(cmt.StartLocation.Line' cmt.StartLocation.Column + 3 + col)'  				         new TextLocation(cmt.StartLocation.Line' cmt.StartLocation.Column + 3 + col + length)'  					str));
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following statement contains a magic number: using (var reader = new XmlTextReader(new StringReader(xml.ToString()))) {  					reader.XmlResolver = null;  					try {  						while (reader.Read()) {  							if (member == null)  								continue;  							if (reader.NodeType == XmlNodeType.Element) {  								switch (reader.Name) {  									case "param":  										reader.MoveToFirstAttribute();  										var line = reader.LineNumber;  										var name = reader.GetAttribute("name");  										if (name == null)  											break;  										parameters.Add(Tuple.Create(name' line));  										break;    								}  							}  						}  					} catch (XmlException) {  					}    					if (storedXmlComment.Count > 0 && parameters.Count > 0) {  						var pm = member as IParameterizedMember;  						if (pm != null) {  							for (int i = 0; i < pm.Parameters.Count; i++) {  								var p = pm.Parameters [i];  								if (!parameters.Any(tp => tp.Item1 == p.Name)) {  									AstNode before = i < parameters.Count ? storedXmlComment [parameters [i].Item2 - 2] : null;  									AstNode afterNode = before == null ? storedXmlComment [storedXmlComment.Count - 1] : null;  									AddIssue(new CodeIssue(  										GetParameterHighlightNode(node' i)'  										string.Format(ctx.TranslateString("Missing xml documentation for Parameter '{0}'")' p.Name)'  										string.Format(ctx.TranslateString("Create xml documentation for Parameter '{0}'")' p.Name)'  										script => {  										if (before != null) {  											script.InsertBefore(  												before'   												new Comment(string.Format(" <param name = \"{0}\"></param>"' p.Name)' CommentType.Documentation)  												);  										} else {  											script.InsertAfter(  												afterNode'   												new Comment(string.Format(" <param name = \"{0}\"></param>"' p.Name)' CommentType.Documentation)  												);  										}  										}));  								}  							}    						}  					}  					storedXmlComment.Clear();  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitSwitchSection,The following statement contains a magic number: if (switchSection.CaseLabels.Count < 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (matches >= 2) {  					AddIssue(new CodeIssue(currentExpression.EndLocation'  					         invocationExpression.EndLocation'  					         ctx.TranslateString("Redundant Linq method invocations")'  					         ctx.TranslateString("Remove redundant method invocations")'  					         script => {    						string lastInvocation = ((MemberReferenceExpression)invocationExpression.Target).MemberName;  						var newMemberReference = new MemberReferenceExpression(currentExpression.Clone()'  						                                                       lastInvocation);  						var newInvocation = new InvocationExpression(newMemberReference);    						script.Replace(invocationExpression' newInvocation);    						}));  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: bool endsReversed = invocations.Count(invocation => ((MemberReferenceExpression)invocation.Target).MemberName == "Reverse") % 2 != 0;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitIfElseStatement,The following statement contains a magic number: if (switchSections.Count(s => !s.CaseLabels.Any(l => l.Expression.IsNull)) <= 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count != 2 &&  				    rr.Member.Parameters.Count != 3 &&  				    rr.Member.Parameters.Count != 5 &&  				    rr.Member.Parameters.Count != 6)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count != 2 &&  				    rr.Member.Parameters.Count != 3 &&  				    rr.Member.Parameters.Count != 5 &&  				    rr.Member.Parameters.Count != 6)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count != 2 &&  				    rr.Member.Parameters.Count != 3 &&  				    rr.Member.Parameters.Count != 5 &&  				    rr.Member.Parameters.Count != 6)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count != 2 &&  				    rr.Member.Parameters.Count != 3 &&  				    rr.Member.Parameters.Count != 5 &&  				    rr.Member.Parameters.Count != 6)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 3) {  					if (!rr.Member.Parameters[2].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[2].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[2].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(2);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 3) {  					if (!rr.Member.Parameters[2].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[2].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[2].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(2);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 3) {  					if (!rr.Member.Parameters[2].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[2].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[2].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(2);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 3) {  					if (!rr.Member.Parameters[2].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[2].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[2].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(2);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 3) {  					if (!rr.Member.Parameters[2].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[2].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[2].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(2);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 6) {  					if (!rr.Member.Parameters[5].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[5].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[5].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(5);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 6) {  					if (!rr.Member.Parameters[5].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[5].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[5].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(5);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 6) {  					if (!rr.Member.Parameters[5].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[5].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[5].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(5);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 6) {  					if (!rr.Member.Parameters[5].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[5].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[5].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(5);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following statement contains a magic number: if (rr.Member.Parameters.Count == 6) {  					if (!rr.Member.Parameters[5].Type.IsKnownType(KnownTypeCode.Boolean))  						return;  					if (rr.Arguments[5].IsCompileTimeConstant) {  						ignoreCase = (bool)rr.Arguments[5].ConstantValue;  					} else {  						caseArg = invocationExpression.Arguments.ElementAt(5);  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddArgument,The following statement contains a magic number: if (invocationExpression.Arguments.Count() <= 3) {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(2).Select(a => a.Clone()));   				} else {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(5).Select(a => a.Clone()));   				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddArgument,The following statement contains a magic number: if (invocationExpression.Arguments.Count() <= 3) {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(2).Select(a => a.Clone()));   				} else {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(5).Select(a => a.Clone()));   				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,AddArgument,The following statement contains a magic number: if (invocationExpression.Arguments.Count() <= 3) {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(2).Select(a => a.Clone()));   				} else {  					copy.Arguments.AddRange(invocationExpression.Arguments.Take(5).Select(a => a.Clone()));   				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckNullComparison,The following statement contains a magic number: if (rr.Type.IsReferenceType == false) {  					// nullable check  					if (NullableType.IsNullable(rr.Type))  						return false;    					var conversion = ctx.GetConversion(nullNode);  					if (conversion.ConversionAfterUserDefinedOperator == Conversion.IdentityConversion)  						return false;    					// check for user operators  					foreach (var op in rr.Type.GetMethods(m => m.SymbolKind == SymbolKind.Operator && m.Parameters.Count == 2)) {  						if (op.Parameters[0].Type.IsReferenceType == false && op.Parameters[1].Type.IsReferenceType == false)  							continue;  						if (binaryOperatorExpression.Operator == BinaryOperatorType.Equality && op.Name == "op_Equality")  							return false;  						if (binaryOperatorExpression.Operator == BinaryOperatorType.InEquality && op.Name == "op_Inequality")  							return false;  					}    					AddIssue(binaryOperatorExpression' binaryOperatorExpression.Operator != BinaryOperatorType.Equality);  					return true;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitSyntaxTree,The following statement contains a magic number: if (!ctx.Supports(new Version(3' 0)))  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The following statement contains a magic number: if (type.Name == typeof(ArgumentException).Name && type.Namespace == typeof(ArgumentException).Namespace) {  					if (objectCreateExpression.Arguments.Count >= 2) {  						altParam = objectCreateExpression.Arguments.ElementAt(0);  						paramNode = objectCreateExpression.Arguments.ElementAt(1);    					}  					return paramNode != null;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The following statement contains a magic number: if (type.Name == typeof(ArgumentNullException).Name && type.Namespace == typeof(ArgumentNullException).Namespace ||  				    type.Name == typeof(ArgumentOutOfRangeException).Name && type.Namespace == typeof(ArgumentOutOfRangeException).Namespace ||  				    type.Name == typeof(DuplicateWaitObjectException).Name && type.Namespace == typeof(DuplicateWaitObjectException).Namespace) {  					canAddParameterName = objectCreateExpression.Arguments.Count == 1;  					if (objectCreateExpression.Arguments.Count >= 1) {  						paramNode = objectCreateExpression.Arguments.FirstOrDefault();  						if (objectCreateExpression.Arguments.Count == 2) {  							altParam = objectCreateExpression.Arguments.ElementAt(1);  							if (!context.Resolve(altParam).Type.IsKnownType(KnownTypeCode.String))  								paramNode = null;  						}  						if (objectCreateExpression.Arguments.Count == 3)  							altParam = objectCreateExpression.Arguments.ElementAt(2);  					}  					return paramNode != null;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The following statement contains a magic number: if (type.Name == typeof(ArgumentNullException).Name && type.Namespace == typeof(ArgumentNullException).Namespace ||  				    type.Name == typeof(ArgumentOutOfRangeException).Name && type.Namespace == typeof(ArgumentOutOfRangeException).Namespace ||  				    type.Name == typeof(DuplicateWaitObjectException).Name && type.Namespace == typeof(DuplicateWaitObjectException).Namespace) {  					canAddParameterName = objectCreateExpression.Arguments.Count == 1;  					if (objectCreateExpression.Arguments.Count >= 1) {  						paramNode = objectCreateExpression.Arguments.FirstOrDefault();  						if (objectCreateExpression.Arguments.Count == 2) {  							altParam = objectCreateExpression.Arguments.ElementAt(1);  							if (!context.Resolve(altParam).Type.IsKnownType(KnownTypeCode.String))  								paramNode = null;  						}  						if (objectCreateExpression.Arguments.Count == 3)  							altParam = objectCreateExpression.Arguments.ElementAt(2);  					}  					return paramNode != null;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckExceptionType,The following statement contains a magic number: if (type.Name == typeof(ArgumentNullException).Name && type.Namespace == typeof(ArgumentNullException).Namespace ||  				    type.Name == typeof(ArgumentOutOfRangeException).Name && type.Namespace == typeof(ArgumentOutOfRangeException).Namespace ||  				    type.Name == typeof(DuplicateWaitObjectException).Name && type.Namespace == typeof(DuplicateWaitObjectException).Namespace) {  					canAddParameterName = objectCreateExpression.Arguments.Count == 1;  					if (objectCreateExpression.Arguments.Count >= 1) {  						paramNode = objectCreateExpression.Arguments.FirstOrDefault();  						if (objectCreateExpression.Arguments.Count == 2) {  							altParam = objectCreateExpression.Arguments.ElementAt(1);  							if (!context.Resolve(altParam).Type.IsKnownType(KnownTypeCode.String))  								paramNode = null;  						}  						if (objectCreateExpression.Arguments.Count == 3)  							altParam = objectCreateExpression.Arguments.ElementAt(2);  					}  					return paramNode != null;  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitMethodDeclaration,The following statement contains a magic number: if (currentTypeIsPartial && methodDeclaration.Parameters.Count == 2) {  					if (methodDeclaration.Parameters.First().Name == "sender") {  						// Looks like an event handler; the registration might be in the designer part  						return;  					}  				}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetFixes,The following statement contains a magic number: Action<Script> action = script =>  			{  				var newName = LocalVariableNamePicker.PickSafeName (  					containingStatement.GetParent<EntityDeclaration> ()'  					Enumerable.Range (1' 100).Select (i => variableName + i));    				var variableDecl = new VariableDeclarationStatement (new SimpleType("var")' newName'   																	 new IdentifierExpression (variableName));  				  				if (containingStatement.Parent is BlockStatement || containingStatement.Parent is SwitchSection) {  					script.InsertBefore (containingStatement' variableDecl);  				} else {  					var offset = script.GetCurrentOffset (containingStatement.StartLocation);  					script.InsertBefore (containingStatement' variableDecl);  					script.InsertText (offset' "{");  					script.InsertText (script.GetCurrentOffset (containingStatement.EndLocation)' "}");  					script.FormatText (containingStatement.Parent);  				}    				var textNodes = new List<AstNode> ();  				textNodes.Add (variableDecl.Variables.First ().NameToken);    				foreach (var reference in env.GetAllReferences ()) {  					var identifier = new IdentifierExpression (newName);  					script.Replace (reference.AstNode' identifier);  					textNodes.Add (identifier);  				}  				script.Link (textNodes.ToArray ());  			};
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The following statement contains a magic number: if (whereResolve.Member.Parameters.Count != 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The following statement contains a magic number: if (predResolve.Type.TypeParameterCount != 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The following statement contains a magic number: if (selectResolve.Member.Parameters.Count != 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithOfTypeAny.cs,VisitInvocationExpression,The following statement contains a magic number: if (predResolve.Type.TypeParameterCount != 2)  					return;
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,CreateVisitor,The following statement contains a magic number: if (!context.Supports(new Version(5' 0))) {  				//Old C# version -- async/await are not available  				return null;  			}
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMultiplyToShiftAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs,GetAction,The following statement contains a magic number: var log2 = (int)Math.Log(value' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SupportsIndexingCriterion,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,SatisfiedBy,The following statement contains a magic number: return accessors.Any(member => {  				var parameterizedMember = member as IParameterizedMember;  				if (parameterizedMember == null)  					return false;    				if (isWriteAccess) {  					var parameterCount = member.Parameters.Count;  					if (member.Name != "set_Item" || parameterCount < 2)  						return false;  					var indexerElementType = parameterizedMember.Parameters.Last().Type;  					var indexerParameterTypes = parameterizedMember.Parameters.Take(parameterCount - 1).Select(p => p.Type).ToList();  					return IsSignatureMatch(indexerElementType' indexerParameterTypes);  				} else {  					if (member.Name != "get_Item" || member.Parameters.Count < 1)  						return false;  					var indexerElementType = parameterizedMember.ReturnType;  					var indexerParameterTypes = parameterizedMember.Parameters.Select(p => p.Type).ToList();  					return IsSignatureMatch(indexerElementType' indexerParameterTypes);  				}  			});
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The following statement contains a magic number: if (suppressMessageCheckId != null) {  				foreach (var attr in this.ctx.Compilation.MainAssembly.AssemblyAttributes) {  					if (attr.AttributeType.Name == "SuppressMessageAttribute" && attr.AttributeType.Namespace == "System.Diagnostics.CodeAnalysis") {  						if (attr.PositionalArguments.Count < 2)  							return;  						var category = attr.PositionalArguments [0].ConstantValue;  						if (category == null || category.ToString() != suppressMessageCategory)  							continue;  						var checkId = attr.PositionalArguments [1].ConstantValue;  						if (checkId == null || checkId.ToString() != suppressMessageCheckId)   							continue;  						isGloballySuppressed = true;  					}  				}  			}
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase<T>,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitAttribute,The following statement contains a magic number: if (resolveResult.Type.Name == "SuppressMessageAttribute" && resolveResult.Type.Namespace == "System.Diagnostics.CodeAnalysis") {  				if (attribute.Arguments.Count < 2)  					return;  				var category = attribute.Arguments.First() as PrimitiveExpression;  				if (category == null || category.Value.ToString() != suppressMessageCategory)  					return;  				var checkId = attribute.Arguments.Skip(1).First() as PrimitiveExpression;  				if (checkId == null || checkId.Value.ToString() != suppressMessageCheckId)   					return;  				suppressedRegions.Add(attribute.Parent.Parent.Region);  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,GetModifiers,The following switch statement is missing a default case: switch (property.Accessibility) {  				case Accessibility.Public:  					return Modifiers.Public | Modifiers.Override;  				case Accessibility.Protected:  					return Modifiers.Protected | Modifiers.Override;  				case Accessibility.Internal:  					return Modifiers.Internal | Modifiers.Override;  				case Accessibility.ProtectedOrInternal:  					// TODO: oops  					return Modifiers.Internal | Modifiers.Protected | Modifiers.Override;  				case Accessibility.ProtectedAndInternal:  					// TODO: oops  					return Modifiers.Internal | Modifiers.Protected | Modifiers.Override;  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GuessNameFromType,The following switch statement is missing a default case: switch (returnType.ReflectionName) {  				case "System.Byte":  				case "System.SByte":  					return "b";  				  				case "System.Int16":  				case "System.UInt16":  				case "System.Int32":  				case "System.UInt32":  				case "System.Int64":  				case "System.UInt64":  					return "i";  				  				case "System.Boolean":  					return "b";  				  				case "System.DateTime":  					return "date";  				  				case "System.Char":  					return "ch";  				case "System.Double":  				case "System.Decimal":  					return "d";  				case "System.Single":  					return "f";  				case "System.String":  					return "str";  				  				case "System.Exception":  					return "e";  				case "System.Object":  					return "obj";  				case "System.Func":  					return "func";  				case "System.Action":  					return "action";  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetArgumentExpression,The following switch statement is missing a default case: switch (parameter.ParameterModifier) {  				case ParameterModifier.Out:  					return new DirectionExpression (FieldDirection.Out' identifierExpr);  				case ParameterModifier.Ref:  					return new DirectionExpression (FieldDirection.Ref' identifierExpr);  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetDefaultValueExpression,The following switch statement is missing a default case: switch (typeDefinition.KnownTypeCode) {  					case KnownTypeCode.Boolean:  						return new PrimitiveExpression (false);    					case KnownTypeCode.Char:  						return new PrimitiveExpression ('\0');    					case KnownTypeCode.SByte:  					case KnownTypeCode.Byte:  					case KnownTypeCode.Int16:  					case KnownTypeCode.UInt16:  					case KnownTypeCode.Int32:  					case KnownTypeCode.UInt32:  					case KnownTypeCode.Int64:  					case KnownTypeCode.UInt64:  					case KnownTypeCode.Single:  					case KnownTypeCode.Double:  					case KnownTypeCode.Decimal:  						return new PrimitiveExpression (0);    					case KnownTypeCode.NullableOfT:  						return new NullReferenceExpression ();  				}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitUnaryOperatorExpression,The following switch statement is missing a default case: switch (binaryOperatorExpr.Operator) {  					case BinaryOperatorType.BitwiseAnd:  					case BinaryOperatorType.BitwiseOr:  					case BinaryOperatorType.ConditionalAnd:  					case BinaryOperatorType.ConditionalOr:  					case BinaryOperatorType.ExclusiveOr:  						return;  				}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following switch statement is missing a default case: switch (el.Name) {  							case "typeparam":  							case "typeparamref":  								var name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								if (member != null && member.SymbolKind == SymbolKind.TypeDefinition) {  									var type = (ITypeDefinition)member;  									if (!type.TypeArguments.Any(arg => arg.Name == name.Value)) {  										AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Type parameter '{0}' not found")' name.Value));  									}  								}  								break;  							case "param":  							case "paramref":  								name = el.Attributes.FirstOrDefault(attr => attr.Name == "name");  								if (name == null)  									break;  								var m = member as IParameterizedMember;  								if (m != null && m.Parameters.Any(p => p.Name == name.Value))  									break;  								var dtype = member as ITypeDefinition;  								if ((dtype != null) && (dtype.Kind == TypeKind.Delegate)) {  									var invokeMethod = dtype.Methods.FirstOrDefault(method => method.Name == "Invoke");  									if ((invokeMethod != null) && invokeMethod.Parameters.Any(p => p.Name == name.Value))  										break;  								}  								if (name.Value == "value" && member != null && (member.SymbolKind == SymbolKind.Property || member.SymbolKind == SymbolKind.Indexer || member.SymbolKind == SymbolKind.Event) && el.Name == "paramref")  									break;  								AddXmlIssue(name.ValueSegment.Offset - firstline.Length + 1' name.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Parameter '{0}' not found")' name.Value));  								break;  							case "exception":  							case "seealso":  							case "see":  								var cref = el.Attributes.FirstOrDefault(attr => attr.Name == "cref");  								if (cref == null)  									break;  								try {  									var trctx = ctx.Resolver.TypeResolveContext;  									if (member is IMember)  										trctx = trctx.WithCurrentTypeDefinition(member.DeclaringTypeDefinition).WithCurrentMember((IMember)member);  									if (member is ITypeDefinition)  										trctx = trctx.WithCurrentTypeDefinition((ITypeDefinition)member);  									var state = ctx.Resolver.GetResolverStateBefore(node);  									if (state.CurrentUsingScope != null)  										trctx = trctx.WithUsingScope(state.CurrentUsingScope);  									var cdc = new CSharpDocumentationComment (emptySource' trctx);  									var entity = cdc.ResolveCref(cref.Value);  									  									if (entity == null) {  										AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Cannot find reference '{0}'")' cref.Value));  									}  								} catch (Exception e) {  									AddXmlIssue(cref.ValueSegment.Offset - firstline.Length + 1' cref.ValueSegment.Length - 2' string.Format(ctx.TranslateString("Reference parsing error '{0}'.")' e.Message));  								}  								break;  								  					}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetArgumentExpression,The following switch statement is missing a default case: switch (parameter.ParameterModifier) {  					case ParameterModifier.Out:  						return new DirectionExpression(FieldDirection.Out' identifierExpr);  					case ParameterModifier.Ref:  						return new DirectionExpression(FieldDirection.Ref' identifierExpr);  				}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,CheckXmlDoc,The following switch statement is missing a default case: switch (reader.Name) {  									case "param":  										reader.MoveToFirstAttribute();  										var line = reader.LineNumber;  										var name = reader.GetAttribute("name");  										if (name == null)  											break;  										parameters.Add(Tuple.Create(name' line));  										break;    								}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitTypeDeclaration,The following switch statement is missing a default case: switch (typeDeclaration.ClassType) {  					case ClassType.Class:  					case ClassType.Struct:  						//Visit nested types  						base.VisitTypeDeclaration(typeDeclaration);  						return;  					case ClassType.Interface:  						return;  				}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,GetDefaultValueExpression,The following switch statement is missing a default case: switch (typeDefinition.KnownTypeCode) {  						case KnownTypeCode.Boolean:  							return new PrimitiveExpression(false);    						case KnownTypeCode.Char:  							return new PrimitiveExpression('\0');    						case KnownTypeCode.SByte:  						case KnownTypeCode.Byte:  						case KnownTypeCode.Int16:  						case KnownTypeCode.UInt16:  						case KnownTypeCode.Int32:  							return new PrimitiveExpression(0);    						case KnownTypeCode.Int64:  							return new Choice { new PrimitiveExpression(0)' new PrimitiveExpression(0L) };  						case KnownTypeCode.UInt32:  							return new Choice { new PrimitiveExpression(0)' new PrimitiveExpression(0U) };  						case KnownTypeCode.UInt64:  							return new Choice {  								new PrimitiveExpression(0)' new PrimitiveExpression(0U)' new PrimitiveExpression(0UL)  							};  						case KnownTypeCode.Single:  							return new Choice { new PrimitiveExpression(0)' new PrimitiveExpression(0F) };  						case KnownTypeCode.Double:  							return new Choice {  								new PrimitiveExpression(0)' new PrimitiveExpression(0F)' new PrimitiveExpression(0D)  							};  						case KnownTypeCode.Decimal:  							return new Choice { new PrimitiveExpression(0)' new PrimitiveExpression(0M) };    						case KnownTypeCode.NullableOfT:  							return new NullReferenceExpression();  					}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,VisitInvocationExpression,The following switch statement is missing a default case: switch(invocationName) {  							case "Skip":  								Expression offset = reversed ? endOffset : startOffset;  								if (offset == null)  									offset = invocation.Arguments.Last().Clone();  								else  									offset = new BinaryOperatorExpression(offset'  									                                      BinaryOperatorType.Add'  									                                      invocation.Arguments.Last().Clone());    								if (reversed)  									endOffset = offset;  								else  									startOffset = offset;    								break;  							case "Reverse":  								reversed = !reversed;  								break;  							case "First":  							case "ElementAt":  							case "Last":  							{  								bool fromEnd = (invocationName == "Last") ^ reversed;  								Expression index = invocationName == "ElementAt" ? invocation.Arguments.Last().Clone() : null;  								Expression baseOffset = fromEnd ? endOffset : startOffset;  								//Our indexWithOffset is baseOffset + index  								//A baseOffset/index of null is considered "0".    								Expression indexWithOffset = baseOffset == null ? index :  									index == null ? baseOffset :  										new BinaryOperatorExpression(baseOffset' BinaryOperatorType.Add' index);    								Expression indexerExpression = indexWithOffset;  								if (fromEnd) {  									var endExpression = new BinaryOperatorExpression(new MemberReferenceExpression(target.Clone()' countPropertyName)'  									                                                 BinaryOperatorType.Subtract'  									                                                 new PrimitiveExpression(1));  									if (indexerExpression == null) {  										indexerExpression = endExpression;  									} else {  										indexerExpression = new BinaryOperatorExpression(endExpression'  										                                                 BinaryOperatorType.Subtract'  										                                                 new ParenthesizedExpression(indexerExpression));  									}  								}    								indexerExpression = indexerExpression ?? new PrimitiveExpression(0);    								var newExpression = new IndexerExpression(target.Clone()'  								                                          indexerExpression);    								script.Replace(outerInvocationExpression' newExpression);  								break;  							}  							case "Count":  							case "Any":  							{  								Expression takenMembers;  								if (startOffset == null) {  									takenMembers = endOffset;  								} else if (endOffset == null) {  									takenMembers = startOffset;  								} else {  									takenMembers = new BinaryOperatorExpression(startOffset'  									                                            BinaryOperatorType.Add'  									                                            endOffset);  								}    								var countExpression = new MemberReferenceExpression(target.Clone()' countPropertyName);    								Expression newExpression;  								if (invocationName == "Count") {  									if (takenMembers == null)  										newExpression = countExpression;  									else  										newExpression = new BinaryOperatorExpression(countExpression'  										                                             BinaryOperatorType.Subtract'  										                                             new ParenthesizedExpression(takenMembers));  								} else {  									newExpression = new BinaryOperatorExpression(countExpression'  									                                             BinaryOperatorType.GreaterThan'  									                                             new ParenthesizedExpression(takenMembers));  								}    								script.Replace(outerInvocationExpression' newExpression);  								break;  							}  						}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,GatherVisitor,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\ConvertIfToAndExpressionIssue.cs,ProcessNode,The following switch statement is missing a default case: switch (reachable) {  					case null:  						nodeStates [node] = NodeState.None;  						break;  					case true:  						nodeStates [node] = NodeState.UsageReachable;  						break;  					case false:  						nodeStates [node] = NodeState.UsageUnreachable;  						break;  				}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,RecursiveDetector,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\FunctionNeverReturnsIssue.cs,VisitBinaryOperatorExpression,The following switch statement is missing a default case: switch (binaryOperatorExpression.Operator) {  						case BinaryOperatorType.ConditionalAnd:  						case BinaryOperatorType.ConditionalOr:  							return binaryOperatorExpression.Left.AcceptVisitor(this);  					}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,The following switch statement is missing a default case: switch (NamingStyle) {  				case NamingStyle.AllLower:  					for (int i = 0; i < id.Length; i++) {  						char ch = id [i];  						if (ch == '_' && !HandleUnderscore(UnderscoreHandling.Allow' id' ref i))  							return false;  						if (char.IsLetter(ch) && char.IsUpper(ch))  							return false;  					}  					return true;  				case NamingStyle.AllUpper:  					for (int i = 0; i < id.Length; i++) {  						char ch = id [i];  						if (ch == '_' && !HandleUnderscore(UnderscoreHandling.Allow' id' ref i))  							return false;  						if (char.IsLetter(ch) && char.IsLower(ch))  							return false;  					}  					return true;  				case NamingStyle.CamelCase:  					if (id.Length > 0) {  						if (char.IsUpper(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.Forbid' id' ref i))  								return false;  						}  					}  					return true;  				case NamingStyle.CamelCaseWithLowerLetterUnderscore:  					if (id.Length > 0) {  						if (char.IsUpper(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.AllowWithLowerStartingLetter' id' ref i))  								return false;  						}  					}  					return true;    				case NamingStyle.CamelCaseWithUpperLetterUnderscore:  					if (id.Length > 0) {  						if (char.IsUpper(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.AllowWithUpperStartingLetter' id' ref i))  								return false;  						}  					}  					return true;    				case NamingStyle.PascalCase:  					if (id.Length > 0) {  						if (char.IsLower(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.Forbid' id' ref i))  								return false;  						}  					}  					return true;  				case NamingStyle.PascalCaseWithLowerLetterUnderscore:  					if (id.Length > 0) {  						if (char.IsLower(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.AllowWithLowerStartingLetter' id' ref i))  								return false;  						}  					}  					return true;  				case NamingStyle.PascalCaseWithUpperLetterUnderscore:  					if (id.Length > 0) {  						if (char.IsLower(id [0]) || id [0] == '_')  							return false;  						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.AllowWithUpperStartingLetter' id' ref i))  								return false;  						}  					}  					return true;  				case NamingStyle.FirstUpper:  					if (id.Length > 0) {  						if (char.IsLower(id [0]) || id [0] == '_')  							return false;    						for (int i = 1; i < id.Length; i++) {  							char ch = id [i];  							if (ch == '_' && !HandleUnderscore(UnderscoreHandling.Allow' id' ref i))  								return false;  							if (char.IsLetter(ch) && char.IsUpper(ch))  								return false;  						}  					}  					return true;  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The following switch statement is missing a default case: switch (NamingStyle) {  				case NamingStyle.AllLower:  					if (id.Any(ch => char.IsLetter(ch) && char.IsUpper(ch))) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' contains upper case letters. (Rule '{1}')")' name' Name);  						suggestedNames.Add(LowerCaseIdentifier(WordParser.BreakWords(id)));  					} else {  						suggestedNames.Add(id);  					}  					break;  				case NamingStyle.AllUpper:  					if (id.Any(ch => char.IsLetter(ch) && char.IsLower(ch))) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' contains lower case letters. (Rule '{1}')")' name' Name);  						suggestedNames.Add(UpperCaseIdentifier(WordParser.BreakWords(id)));  					} else {  						suggestedNames.Add(id);  					}  					break;    				case NamingStyle.CamelCase:  					if (id.Length > 0 && !char.IsLower(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.Forbid)) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(CamelCaseIdentifier(id));  					break;  				case NamingStyle.CamelCaseWithLowerLetterUnderscore:  					if (id.Length > 0 && !char.IsLower(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.AllowWithLowerStartingLetter)) {  						errorMessage = string.Format(ctx.TranslateString("after '_' a lower letter should follow. (Rule '{0}')")' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(CamelCaseWithLowerLetterUnderscore(id));  					break;  				case NamingStyle.CamelCaseWithUpperLetterUnderscore:  					if (id.Length > 0 && !char.IsLower(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.AllowWithUpperStartingLetter)) {  						errorMessage = string.Format(ctx.TranslateString("after '_' an upper letter should follow. (Rule '{0}')")' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(CamelCaseWithUpperLetterUnderscore(id));  					break;    				case NamingStyle.PascalCase:  					if (id.Length > 0 && !char.IsUpper(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.Forbid)) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(PascalCaseIdentifier(id));  					break;  				case NamingStyle.PascalCaseWithLowerLetterUnderscore:  					if (id.Length > 0 && !char.IsUpper(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.AllowWithLowerStartingLetter)) {  						errorMessage = string.Format(ctx.TranslateString("after '_' a lower letter should follow. (Rule '{0}')")' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(PascalCaseWithLowerLetterUnderscore(id));  					break;  				case NamingStyle.PascalCaseWithUpperLetterUnderscore:  					if (id.Length > 0 && !char.IsUpper(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  					} else if (!CheckUnderscore(id' UnderscoreHandling.AllowWithUpperStartingLetter)) {  						errorMessage = string.Format(ctx.TranslateString("after '_' an upper letter should follow. (Rule '{0}')")' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(PascalCaseWithUpperLetterUnderscore(id));  					break;  				case NamingStyle.FirstUpper:  					if (id.Length > 0 && !char.IsUpper(id [0])) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  					} else if (id.Take(1).Any(ch => char.IsLetter(ch) && char.IsUpper(ch))) {  						errorMessage = string.Format(ctx.TranslateString("'{0}' contains an upper case letter after the first. (Rule '{1}')")' name' Name);  					} else {  						suggestedNames.Add(id);  						break;  					}  					suggestedNames.Add(FirstUpperIdentifier(WordParser.BreakWords(id)));  					break;  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetPreview,The following switch statement is missing a default case: switch (NamingStyle) {  				case NamingStyle.PascalCase:  					result.Append("PascalCase");  					break;  				case NamingStyle.PascalCaseWithLowerLetterUnderscore:  					result.Append("PascalCase_underscoreTolerant");  					break;  				case NamingStyle.PascalCaseWithUpperLetterUnderscore:  					result.Append("PascalCase_UnderscoreTolerant");  					break;    				case NamingStyle.CamelCase:  					result.Append("camelCase");  					break;  				case NamingStyle.CamelCaseWithLowerLetterUnderscore:  					result.Append("camelCase_underscoreTolerant");  					break;  				case NamingStyle.CamelCaseWithUpperLetterUnderscore:  					result.Append("camelCase_UnderscoreTolerant");  					break;    				case NamingStyle.AllUpper:  					result.Append("ALL_UPPER");  					break;  				case NamingStyle.AllLower:  					result.Append("all_Lower");  					break;  				case NamingStyle.FirstUpper:  					result.Append("First_Upper");  					break;  			}
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,VariableOnlyAssignedIssue,C:\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\VariableOnlyAssignedIssue.cs,TestOnlyAssigned,The following switch statement is missing a default case: switch (op) {  							case UnaryOperatorType.Increment:  							case UnaryOperatorType.PostIncrement:  							case UnaryOperatorType.Decrement:  							case UnaryOperatorType.PostDecrement:  								assignment = true;  								if (!(parent.Parent is ExpressionStatement))  									nonAssignment = true;  								continue;  						}
