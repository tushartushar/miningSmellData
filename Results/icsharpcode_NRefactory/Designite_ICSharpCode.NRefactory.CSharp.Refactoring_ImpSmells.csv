Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,GetAction,The method has 130 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The method has 106 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The method has 104 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,The method has 135 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The method has 184 lines of code.
Long Method,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The method has 107 lines of code.
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,GetActions,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,GetAction,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetExpressionToReplace,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetTransformedAssignmentExpression,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,ExtractExpression,Cyclomatic complexity of the method is 20
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ChangeAccessModifierAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ChangeAccessModifierAction.cs,GetActions,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,GetActions,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,AddImplementation,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEnumValue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEnumValue.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromMemberReferenceExpression,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromInvocation,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateBaseName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GuessNameFromType,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetDefaultValueExpression,Cyclomatic complexity of the method is 16
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,CreatePropertyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreatePropertyAction.cs,GetActions,Cyclomatic complexity of the method is 14
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractAnonymousMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractAnonymousMethodAction.cs,GetActions,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,GetActions,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,GenerateSwitchLabelsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateSwitchLabelsAction.cs,GetActions,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GenerateImplementation,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,Cyclomatic complexity of the method is 32
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBracesAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBracesAction.cs,IsSpecialNode,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,VariableHidesMemberIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LocalVariableHidesMemberIssue.cs,IsAccessible,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,Cyclomatic complexity of the method is 44
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,HandleUnderscore,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,Cyclomatic complexity of the method is 74
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,ConvertToValidName,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetPreview,Cyclomatic complexity of the method is 31
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,AddOptionalParameterToInvocationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddOptionalParameterToInvocationAction.cs,GetActions,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithOperatorAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceWithOperatorAssignmentAction.cs,GetAssignmentOperator,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceOperatorAssignmentWithAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceOperatorAssignmentWithAssignmentAction.cs,GetAssignmentOperator,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring,VariableOnlyAssignedIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\VariableOnlyAssignedIssue.cs,TestOnlyAssigned,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,GetActions,Cyclomatic complexity of the method is 9
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ChangeAccessModifierAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ChangeAccessModifierAction.cs,GetActionForLevel,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The method has 6 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateAction,The method has 8 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,CheckName,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToReturnStatementAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToReturnStatementAction.cs,GetMatch,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,SearchCasts,The method has 5 parameters.
Long Parameter List,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The method has 5 parameters.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,MoveToOuterScopeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\MoveToOuterScopeAction.cs,RemoveInitializer,The length of the parameter newVariableDeclarationStatement is 31.
Long Identifier,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,GetAction,The length of the parameter comparedNodeIdentifierExpression is 32.
Long Identifier,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The length of the parameter qualifierDirectiveEvidentIssueProvider is 38.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,CreateNotImplementedBody,The length of the statement  "	throwStatement = new ThrowStatement (new ObjectCreateExpression (context.CreateShortType ("System"' "NotImplementedException"))); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,GetActions,The length of the statement  "		if ((node is EventDeclaration && node is CustomEventDeclaration || selectedNode.Role != Roles.Identifier) && selectedNode.Role != IndexerDeclaration.ThisKeywordRole) { " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (pdecl.Setter.IsNull ? context.TranslateString ("Add setter") : context.TranslateString ("Add getter")' script => { " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,BuildAccessorStatement,The length of the statement  "			return new AssignmentExpression (new IdentifierExpression (field.Name)' AssignmentOperatorType.Assign' new IdentifierExpression ("value")); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddArgumentNameAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddArgumentNameAction.cs,CollectNodes,The length of the statement  "				if (children.ElementAt (j) is Expression && children.ElementAt (j).Role == Roles.Argument && !(children.ElementAt (j) is NamedArgumentExpression)) { " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddUsingAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddUsingAction.cs,GetActionsForType,The length of the statement  "		if ((typeDefinition.Name == identifier || typeDefinition.Name == attributeIdentifier) && typeDefinition.TypeParameterCount == tc && lookup.IsAccessible (typeDefinition' false)) { " is 178.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddUsingAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddUsingAction.cs,NewUsingAction,The length of the statement  "	return new CodeAction ("using " + ns + ";"' s => UsingHelper.InsertUsingAndRemoveRedundantNamespaceUsage (context' s' ns)' node); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetActions,The length of the statement  "	if (context.GetResolverStateBefore (loop).LookupSimpleNameOrTypeName ("Enumerable"' new List<IType> ()' NameLookupMode.Type).Type.FullName != "System.Linq.Enumerable") { " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetActions,The length of the statement  "				replacementExpression = new BinaryOperatorExpression (ParenthesizeIfNeeded (expressionToReplace).Clone ()' BinaryOperatorType.Add' replacementExpression); " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,IsZeroPrimitive,The length of the statement  "	return SameNode (zeroLiteralInteger' expr) || SameNode (zeroLiteralFloat' expr) || SameNode (zeroLiteralDouble' expr) || SameNode (zeroLiteralDecimal' expr); " is 157.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,IsUnaryModifierExpression,The length of the statement  "	return expr.Operator == UnaryOperatorType.Increment || expr.Operator == UnaryOperatorType.PostIncrement || expr.Operator == UnaryOperatorType.Decrement || expr.Operator == UnaryOperatorType.PostDecrement; " is 204.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetTransformedAssignmentExpression,The length of the statement  "			baseExpression = new InvocationExpression (new MemberReferenceExpression (baseExpression.Clone ()' "Where")' BuildLambda (foreachStatement.VariableName' CSharpUtil.InvertCondition (condition.Condition))); " is 204.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,GetTransformedAssignmentExpression,The length of the statement  "			baseExpression = new InvocationExpression (new MemberReferenceExpression (baseExpression.Clone ()' "Where")' BuildLambda (foreachStatement.VariableName' condition.Condition.Clone ())); " is 184.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,ExtractExpression,The length of the statement  "				rightSide = new BinaryOperatorExpression (ParenthesizeIfNeeded (rightSide).Clone ()' BinaryOperatorType.Add' ParenthesizeIfNeeded (newRight).Clone ()); " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoLinqSumAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AutoLinqSumAction.cs,ParenthesizeIfNeeded,The length of the statement  "		if (binaryExpression.Operator != BinaryOperatorType.Multiply && binaryExpression.Operator != BinaryOperatorType.Divide && binaryExpression.Operator != BinaryOperatorType.Modulus) { " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ChangeAccessModifierAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ChangeAccessModifierAction.cs,GetActions,The length of the statement  "	if (selectedNode.Role != PropertyDeclaration.SetKeywordRole && selectedNode.Role != PropertyDeclaration.GetKeywordRole && selectedNode != node.NameToken) { " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CheckIfParameterIsNullAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs,GetAction,The length of the statement  "			Condition = new BinaryOperatorExpression (new IdentifierExpression (parameter.Name)' BinaryOperatorType.Equality' new NullReferenceExpression ())' " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CheckIfParameterIsNullAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CheckIfParameterIsNullAction.cs,GetAction,The length of the statement  "			TrueStatement = new ThrowStatement (new ObjectCreateExpression (context.CreateShortType ("System"' "ArgumentNullException")' new PrimitiveExpression (parameter.Name))) " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertDoWhileToWhileLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertDoWhileToWhileLoopAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Convert to while loop")' script => ConvertToWhileLoop (script' node)' target); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,GetActions,The length of the statement  "	if (node == null || (node.Operator != BinaryOperatorType.Equality && node.Operator != BinaryOperatorType.InEquality) || !node.OperatorToken.Contains (context.Location)) " is 168.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,GenerateTarget,The length of the statement  "	var rr = context.Resolver.GetResolverStateBefore (bOp).LookupSimpleNameOrTypeName ("Equals"' emptyTypes' NameLookupMode.Expression) as MethodGroupResolveResult; " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The length of the statement  "	if (rr == null || rr.IsError || rr.Member.Name != "Equals" || !rr.Member.DeclaringType.IsKnownType (KnownTypeCode.Object)) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (useEquality ? context.TranslateString ("Use '=='") : context.TranslateString ("Use '!='")' script => { " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The length of the statement  "		script.Replace (expr' new BinaryOperatorExpression (node.Arguments.Count == 1 ? memberRefExpr.Target.Clone () : node.Arguments.First ().Clone ()' useEquality ? BinaryOperatorType.Equality : BinaryOperatorType.InEquality' node.Arguments.Last ().Clone ())); " is 255.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertExplicitToImplicitImplementationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertExplicitToImplicitImplementationAction.cs,GetAction,The length of the statement  "	if (type.GetMethods (m => m.Name == node.Name && m.TypeParameters.Count == method.TypeParameters.Count && !m.IsExplicitInterfaceImplementation).Any (m => ParameterListComparer.Instance.Equals (m.Parameters' method.Parameters))) " is 227.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "		var initializer = hasIndexAccess ? new VariableDeclarationStatement (new PrimitiveType ("int")' name' new PrimitiveExpression (0)) : new VariableDeclarationStatement (new SimpleType ("var")' name' new InvocationExpression (new MemberReferenceExpression (inExpression.Clone ()' "GetEnumerator"))); " is 296.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "		var variableDeclarationStatement = new VariableDeclarationStatement (foreachStatement.VariableType.Clone ()' foreachStatement.VariableName' hasIndexAccess ? (Expression)new IndexerExpression (inExpression.Clone ()' id3) : new MemberReferenceExpression (id1' "Current")); " is 270.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "			Condition = hasIndexAccess ? (Expression)new BinaryOperatorExpression (id1' BinaryOperatorType.LessThan' new MemberReferenceExpression (inExpression.Clone ()' countProperty)) : new InvocationExpression (new MemberReferenceExpression (id2' "MoveNext"))' " is 252.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "		var variableDeclarationStatement = new VariableDeclarationStatement (foreachStatement.VariableType.Clone ()' foreachStatement.VariableName' new IndexerExpression (inExpression.Clone ()' id3)); " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "		initializer.Variables.Add (new VariableInitializer (optimizedUpperBound' new MemberReferenceExpression (inExpression.Clone ()' countProperty))); " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetActions,The length of the statement  "			Condition = new BinaryOperatorExpression (id1' BinaryOperatorType.LessThan' new IdentifierExpression (optimizedUpperBound))' " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHexToDecAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHexToDecAction.cs,GetActions,The length of the statement  "	if (!((pexpr.Value is int) || (pexpr.Value is long) || (pexpr.Value is short) || (pexpr.Value is sbyte) || (pexpr.Value is uint) || (pexpr.Value is ulong) || (pexpr.Value is ushort) || (pexpr.Value is byte))) { " is 210.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertLambdaBodyStatementToExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertLambdaBodyStatementToExpressionAction.cs,CreateAction,The length of the statement  "	return new CodeAction (context.TranslateString ("Convert to lambda expression")' script => script.Replace (blockStatement' expr.Clone ())' node); " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMethodGroupToAnonymousMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToAnonymousMethodAction.cs,GetActions,The length of the statement  "		var expr = new InvocationExpression (node.Clone ()' invocationMethod.Parameters.Select (p => new IdentifierExpression (context.GetNameProposal (p.Name)))); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMethodGroupToLambdaAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMethodGroupToLambdaAction.cs,GetActions,The length of the statement  "		var invocation = new InvocationExpression (node.Clone ()' invocationMethod.Parameters.Select (p => new IdentifierExpression (context.GetNameProposal (p.Name)))); " is 161.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertSwitchToIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertSwitchToIfAction.cs,CollectCondition,The length of the statement  "	var conditionList = caseLabels.Select (label => new BinaryOperatorExpression (switchExpr.Clone ()' BinaryOperatorType.Equality' label.Expression.Clone ())).ToArray (); " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementsToInitializerConverter,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\StatementsToInitializerConverter.cs,HasDependencyCheck,The length of the statement  "	referenceFinder.FindLocalReferences (localResolveResult.Variable' context.UnresolvedFile' (SyntaxTree)context.RootNode' context.Compilation' (node' resolveResult) => { " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StatementsToInitializerConverter,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\StatementsToInitializerConverter.cs,VariableHasBeenConverted,The length of the statement  "	return accessPaths.Any (item => item.Key != null && item.Key.VariableRoot != null && item.Key.VariableRoot.Equals (variable)); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertWhileToDoWhileLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertWhileToDoWhileLoopAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Convert to do...while loop")' script => ApplyAction (script' whileLoop)' whileLoop.WhileToken); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,GetActions,The length of the statement  "		var methodDeclaration = CreateEventInvocatorAction.CreateEventInvocator (context' type' eventDeclaration' eventDeclaration.Variables.First ()' resolvedType.GetDelegateInvokeMethod ()' false); " is 191.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,GetActions,The length of the statement  "		var stmt = new ExpressionStatement (new InvocationExpression (new IdentifierExpression (methodDeclaration.Name)' context.CreateShortType ("System"' "EventArgs").Member ("Empty"))); " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,GetActions,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create event invocator")' Script.InsertPosition.After' new AstNode[] { " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateChangedEventAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateChangedEventAction.cs,CreateChangedEventDeclaration,The length of the statement  "		Modifiers = propertyDeclaration.HasModifier (Modifiers.Static) ? Modifiers.Public | Modifiers.Static : Modifiers.Public' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,GetActions,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create nested class")' Script.InsertPosition.Before' CreateType (context' service' node' classType)); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,GuessClassTypeByName,The length of the statement  "	if (!service.IsValidName (identifier' AffectedEntity.Class' Modifiers.Public) && service.IsValidName (identifier' AffectedEntity.Struct' Modifiers.Public)) " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,CreateClassFromObjectCreation,The length of the statement  "	if (guessedType.Kind == TypeKind.Interface || guessedType.Kind == TypeKind.Class && guessedType.GetDefinition ().IsAbstract) { " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateConstructorDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateConstructorDeclarationAction.cs,GetActions,The length of the statement  "	if (resolveResult == null || !resolveResult.IsError || resolveResult.Member.DeclaringTypeDefinition == null || resolveResult.Member.DeclaringTypeDefinition.IsSealed || resolveResult.Member.DeclaringTypeDefinition.Region.IsEmpty) " is 228.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateConstructorDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateConstructorDeclarationAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Create constructor")' script => script.InsertWithCursor (context.TranslateString ("Create constructor")' resolveResult.Member.DeclaringTypeDefinition' (s' c) => { " is 217.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEnumValue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEnumValue.cs,GetCreatePropertyOrFieldNode,The length of the statement  "	return context.GetNode (n => n is IdentifierExpression || n is MemberReferenceExpression || n is NamedExpression) as Expression; " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "		arguments.Add (eventDeclaration.HasModifier (Modifiers.Static) ? (Expression)new PrimitiveExpression (null) : new ThisReferenceExpression ()); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "	var modifiers = eventDeclaration.HasModifier (Modifiers.Static) ? Modifiers.Static : Modifiers.Protected | Modifiers.Virtual; " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "			new VariableDeclarationStatement (useExplictType ? eventDeclaration.ReturnType.Clone () : new PrimitiveType ("var")' handlerName' useThisMemberReference ? (Expression)new MemberReferenceExpression (new ThisReferenceExpression ()' initializer.Name) : new IdentifierExpression (initializer.Name))' " is 295.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,CreateEventInvocator,The length of the statement  "				Condition = new BinaryOperatorExpression (new IdentifierExpression (handlerName)' BinaryOperatorType.InEquality' new PrimitiveExpression (null))' " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,GetActions,The length of the statement  "		var methodDeclaration = CreateEventInvocator (context' type' eventDeclaration' initializer' invokeMethod' UseExplictType); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateEventInvocatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateEventInvocatorAction.cs,GetActions,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create event invocator")' Script.InsertPosition.After' methodDeclaration); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetCreatePropertyOrFieldNode,The length of the statement  "	return context.GetNode (n => n is IdentifierExpression || n is MemberReferenceExpression || n is NamedExpression) as Expression; " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateFieldAction.cs,GetActions,The length of the statement  "	//			if (service != null && !service.IsValidName(identifier.Identifier' AffectedEntity.Field' Modifiers.Private' isStatic)) {  " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateIndexerAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateIndexerAction.cs,GetActions,The length of the statement  "			script.InsertWithCursor (context.TranslateString ("Create indexer")' targetResolveResult.Type.GetDefinition ()' (s' c) => decl); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActions,The length of the statement  "	if (identifier != null && !(identifier.Parent is InvocationExpression && ((InvocationExpression)identifier.Parent).Target == identifier)) " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActions,The length of the statement  "	if (memberReference != null && !(memberReference.Parent is InvocationExpression && ((InvocationExpression)memberReference.Parent).Target == memberReference)) " is 157.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromMemberReferenceExpression,The length of the statement  "	yield return CreateAction (context' invocation' methodName' context.CreateShortType (invocationMethod.ReturnType)' invocationMethod.Parameters.Select (parameter => new ParameterDeclaration (context.CreateShortType (parameter.Type)' parameter.Name) { " is 249.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromIdentifier,The length of the statement  "	yield return CreateAction (context' identifier' methodName' context.CreateShortType (invocationMethod.ReturnType)' invocationMethod.Parameters.Select (parameter => new ParameterDeclaration (context.CreateShortType (parameter.Type)' parameter.Name) { " is 249.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromInvocation,The length of the statement  "	var guessedType = invocation.Parent is ExpressionStatement ? new PrimitiveType ("void") : TypeGuessing.GuessAstType (context' invocation); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GetActionsFromInvocation,The length of the statement  "	yield return CreateAction (context' invocation' methodName' guessedType' GenerateParameters (context' invocation.Arguments)' createInOtherType' isStatic' targetResolveResult); " is 175.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateAction,The length of the statement  "			script.InsertWithCursor (context.TranslateString ("Create method")' targetResolveResult.Type.GetDefinition ()' (s' c) => { " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,CreateAction,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create method")' Script.InsertPosition.Before' decl).ContinueScript (() => script.Select (throwStatement)); " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GenerateParameters,The length of the statement  "		var type = resolveResult.Type.Kind == TypeKind.Unknown || resolveResult.Type.Kind == TypeKind.Null ? new PrimitiveType ("object") : context.CreateShortType (resolveResult.Type); " is 177.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetAction,The length of the statement  "	if (method.DeclaringType.GetMethods (m => m.Name == method.Name && m.TypeParameters.Count == method.TypeParameters.Count).Any (m => ParameterListComparer.Instance.Equals (m.Parameters' parameters))) " is 198.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetAction,The length of the statement  "		body.Add (new InvocationExpression (new IdentifierExpression (methodDecl.Name)' methodDecl.Parameters.Select (param => param == node ? argExpr : GetArgumentExpression (param)))); " is 178.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetAction,The length of the statement  "		script.InsertWithCursor ("Create overload without parameter"' Script.InsertPosition.Before' decl).ContinueScript (() => script.Select (argExpr)); " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CreatePropertyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreatePropertyAction.cs,GetActions,The length of the statement  "			script.InsertWithCursor (context.TranslateString ("Create property")' targetResolveResult.Type.GetDefinition ()' (s' c) => decl); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CS1520MethodMustHaveAReturnTypeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CS1520MethodMustHaveAReturnTypeAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("This is a constructor")' script => script.Replace (entity.NameToken' Identifier.Create (typeDeclaration.Name' TextLocation.Empty))' entity) { " is 196.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetActions,The length of the statement  "		yield return new CodeAction (string.Format (context.TranslateString ("Declare local variable (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 159.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetDelegateType,The length of the statement  "		genericType = context.Compilation.GetAllTypeDefinitions ().FirstOrDefault (t => t.FullName == "System.Action" && t.TypeParameterCount == parameters.Count); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DeclareLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\DeclareLocalVariableAction.cs,GetDelegateType,The length of the statement  "		genericType = context.Compilation.GetAllTypeDefinitions ().FirstOrDefault (t => t.FullName == "System.Func" && t.TypeParameterCount == parameters.Count); " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractAnonymousMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractAnonymousMethodAction.cs,GetActions,The length of the statement  "		var method = GetMethod (context' (LambdaResolveResult)context.Resolve (anonymousMethod)' (BlockStatement)anonymousMethod.Body.Clone ()); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,GetActions,The length of the statement  "		MemberReferenceExpression thisField = new MemberReferenceExpression (new ThisReferenceExpression ()' idntf.Name' new AstType[] { " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,GetActions,The length of the statement  "		var assign = new AssignmentExpression (thisField' AssignmentOperatorType.Assign' new IdentifierExpression (idntf.Name)); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ExtractFieldAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractFieldAction.cs,CannotExtractField,The length of the statement  "	return result == null || result.Variables.Count != 1 || ContainsAnonymousType (context.Resolve (varInit.Initializer).Type); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The length of the statement  "	if (target == null || target.MemberNameToken.StartLocation > context.Location || invocation.LParToken.StartLocation < context.Location) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The length of the statement  "	if (rr == null || rr.Member.Name != "Equals" || rr.Member.IsStatic || !rr.Member.ReturnType.IsKnownType (KnownTypeCode.Boolean)) " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The length of the statement  "		script.Replace (invocation' new InvocationExpression (new MemberReferenceExpression (AddParensIfRequired (invocation.Arguments.First ().Clone ())' "Equals")' GetInnerMostExpression (target.Target).Clone ())); " is 208.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,AddParensIfRequired,The length of the statement  "	if ((expression is BinaryOperatorExpression) || (expression is UnaryOperatorExpression) || (expression is CastExpression) || (expression is AssignmentExpression) || (expression is AsExpression) || (expression is IsExpression) || (expression is LambdaExpression) || (expression is ConditionalExpression)) { " is 305.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipOperatorArgumentsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipOperatorArgumentsAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (string.Format (context.TranslateString ("Flip '{0}' operator arguments")' binop.OperatorToken.ToString ())' script => { " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,FlipOperatorArgumentsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipOperatorArgumentsAction.cs,GetBinaryOperatorExpression,The length of the statement  "	if (result == null || (result.Operator != BinaryOperatorType.Equality && result.Operator != BinaryOperatorType.InEquality)) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GenerateGetterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateGetterAction.cs,GetActions,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create getter")' Script.InsertPosition.After' GeneratePropertyDeclaration (context' field' initializer)); " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GenerateGetterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateGetterAction.cs,ContainsGetter,The length of the statement  "	return ret.Expression.IsMatch (new IdentifierExpression (initializer.Name)) || ret.Expression.IsMatch (new MemberReferenceExpression (new ThisReferenceExpression ()' initializer.Name)); " is 185.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GeneratePropertyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GeneratePropertyAction.cs,GetActions,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Create property")' Script.InsertPosition.After' GeneratePropertyDeclaration (context' field' fieldName)); " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GeneratePropertyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GeneratePropertyAction.cs,ContainsGetter,The length of the statement  "	return ret.Expression.IsMatch (new IdentifierExpression (initializer.Name)) || ret.Expression.IsMatch (new MemberReferenceExpression (new ThisReferenceExpression ()' initializer.Name)); " is 185.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,GenerateSwitchLabelsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\GenerateSwitchLabelsAction.cs,GetActions,The length of the statement  "			var insertNode = (AstNode)switchStatement.SwitchSections.LastOrDefault (s => !s.CaseLabels.Any (label => label.Expression.IsNull)) ?? switchStatement.LBraceToken; " is 162.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementAbstractMembersAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementAbstractMembersAction.cs,GetActions,The length of the statement  "	if (resolveResult.Type.Kind != TypeKind.Class || resolveResult.Type.GetDefinition () == null || !resolveResult.Type.GetDefinition ().IsAbstract) " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementAbstractMembersAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementAbstractMembersAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Implement abstract members")' script => script.InsertWithCursor (context.TranslateString ("Implement abstract members")' state.CurrentTypeDefinition' (s' c) => ImplementInterfaceAction.GenerateImplementation (c' toImplement.Select (m => Tuple.Create (m' false))' true).Select (entity => { " is 343.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GetActions,The length of the statement  "	var toImplement = CollectMembersToImplement (state.CurrentTypeDefinition' resolveResult.Type' false' out interfaceMissing); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Implement interface")' script => script.InsertWithCursor (context.TranslateString ("Implement Interface")' state.CurrentTypeDefinition' (s' c) => GenerateImplementation (c' toImplement' interfaceMissing).ToList ())' type); " is 277.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GenerateImplementation,The length of the statement  "				yield return new PreProcessorDirective (PreProcessorDirectiveType.Region' string.Format ("{0} implementation"' kv.Key.Name)); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,GenerateImplementation,The length of the statement  "				yield return new PreProcessorDirective (PreProcessorDirectiveType.Region' string.Format ("implemented abstract members of {0}"' kv.Key.Name)); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "						alreadyImplemented |= !needsExplicitly/*|| cmet.InterfaceImplementations.Any (impl => impl.InterfaceType.Equals (interfaceType))*/; " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "						alreadyImplemented |= !needsExplicitly/*|| cmet.InterfaceImplementations.Any (impl => impl.InterfaceType.Equals (interfaceType))*/; " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "			alreadyImplemented = implementingType.GetMembers ().Any (m => m.ImplementedInterfaceMembers.Any (im => IsImplementation (im' prop))); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceAction.cs,CollectMembersToImplement,The length of the statement  "							alreadyImplemented |= !needsExplicitly/* || cprop.InterfaceImplementations.Any (impl => impl.InterfaceType.Resolve (ctx).Equals (interfaceType))*/; " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceExplicitAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceExplicitAction.cs,GetActions,The length of the statement  "	var toImplement = ImplementInterfaceAction.CollectMembersToImplement (state.CurrentTypeDefinition' resolveResult.Type' false' out interfaceMissing); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ImplementInterfaceExplicitAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ImplementInterfaceExplicitAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Implement interface explicit")' script => script.InsertWithCursor (context.TranslateString ("Implement Interface")' state.CurrentTypeDefinition' (s' c) => ImplementInterfaceAction.GenerateImplementation (c' toImplement.Select (t => Tuple.Create (t.Item1' true))' interfaceMissing).ToList ())' type); " is 354.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,GetActions,The length of the statement  "		refFinder.FindLocalReferences (resolveResult.Variable' context.UnresolvedFile' unit' context.Compilation' (n' r) => script.Replace (n' AddParensIfRequired (n' initializer.Initializer.Clone ()))' default(CancellationToken)); " is 223.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,RequiresParens,The length of the statement  "	if (!(replaceWithNode is BinaryOperatorExpression) && !(replaceWithNode is AssignmentExpression) && !(replaceWithNode is AsExpression) && !(replaceWithNode is IsExpression) && !(replaceWithNode is CastExpression) && !(replaceWithNode is LambdaExpression) && !(replaceWithNode is ConditionalExpression)) { " is 304.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,RequiresParens,The length of the statement  "	return replaceNode.Parent is BinaryOperatorExpression || replaceNode.Parent is UnaryOperatorExpression || replaceNode.Parent is AssignmentExpression || replaceNode.Parent is MemberReferenceExpression || replaceNode.Parent is AsExpression || replaceNode.Parent is IsExpression || replaceNode.Parent is CastExpression || replaceNode.Parent is LambdaExpression || replaceNode.Parent is PointerReferenceExpression; " is 410.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InsertAnonymousMethodSignatureAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InsertAnonymousMethodSignatureAction.cs,GetAnonymousMethodExpression,The length of the statement  "	if (anonymousMethodExpression == null || !anonymousMethodExpression.DelegateToken.Contains (context.Location) || anonymousMethodExpression.HasParameterList) " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The length of the statement  "		yield return new CodeAction (string.Format (context.TranslateString ("Create local constant (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceConstantAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceConstantAction.cs,GetActions,The length of the statement  "		yield return new CodeAction (string.Format (context.TranslateString ("Create constant field (replace '{0}' occurrences)")' visitor.Matches.Count)' script => { " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,GetActions,The length of the statement  "		if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 1) && new TextLocation (context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) { " is 194.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,AddFormatCallToInvocation,The length of the statement  "	newInvocation.Arguments.First ().ReplaceWith (CreateFormatString (context' pExpr' newInvocation.Arguments.Count () - 1)); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IntroduceFormatItemAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IntroduceFormatItemAction.cs,CreateFormatString,The length of the statement  "	return new PrimitiveExpression (""' context.GetText (start' sStart - start) + "{" + argumentNumber + "}" + context.GetText (sEnd' end - sEnd)); " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The length of the statement  "	if (context.Location != conditionalExpr.Condition.StartLocation && context.Location < conditionalExpr.Condition.EndLocation || context.Location != conditionalExpr.TrueExpression.StartLocation && conditionalExpr.TrueExpression.Contains (context.Location) || context.Location != conditionalExpr.FalseExpression.StartLocation && conditionalExpr.FalseExpression.Contains (context.Location)) " is 386.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertIfAndSimplify,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Simplify if in loops")' script => GenerateNewScript (script' ifStatement)' ifStatement); " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertIfAndSimplify,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs,GenerateNewTrueStatement,The length of the statement  "		if (blockStatement.Children.Count (n => n.Role != Roles.NewLine && n.Role != Roles.LBrace && n.Role != Roles.RBrace) == 1) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertIfAndSimplify,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertIfAndSimplify.cs,GetIfElseStatement,The length of the statement  "	if (isQuitingStatement is ReturnStatement || isQuitingStatement is ContinueStatement || isQuitingStatement is BreakStatement) " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertLogicalExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertLogicalExpressionAction.cs,GetActions,The length of the statement  "			yield return new CodeAction (string.Format (context.TranslateString ("Invert '{0}'")' unaryOperatorExpression)' script => { " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,InvertLogicalExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertLogicalExpressionAction.cs,GetActions,The length of the statement  "	var newExpression = new UnaryOperatorExpression (UnaryOperatorType.Not' new ParenthesizedExpression (negativeExpression)); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,IterateViaForeachAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\IterateViaForeachAction.cs,ActionFromVariableInitializer,The length of the statement  "	if (initializer == null || initializer.Parent.Parent is ForStatement || !initializer.NameToken.Contains (context.Location)) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,JoinDeclarationAndAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinDeclarationAndAssignmentAction.cs,GetAction,The length of the statement  "	var assignmentPattern = new ExpressionStatement (new AssignmentExpression (new IdentifierExpression (node.Name)' new AnyNode ("value"))); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,JoinDeclarationAndAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinDeclarationAndAssignmentAction.cs,GetAction,The length of the statement  "		var jointVariableDecl = new VariableDeclarationStatement (variableDecl.Type.Clone ()' node.Name' match.Get<Expression> ("value").First ().Clone ()); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,JoinStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs,GetAction,The length of the statement  "	if (left == null || right == null || !(left.Value is string) || !(right.Value is string) || !node.OperatorToken.Contains (context.Location)) " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,GetAction,The length of the statement  "				var declaredNames = variableDeclarations.SelectMany (variableDeclaration => variableDeclaration.Variables).Select (variable => variable.Name).ToList (); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,NeedsParenthesis,The length of the statement  "		return unaryExpression.Operator == UnaryOperatorType.PostIncrement || unaryExpression.Operator == UnaryOperatorType.PostDecrement; " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,LinqQueryToFluentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqQueryToFluentAction.cs,GetAction,The length of the statement  "	return new CodeAction (context.TranslateString ("Convert LINQ query to fluent syntax")' script => ConvertQueryToFluent (context' script' node)' node); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,LinqQueryToFluentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqQueryToFluentAction.cs,DeclaresLocalVariable,The length of the statement  "	return blockStatement.Descendants.OfType<VariableInitializer> ().Any (variable => variable.Name == name && variable.Ancestors.OfType<BlockStatement> ().First () == blockStatement); " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,MergeNestedIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\MergeNestedIfAction.cs,GetAction,The length of the statement  "			Condition = new BinaryOperatorExpression (outerIfStatement.Condition.Clone ()' BinaryOperatorType.ConditionalAnd' innerIfStatement.Condition.Clone ())' " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,MoveToOuterScopeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\MoveToOuterScopeAction.cs,HasDependency,The length of the statement  "	var identifiers = targetNode.Descendants.Where (n => n is IdentifierExpression).Select<AstNode' IdentifierExpression> (node => (IdentifierExpression)node); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,MoveToOuterScopeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\MoveToOuterScopeAction.cs,HasDependency,The length of the statement  "		referenceFinder.FindLocalReferences (localResolveResult.Variable' context.UnresolvedFile' syntaxTree' context.Compilation' (node' nodeResolveResult) => { " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NegateIsExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\NegateIsExpressionAction.cs,GetAction,The length of the statement  "		script.Replace (node' new UnaryOperatorExpression (UnaryOperatorType.Not' new ParenthesizedExpression (node.Clone ()))); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,PutInsideUsingAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\PutInsideUsingAction.cs,GetAction,The length of the statement  "			var statements = CollectStatements (variableDecl.GetNextSibling (n => n is Statement) as Statement' lastReference.EndLocation).ToArray (); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,PutInsideUsingAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\PutInsideUsingAction.cs,GetAction,The length of the statement  "			ResourceAcquisition = new VariableDeclarationStatement (variableDecl.Type.Clone ()' node.Name' node.Initializer.Clone ())' " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The length of the statement  "	if (propertyDeclaration == null || propertyDeclaration.Getter.IsNull || propertyDeclaration.Setter.IsNull || propertyDeclaration.Getter.Body.IsNull || propertyDeclaration.Setter.Body.IsNull) " is 190.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The length of the statement  "	if (!context.Supports (csharp3) || propertyDeclaration.HasModifier (ICSharpCode.NRefactory.CSharp.Modifiers.Abstract) || ((TypeDeclaration)propertyDeclaration.Parent).ClassType == ClassType.Interface) " is 200.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBracesAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBracesAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (keyword != null ? string.Format (context.TranslateString ("Remove braces from '{0}'")' keyword) : context.TranslateString ("Remove braces")' script => { " is 181.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveRedundantCatchTypeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRedundantCatchTypeAction.cs,GetActions,The length of the statement  "	if (exceptionIdentifierRR != null && IsReferenced (exceptionIdentifierRR.Variable' catchClause.Body' syntaxTree' context)) " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveRegionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRegionAction.cs,GetActions,The length of the statement  "	PreProcessorDirective endDirective = directive.Type == PreProcessorDirectiveType.Region ? GetEndDirective (directive) : GetStartDirective (directive); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveRegionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveRegionAction.cs,GetDirective,The length of the statement  "	if (directive == null || directive.Type != PreProcessorDirectiveType.Region && directive.Type != PreProcessorDirectiveType.Endregion) " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SimplifyIfInLoopsFlowAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SimplifyIfInLoopsFlowAction.cs,GetIfElseStatement,The length of the statement  "	var condition = (result.Parent.Parent is WhileStatement) || (result.Parent.Parent is ForeachStatement) || (result.Parent.Parent is ForStatement); " is 145.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SplitDeclarationAndAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitDeclarationAndAssignmentAction.cs,GetActions,The length of the statement  "		var assign = new AssignmentExpression (new IdentifierExpression (varInitializer.Name)' AssignmentOperatorType.Assign' varInitializer.Initializer.Clone ()); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The length of the statement  "		if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 2) && new TextLocation (context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) { " is 194.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The length of the statement  "		if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 1) && new TextLocation (context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) { " is 194.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseExplicitTypeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs,GetActions,The length of the statement  "	if (!(!type.Equals (SpecialType.NullType) && !type.Equals (SpecialType.UnknownType) && !ContainsAnonymousType (type))) { " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseExplicitTypeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs,GetVariableDeclarationStatement,The length of the statement  "	if (result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location.Line' context.Location.Column) && result.Type.IsVar ()) { " is 198.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,RemoveUnnecessaryToString,The length of the statement  "		if (invocation.Target is MemberReferenceExpression && ((MemberReferenceExpression)invocation.Target).MemberName.Equals ("ToString") && invocation.Arguments.Count == 0) { " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,DetermineItemFormatString,The length of the statement  "		if (invocation.Target is MemberReferenceExpression && ((MemberReferenceExpression)invocation.Target).MemberName.Equals ("ToString") && invocation.Arguments.Count == 1) { " is 169.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseVarKeywordAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseVarKeywordAction.cs,GetVariableDeclarationStatement,The length of the statement  "	if (result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location) && !result.Type.IsVar ()) " is 167.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToDisposedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToDisposedClosureIssue.cs,CanReachModification,The length of the statement  "			if (usingStatement.ResourceAcquisition is Statement && modifications.ContainsKey ((Statement)usingStatement.ResourceAcquisition)) " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetNodeKind,The length of the statement  "	if (unaryExpr != null && unaryExpr.Expression == node && (unaryExpr.Operator == UnaryOperatorType.Increment || unaryExpr.Operator == UnaryOperatorType.PostIncrement || unaryExpr.Operator == UnaryOperatorType.Decrement || unaryExpr.Operator == UnaryOperatorType.PostDecrement)) { " is 278.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetFixes,The length of the statement  "	if (containingStatement is WhileStatement || containingStatement is DoWhileStatement || containingStatement is ForStatement) " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetFixes,The length of the statement  "	if (containingStatement.Parent is ForStatement && ((ForStatement)containingStatement.Parent).EmbeddedStatement != containingStatement) " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetFixes,The length of the statement  "		var newName = LocalVariableNamePicker.PickSafeName (containingStatement.GetParent<EntityDeclaration> ()' Enumerable.Range (1' 100).Select (i => variableName + i)); " is 163.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetFixes,The length of the statement  "		var variableDecl = new VariableDeclarationStatement (new SimpleType ("var")' newName' new IdentifierExpression (variableName)); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableHidesMemberIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LocalVariableHidesMemberIssue.cs,IsAccessible,The length of the statement  "		return IsInternalAccessible (sourceMember.ParentAssembly' targetMember.ParentAssembly) || IsProtectedAccessible (sourceType' targetType); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,VariableHidesMemberIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\CodeQuality\LocalVariableHidesMemberIssue.cs,IsAccessible,The length of the statement  "		return IsInternalAccessible (sourceMember.ParentAssembly' targetMember.ParentAssembly) && IsProtectedAccessible (sourceType' targetType); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,DefaultRules,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\DefaultRules.cs,GetFdgRules,The length of the statement  "	yield return new NamingRule (AffectedEntity.Class | AffectedEntity.Struct | AffectedEntity.Enum | AffectedEntity.Delegate) { " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("Name should have prefix '{0}'. (Rule '{1}').")' RequiredPrefixes [0]' Name); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("Name has forbidden prefix '{0}'. (Rule '{1}')")' requiredPrefix' Name); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("Name should have suffix '{0}'. (Rule '{1}')")' RequiredSuffixes [0]' Name); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The length of the statement  "			errorMessage = string.Format (ctx.TranslateString ("'{0}' contains an upper case letter after the first. (Rule '{1}')")' name' Name); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,Equals,The length of the statement  "	return Name == other.Name && AffectedEntity == other.AffectedEntity && VisibilityMask == other.VisibilityMask && NamingStyle == other.NamingStyle; " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,ToString,The length of the statement  "	return string.Format ("[NamingRule: Name={0}' AffectedEntity={1}' VisibilityMask={2}' NamingStyle={3}' IncludeStaticEntities={4}' IncludeInstanceMembers={5}]"' Name' AffectedEntity' VisibilityMask' NamingStyle' IncludeStaticEntities' IncludeInstanceMembers); " is 258.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexExpression,The length of the statement  "	return expr.StartLocation.Line != expr.EndLocation.Line || expr is ConditionalExpression || expr is BinaryOperatorExpression; " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexCondition,The length of the statement  "	if (expr is PrimitiveExpression || expr is IdentifierExpression || expr is MemberReferenceExpression || expr is InvocationExpression) " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexCondition,The length of the statement  "	return !(bop.Operator == BinaryOperatorType.GreaterThan || bop.Operator == BinaryOperatorType.GreaterThanOrEqual || bop.Operator == BinaryOperatorType.Equality || bop.Operator == BinaryOperatorType.InEquality || bop.Operator == BinaryOperatorType.LessThan || bop.Operator == BinaryOperatorType.LessThanOrEqual); " is 311.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToFirstOrDefaultIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToFirstOrDefaultIssue.cs,CreateVisitor,The length of the statement  "	return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToFirstOrDefaultIssue> (context' "FirstOrDefault"); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToLastOrDefaultIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToLastOrDefaultIssue.cs,CreateVisitor,The length of the statement  "	return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToLastOrDefaultIssue> (context' "LastOrDefault"); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithSingleCallToSingleOrDefaultIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ReplaceWithSingleCallToSingleOrDefaultIssue.cs,CreateVisitor,The length of the statement  "	return new ReplaceWithSingleCallToAnyIssue.GatherVisitor<ReplaceWithSingleCallToSingleOrDefaultIssue> (context' "SingleOrDefault"); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringEndsWithIsCultureSpecificIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringEndsWithIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "	return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringEndsWithIsCultureSpecificIssue> (context' "EndsWith"); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringLastIndexOfIsCultureSpecificIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringLastIndexOfIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "	return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringLastIndexOfIsCultureSpecificIssue> (context' "LastIndexOf"); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,StringStartsWithIsCultureSpecificIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\StringStartsWithIsCultureSpecificIssue.cs,CreateVisitor,The length of the statement  "	return new StringIndexOfIsCultureSpecificIssue.GatherVisitor<StringStartsWithIsCultureSpecificIssue> (context' "StartsWith"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddExceptionDescriptionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddExceptionDescriptionAction.cs,SearchInsertionNode,The length of the statement  "	while (result != null && (result.Role == Roles.Comment || result.Role == Roles.NewLine || result.Role == Roles.Whitespace)) " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToConditionalTernaryExpressionAction.cs,CreateAction,The length of the statement  "		script.Replace (ifElseStatement' new ExpressionStatement (new AssignmentExpression (target.Clone ()' firstAssign.Operator' new ConditionalExpression (condition.Clone ()' trueExpr.Clone ()' falseExpr.Clone ())))); " is 212.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,CheckNode,The length of the statement  "	var expressionPattern = new AssignmentExpression (leftExpressionPattern' AssignmentOperatorType.Assign' new AnyNode (valueOnNullGroupName)); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,GetAction,The length of the statement  "				script.Replace (variable.Initializer' new BinaryOperatorExpression (variable.Initializer.Clone ()' BinaryOperatorType.NullCoalescing' rightSide.Clone ())); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,GetAction,The length of the statement  "				var newExpression = new BinaryOperatorExpression (previousAssignment.Right.Clone ()' BinaryOperatorType.NullCoalescing' rightSide.Clone ()); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,GetAction,The length of the statement  "		var coalescedExpression = new BinaryOperatorExpression (comparedNode.Clone ()' BinaryOperatorType.NullCoalescing' rightSide.Clone ()); " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToNullCoalescingExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToNullCoalescingExpressionAction.cs,IsEmpty,The length of the statement  "	return statement.IsNull || !statement.DescendantsAndSelf.OfType<Statement> ().Any (descendant => !(descendant is EmptyStatement || descendant is BlockStatement)); " is 162.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToSwitchStatementAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertIfStatementToSwitchStatementAction.cs,CollectCaseLabels,The length of the statement  "		return CollectCaseLabels (result' context' binaryOp.Left' switchExpr) && CollectCaseLabels (result' context' binaryOp.Right' switchExpr); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertNullCoalescingToConditionalExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertNullCoalescingToConditionalExpressionAction.cs,GetAction,The length of the statement  "		Expression expr = new ConditionalExpression (new BinaryOperatorExpression (node.Left.Clone ()' BinaryOperatorType.InEquality' new NullReferenceExpression ())' node.Left.Clone ()' node.Right.Clone ()); " is 200.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertReturnStatementToIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertReturnStatementToIfAction.cs,CreateForConditionalExpression,The length of the statement  "		var ifStatement = new IfElseStatement (conditionalExpression.Condition.Clone ()' new ReturnStatement (conditionalExpression.TrueExpression.Clone ())); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertReturnStatementToIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertReturnStatementToIfAction.cs,CreateForNullCoalesingExpression,The length of the statement  "		var ifStatement = new IfElseStatement (new BinaryOperatorExpression (bOp.Left.Clone ()' BinaryOperatorType.InEquality' new NullReferenceExpression ())' new ReturnStatement (bOp.Left.Clone ())); " is 193.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertAssignmentToIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertAssignmentToIfAction.cs,CreateForConditionalExpression,The length of the statement  "		var ifStatement = new IfElseStatement (conditionalExpression.Condition.Clone ()' new AssignmentExpression (node.Left.Clone ()' node.Operator' conditionalExpression.TrueExpression.Clone ())' new AssignmentExpression (node.Left.Clone ()' node.Operator' conditionalExpression.FalseExpression.Clone ())); " is 300.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertAssignmentToIfAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertAssignmentToIfAction.cs,CreateForNullCoalesingExpression,The length of the statement  "		var ifStatement = new IfElseStatement (new BinaryOperatorExpression (bOp.Left.Clone ()' BinaryOperatorType.InEquality' new NullReferenceExpression ())' new AssignmentExpression (node.Left.Clone ()' node.Operator' bOp.Left.Clone ())' new AssignmentExpression (node.Left.Clone ()' node.Operator' bOp.Right.Clone ())); " is 315.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,IsEmbeddedStatement,The length of the statement  "	return stmt.Role == Roles.EmbeddedStatement || stmt.Role == IfElseStatement.TrueRole || stmt.Role == IfElseStatement.FalseRole; " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "	var foundCasts = ifElseStatement.GetParent<BlockStatement> ().DescendantNodes (n => n.StartLocation >= ifElseStatement.StartLocation && !cast.IsMatch (n)).Where (n => cast.IsMatch (n)).ToList (); " is 195.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "		var varName = ctx.GetNameProposal (CreateMethodDeclarationAction.GuessNameFromType (rr.Type)' ifElseStatement.StartLocation); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "		var varDec = new VariableDeclarationStatement (new PrimitiveType ("var")' varName' new AsExpression (obj.Clone ()' castToType.Clone ())); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,HandleNegatedCase,The length of the statement  "		var binaryOperatorExpression = new BinaryOperatorExpression (binaryOperatorIdentifier' BinaryOperatorType.Equality' new NullReferenceExpression ()); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "	var foundCasts = embeddedStatment.DescendantNodesAndSelf (n => !cast.IsMatch (n)).Where (n => cast.IsMatch (n)).ToList (); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "		var varName = ctx.GetNameProposal (CreateMethodDeclarationAction.GuessNameFromType (rr.Type)' ifElseStatement.StartLocation); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "		var varDec = new VariableDeclarationStatement (new PrimitiveType ("var")' varName' new AsExpression (obj.Clone ()' castToType.Clone ())); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,ScanIfElse,The length of the statement  "		var binaryOperatorExpression = new BinaryOperatorExpression (binaryOperatorIdentifier' BinaryOperatorType.InEquality' new NullReferenceExpression ()); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "			var varName = ctx.GetNameProposal (CreateMethodDeclarationAction.GuessNameFromType (rr.Type)' ifElseStatement.StartLocation); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "			var varDec = new VariableDeclarationStatement (new PrimitiveType ("var")' varName' new AsExpression (isExpr.Expression.Clone ()' isExpr.Type.Clone ())); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "			var binaryOperatorExpression = new BinaryOperatorExpression (binaryOperatorIdentifier' BinaryOperatorType.Equality' new NullReferenceExpression ()); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "	var foundCasts2 = isExpr.GetParent<Statement> ().DescendantNodesAndSelf (n => !cast.IsMatch (n)).Where (n => isExpr.StartLocation < n.StartLocation && cast.IsMatch (n)).ToList (); " is 179.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "		var varName = ctx.GetNameProposal (CreateMethodDeclarationAction.GuessNameFromType (rr2.Type)' ifElseStatement.StartLocation); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "		var varDec = new VariableDeclarationStatement (new PrimitiveType ("var")' varName' new AsExpression (obj.Clone ()' castToType.Clone ())); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,UseAsAndNullCheckAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseAsAndNullCheckAction.cs,GetAction,The length of the statement  "		var binaryOperatorExpression = new BinaryOperatorExpression (binaryOperatorIdentifier' BinaryOperatorType.InEquality' new NullReferenceExpression ()); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForToWhileAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForToWhileAction.cs,GetAction,The length of the statement  "		var whileStatement = new WhileStatement (node.Condition.IsNull ? new PrimitiveExpression (true) : node.Condition.Clone ()' blockStatement); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CS0126ReturnMustBeFollowedByAnyExpression,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\CompilerErrors\CS0126ReturnMustBeFollowedByAnyExpression.cs,GetRequestedReturnType,The length of the statement  "	entityNode = returnStatement.GetParent (p => p is LambdaExpression || p is AnonymousMethodExpression || !(p is Accessor) && p is EntityDeclaration); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfToOrExpressionIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ConvertIfToOrExpressionIssue.cs,CheckTarget,The length of the statement  "	return !target.DescendantNodesAndSelf ().Any (n => (n is IdentifierExpression || n is MemberReferenceExpression) && expr.DescendantNodesAndSelf ().Any (n2 => ((INode)n).IsMatch (n2))); " is 184.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new UnaryOperatorExpression (UnaryOperatorType.Increment' new IdentifierExpression (name)))' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new UnaryOperatorExpression (UnaryOperatorType.PostIncrement' new IdentifierExpression (name)))' " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new AssignmentExpression (new IdentifierExpression (name)' AssignmentOperatorType.Add' PatternHelper.OptionalParentheses (new AnyNode ("step")))) " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new UnaryOperatorExpression (UnaryOperatorType.Decrement' new IdentifierExpression (name)))' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new UnaryOperatorExpression (UnaryOperatorType.PostDecrement' new IdentifierExpression (name)))' " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,IsForward,The length of the statement  "		PatternHelper.OptionalParentheses (new AssignmentExpression (new IdentifierExpression (name)' AssignmentOperatorType.Subtract' PatternHelper.OptionalParentheses (new AnyNode ("step")))) " is 185.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "			PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new IdentifierExpression (name))' BinaryOperatorType.LessThan' PatternHelper.OptionalParentheses (new AnyNode ("bound"))))' " is 223.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "			PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new AnyNode ("bound"))' BinaryOperatorType.GreaterThan' PatternHelper.OptionalParentheses (new IdentifierExpression (name)))) " is 225.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "			PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new IdentifierExpression (name))' BinaryOperatorType.LessThanOrEqual' PatternHelper.OptionalParentheses (new AnyNode ("bound"))))' " is 230.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "			PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new AnyNode ("bound"))' BinaryOperatorType.GreaterThanOrEqual' PatternHelper.OptionalParentheses (new IdentifierExpression (name)))) " is 232.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "		PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new IdentifierExpression (name))' BinaryOperatorType.GreaterThanOrEqual' PatternHelper.OptionalParentheses (new AnyNode ("bound"))))' " is 233.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewCondition,The length of the statement  "		PatternHelper.OptionalParentheses (new BinaryOperatorExpression (PatternHelper.OptionalParentheses (new AnyNode ("bound"))' BinaryOperatorType.LessThanOrEqual' PatternHelper.OptionalParentheses (new IdentifierExpression (name)))) " is 229.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Subtract,The length of the statement  "	return new BinaryOperatorExpression (expr.Clone ()' BinaryOperatorType.Subtract' CSharpUtil.AddParensForUnaryExpressionIfRequired (step.Clone ())); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,Add,The length of the statement  "	return new BinaryOperatorExpression (expr.Clone ()' BinaryOperatorType.Add' CSharpUtil.AddParensForUnaryExpressionIfRequired (step.Clone ())); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReverseDirectionForForLoopAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReverseDirectionForForLoopAction.cs,GetNewBound,The length of the statement  "	return new BinaryOperatorExpression (new IdentifierExpression (name)' direction == true ? BinaryOperatorType.LessThan : BinaryOperatorType.GreaterThanOrEqual' direction == true ? Add (initializer' step) : initializer); " is 218.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,AddOriginalNodeAnnotations,The length of the statement  "	foreach (var nodeToAnnotate in currentFunction.DescendantNodesAndSelf (MayHaveChildrenToAnnotate).Where (ShouldAnnotate)) { " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,RemoveOriginalNodeAnnotations,The length of the statement  "	foreach (var nodeToAnnotate in currentFunction.DescendantNodesAndSelf (MayHaveChildrenToAnnotate).Where (ShouldAnnotate)) { " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,CreateVariableName,The length of the statement  "	var identifiers = currentRootNode.Descendants.OfType<Identifier> ().Select (identifier => identifier.Name).Where (identifier => identifier.StartsWith (proposedName' StringComparison.InvariantCulture)).ToList (); " is 211.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,HasReachableNonReturnNodes,The length of the statement  "			if (!(nextStatement is ReturnStatement || nextStatement is GotoStatement || nextStatement is GotoCaseStatement || nextStatement is GotoDefaultStatement || nextStatement is ContinueStatement || nextStatement is BreakStatement)) { " is 228.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,GetFunctionToken,The length of the statement  "	return (AstNode)currentFunction.GetChildByRole (Roles.Identifier) ?? currentFunction.GetChildByRole (LambdaExpression.ArrowRole) ?? currentFunction.GetChildByRole (AnonymousMethodExpression.DelegateKeywordRole); " is 211.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,AddOptionalParameterToInvocationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddOptionalParameterToInvocationAction.cs,GetActions,The length of the statement  "		yield return new CodeAction (string.Format (context.TranslateString ("Add optional parameter \"{0}\"")' parameterToAdd.Name)' script => { " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ComputeConstantValueAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ComputeConstantValueAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Compute constant value")' script => script.Replace (expression' new PrimitiveExpression (rr.ConstantValue))' node); " is 170.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertShiftToMultiplyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertShiftToMultiplyAction.cs,GetAction,The length of the statement  "	if (node.Operator != BinaryOperatorType.ShiftLeft && node.Operator != BinaryOperatorType.ShiftRight || !(node.Right is PrimitiveExpression)) " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertShiftToMultiplyAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertShiftToMultiplyAction.cs,GetAction,The length of the statement  "	return new CodeAction (node.Operator == BinaryOperatorType.ShiftLeft ? context.TranslateString ("Replace with '*'") : context.TranslateString ("Replace with '/'")' script => script.Replace (node' new BinaryOperatorExpression (node.Left.Clone ()' node.Operator == BinaryOperatorType.ShiftLeft ? BinaryOperatorType.Multiply : BinaryOperatorType.Divide' new PrimitiveExpression (1 << (int)value)))' node.OperatorToken); " is 416.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMultiplyToShiftAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs,GetAction,The length of the statement  "	if (node.Operator != BinaryOperatorType.Multiply && node.Operator != BinaryOperatorType.Divide || !(node.Right is PrimitiveExpression)) " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertMultiplyToShiftAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertMultiplyToShiftAction.cs,GetAction,The length of the statement  "	return new CodeAction (node.Operator == BinaryOperatorType.Multiply ? context.TranslateString ("Replace with '<<'") : context.TranslateString ("Replace with '>>'")' script => script.Replace (node' new BinaryOperatorExpression (node.Left.Clone ()' node.Operator == BinaryOperatorType.Multiply ? BinaryOperatorType.ShiftLeft : BinaryOperatorType.ShiftRight' new PrimitiveExpression (log2)))' node.OperatorToken); " is 410.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceAssignmentWithPostfixExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs,GetAction,The length of the statement  "	if (node.Operator != AssignmentOperatorType.Add && node.Operator != AssignmentOperatorType.Subtract || !onePattern.IsMatch (node.Right)) " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceAssignmentWithPostfixExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs,GetAction,The length of the statement  "	string desc = node.Operator == AssignmentOperatorType.Add ? context.TranslateString ("Replace with '{0}++'") : context.TranslateString ("Replace with '{0}--'"); " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceAssignmentWithPostfixExpressionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceAssignmentWithPostfixExpressionAction.cs,GetAction,The length of the statement  "	return new CodeAction (string.Format (desc' node.Left)' s => s.Replace (node' new UnaryOperatorExpression (node.Operator == AssignmentOperatorType.Add ? UnaryOperatorType.PostIncrement : UnaryOperatorType.PostDecrement' node.Left.Clone ()))' node.OperatorToken); " is 262.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplacePostfixExpressionWithAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplacePostfixExpressionWithAssignmentAction.cs,GetAction,The length of the statement  "	string desc = node.Operator == UnaryOperatorType.PostIncrement ? context.TranslateString ("Replace with '{0} += 1'") : context.TranslateString ("Replace with '{0} -= 1'"); " is 171.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplacePostfixExpressionWithAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplacePostfixExpressionWithAssignmentAction.cs,GetAction,The length of the statement  "	return new CodeAction (string.Format (desc' CSharpUtil.GetInnerMostExpression (node.Expression))' s => s.Replace (node' new AssignmentExpression (CSharpUtil.GetInnerMostExpression (node.Expression).Clone ()' node.Operator == UnaryOperatorType.PostIncrement ? AssignmentOperatorType.Add : AssignmentOperatorType.Subtract' new PrimitiveExpression (1)))' node.OperatorToken); " is 372.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithOperatorAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceWithOperatorAssignmentAction.cs,CreateAssignment,The length of the statement  "	return new AssignmentExpression (node.Left.Clone ()' op' SplitIfAction.GetRightSide ((BinaryOperatorExpression)outerLeft.Parent)); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceWithOperatorAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceWithOperatorAssignmentAction.cs,GetAction,The length of the statement  "	return new CodeAction (string.Format (context.TranslateString ("Replace with '{0}='")' ((BinaryOperatorExpression)node.Right).OperatorToken)' s => s.Replace (node' ae)' node.OperatorToken); " is 189.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ReplaceOperatorAssignmentWithAssignmentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ReplaceOperatorAssignmentWithAssignmentAction.cs,GetAction,The length of the statement  "	return new CodeAction (context.TranslateString ("Replace with '='")' s => s.Replace (node' new AssignmentExpression (node.Left.Clone ()' new BinaryOperatorExpression (node.Left.Clone ()' op' node.Right.Clone ())))' node.OperatorToken); " is 235.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeCriteriaCollector,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,VisitIndexerExpression,The length of the statement  "			var criterion = new SupportsIndexingCriterion (arrayType.ElementType' parameterTypes' CSharpConversions.Get (context.Compilation)); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeCriteriaCollector,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,VisitIndexerExpression,The length of the statement  "		var criterion = new SupportsIndexingCriterion (invocationResolveResult.Member.ReturnType' parameterTypes' CSharpConversions.Get (context.Compilation)); " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "	if (rr.Member.Name != "HasFlag" || rr.Member.DeclaringType.GetDefinition ().KnownTypeCode != ICSharpCode.NRefactory.TypeSystem.KnownTypeCode.Enum) " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "	if (!arg.DescendantsAndSelf.All (x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr)) " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "			script.Replace (uOp' new BinaryOperatorExpression (new ParenthesizedExpression (new BinaryOperatorExpression (mRef.Target.Clone ()' BinaryOperatorType.BitwiseAnd' arg))' BinaryOperatorType.Equality' new PrimitiveExpression (0))); " is 229.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHasFlagsToBitwiseFlagComparisonAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHasFlagsToBitwiseFlagComparisonAction.cs,GetAction,The length of the statement  "			script.Replace (node' new BinaryOperatorExpression (new ParenthesizedExpression (new BinaryOperatorExpression (mRef.Target.Clone ()' BinaryOperatorType.BitwiseAnd' arg))' BinaryOperatorType.InEquality' new PrimitiveExpression (0))); " is 232.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,MakeFlatExpression,The length of the statement  "	return new BinaryOperatorExpression (MakeFlatExpression (bOp.Left' opType)' opType' MakeFlatExpression (bOp.Right' opType)); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,BuildHasFlagExpression,The length of the statement  "		return new BinaryOperatorExpression (BuildHasFlagExpression (target' bOp.Left)' BinaryOperatorType.BitwiseOr' BuildHasFlagExpression (target' bOp.Right)); " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,BuildHasFlagExpression,The length of the statement  "	return new InvocationExpression (new MemberReferenceExpression (target.Clone ()' "HasFlag")' MakeFlatExpression (bOp' BinaryOperatorType.BitwiseOr)); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,CreateAction,The length of the statement  "	if (!expr.DescendantsAndSelf.All (x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr) && !expr.DescendantsAndSelf.All (x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseAnd)) " is 294.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,CS1105ExtensionMethodMustBeDeclaredStaticAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CS1105ExtensionMethodMustBeDeclaredStaticAction.cs,GetActions,The length of the statement  "	yield return new CodeAction (context.TranslateString ("Convert method to static")' script => script.ChangeModifier (method' method.Modifiers | Modifiers.Static)' method) { " is 171.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromExpression,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Extract method")' Script.InsertPosition.Before' method).ContinueScript (delegate { " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "		bool transformParameterToReturn = method.ReturnType is PrimitiveType && ((PrimitiveType)method.ReturnType).Keyword == "void" && parameterOutCount == 1; " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "			var argumentExpression = invocation.Arguments.OfType<DirectionExpression> ().First (a => a.FieldDirection == FieldDirection.Out); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "		script.InsertWithCursor (context.TranslateString ("Extract method")' Script.InsertPosition.Before' method).ContinueScript (delegate { " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "				script.InsertBefore (statements [0]' new VariableDeclarationStatement (context.CreateShortType (variable.Type)' variable.Name)); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,CreateFromStatements,The length of the statement  "				invocationStatement = new VariableDeclarationStatement (new SimpleType ("var")' generatedReturnVariable.Name' invocation); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableLookupVisitor,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableLookupVisitor.cs,VisitIdentifierExpression,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= identifierExpression.StartLocation && identifierExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitIdentifierExpression,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= identifierExpression.StartLocation && identifierExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitAssignmentExpression,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= assignmentExpression.StartLocation && assignmentExpression.EndLocation <= endLocation) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitDirectionExpression,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= directionExpression.StartLocation && directionExpression.EndLocation <= endLocation) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitVariableInitializer,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= variableInitializer.StartLocation && variableInitializer.EndLocation <= endLocation) { " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitVariableInitializer,The length of the statement  "			SetState (variableInitializer.Name' variableInitializer.Initializer.IsNull ? VariableState.None : VariableState.Changed); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The length of the statement  "	if (startLocation.IsEmpty || startLocation <= unaryOperatorExpression.StartLocation && unaryOperatorExpression.EndLocation <= endLocation) { " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The length of the statement  "		if (unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement) { " is 279.
Long Statement,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitComment,The length of the statement  "			isAllDisabled &= txt.IndexOf (GatherVisitorConstants.RestoreAllString' StringComparison.InvariantCultureIgnoreCase) < 0; " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitComment,The length of the statement  "			isAllDisabled |= txt.IndexOf (GatherVisitorConstants.DisableAllString' StringComparison.InvariantCultureIgnoreCase) > 0; " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitAttribute,The length of the statement  "	if (resolveResult.Type.Name == "SuppressMessageAttribute" && resolveResult.Type.Namespace == "System.Diagnostics.CodeAnalysis") { " is 129.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AbstractAndVirtualConversionAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AbstractAndVirtualConversionAction.cs,GetActions,The conditional expression  "(node is EventDeclaration && node is CustomEventDeclaration || selectedNode.Role != Roles.Identifier) && selectedNode.Role != IndexerDeclaration.ThisKeywordRole"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The conditional expression  "pdecl == null || !pdecl.Getter.IsNull && !pdecl.Setter.IsNull || !pdecl.NameToken.Contains (context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddAnotherAccessorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddAnotherAccessorAction.cs,GetActions,The conditional expression  "!pdecl.Getter.IsNull && !pdecl.Getter.Body.IsNull || !pdecl.Setter.IsNull && !pdecl.Setter.Body.IsNull"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AddUsingAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\AddUsingAction.cs,GetActionsForType,The conditional expression  "(typeDefinition.Name == identifier || typeDefinition.Name == attributeIdentifier) && typeDefinition.TypeParameterCount == tc && lookup.IsAccessible (typeDefinition' false)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertDecToHexAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertDecToHexAction.cs,GetActions,The conditional expression  "value is string || value is bool || value is float || value is double || value is char"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,GetActions,The conditional expression  "node == null || (node.Operator != BinaryOperatorType.Equality && node.Operator != BinaryOperatorType.InEquality) || !node.OperatorToken.Contains (context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The conditional expression  "rr == null || rr.IsError || rr.Member.Name != "Equals" || !rr.Member.DeclaringType.IsKnownType (KnownTypeCode.Object)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertHexToDecAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertHexToDecAction.cs,GetActions,The conditional expression  "!((pexpr.Value is int) || (pexpr.Value is long) || (pexpr.Value is short) || (pexpr.Value is sbyte) || (pexpr.Value is uint) || (pexpr.Value is ulong) || (pexpr.Value is ushort) || (pexpr.Value is byte))"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,CreateBackingStoreAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateBackingStoreAction.cs,GetActions,The conditional expression  "!(!property.Getter.IsNull && !property.Setter.IsNull && // automatic properties always need getter & setter  property.Getter.Body.IsNull && property.Setter.Body.IsNull)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,CreateConstructorDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateConstructorDeclarationAction.cs,GetActions,The conditional expression  "resolveResult == null || !resolveResult.IsError || resolveResult.Member.DeclaringTypeDefinition == null || resolveResult.Member.DeclaringTypeDefinition.IsSealed || resolveResult.Member.DeclaringTypeDefinition.Region.IsEmpty"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,GetActions,The conditional expression  "rr == null || rr.Member.Name != "Equals" || rr.Member.IsStatic || !rr.Member.ReturnType.IsKnownType (KnownTypeCode.Boolean)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,FlipEqualsTargetAndArgumentAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\FlipEqualsTargetAndArgumentAction.cs,AddParensIfRequired,The conditional expression  "(expression is BinaryOperatorExpression) || (expression is UnaryOperatorExpression) || (expression is CastExpression) || (expression is AssignmentExpression) || (expression is AsExpression) || (expression is IsExpression) || (expression is LambdaExpression) || (expression is ConditionalExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,InlineLocalVariableAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InlineLocalVariableAction.cs,RequiresParens,The conditional expression  "!(replaceWithNode is BinaryOperatorExpression) && !(replaceWithNode is AssignmentExpression) && !(replaceWithNode is AsExpression) && !(replaceWithNode is IsExpression) && !(replaceWithNode is CastExpression) && !(replaceWithNode is LambdaExpression) && !(replaceWithNode is ConditionalExpression)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,InvertConditionalOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\InvertConditionalOperatorAction.cs,GetAction,The conditional expression  "context.Location != conditionalExpr.Condition.StartLocation && context.Location < conditionalExpr.Condition.EndLocation || context.Location != conditionalExpr.TrueExpression.StartLocation && conditionalExpr.TrueExpression.Contains (context.Location) || context.Location != conditionalExpr.FalseExpression.StartLocation && conditionalExpr.FalseExpression.Contains (context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,JoinStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs,GetAction,The conditional expression  "left == null || right == null || !(left.Value is string) || !(right.Value is string) || !node.OperatorToken.Contains (context.Location)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,RemoveBackingStoreAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\RemoveBackingStoreAction.cs,GetBackingField,The conditional expression  "propertyDeclaration == null || propertyDeclaration.Getter.IsNull || propertyDeclaration.Setter.IsNull || propertyDeclaration.Getter.Body.IsNull || propertyDeclaration.Setter.Body.IsNull"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,UseExplicitTypeAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseExplicitTypeAction.cs,GetVariableDeclarationStatement,The conditional expression  "result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location.Line' context.Location.Column) && result.Type.IsVar ()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,UseVarKeywordAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseVarKeywordAction.cs,GetVariableDeclarationStatement,The conditional expression  "result != null && result.Variables.Count == 1 && !result.Variables.First ().Initializer.IsNull && result.Type.Contains (context.Location) && !result.Type.IsVar ()"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AccessToModifiedClosureIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\NotWorking\AccessToClosureIssues\AccessToModifiedClosureIssue.cs,GetNodeKind,The conditional expression  "unaryExpr != null && unaryExpr.Expression == node && (unaryExpr.Operator == UnaryOperatorType.Increment || unaryExpr.Operator == UnaryOperatorType.PostIncrement || unaryExpr.Operator == UnaryOperatorType.Decrement || unaryExpr.Operator == UnaryOperatorType.PostDecrement)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,CheckName,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,IsValidName,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,NamingConventionService,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingConventionService.cs,HasValidRule,The conditional expression  "isStatic && !rule.IncludeStaticEntities || !isStatic && !rule.IncludeInstanceMembers"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertIfStatementToConditionalTernaryExpressionIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\Opportunities\ConvertIfStatementToConditionalTernaryExpressionIssue.cs,IsComplexCondition,The conditional expression  "expr is PrimitiveExpression || expr is IdentifierExpression || expr is MemberReferenceExpression || expr is InvocationExpression"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,HasReachableNonReturnNodes,The conditional expression  "!(nextStatement is ReturnStatement || nextStatement is GotoStatement || nextStatement is GotoCaseStatement || nextStatement is GotoDefaultStatement || nextStatement is ContinueStatement || nextStatement is BreakStatement)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertBitwiseFlagComparisonToHasFlagsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertBitwiseFlagComparisonToHasFlagsAction.cs,CreateAction,The conditional expression  "!expr.DescendantsAndSelf.All (x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseOr) && !expr.DescendantsAndSelf.All (x => !(x is BinaryOperatorExpression) || ((BinaryOperatorExpression)x).Operator == BinaryOperatorType.BitwiseAnd)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,ExtractMethodAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\ExtractMethodAction.cs,GetActions,The conditional expression  "!(node is Statement) && !(node is Comment) && !(node is NewLineNode) && !(node is PreProcessorDirective)"  is complex.
Complex Conditional,ICSharpCode.NRefactory.CSharp.Refactoring.ExtractMethod,VariableUsageAnalyzation,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ExtractMethod\VariableUsageAnalyzation.cs,VisitUnaryOperatorExpression,The conditional expression  "unaryOperatorExpression.Operator == UnaryOperatorType.Increment || unaryOperatorExpression.Operator == UnaryOperatorType.Decrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostIncrement || unaryOperatorExpression.Operator == UnaryOperatorType.PostDecrement"  is complex.
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,HasDifferentEqualsMethod,The following statement contains a magic number: foreach (var method in methods) {  	if (method.Parameters.Count == 2 && method.FullName != "System.Object.Equals") {  		return true;  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualityOperatorToEqualsAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualityOperatorToEqualsAction.cs,HasDifferentEqualsMethod,The following statement contains a magic number: if (method.Parameters.Count == 2 && method.FullName != "System.Object.Equals") {  	return true;  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertEqualsToEqualityOperatorAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertEqualsToEqualityOperatorAction.cs,GetActions,The following statement contains a magic number: if (node.Arguments.Count != 2 && (memberRefExpr == null || node.Arguments.Count != 1))  	yield break;  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,ConvertForeachToForAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertForeachToForAction.cs,GetName,The following statement contains a magic number: for (int i = 0; i < 1000; i++) {  	foreach (var vn in variableNames) {  		string id = i > 0 ? vn + i : vn;  		var rr = state.LookupSimpleNameOrTypeName (id' new IType[0]' NameLookupMode.Expression);  		if (rr.IsError)  			return id;  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AccessPath,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\AccessPath.cs,GetHashCode,The following statement contains a magic number: foreach (var member in MemberPath)  	hash ^= 31 * member.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AccessPath,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\ConvertToInitializer\AccessPath.cs,GetHashCode,The following statement contains a magic number: hash ^= 31 * member.GetHashCode ();  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,JoinStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\JoinStringAction.cs,GetAction,The following statement contains a magic number: return new CodeAction (context.TranslateString ("Join strings")' script => {  	var start = context.GetOffset (left.EndLocation) - 1;  	var end = context.GetOffset (right.StartLocation) + (isLeftVerbatim ? 2 : 1);  	script.RemoveText (start' end - start);  }' node.OperatorToken);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,GetAction,The following statement contains a magic number: return new CodeAction (context.TranslateString ("Convert to query syntax")' script => {  	List<string> newNames = new List<string> ();  	var identifiers = newNode.Descendants.OfType<Identifier> ().ToList ();  	foreach (var identifier in identifiers.Where (id => id.Name.StartsWith ("<>"))) {  		int nameId = int.Parse (identifier.Name.Substring (2)) - 1;  		while (newNames.Count <= nameId) {  			//Find new name  			//This might skip some legitimate names' but that's not a real problem.  			var topMostBlock = node.AncestorsAndSelf.OfType<BlockStatement> ().Last ();  			var variableDeclarations = topMostBlock.Descendants.OfType<VariableDeclarationStatement> ();  			var declaredNames = variableDeclarations.SelectMany (variableDeclaration => variableDeclaration.Variables).Select (variable => variable.Name).ToList ();  			int currentId = 1;  			while (identifiers.Any (id => id.Name == "_" + currentId) || declaredNames.Contains ("_" + currentId)) {  				++currentId;  			}  			newNames.Add ("_" + currentId);  		}  		identifier.Name = newNames [nameId];  	}  	if (NeedsParenthesis (node)) {  		newNode = new ParenthesizedExpression (newNode);  	}  	script.Replace (node' newNode);  }' node);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,LinqFluentToQueryAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\LinqFluentToQueryAction.cs,GetAction,The following statement contains a magic number: foreach (var identifier in identifiers.Where (id => id.Name.StartsWith ("<>"))) {  	int nameId = int.Parse (identifier.Name.Substring (2)) - 1;  	while (newNames.Count <= nameId) {  		//Find new name  		//This might skip some legitimate names' but that's not a real problem.  		var topMostBlock = node.AncestorsAndSelf.OfType<BlockStatement> ().Last ();  		var variableDeclarations = topMostBlock.Descendants.OfType<VariableDeclarationStatement> ();  		var declaredNames = variableDeclarations.SelectMany (variableDeclaration => variableDeclaration.Variables).Select (variable => variable.Name).ToList ();  		int currentId = 1;  		while (identifiers.Any (id => id.Name == "_" + currentId) || declaredNames.Contains ("_" + currentId)) {  			++currentId;  		}  		newNames.Add ("_" + currentId);  	}  	identifier.Name = newNames [nameId];  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitDeclarationListAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitDeclarationListAction.cs,GetAction,The following statement contains a magic number: if (initializers.Count < 2)  	yield break;  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (pexpr.LiteralValue.StartsWith ("@"' StringComparison.Ordinal)) {  	if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 2) && new TextLocation (context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  		yield break;  	}  } else {  	if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 1) && new TextLocation (context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) {  		yield break;  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (pexpr.LiteralValue.StartsWith ("@"' StringComparison.Ordinal)) {  	if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 2) && new TextLocation (context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  		yield break;  	}  } else {  	if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 1) && new TextLocation (context.Location.Line' context.Location.Column + 1) < pexpr.EndLocation)) {  		yield break;  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 2) && new TextLocation (context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  	yield break;  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SplitStringAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\SplitStringAction.cs,GetActions,The following statement contains a magic number: if (!(pexpr.StartLocation < new TextLocation (context.Location.Line' context.Location.Column - 2) && new TextLocation (context.Location.Line' context.Location.Column + 2) < pexpr.EndLocation)) {  	yield break;  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction (context.TranslateString ("Use 'string.Format()'")' script => {  	var stringType = new PrimitiveType ("string");  	var formatInvocation = stringType.Invoke ("Format");  	var formatLiteral = new PrimitiveExpression ("");  	var counter = 0;  	var arguments = new List<Expression> ();  	formatInvocation.Arguments.Add (formatLiteral);  	var concatItems = GetConcatItems (context' expr);  	bool hasVerbatimStrings = false;  	bool hasNonVerbatimStrings = false;  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			if (stringLiteral.LiteralValue [0] == '@') {  				hasVerbatimStrings = true;  			} else {  				hasNonVerbatimStrings = true;  			}  		}  	}  	var format = new StringBuilder ();  	var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  	format.Append ('"');  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			string rawLiteral;  			if (hasVerbatimStrings && hasNonVerbatimStrings) {  				rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  			} else {  				if (stringLiteral.LiteralValue [0] == '@') {  					verbatim = true;  					rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  				} else {  					rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  				}  			}  			format.Append (QuoteBraces (rawLiteral));  		} else {  			Expression myItem = RemoveUnnecessaryToString (item);  			string itemFormatStr = DetermineItemFormatString (ref myItem);  			var index = IndexOf (arguments' myItem);  			if (index == -1) {  				// new item  				formatInvocation.Arguments.Add (myItem.Clone ());  				arguments.Add (item);  				format.Append ("{" + counter++ + itemFormatStr + "}");  			} else {  				// existing item  				format.Append ("{" + index + itemFormatStr + "}");  			}  		}  	}  	format.Append ('"');  	if (verbatim)  		format.Insert (0' '@');  	formatLiteral.SetValue (format.ToString ()' format.ToString ());  	if (arguments.Count > 0)  		script.Replace (expr' formatInvocation);  	else  		script.Replace (expr' formatLiteral);  }' node);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction (context.TranslateString ("Use 'string.Format()'")' script => {  	var stringType = new PrimitiveType ("string");  	var formatInvocation = stringType.Invoke ("Format");  	var formatLiteral = new PrimitiveExpression ("");  	var counter = 0;  	var arguments = new List<Expression> ();  	formatInvocation.Arguments.Add (formatLiteral);  	var concatItems = GetConcatItems (context' expr);  	bool hasVerbatimStrings = false;  	bool hasNonVerbatimStrings = false;  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			if (stringLiteral.LiteralValue [0] == '@') {  				hasVerbatimStrings = true;  			} else {  				hasNonVerbatimStrings = true;  			}  		}  	}  	var format = new StringBuilder ();  	var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  	format.Append ('"');  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			string rawLiteral;  			if (hasVerbatimStrings && hasNonVerbatimStrings) {  				rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  			} else {  				if (stringLiteral.LiteralValue [0] == '@') {  					verbatim = true;  					rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  				} else {  					rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  				}  			}  			format.Append (QuoteBraces (rawLiteral));  		} else {  			Expression myItem = RemoveUnnecessaryToString (item);  			string itemFormatStr = DetermineItemFormatString (ref myItem);  			var index = IndexOf (arguments' myItem);  			if (index == -1) {  				// new item  				formatInvocation.Arguments.Add (myItem.Clone ());  				arguments.Add (item);  				format.Append ("{" + counter++ + itemFormatStr + "}");  			} else {  				// existing item  				format.Append ("{" + index + itemFormatStr + "}");  			}  		}  	}  	format.Append ('"');  	if (verbatim)  		format.Insert (0' '@');  	formatLiteral.SetValue (format.ToString ()' format.ToString ());  	if (arguments.Count > 0)  		script.Replace (expr' formatInvocation);  	else  		script.Replace (expr' formatLiteral);  }' node);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: yield return new CodeAction (context.TranslateString ("Use 'string.Format()'")' script => {  	var stringType = new PrimitiveType ("string");  	var formatInvocation = stringType.Invoke ("Format");  	var formatLiteral = new PrimitiveExpression ("");  	var counter = 0;  	var arguments = new List<Expression> ();  	formatInvocation.Arguments.Add (formatLiteral);  	var concatItems = GetConcatItems (context' expr);  	bool hasVerbatimStrings = false;  	bool hasNonVerbatimStrings = false;  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			if (stringLiteral.LiteralValue [0] == '@') {  				hasVerbatimStrings = true;  			} else {  				hasNonVerbatimStrings = true;  			}  		}  	}  	var format = new StringBuilder ();  	var verbatim = hasVerbatimStrings && hasNonVerbatimStrings;  	format.Append ('"');  	foreach (var item in concatItems) {  		if (IsStringLiteral (item)) {  			var stringLiteral = (PrimitiveExpression)item;  			string rawLiteral;  			if (hasVerbatimStrings && hasNonVerbatimStrings) {  				rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  			} else {  				if (stringLiteral.LiteralValue [0] == '@') {  					verbatim = true;  					rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  				} else {  					rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  				}  			}  			format.Append (QuoteBraces (rawLiteral));  		} else {  			Expression myItem = RemoveUnnecessaryToString (item);  			string itemFormatStr = DetermineItemFormatString (ref myItem);  			var index = IndexOf (arguments' myItem);  			if (index == -1) {  				// new item  				formatInvocation.Arguments.Add (myItem.Clone ());  				arguments.Add (item);  				format.Append ("{" + counter++ + itemFormatStr + "}");  			} else {  				// existing item  				format.Append ("{" + index + itemFormatStr + "}");  			}  		}  	}  	format.Append ('"');  	if (verbatim)  		format.Insert (0' '@');  	formatLiteral.SetValue (format.ToString ()' format.ToString ());  	if (arguments.Count > 0)  		script.Replace (expr' formatInvocation);  	else  		script.Replace (expr' formatLiteral);  }' node);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: foreach (var item in concatItems) {  	if (IsStringLiteral (item)) {  		var stringLiteral = (PrimitiveExpression)item;  		string rawLiteral;  		if (hasVerbatimStrings && hasNonVerbatimStrings) {  			rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  		} else {  			if (stringLiteral.LiteralValue [0] == '@') {  				verbatim = true;  				rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  			} else {  				rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  			}  		}  		format.Append (QuoteBraces (rawLiteral));  	} else {  		Expression myItem = RemoveUnnecessaryToString (item);  		string itemFormatStr = DetermineItemFormatString (ref myItem);  		var index = IndexOf (arguments' myItem);  		if (index == -1) {  			// new item  			formatInvocation.Arguments.Add (myItem.Clone ());  			arguments.Add (item);  			format.Append ("{" + counter++ + itemFormatStr + "}");  		} else {  			// existing item  			format.Append ("{" + index + itemFormatStr + "}");  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: foreach (var item in concatItems) {  	if (IsStringLiteral (item)) {  		var stringLiteral = (PrimitiveExpression)item;  		string rawLiteral;  		if (hasVerbatimStrings && hasNonVerbatimStrings) {  			rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  		} else {  			if (stringLiteral.LiteralValue [0] == '@') {  				verbatim = true;  				rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  			} else {  				rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  			}  		}  		format.Append (QuoteBraces (rawLiteral));  	} else {  		Expression myItem = RemoveUnnecessaryToString (item);  		string itemFormatStr = DetermineItemFormatString (ref myItem);  		var index = IndexOf (arguments' myItem);  		if (index == -1) {  			// new item  			formatInvocation.Arguments.Add (myItem.Clone ());  			arguments.Add (item);  			format.Append ("{" + counter++ + itemFormatStr + "}");  		} else {  			// existing item  			format.Append ("{" + index + itemFormatStr + "}");  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: foreach (var item in concatItems) {  	if (IsStringLiteral (item)) {  		var stringLiteral = (PrimitiveExpression)item;  		string rawLiteral;  		if (hasVerbatimStrings && hasNonVerbatimStrings) {  			rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  		} else {  			if (stringLiteral.LiteralValue [0] == '@') {  				verbatim = true;  				rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  			} else {  				rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  			}  		}  		format.Append (QuoteBraces (rawLiteral));  	} else {  		Expression myItem = RemoveUnnecessaryToString (item);  		string itemFormatStr = DetermineItemFormatString (ref myItem);  		var index = IndexOf (arguments' myItem);  		if (index == -1) {  			// new item  			formatInvocation.Arguments.Add (myItem.Clone ());  			arguments.Add (item);  			format.Append ("{" + counter++ + itemFormatStr + "}");  		} else {  			// existing item  			format.Append ("{" + index + itemFormatStr + "}");  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (IsStringLiteral (item)) {  	var stringLiteral = (PrimitiveExpression)item;  	string rawLiteral;  	if (hasVerbatimStrings && hasNonVerbatimStrings) {  		rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  	} else {  		if (stringLiteral.LiteralValue [0] == '@') {  			verbatim = true;  			rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  		} else {  			rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  		}  	}  	format.Append (QuoteBraces (rawLiteral));  } else {  	Expression myItem = RemoveUnnecessaryToString (item);  	string itemFormatStr = DetermineItemFormatString (ref myItem);  	var index = IndexOf (arguments' myItem);  	if (index == -1) {  		// new item  		formatInvocation.Arguments.Add (myItem.Clone ());  		arguments.Add (item);  		format.Append ("{" + counter++ + itemFormatStr + "}");  	} else {  		// existing item  		format.Append ("{" + index + itemFormatStr + "}");  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (IsStringLiteral (item)) {  	var stringLiteral = (PrimitiveExpression)item;  	string rawLiteral;  	if (hasVerbatimStrings && hasNonVerbatimStrings) {  		rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  	} else {  		if (stringLiteral.LiteralValue [0] == '@') {  			verbatim = true;  			rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  		} else {  			rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  		}  	}  	format.Append (QuoteBraces (rawLiteral));  } else {  	Expression myItem = RemoveUnnecessaryToString (item);  	string itemFormatStr = DetermineItemFormatString (ref myItem);  	var index = IndexOf (arguments' myItem);  	if (index == -1) {  		// new item  		formatInvocation.Arguments.Add (myItem.Clone ());  		arguments.Add (item);  		format.Append ("{" + counter++ + itemFormatStr + "}");  	} else {  		// existing item  		format.Append ("{" + index + itemFormatStr + "}");  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (IsStringLiteral (item)) {  	var stringLiteral = (PrimitiveExpression)item;  	string rawLiteral;  	if (hasVerbatimStrings && hasNonVerbatimStrings) {  		rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  	} else {  		if (stringLiteral.LiteralValue [0] == '@') {  			verbatim = true;  			rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  		} else {  			rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  		}  	}  	format.Append (QuoteBraces (rawLiteral));  } else {  	Expression myItem = RemoveUnnecessaryToString (item);  	string itemFormatStr = DetermineItemFormatString (ref myItem);  	var index = IndexOf (arguments' myItem);  	if (index == -1) {  		// new item  		formatInvocation.Arguments.Add (myItem.Clone ());  		arguments.Add (item);  		format.Append ("{" + counter++ + itemFormatStr + "}");  	} else {  		// existing item  		format.Append ("{" + index + itemFormatStr + "}");  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (hasVerbatimStrings && hasNonVerbatimStrings) {  	rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  } else {  	if (stringLiteral.LiteralValue [0] == '@') {  		verbatim = true;  		rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  	} else {  		rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (hasVerbatimStrings && hasNonVerbatimStrings) {  	rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  } else {  	if (stringLiteral.LiteralValue [0] == '@') {  		verbatim = true;  		rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  	} else {  		rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (hasVerbatimStrings && hasNonVerbatimStrings) {  	rawLiteral = stringLiteral.Value.ToString ().Replace ("\""' "\"\"");  } else {  	if (stringLiteral.LiteralValue [0] == '@') {  		verbatim = true;  		rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  	} else {  		rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (stringLiteral.LiteralValue [0] == '@') {  	verbatim = true;  	rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  } else {  	rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (stringLiteral.LiteralValue [0] == '@') {  	verbatim = true;  	rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  } else {  	rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: if (stringLiteral.LiteralValue [0] == '@') {  	verbatim = true;  	rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  } else {  	rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: rawLiteral = stringLiteral.LiteralValue.Substring (2' stringLiteral.LiteralValue.Length - 3);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,UseStringFormatAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\UseStringFormatAction.cs,GetActions,The following statement contains a magic number: rawLiteral = stringLiteral.LiteralValue.Substring (1' stringLiteral.LiteralValue.Length - 2);  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,AutoAsyncIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Uncategorized\AutoAsyncIssue.cs,CreateVisitor,The following statement contains a magic number: if (!context.Supports (new Version (5' 0))) {  	//Old C# version -- async/await are not available  	return null;  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SupportsIndexingCriterion,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,SatisfiedBy,The following statement contains a magic number: return accessors.Any (member => {  	var parameterizedMember = member as IParameterizedMember;  	if (parameterizedMember == null)  		return false;  	if (isWriteAccess) {  		var parameterCount = member.Parameters.Count;  		if (member.Name != "set_Item" || parameterCount < 2)  			return false;  		var indexerElementType = parameterizedMember.Parameters.Last ().Type;  		var indexerParameterTypes = parameterizedMember.Parameters.Take (parameterCount - 1).Select (p => p.Type).ToList ();  		return IsSignatureMatch (indexerElementType' indexerParameterTypes);  	} else {  		if (member.Name != "get_Item" || member.Parameters.Count < 1)  			return false;  		var indexerElementType = parameterizedMember.ReturnType;  		var indexerParameterTypes = parameterizedMember.Parameters.Select (p => p.Type).ToList ();  		return IsSignatureMatch (indexerElementType' indexerParameterTypes);  	}  });  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SupportsIndexingCriterion,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,SatisfiedBy,The following statement contains a magic number: if (isWriteAccess) {  	var parameterCount = member.Parameters.Count;  	if (member.Name != "set_Item" || parameterCount < 2)  		return false;  	var indexerElementType = parameterizedMember.Parameters.Last ().Type;  	var indexerParameterTypes = parameterizedMember.Parameters.Take (parameterCount - 1).Select (p => p.Type).ToList ();  	return IsSignatureMatch (indexerElementType' indexerParameterTypes);  } else {  	if (member.Name != "get_Item" || member.Parameters.Count < 1)  		return false;  	var indexerElementType = parameterizedMember.ReturnType;  	var indexerParameterTypes = parameterizedMember.Parameters.Select (p => p.Type).ToList ();  	return IsSignatureMatch (indexerElementType' indexerParameterTypes);  }  
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,SupportsIndexingCriterion,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\PracticesAndImprovements\ParameterCanBeDeclaredWithBaseTypeIssue.cs,SatisfiedBy,The following statement contains a magic number: if (member.Name != "set_Item" || parameterCount < 2)  	return false;  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The following statement contains a magic number: if (suppressMessageCheckId != null) {  	foreach (var attr in this.ctx.Compilation.MainAssembly.AssemblyAttributes) {  		if (attr.AttributeType.Name == "SuppressMessageAttribute" && attr.AttributeType.Namespace == "System.Diagnostics.CodeAnalysis") {  			if (attr.PositionalArguments.Count < 2)  				return;  			var category = attr.PositionalArguments [0].ConstantValue;  			if (category == null || category.ToString () != suppressMessageCategory)  				continue;  			var checkId = attr.PositionalArguments [1].ConstantValue;  			if (checkId == null || checkId.ToString () != suppressMessageCheckId)  				continue;  			isGloballySuppressed = true;  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The following statement contains a magic number: foreach (var attr in this.ctx.Compilation.MainAssembly.AssemblyAttributes) {  	if (attr.AttributeType.Name == "SuppressMessageAttribute" && attr.AttributeType.Namespace == "System.Diagnostics.CodeAnalysis") {  		if (attr.PositionalArguments.Count < 2)  			return;  		var category = attr.PositionalArguments [0].ConstantValue;  		if (category == null || category.ToString () != suppressMessageCategory)  			continue;  		var checkId = attr.PositionalArguments [1].ConstantValue;  		if (checkId == null || checkId.ToString () != suppressMessageCheckId)  			continue;  		isGloballySuppressed = true;  	}  }  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The following statement contains a magic number: if (attr.AttributeType.Name == "SuppressMessageAttribute" && attr.AttributeType.Namespace == "System.Diagnostics.CodeAnalysis") {  	if (attr.PositionalArguments.Count < 2)  		return;  	var category = attr.PositionalArguments [0].ConstantValue;  	if (category == null || category.ToString () != suppressMessageCategory)  		continue;  	var checkId = attr.PositionalArguments [1].ConstantValue;  	if (checkId == null || checkId.ToString () != suppressMessageCheckId)  		continue;  	isGloballySuppressed = true;  }  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,GatherVisitorBase,The following statement contains a magic number: if (attr.PositionalArguments.Count < 2)  	return;  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitAttribute,The following statement contains a magic number: if (resolveResult.Type.Name == "SuppressMessageAttribute" && resolveResult.Type.Namespace == "System.Diagnostics.CodeAnalysis") {  	if (attribute.Arguments.Count < 2)  		return;  	var category = attribute.Arguments.First () as PrimitiveExpression;  	if (category == null || category.Value.ToString () != suppressMessageCategory)  		return;  	var checkId = attribute.Arguments.Skip (1).First () as PrimitiveExpression;  	if (checkId == null || checkId.Value.ToString () != suppressMessageCheckId)  		return;  	suppressedRegions.Add (attribute.Parent.Parent.Region);  }  
Magic Number,ICSharpCode.NRefactory.CSharp,GatherVisitorBase,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\GatherVisitorBase.cs,VisitAttribute,The following statement contains a magic number: if (attribute.Arguments.Count < 2)  	return;  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateClassDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateClassDeclarationAction.cs,GetModifiers,The following switch statement is missing a default case: switch (property.Accessibility) {  case Accessibility.Public:  	return Modifiers.Public | Modifiers.Override;  case Accessibility.Protected:  	return Modifiers.Protected | Modifiers.Override;  case Accessibility.Internal:  	return Modifiers.Internal | Modifiers.Override;  case Accessibility.ProtectedOrInternal:  	// TODO: oops  	return Modifiers.Internal | Modifiers.Protected | Modifiers.Override;  case Accessibility.ProtectedAndInternal:  	// TODO: oops  	return Modifiers.Internal | Modifiers.Protected | Modifiers.Override;  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateMethodDeclarationAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateMethodDeclarationAction.cs,GuessNameFromType,The following switch statement is missing a default case: switch (returnType.ReflectionName) {  case "System.Byte":  case "System.SByte":  	return "b";  case "System.Int16":  case "System.UInt16":  case "System.Int32":  case "System.UInt32":  case "System.Int64":  case "System.UInt64":  	return "i";  case "System.Boolean":  	return "b";  case "System.DateTime":  	return "date";  case "System.Char":  	return "ch";  case "System.Double":  case "System.Decimal":  	return "d";  case "System.Single":  	return "f";  case "System.String":  	return "str";  case "System.Exception":  	return "e";  case "System.Object":  	return "obj";  case "System.Func":  	return "func";  case "System.Action":  	return "action";  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetArgumentExpression,The following switch statement is missing a default case: switch (parameter.ParameterModifier) {  case ParameterModifier.Out:  	return new DirectionExpression (FieldDirection.Out' identifierExpr);  case ParameterModifier.Ref:  	return new DirectionExpression (FieldDirection.Ref' identifierExpr);  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,CreateOverloadWithoutParameterAction,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeActions\CreateOverloadWithoutParameterAction.cs,GetDefaultValueExpression,The following switch statement is missing a default case: switch (typeDefinition.KnownTypeCode) {  case KnownTypeCode.Boolean:  	return new PrimitiveExpression (false);  case KnownTypeCode.Char:  	return new PrimitiveExpression ('\0');  case KnownTypeCode.SByte:  case KnownTypeCode.Byte:  case KnownTypeCode.Int16:  case KnownTypeCode.UInt16:  case KnownTypeCode.Int32:  case KnownTypeCode.UInt32:  case KnownTypeCode.Int64:  case KnownTypeCode.UInt64:  case KnownTypeCode.Single:  case KnownTypeCode.Double:  case KnownTypeCode.Decimal:  	return new PrimitiveExpression (0);  case KnownTypeCode.NullableOfT:  	return new NullReferenceExpression ();  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,IsValid,The following switch statement is missing a default case: switch (NamingStyle) {  case NamingStyle.AllLower:  	for (int i = 0; i < id.Length; i++) {  		char ch = id [i];  		if (ch == '_' && !HandleUnderscore (UnderscoreHandling.Allow' id' ref i))  			return false;  		if (char.IsLetter (ch) && char.IsUpper (ch))  			return false;  	}  	return true;  case NamingStyle.AllUpper:  	for (int i = 0; i < id.Length; i++) {  		char ch = id [i];  		if (ch == '_' && !HandleUnderscore (UnderscoreHandling.Allow' id' ref i))  			return false;  		if (char.IsLetter (ch) && char.IsLower (ch))  			return false;  	}  	return true;  case NamingStyle.CamelCase:  	if (id.Length > 0) {  		if (char.IsUpper (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.Forbid' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.CamelCaseWithLowerLetterUnderscore:  	if (id.Length > 0) {  		if (char.IsUpper (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.AllowWithLowerStartingLetter' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.CamelCaseWithUpperLetterUnderscore:  	if (id.Length > 0) {  		if (char.IsUpper (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.AllowWithUpperStartingLetter' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.PascalCase:  	if (id.Length > 0) {  		if (char.IsLower (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.Forbid' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.PascalCaseWithLowerLetterUnderscore:  	if (id.Length > 0) {  		if (char.IsLower (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.AllowWithLowerStartingLetter' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.PascalCaseWithUpperLetterUnderscore:  	if (id.Length > 0) {  		if (char.IsLower (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.AllowWithUpperStartingLetter' id' ref i))  				return false;  		}  	}  	return true;  case NamingStyle.FirstUpper:  	if (id.Length > 0) {  		if (char.IsLower (id [0]) || id [0] == '_')  			return false;  		for (int i = 1; i < id.Length; i++) {  			char ch = id [i];  			if (ch == '_' && !HandleUnderscore (UnderscoreHandling.Allow' id' ref i))  				return false;  			if (char.IsLetter (ch) && char.IsUpper (ch))  				return false;  		}  	}  	return true;  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetErrorMessage,The following switch statement is missing a default case: switch (NamingStyle) {  case NamingStyle.AllLower:  	if (id.Any (ch => char.IsLetter (ch) && char.IsUpper (ch))) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' contains upper case letters. (Rule '{1}')")' name' Name);  		suggestedNames.Add (LowerCaseIdentifier (WordParser.BreakWords (id)));  	} else {  		suggestedNames.Add (id);  	}  	break;  case NamingStyle.AllUpper:  	if (id.Any (ch => char.IsLetter (ch) && char.IsLower (ch))) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' contains lower case letters. (Rule '{1}')")' name' Name);  		suggestedNames.Add (UpperCaseIdentifier (WordParser.BreakWords (id)));  	} else {  		suggestedNames.Add (id);  	}  	break;  case NamingStyle.CamelCase:  	if (id.Length > 0 && !char.IsLower (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.Forbid)) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (CamelCaseIdentifier (id));  	break;  case NamingStyle.CamelCaseWithLowerLetterUnderscore:  	if (id.Length > 0 && !char.IsLower (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.AllowWithLowerStartingLetter)) {  		errorMessage = string.Format (ctx.TranslateString ("after '_' a lower letter should follow. (Rule '{0}')")' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (CamelCaseWithLowerLetterUnderscore (id));  	break;  case NamingStyle.CamelCaseWithUpperLetterUnderscore:  	if (id.Length > 0 && !char.IsLower (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with a lower case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.AllowWithUpperStartingLetter)) {  		errorMessage = string.Format (ctx.TranslateString ("after '_' an upper letter should follow. (Rule '{0}')")' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (CamelCaseWithUpperLetterUnderscore (id));  	break;  case NamingStyle.PascalCase:  	if (id.Length > 0 && !char.IsUpper (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.Forbid)) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should not separate words with an underscore. (Rule '{1}')")' name' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (PascalCaseIdentifier (id));  	break;  case NamingStyle.PascalCaseWithLowerLetterUnderscore:  	if (id.Length > 0 && !char.IsUpper (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.AllowWithLowerStartingLetter)) {  		errorMessage = string.Format (ctx.TranslateString ("after '_' a lower letter should follow. (Rule '{0}')")' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (PascalCaseWithLowerLetterUnderscore (id));  	break;  case NamingStyle.PascalCaseWithUpperLetterUnderscore:  	if (id.Length > 0 && !char.IsUpper (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  	} else if (!CheckUnderscore (id' UnderscoreHandling.AllowWithUpperStartingLetter)) {  		errorMessage = string.Format (ctx.TranslateString ("after '_' an upper letter should follow. (Rule '{0}')")' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (PascalCaseWithUpperLetterUnderscore (id));  	break;  case NamingStyle.FirstUpper:  	if (id.Length > 0 && !char.IsUpper (id [0])) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' should start with an upper case letter. (Rule '{1}')")' name' Name);  	} else if (id.Take (1).Any (ch => char.IsLetter (ch) && char.IsUpper (ch))) {  		errorMessage = string.Format (ctx.TranslateString ("'{0}' contains an upper case letter after the first. (Rule '{1}')")' name' Name);  	} else {  		suggestedNames.Add (id);  		break;  	}  	suggestedNames.Add (FirstUpperIdentifier (WordParser.BreakWords (id)));  	break;  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,NamingRule,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Synced\ConstraintViolations\InconsistentNamingIssue\NamingRule.cs,GetPreview,The following switch statement is missing a default case: switch (NamingStyle) {  case NamingStyle.PascalCase:  	result.Append ("PascalCase");  	break;  case NamingStyle.PascalCaseWithLowerLetterUnderscore:  	result.Append ("PascalCase_underscoreTolerant");  	break;  case NamingStyle.PascalCaseWithUpperLetterUnderscore:  	result.Append ("PascalCase_UnderscoreTolerant");  	break;  case NamingStyle.CamelCase:  	result.Append ("camelCase");  	break;  case NamingStyle.CamelCaseWithLowerLetterUnderscore:  	result.Append ("camelCase_underscoreTolerant");  	break;  case NamingStyle.CamelCaseWithUpperLetterUnderscore:  	result.Append ("camelCase_UnderscoreTolerant");  	break;  case NamingStyle.AllUpper:  	result.Append ("ALL_UPPER");  	break;  case NamingStyle.AllLower:  	result.Append ("all_Lower");  	break;  case NamingStyle.FirstUpper:  	result.Append ("First_Upper");  	break;  }  
Missing Default,ICSharpCode.NRefactory.CSharp.Refactoring,VariableOnlyAssignedIssue,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.CSharp.Refactoring\CodeIssues\Custom\VariableOnlyAssignedIssue.cs,TestOnlyAssigned,The following switch statement is missing a default case: switch (op) {  case UnaryOperatorType.Increment:  case UnaryOperatorType.PostIncrement:  case UnaryOperatorType.Decrement:  case UnaryOperatorType.PostDecrement:  	assignment = true;  	if (!(parent.Parent is ExpressionStatement))  		nonAssignment = true;  	continue;  }  
