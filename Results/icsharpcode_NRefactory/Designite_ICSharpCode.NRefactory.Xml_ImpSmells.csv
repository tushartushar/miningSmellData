Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadTag,The method has 121 lines of code.
Long Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The method has 106 lines of code.
Complex Method,ICSharpCode.NRefactory.Xml,AXmlElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlElement.cs,GetNamespacesInScope,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Xml,AXmlReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlReader.cs,ReadCurrentPosition,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,Cyclomatic complexity of the method is 18
Complex Method,ICSharpCode.NRefactory.Xml,IncrementalParserState,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\IncrementalParserState.cs,GetReuseMapTo,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,GetIndentationBefore,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,InsertPlaceholderTags,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,ProcessObject,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,CreateElements,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,StoreObject,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadTag,Cyclomatic complexity of the method is 34
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadContentOfDTD,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,Cyclomatic complexity of the method is 11
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,Cyclomatic complexity of the method is 23
Complex Method,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,Cyclomatic complexity of the method is 23
Long Parameter List,ICSharpCode.NRefactory.Xml,AXmlParser,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlParser.cs,InternalParseIncremental,The method has 5 parameters.
Long Identifier,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,TagReader,The length of the parameter collapseProperlyNestedElements is 30.
Long Identifier,ICSharpCode.NRefactory.Xml,AXmlParser,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlParser.cs,InternalParseIncremental,The length of the parameter collapseProperlyNestedElements is 30.
Long Statement,ICSharpCode.NRefactory.Xml,AXmlElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlElement.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "[{0} '{1}' Attr:{2} Chld:{3} Nest:{4}]"' base.ToString ()' this.Name' this.StartTag.Children.Count' this.Children.Count' this.IsProperlyNested ? "Ok" : "Bad"); " is 212.
Long Statement,ICSharpCode.NRefactory.Xml,AXmlReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlReader.cs,GetAttributeIndex,The length of the statement  "		if (AXmlObject.GetLocalName (attributes [i].Name) == name && (LookupNamespace (AXmlObject.GetNamespacePrefix (attributes [i].Name)) ?? string.Empty) == ns) " is 155.
Long Statement,ICSharpCode.NRefactory.Xml,AXmlTag,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlTag.cs,ToString,The length of the statement  "	return string.Format (CultureInfo.InvariantCulture' "[{0} '{1}{2}{3}' Attr:{4}]"' base.ToString ()' this.OpeningBracket' this.Name' this.ClosingBracket' this.Children.Count); " is 174.
Long Statement,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The length of the statement  "					foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) { " is 129.
Long Statement,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The length of the statement  "						doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent)); " is 122.
Long Statement,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The length of the statement  "						list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1)); " is 120.
Long Statement,ICSharpCode.NRefactory.Xml,IncrementalParserState,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\IncrementalParserState.cs,GetReuseMapTo,The length of the statement  "			var segmentAfter = new UnchangedSegment (segment.OldOffset + segment.Length - lengthAtEnd' change.Offset + change.InsertionLength' lengthAtEnd); " is 144.
Long Statement,ICSharpCode.NRefactory.Xml,InternalDocument,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\InternalDocument.cs,CreatePublicObject,The length of the statement  "	return new AXmlDocument (parent' (parent != null ? parentStartOffset + StartRelativeToParent : parentStartOffset)' this); " is 121.
Long Statement,ICSharpCode.NRefactory.Xml,InternalAttribute,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\InternalDocument.cs,CreatePublicObject,The length of the statement  "	return new AXmlAttribute (parent' (parent != null ? parentStartOffset + StartRelativeToParent : parentStartOffset)' this); " is 122.
Long Statement,ICSharpCode.NRefactory.Xml,InternalElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\InternalDocument.cs,CreatePublicObject,The length of the statement  "	return new AXmlElement (parent' (parent != null ? parentStartOffset + StartRelativeToParent : parentStartOffset)' this); " is 120.
Long Statement,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,CreateElements,The length of the statement  "						childElements.Add (tag.AddSyntaxError ("Expected '</" + startTag.Name + ">'. End tag must have same name as start tag.")); " is 122.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAllObjectsIncremental,The length of the statement  "		Debug.Assert (reuseEntry.NewOffset <= this.CurrentLocation && this.CurrentLocation < reuseEntry.NewOffset + reuseEntry.Length); " is 127.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAllObjectsIncremental,The length of the statement  "			while (oldObjectIterator.CurrentObject != null && oldObjectIterator.CurrentPosition + oldObjectIterator.CurrentObject.LengthTouched < reuseEnd) { " is 145.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadTag,The length of the statement  "			throw new InternalException (string.Format (CultureInfo.InvariantCulture' "Unknown opening bracket '{0}'"' tag.OpeningBracket)); " is 128.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadTag,The length of the statement  "		throw new InternalException (string.Format (CultureInfo.InvariantCulture' "Unknown opening bracket '{0}'"' tag.OpeningBracket)); " is 128.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The length of the statement  "				if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) { " is 125.
Long Statement,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,OnSyntaxError,The length of the statement  "	syntaxErrors.Add (new InternalSyntaxError (start - internalObjectStartPosition' end - internalObjectStartPosition' formattedMessage)); " is 134.
Long Statement,ICSharpCode.NRefactory.Xml,AXmlParser,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlParser.cs,ParseTagSoupIncremental,The length of the statement  "	var internalObjects = InternalParseIncremental (oldParserState' newTextSource' out newParserState' false' cancellationToken); " is 125.
Long Statement,ICSharpCode.NRefactory.Xml,AXmlParser,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\AXmlParser.cs,ParseIncremental,The length of the statement  "	var internalObjects = InternalParseIncremental (oldParserState' newTextSource' out newParserState' true' cancellationToken); " is 124.
Long Statement,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,PrintStringCacheStats,The length of the statement  "	Log.WriteLine ("String cache: Requested {0} ({1} bytes);  Actaully stored {2} ({3} bytes); {4}% stored"' stringCacheRequestedCount' stringCacheRequestedSize' stringCacheStoredCount' stringCacheStoredSize' stringCacheRequestedSize == 0 ? 0 : stringCacheStoredSize * 100 / stringCacheRequestedSize); " is 297.
Complex Conditional,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttributeValue,The conditional expression  "TryMoveToNonWhiteSpace () && TryRead ("=") && TryMoveToNonWhiteSpace () && TryPeekAnyOf ('"'' '\'')"  is complex.
Complex Conditional,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,TryMoveToNonWhiteSpace,The conditional expression  "((int)c <= 0x20) && (c == ' ' || c == '\t' || c == '\n' || c == '\r')"  is complex.
Complex Conditional,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,TryReadName,The conditional expression  "c == ' ' || c == '\n' || c == '\r' || c == '\t' || // Reject whitesapce  c == '=' || c == '\'' || c == '"' || // Reject attributes  c == '<' || c == '>' || c == '/' || c == '?'"  is complex.
Magic Number,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The following statement contains a magic number: foreach (var child in childObjects) {  	var childText = child as AXmlText;  	var childTag = child as AXmlTag;  	var childElement = child as AXmlElement;  	if (childText != null) {  		list.Add (new XmlDocumentationElement (childText.Value' declaringEntity));  	} else if (childTag != null && childTag.IsCData) {  		foreach (var text in childTag.Children.OfType<AXmlText> ())  			list.Add (new XmlDocumentationElement (text.Value' declaringEntity));  	} else if (childElement != null) {  		if (nestingLevel < 5 && childElement.Name == "inheritdoc") {  			string cref = childElement.GetAttributeValue ("cref");  			IEntity inheritedFrom = null;  			DocumentationComment inheritedDocumentation = null;  			if (cref != null) {  				inheritedFrom = crefResolver (cref);  				if (inheritedFrom != null)  					inheritedDocumentation = inheritedFrom.Documentation;  			} else {  				foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) {  					inheritedDocumentation = baseMember.Documentation;  					if (inheritedDocumentation != null) {  						inheritedFrom = baseMember;  						break;  					}  				}  			}  			if (inheritedDocumentation != null) {  				var doc = new AXmlParser ().Parse (inheritedDocumentation.Xml);  				// XPath filter not yet implemented  				if (childElement.Parent is AXmlDocument && childElement.GetAttributeValue ("select") == null) {  					// Inheriting documentation at the root level  					List<string> doNotInherit = new List<string> ();  					doNotInherit.Add ("overloads");  					doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent));  					var inheritedChildren = doc.Children.Where (inheritedObject => {  						AXmlElement inheritedElement = inheritedObject as AXmlElement;  						return !(inheritedElement != null && doNotInherit.Contains (inheritedElement.Name));  					});  					list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1));  				}  			}  		} else {  			list.Add (new XmlDocumentationElement (childElement' declaringEntity' crefResolver) {  				nestingLevel = nestingLevel  			});  		}  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The following statement contains a magic number: if (childText != null) {  	list.Add (new XmlDocumentationElement (childText.Value' declaringEntity));  } else if (childTag != null && childTag.IsCData) {  	foreach (var text in childTag.Children.OfType<AXmlText> ())  		list.Add (new XmlDocumentationElement (text.Value' declaringEntity));  } else if (childElement != null) {  	if (nestingLevel < 5 && childElement.Name == "inheritdoc") {  		string cref = childElement.GetAttributeValue ("cref");  		IEntity inheritedFrom = null;  		DocumentationComment inheritedDocumentation = null;  		if (cref != null) {  			inheritedFrom = crefResolver (cref);  			if (inheritedFrom != null)  				inheritedDocumentation = inheritedFrom.Documentation;  		} else {  			foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) {  				inheritedDocumentation = baseMember.Documentation;  				if (inheritedDocumentation != null) {  					inheritedFrom = baseMember;  					break;  				}  			}  		}  		if (inheritedDocumentation != null) {  			var doc = new AXmlParser ().Parse (inheritedDocumentation.Xml);  			// XPath filter not yet implemented  			if (childElement.Parent is AXmlDocument && childElement.GetAttributeValue ("select") == null) {  				// Inheriting documentation at the root level  				List<string> doNotInherit = new List<string> ();  				doNotInherit.Add ("overloads");  				doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent));  				var inheritedChildren = doc.Children.Where (inheritedObject => {  					AXmlElement inheritedElement = inheritedObject as AXmlElement;  					return !(inheritedElement != null && doNotInherit.Contains (inheritedElement.Name));  				});  				list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1));  			}  		}  	} else {  		list.Add (new XmlDocumentationElement (childElement' declaringEntity' crefResolver) {  			nestingLevel = nestingLevel  		});  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The following statement contains a magic number: if (childTag != null && childTag.IsCData) {  	foreach (var text in childTag.Children.OfType<AXmlText> ())  		list.Add (new XmlDocumentationElement (text.Value' declaringEntity));  } else if (childElement != null) {  	if (nestingLevel < 5 && childElement.Name == "inheritdoc") {  		string cref = childElement.GetAttributeValue ("cref");  		IEntity inheritedFrom = null;  		DocumentationComment inheritedDocumentation = null;  		if (cref != null) {  			inheritedFrom = crefResolver (cref);  			if (inheritedFrom != null)  				inheritedDocumentation = inheritedFrom.Documentation;  		} else {  			foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) {  				inheritedDocumentation = baseMember.Documentation;  				if (inheritedDocumentation != null) {  					inheritedFrom = baseMember;  					break;  				}  			}  		}  		if (inheritedDocumentation != null) {  			var doc = new AXmlParser ().Parse (inheritedDocumentation.Xml);  			// XPath filter not yet implemented  			if (childElement.Parent is AXmlDocument && childElement.GetAttributeValue ("select") == null) {  				// Inheriting documentation at the root level  				List<string> doNotInherit = new List<string> ();  				doNotInherit.Add ("overloads");  				doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent));  				var inheritedChildren = doc.Children.Where (inheritedObject => {  					AXmlElement inheritedElement = inheritedObject as AXmlElement;  					return !(inheritedElement != null && doNotInherit.Contains (inheritedElement.Name));  				});  				list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1));  			}  		}  	} else {  		list.Add (new XmlDocumentationElement (childElement' declaringEntity' crefResolver) {  			nestingLevel = nestingLevel  		});  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The following statement contains a magic number: if (childElement != null) {  	if (nestingLevel < 5 && childElement.Name == "inheritdoc") {  		string cref = childElement.GetAttributeValue ("cref");  		IEntity inheritedFrom = null;  		DocumentationComment inheritedDocumentation = null;  		if (cref != null) {  			inheritedFrom = crefResolver (cref);  			if (inheritedFrom != null)  				inheritedDocumentation = inheritedFrom.Documentation;  		} else {  			foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) {  				inheritedDocumentation = baseMember.Documentation;  				if (inheritedDocumentation != null) {  					inheritedFrom = baseMember;  					break;  				}  			}  		}  		if (inheritedDocumentation != null) {  			var doc = new AXmlParser ().Parse (inheritedDocumentation.Xml);  			// XPath filter not yet implemented  			if (childElement.Parent is AXmlDocument && childElement.GetAttributeValue ("select") == null) {  				// Inheriting documentation at the root level  				List<string> doNotInherit = new List<string> ();  				doNotInherit.Add ("overloads");  				doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent));  				var inheritedChildren = doc.Children.Where (inheritedObject => {  					AXmlElement inheritedElement = inheritedObject as AXmlElement;  					return !(inheritedElement != null && doNotInherit.Contains (inheritedElement.Name));  				});  				list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1));  			}  		}  	} else {  		list.Add (new XmlDocumentationElement (childElement' declaringEntity' crefResolver) {  			nestingLevel = nestingLevel  		});  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,XmlDocumentationElement,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\DocumentationElement.cs,CreateElements,The following statement contains a magic number: if (nestingLevel < 5 && childElement.Name == "inheritdoc") {  	string cref = childElement.GetAttributeValue ("cref");  	IEntity inheritedFrom = null;  	DocumentationComment inheritedDocumentation = null;  	if (cref != null) {  		inheritedFrom = crefResolver (cref);  		if (inheritedFrom != null)  			inheritedDocumentation = inheritedFrom.Documentation;  	} else {  		foreach (IMember baseMember in InheritanceHelper.GetBaseMembers ((IMember)declaringEntity' includeImplementedInterfaces: true)) {  			inheritedDocumentation = baseMember.Documentation;  			if (inheritedDocumentation != null) {  				inheritedFrom = baseMember;  				break;  			}  		}  	}  	if (inheritedDocumentation != null) {  		var doc = new AXmlParser ().Parse (inheritedDocumentation.Xml);  		// XPath filter not yet implemented  		if (childElement.Parent is AXmlDocument && childElement.GetAttributeValue ("select") == null) {  			// Inheriting documentation at the root level  			List<string> doNotInherit = new List<string> ();  			doNotInherit.Add ("overloads");  			doNotInherit.AddRange (childObjects.OfType<AXmlElement> ().Select (e => e.Name).Intersect (doNotInheritIfAlreadyPresent));  			var inheritedChildren = doc.Children.Where (inheritedObject => {  				AXmlElement inheritedElement = inheritedObject as AXmlElement;  				return !(inheritedElement != null && doNotInherit.Contains (inheritedElement.Name));  			});  			list.AddRange (CreateElements (inheritedChildren' inheritedFrom' inheritedDocumentation.ResolveCref' nestingLevel + 1));  		}  	}  } else {  	list.Add (new XmlDocumentationElement (childElement' declaringEntity' crefResolver) {  		nestingLevel = nestingLevel  	});  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,GetIndentationBefore,The following statement contains a magic number: while (--position >= 0) {  	char c = textSource.GetCharAt (position);  	switch (c) {  	case ' ':  		indentation++;  		break;  	case '\t':  		indentation += 4;  		break;  	case '\n':  		return indentation;  	default:  		return -1;  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,GetIndentationBefore,The following statement contains a magic number: switch (c) {  case ' ':  	indentation++;  	break;  case '\t':  	indentation += 4;  	break;  case '\n':  	return indentation;  default:  	return -1;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagMatchingHeuristics,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagMatchingHeuristics.cs,GetIndentationBefore,The following statement contains a magic number: indentation += 4;  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,StoreObject,The following statement contains a magic number: if (tag.IsEmptyTag) {  	// the tag is its own element  	objects [objects.Count - 1] = new InternalElement (tag) {  		Length = tag.Length'  		LengthTouched = tag.LengthTouched'  		IsPropertyNested = true'  		StartRelativeToParent = tag.StartRelativeToParent'  		NestedObjects = new[] {  			tag.SetStartRelativeToParent (0)  		}  	};  } else if (tag.IsStartTag) {  	elementNameStack.Push (tag.Name);  } else if (tag.IsEndTag && elementNameStack.Count > 0) {  	// Now look for the start element:  	int startIndex = objects.Count - 2;  	bool ok = false;  	string expectedName = elementNameStack.Pop ();  	if (tag.Name == expectedName) {  		while (startIndex > 0) {  			var startTag = objects [startIndex] as InternalTag;  			if (startTag != null) {  				if (startTag.IsStartTag) {  					ok = (startTag.Name == expectedName);  					break;  				} else if (startTag.IsEndTag) {  					break;  				}  			}  			startIndex--;  		}  	}  	if (ok) {  		// We found a correct nesting' let's create an element:  		InternalObject[] nestedObjects = new InternalObject[objects.Count - startIndex];  		int oldStartRelativeToParent = objects [startIndex].StartRelativeToParent;  		int pos = 0;  		int maxLengthTouched = 0;  		for (int i = 0; i < nestedObjects.Length; i++) {  			nestedObjects [i] = objects [startIndex + i].SetStartRelativeToParent (pos);  			maxLengthTouched = Math.Max (maxLengthTouched' pos + nestedObjects [i].LengthTouched);  			pos += nestedObjects [i].Length;  		}  		objects.RemoveRange (startIndex' nestedObjects.Length);  		objects.Add (new InternalElement ((InternalTag)nestedObjects [0]) {  			HasEndTag = true'  			IsPropertyNested = true'  			Length = pos'  			LengthTouched = maxLengthTouched'  			StartRelativeToParent = oldStartRelativeToParent'  			NestedObjects = nestedObjects  		});  	} else {  		// Mismatched name - the nesting isn't properly;  		// clear the whole stack so that none of the currently open elements are closed as properly-nested.  		elementNameStack.Clear ();  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,StoreObject,The following statement contains a magic number: if (tag.IsStartTag) {  	elementNameStack.Push (tag.Name);  } else if (tag.IsEndTag && elementNameStack.Count > 0) {  	// Now look for the start element:  	int startIndex = objects.Count - 2;  	bool ok = false;  	string expectedName = elementNameStack.Pop ();  	if (tag.Name == expectedName) {  		while (startIndex > 0) {  			var startTag = objects [startIndex] as InternalTag;  			if (startTag != null) {  				if (startTag.IsStartTag) {  					ok = (startTag.Name == expectedName);  					break;  				} else if (startTag.IsEndTag) {  					break;  				}  			}  			startIndex--;  		}  	}  	if (ok) {  		// We found a correct nesting' let's create an element:  		InternalObject[] nestedObjects = new InternalObject[objects.Count - startIndex];  		int oldStartRelativeToParent = objects [startIndex].StartRelativeToParent;  		int pos = 0;  		int maxLengthTouched = 0;  		for (int i = 0; i < nestedObjects.Length; i++) {  			nestedObjects [i] = objects [startIndex + i].SetStartRelativeToParent (pos);  			maxLengthTouched = Math.Max (maxLengthTouched' pos + nestedObjects [i].LengthTouched);  			pos += nestedObjects [i].Length;  		}  		objects.RemoveRange (startIndex' nestedObjects.Length);  		objects.Add (new InternalElement ((InternalTag)nestedObjects [0]) {  			HasEndTag = true'  			IsPropertyNested = true'  			Length = pos'  			LengthTouched = maxLengthTouched'  			StartRelativeToParent = oldStartRelativeToParent'  			NestedObjects = nestedObjects  		});  	} else {  		// Mismatched name - the nesting isn't properly;  		// clear the whole stack so that none of the currently open elements are closed as properly-nested.  		elementNameStack.Clear ();  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,StoreObject,The following statement contains a magic number: if (tag.IsEndTag && elementNameStack.Count > 0) {  	// Now look for the start element:  	int startIndex = objects.Count - 2;  	bool ok = false;  	string expectedName = elementNameStack.Pop ();  	if (tag.Name == expectedName) {  		while (startIndex > 0) {  			var startTag = objects [startIndex] as InternalTag;  			if (startTag != null) {  				if (startTag.IsStartTag) {  					ok = (startTag.Name == expectedName);  					break;  				} else if (startTag.IsEndTag) {  					break;  				}  			}  			startIndex--;  		}  	}  	if (ok) {  		// We found a correct nesting' let's create an element:  		InternalObject[] nestedObjects = new InternalObject[objects.Count - startIndex];  		int oldStartRelativeToParent = objects [startIndex].StartRelativeToParent;  		int pos = 0;  		int maxLengthTouched = 0;  		for (int i = 0; i < nestedObjects.Length; i++) {  			nestedObjects [i] = objects [startIndex + i].SetStartRelativeToParent (pos);  			maxLengthTouched = Math.Max (maxLengthTouched' pos + nestedObjects [i].LengthTouched);  			pos += nestedObjects [i].Length;  		}  		objects.RemoveRange (startIndex' nestedObjects.Length);  		objects.Add (new InternalElement ((InternalTag)nestedObjects [0]) {  			HasEndTag = true'  			IsPropertyNested = true'  			Length = pos'  			LengthTouched = maxLengthTouched'  			StartRelativeToParent = oldStartRelativeToParent'  			NestedObjects = nestedObjects  		});  	} else {  		// Mismatched name - the nesting isn't properly;  		// clear the whole stack so that none of the currently open elements are closed as properly-nested.  		elementNameStack.Clear ();  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ('<')) {  	if (TryRead ('/')) {  		return "</";  	} else if (TryRead ('?')) {  		return "<?";  	} else if (TryRead ('!')) {  		if (TryRead ("--")) {  			return "<!--";  		} else if (TryRead ("[CDATA[")) {  			return "<![CDATA[";  		} else {  			foreach (string dtdName in AXmlTag.DtdNames) {  				// the dtdName includes "<!"  				if (TryRead (dtdName.Remove (0' 2)))  					return dtdName;  			}  			return "<!";  		}  	} else {  		return "<";  	}  } else {  	throw new InternalException ("'<' expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ('/')) {  	return "</";  } else if (TryRead ('?')) {  	return "<?";  } else if (TryRead ('!')) {  	if (TryRead ("--")) {  		return "<!--";  	} else if (TryRead ("[CDATA[")) {  		return "<![CDATA[";  	} else {  		foreach (string dtdName in AXmlTag.DtdNames) {  			// the dtdName includes "<!"  			if (TryRead (dtdName.Remove (0' 2)))  				return dtdName;  		}  		return "<!";  	}  } else {  	return "<";  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ('?')) {  	return "<?";  } else if (TryRead ('!')) {  	if (TryRead ("--")) {  		return "<!--";  	} else if (TryRead ("[CDATA[")) {  		return "<![CDATA[";  	} else {  		foreach (string dtdName in AXmlTag.DtdNames) {  			// the dtdName includes "<!"  			if (TryRead (dtdName.Remove (0' 2)))  				return dtdName;  		}  		return "<!";  	}  } else {  	return "<";  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ('!')) {  	if (TryRead ("--")) {  		return "<!--";  	} else if (TryRead ("[CDATA[")) {  		return "<![CDATA[";  	} else {  		foreach (string dtdName in AXmlTag.DtdNames) {  			// the dtdName includes "<!"  			if (TryRead (dtdName.Remove (0' 2)))  				return dtdName;  		}  		return "<!";  	}  } else {  	return "<";  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ("--")) {  	return "<!--";  } else if (TryRead ("[CDATA[")) {  	return "<![CDATA[";  } else {  	foreach (string dtdName in AXmlTag.DtdNames) {  		// the dtdName includes "<!"  		if (TryRead (dtdName.Remove (0' 2)))  			return dtdName;  	}  	return "<!";  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead ("[CDATA[")) {  	return "<![CDATA[";  } else {  	foreach (string dtdName in AXmlTag.DtdNames) {  		// the dtdName includes "<!"  		if (TryRead (dtdName.Remove (0' 2)))  			return dtdName;  	}  	return "<!";  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: foreach (string dtdName in AXmlTag.DtdNames) {  	// the dtdName includes "<!"  	if (TryRead (dtdName.Remove (0' 2)))  		return dtdName;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadOpeningBracket,The following statement contains a magic number: if (TryRead (dtdName.Remove (0' 2)))  	return dtdName;  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	startsWithQuote = true;  	int valueStart = this.CurrentLocation;  	TryMoveToAnyOf (quoteChar' '<');  	if (TryRead (quoteChar)) {  		if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  			if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  				// This actually most likely means that we are in the next attribute value  				GoBack (valueStart);  				ReadAttributeValue (quoteChar);  				if (TryRead (quoteChar)) {  					OnSyntaxError ("White space or end of tag expected");  				} else {  					OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  				}  			} else {  				OnSyntaxError ("White space or end of tag expected");  			}  		}  	} else {  		// '<' or end of file  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		OnSyntaxError ("Quote {0} expected"' quoteChar);  	}  } else {  	startsWithQuote = false;  	int valueStart = this.CurrentLocation;  	ReadAttributeValue (null);  	TryRead ('\"');  	TryRead ('\'');  	if (valueStart == this.CurrentLocation) {  		OnSyntaxError ("Attribute value expected");  	} else {  		OnSyntaxError (valueStart' this.CurrentLocation' "Attribute value must be quoted");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	startsWithQuote = true;  	int valueStart = this.CurrentLocation;  	TryMoveToAnyOf (quoteChar' '<');  	if (TryRead (quoteChar)) {  		if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  			if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  				// This actually most likely means that we are in the next attribute value  				GoBack (valueStart);  				ReadAttributeValue (quoteChar);  				if (TryRead (quoteChar)) {  					OnSyntaxError ("White space or end of tag expected");  				} else {  					OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  				}  			} else {  				OnSyntaxError ("White space or end of tag expected");  			}  		}  	} else {  		// '<' or end of file  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		OnSyntaxError ("Quote {0} expected"' quoteChar);  	}  } else {  	startsWithQuote = false;  	int valueStart = this.CurrentLocation;  	ReadAttributeValue (null);  	TryRead ('\"');  	TryRead ('\'');  	if (valueStart == this.CurrentLocation) {  		OnSyntaxError ("Attribute value expected");  	} else {  		OnSyntaxError (valueStart' this.CurrentLocation' "Attribute value must be quoted");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	startsWithQuote = true;  	int valueStart = this.CurrentLocation;  	TryMoveToAnyOf (quoteChar' '<');  	if (TryRead (quoteChar)) {  		if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  			if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  				// This actually most likely means that we are in the next attribute value  				GoBack (valueStart);  				ReadAttributeValue (quoteChar);  				if (TryRead (quoteChar)) {  					OnSyntaxError ("White space or end of tag expected");  				} else {  					OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  				}  			} else {  				OnSyntaxError ("White space or end of tag expected");  			}  		}  	} else {  		// '<' or end of file  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		OnSyntaxError ("Quote {0} expected"' quoteChar);  	}  } else {  	startsWithQuote = false;  	int valueStart = this.CurrentLocation;  	ReadAttributeValue (null);  	TryRead ('\"');  	TryRead ('\'');  	if (valueStart == this.CurrentLocation) {  		OnSyntaxError ("Attribute value expected");  	} else {  		OnSyntaxError (valueStart' this.CurrentLocation' "Attribute value must be quoted");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  		if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  			// This actually most likely means that we are in the next attribute value  			GoBack (valueStart);  			ReadAttributeValue (quoteChar);  			if (TryRead (quoteChar)) {  				OnSyntaxError ("White space or end of tag expected");  			} else {  				OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  			}  		} else {  			OnSyntaxError ("White space or end of tag expected");  		}  	}  } else {  	// '<' or end of file  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	OnSyntaxError ("Quote {0} expected"' quoteChar);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  		if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  			// This actually most likely means that we are in the next attribute value  			GoBack (valueStart);  			ReadAttributeValue (quoteChar);  			if (TryRead (quoteChar)) {  				OnSyntaxError ("White space or end of tag expected");  			} else {  				OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  			}  		} else {  			OnSyntaxError ("White space or end of tag expected");  		}  	}  } else {  	// '<' or end of file  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	OnSyntaxError ("Quote {0} expected"' quoteChar);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryRead (quoteChar)) {  	if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  		if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  			// This actually most likely means that we are in the next attribute value  			GoBack (valueStart);  			ReadAttributeValue (quoteChar);  			if (TryRead (quoteChar)) {  				OnSyntaxError ("White space or end of tag expected");  			} else {  				OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  			}  		} else {  			OnSyntaxError ("White space or end of tag expected");  		}  	}  } else {  	// '<' or end of file  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	OnSyntaxError ("Quote {0} expected"' quoteChar);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  	if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  		// This actually most likely means that we are in the next attribute value  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		if (TryRead (quoteChar)) {  			OnSyntaxError ("White space or end of tag expected");  		} else {  			OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  		}  	} else {  		OnSyntaxError ("White space or end of tag expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  	if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  		// This actually most likely means that we are in the next attribute value  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		if (TryRead (quoteChar)) {  			OnSyntaxError ("White space or end of tag expected");  		} else {  			OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  		}  	} else {  		OnSyntaxError ("White space or end of tag expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (!TryPeekAnyOf (' '' '\t'' '\n'' '\r'' '/'' '>'' '?')) {  	if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  		// This actually most likely means that we are in the next attribute value  		GoBack (valueStart);  		ReadAttributeValue (quoteChar);  		if (TryRead (quoteChar)) {  			OnSyntaxError ("White space or end of tag expected");  		} else {  			OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  		}  	} else {  		OnSyntaxError ("White space or end of tag expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  	// This actually most likely means that we are in the next attribute value  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	if (TryRead (quoteChar)) {  		OnSyntaxError ("White space or end of tag expected");  	} else {  		OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  	}  } else {  	OnSyntaxError ("White space or end of tag expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  	// This actually most likely means that we are in the next attribute value  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	if (TryRead (quoteChar)) {  		OnSyntaxError ("White space or end of tag expected");  	} else {  		OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  	}  } else {  	OnSyntaxError ("White space or end of tag expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadAttribute,The following statement contains a magic number: if (TryPeekPrevious ('='' 2) || (TryPeekPrevious ('='' 3) && TryPeekPrevious (' '' 2))) {  	// This actually most likely means that we are in the next attribute value  	GoBack (valueStart);  	ReadAttributeValue (quoteChar);  	if (TryRead (quoteChar)) {  		OnSyntaxError ("White space or end of tag expected");  	} else {  		OnSyntaxError ("Quote {0} expected (or add whitespace after the following one)"' quoteChar);  	}  } else {  	OnSyntaxError ("White space or end of tag expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Unquote,The following statement contains a magic number: if (first == '"' || first == '\'') {  	if (first == last) {  		// Remove both quotes  		return quoted.Substring (1' quoted.Length - 2);  	} else {  		// Remove first quote  		return quoted.Remove (0' 1);  	}  } else {  	if (last == '"' || last == '\'') {  		// Remove last quote  		return quoted.Substring (0' quoted.Length - 1);  	} else {  		// Keep whole string  		return quoted;  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Unquote,The following statement contains a magic number: if (first == last) {  	// Remove both quotes  	return quoted.Substring (1' quoted.Length - 2);  } else {  	// Remove first quote  	return quoted.Remove (0' 1);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Unquote,The following statement contains a magic number: return quoted.Substring (1' quoted.Length - 2);  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (type == TextType.WhiteSpace) {  	TryMoveToNonWhiteSpace (fragmentEnd);  } else if (type == TextType.CharacterData) {  	while (true) {  		if (!TryMoveToAnyOf (new char[] {  			'<''  			']'  		}' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ('<'))  			break;  		if (TryPeek (']')) {  			if (TryPeek ("]]>")) {  				OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  			}  			TryMoveNext ();  			continue;  		}  		throw new InternalException ("Infinite loop");  	}  } else if (type == TextType.Comment) {  	// Do not report too many errors  	bool errorReported = false;  	while (true) {  		if (!TryMoveTo ('-'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("-->"))  			break;  		if (TryPeek ("--") && !errorReported) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  			errorReported = true;  		}  		TryMoveNext ();  	}  } else if (type == TextType.CData) {  	while (true) {  		// We can not use use TryMoveTo("]]>"' fragmentEnd) because it may incorectly accept "]" at the end of fragment  		if (!TryMoveTo (']'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("]]>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.ProcessingInstruction) {  	while (true) {  		if (!TryMoveTo ('?'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("?>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.UnknownBang) {  	TryMoveToAnyOf (new char[] {  		'<''  		'>'  	}' fragmentEnd);  } else {  	throw new InternalException ("Unknown type " + type);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (type == TextType.WhiteSpace) {  	TryMoveToNonWhiteSpace (fragmentEnd);  } else if (type == TextType.CharacterData) {  	while (true) {  		if (!TryMoveToAnyOf (new char[] {  			'<''  			']'  		}' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ('<'))  			break;  		if (TryPeek (']')) {  			if (TryPeek ("]]>")) {  				OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  			}  			TryMoveNext ();  			continue;  		}  		throw new InternalException ("Infinite loop");  	}  } else if (type == TextType.Comment) {  	// Do not report too many errors  	bool errorReported = false;  	while (true) {  		if (!TryMoveTo ('-'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("-->"))  			break;  		if (TryPeek ("--") && !errorReported) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  			errorReported = true;  		}  		TryMoveNext ();  	}  } else if (type == TextType.CData) {  	while (true) {  		// We can not use use TryMoveTo("]]>"' fragmentEnd) because it may incorectly accept "]" at the end of fragment  		if (!TryMoveTo (']'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("]]>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.ProcessingInstruction) {  	while (true) {  		if (!TryMoveTo ('?'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("?>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.UnknownBang) {  	TryMoveToAnyOf (new char[] {  		'<''  		'>'  	}' fragmentEnd);  } else {  	throw new InternalException ("Unknown type " + type);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (type == TextType.CharacterData) {  	while (true) {  		if (!TryMoveToAnyOf (new char[] {  			'<''  			']'  		}' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ('<'))  			break;  		if (TryPeek (']')) {  			if (TryPeek ("]]>")) {  				OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  			}  			TryMoveNext ();  			continue;  		}  		throw new InternalException ("Infinite loop");  	}  } else if (type == TextType.Comment) {  	// Do not report too many errors  	bool errorReported = false;  	while (true) {  		if (!TryMoveTo ('-'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("-->"))  			break;  		if (TryPeek ("--") && !errorReported) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  			errorReported = true;  		}  		TryMoveNext ();  	}  } else if (type == TextType.CData) {  	while (true) {  		// We can not use use TryMoveTo("]]>"' fragmentEnd) because it may incorectly accept "]" at the end of fragment  		if (!TryMoveTo (']'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("]]>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.ProcessingInstruction) {  	while (true) {  		if (!TryMoveTo ('?'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("?>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.UnknownBang) {  	TryMoveToAnyOf (new char[] {  		'<''  		'>'  	}' fragmentEnd);  } else {  	throw new InternalException ("Unknown type " + type);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (type == TextType.CharacterData) {  	while (true) {  		if (!TryMoveToAnyOf (new char[] {  			'<''  			']'  		}' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ('<'))  			break;  		if (TryPeek (']')) {  			if (TryPeek ("]]>")) {  				OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  			}  			TryMoveNext ();  			continue;  		}  		throw new InternalException ("Infinite loop");  	}  } else if (type == TextType.Comment) {  	// Do not report too many errors  	bool errorReported = false;  	while (true) {  		if (!TryMoveTo ('-'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("-->"))  			break;  		if (TryPeek ("--") && !errorReported) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  			errorReported = true;  		}  		TryMoveNext ();  	}  } else if (type == TextType.CData) {  	while (true) {  		// We can not use use TryMoveTo("]]>"' fragmentEnd) because it may incorectly accept "]" at the end of fragment  		if (!TryMoveTo (']'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("]]>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.ProcessingInstruction) {  	while (true) {  		if (!TryMoveTo ('?'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("?>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.UnknownBang) {  	TryMoveToAnyOf (new char[] {  		'<''  		'>'  	}' fragmentEnd);  } else {  	throw new InternalException ("Unknown type " + type);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: while (true) {  	if (!TryMoveToAnyOf (new char[] {  		'<''  		']'  	}' fragmentEnd))  		break;  	// End of fragment  	if (TryPeek ('<'))  		break;  	if (TryPeek (']')) {  		if (TryPeek ("]]>")) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  		}  		TryMoveNext ();  		continue;  	}  	throw new InternalException ("Infinite loop");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (TryPeek (']')) {  	if (TryPeek ("]]>")) {  		OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  	}  	TryMoveNext ();  	continue;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (TryPeek ("]]>")) {  	OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 3' "']]>' is not allowed in text");  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (type == TextType.Comment) {  	// Do not report too many errors  	bool errorReported = false;  	while (true) {  		if (!TryMoveTo ('-'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("-->"))  			break;  		if (TryPeek ("--") && !errorReported) {  			OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  			errorReported = true;  		}  		TryMoveNext ();  	}  } else if (type == TextType.CData) {  	while (true) {  		// We can not use use TryMoveTo("]]>"' fragmentEnd) because it may incorectly accept "]" at the end of fragment  		if (!TryMoveTo (']'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("]]>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.ProcessingInstruction) {  	while (true) {  		if (!TryMoveTo ('?'' fragmentEnd))  			break;  		// End of fragment  		if (TryPeek ("?>"))  			break;  		TryMoveNext ();  	}  } else if (type == TextType.UnknownBang) {  	TryMoveToAnyOf (new char[] {  		'<''  		'>'  	}' fragmentEnd);  } else {  	throw new InternalException ("Unknown type " + type);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: while (true) {  	if (!TryMoveTo ('-'' fragmentEnd))  		break;  	// End of fragment  	if (TryPeek ("-->"))  		break;  	if (TryPeek ("--") && !errorReported) {  		OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  		errorReported = true;  	}  	TryMoveNext ();  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: if (TryPeek ("--") && !errorReported) {  	OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  	errorReported = true;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,ReadText,The following statement contains a magic number: OnSyntaxError (this.CurrentLocation' this.CurrentLocation + 2' "'--' is not allowed in comment");  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: while (true) {  	// Reached end of input  	if (curr == text.Length) {  		if (sb != null) {  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Try to find reference  	int start = text.IndexOf ('&'' curr);  	// No more references found  	if (start == -1) {  		if (sb != null) {  			sb.Append (text' curr' text.Length - curr);  			// Add rest  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Append text before the enitiy reference  	if (sb == null)  		sb = new StringBuilder (text.Length);  	sb.Append (text' curr' start - curr);  	curr = start;  	// Process the entity  	int errorLoc = textLocation + sb.Length;  	// Find entity name  	int end = text.IndexOfAny (new char[] {  		'&''  		';'  	}' start + 1' Math.Min (maxEntityLength' text.Length - (start + 1)));  	if (end == -1 || text [end] == '&') {  		// Not found  		OnSyntaxError (errorLoc' errorLoc + 1' "Entity reference must be terminated with ';'");  		// Keep '&'  		sb.Append ('&');  		curr++;  		continue;  		// Restart and next character location  	}  	string name = text.Substring (start + 1' end - (start + 1));  	// Resolve the name  	string replacement;  	if (name.Length == 0) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  	} else if (name == "amp") {  		replacement = "&";  	} else if (name == "lt") {  		replacement = "<";  	} else if (name == "gt") {  		replacement = ">";  	} else if (name == "apos") {  		replacement = "'";  	} else if (name == "quot") {  		replacement = "\"";  	} else if (name.Length > 0 && name [0] == '#') {  		int num;  		if (name.Length > 1 && name [1] == 'x') {  			if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  			}  		} else {  			if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  			}  		}  		if (num != -1) {  			try {  				replacement = char.ConvertFromUtf32 (num);  			} catch (ArgumentOutOfRangeException) {  				replacement = null;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  			}  		} else {  			replacement = null;  		}  	} else if (!IsValidName (name)) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  	} else {  		replacement = null;  		if (tagSoupParser.UnknownEntityReferenceIsError) {  			OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  		}  	}  	// Append the replacement to output  	if (replacement != null) {  		sb.Append (replacement);  	} else {  		sb.Append ('&');  		sb.Append (name);  		sb.Append (';');  	}  	curr = end + 1;  	continue;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: while (true) {  	// Reached end of input  	if (curr == text.Length) {  		if (sb != null) {  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Try to find reference  	int start = text.IndexOf ('&'' curr);  	// No more references found  	if (start == -1) {  		if (sb != null) {  			sb.Append (text' curr' text.Length - curr);  			// Add rest  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Append text before the enitiy reference  	if (sb == null)  		sb = new StringBuilder (text.Length);  	sb.Append (text' curr' start - curr);  	curr = start;  	// Process the entity  	int errorLoc = textLocation + sb.Length;  	// Find entity name  	int end = text.IndexOfAny (new char[] {  		'&''  		';'  	}' start + 1' Math.Min (maxEntityLength' text.Length - (start + 1)));  	if (end == -1 || text [end] == '&') {  		// Not found  		OnSyntaxError (errorLoc' errorLoc + 1' "Entity reference must be terminated with ';'");  		// Keep '&'  		sb.Append ('&');  		curr++;  		continue;  		// Restart and next character location  	}  	string name = text.Substring (start + 1' end - (start + 1));  	// Resolve the name  	string replacement;  	if (name.Length == 0) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  	} else if (name == "amp") {  		replacement = "&";  	} else if (name == "lt") {  		replacement = "<";  	} else if (name == "gt") {  		replacement = ">";  	} else if (name == "apos") {  		replacement = "'";  	} else if (name == "quot") {  		replacement = "\"";  	} else if (name.Length > 0 && name [0] == '#') {  		int num;  		if (name.Length > 1 && name [1] == 'x') {  			if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  			}  		} else {  			if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  			}  		}  		if (num != -1) {  			try {  				replacement = char.ConvertFromUtf32 (num);  			} catch (ArgumentOutOfRangeException) {  				replacement = null;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  			}  		} else {  			replacement = null;  		}  	} else if (!IsValidName (name)) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  	} else {  		replacement = null;  		if (tagSoupParser.UnknownEntityReferenceIsError) {  			OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  		}  	}  	// Append the replacement to output  	if (replacement != null) {  		sb.Append (replacement);  	} else {  		sb.Append ('&');  		sb.Append (name);  		sb.Append (';');  	}  	curr = end + 1;  	continue;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: while (true) {  	// Reached end of input  	if (curr == text.Length) {  		if (sb != null) {  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Try to find reference  	int start = text.IndexOf ('&'' curr);  	// No more references found  	if (start == -1) {  		if (sb != null) {  			sb.Append (text' curr' text.Length - curr);  			// Add rest  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Append text before the enitiy reference  	if (sb == null)  		sb = new StringBuilder (text.Length);  	sb.Append (text' curr' start - curr);  	curr = start;  	// Process the entity  	int errorLoc = textLocation + sb.Length;  	// Find entity name  	int end = text.IndexOfAny (new char[] {  		'&''  		';'  	}' start + 1' Math.Min (maxEntityLength' text.Length - (start + 1)));  	if (end == -1 || text [end] == '&') {  		// Not found  		OnSyntaxError (errorLoc' errorLoc + 1' "Entity reference must be terminated with ';'");  		// Keep '&'  		sb.Append ('&');  		curr++;  		continue;  		// Restart and next character location  	}  	string name = text.Substring (start + 1' end - (start + 1));  	// Resolve the name  	string replacement;  	if (name.Length == 0) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  	} else if (name == "amp") {  		replacement = "&";  	} else if (name == "lt") {  		replacement = "<";  	} else if (name == "gt") {  		replacement = ">";  	} else if (name == "apos") {  		replacement = "'";  	} else if (name == "quot") {  		replacement = "\"";  	} else if (name.Length > 0 && name [0] == '#') {  		int num;  		if (name.Length > 1 && name [1] == 'x') {  			if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  			}  		} else {  			if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  			}  		}  		if (num != -1) {  			try {  				replacement = char.ConvertFromUtf32 (num);  			} catch (ArgumentOutOfRangeException) {  				replacement = null;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  			}  		} else {  			replacement = null;  		}  	} else if (!IsValidName (name)) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  	} else {  		replacement = null;  		if (tagSoupParser.UnknownEntityReferenceIsError) {  			OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  		}  	}  	// Append the replacement to output  	if (replacement != null) {  		sb.Append (replacement);  	} else {  		sb.Append ('&');  		sb.Append (name);  		sb.Append (';');  	}  	curr = end + 1;  	continue;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: while (true) {  	// Reached end of input  	if (curr == text.Length) {  		if (sb != null) {  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Try to find reference  	int start = text.IndexOf ('&'' curr);  	// No more references found  	if (start == -1) {  		if (sb != null) {  			sb.Append (text' curr' text.Length - curr);  			// Add rest  			return sb.ToString ();  		} else {  			return text;  		}  	}  	// Append text before the enitiy reference  	if (sb == null)  		sb = new StringBuilder (text.Length);  	sb.Append (text' curr' start - curr);  	curr = start;  	// Process the entity  	int errorLoc = textLocation + sb.Length;  	// Find entity name  	int end = text.IndexOfAny (new char[] {  		'&''  		';'  	}' start + 1' Math.Min (maxEntityLength' text.Length - (start + 1)));  	if (end == -1 || text [end] == '&') {  		// Not found  		OnSyntaxError (errorLoc' errorLoc + 1' "Entity reference must be terminated with ';'");  		// Keep '&'  		sb.Append ('&');  		curr++;  		continue;  		// Restart and next character location  	}  	string name = text.Substring (start + 1' end - (start + 1));  	// Resolve the name  	string replacement;  	if (name.Length == 0) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  	} else if (name == "amp") {  		replacement = "&";  	} else if (name == "lt") {  		replacement = "<";  	} else if (name == "gt") {  		replacement = ">";  	} else if (name == "apos") {  		replacement = "'";  	} else if (name == "quot") {  		replacement = "\"";  	} else if (name.Length > 0 && name [0] == '#') {  		int num;  		if (name.Length > 1 && name [1] == 'x') {  			if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  			}  		} else {  			if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  				num = -1;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  			}  		}  		if (num != -1) {  			try {  				replacement = char.ConvertFromUtf32 (num);  			} catch (ArgumentOutOfRangeException) {  				replacement = null;  				OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  			}  		} else {  			replacement = null;  		}  	} else if (!IsValidName (name)) {  		replacement = null;  		OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  	} else {  		replacement = null;  		if (tagSoupParser.UnknownEntityReferenceIsError) {  			OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  		}  	}  	// Append the replacement to output  	if (replacement != null) {  		sb.Append (replacement);  	} else {  		sb.Append ('&');  		sb.Append (name);  		sb.Append (';');  	}  	curr = end + 1;  	continue;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length == 0) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  } else if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length == 0) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  } else if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length == 0) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  } else if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length == 0) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Entity name expected");  } else if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "amp") {  	replacement = "&";  } else if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "lt") {  	replacement = "<";  } else if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "gt") {  	replacement = ">";  } else if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "apos") {  	replacement = "'";  } else if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name == "quot") {  	replacement = "\"";  } else if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 0 && name [0] == '#') {  	int num;  	if (name.Length > 1 && name [1] == 'x') {  		if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  		}  	} else {  		if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  			num = -1;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  		}  	}  	if (num != -1) {  		try {  			replacement = char.ConvertFromUtf32 (num);  		} catch (ArgumentOutOfRangeException) {  			replacement = null;  			OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  		}  	} else {  		replacement = null;  	}  } else if (!IsValidName (name)) {  	replacement = null;  	OnSyntaxError (errorLoc + 1' errorLoc + 1' "Invalid entity name");  } else {  	replacement = null;  	if (tagSoupParser.UnknownEntityReferenceIsError) {  		OnSyntaxError (errorLoc' errorLoc + 1 + name.Length + 1' "Unknown entity reference '{0}'"' name);  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 1 && name [1] == 'x') {  	if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  	}  } else {  	if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 1 && name [1] == 'x') {  	if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  	}  } else {  	if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (name.Length > 1 && name [1] == 'x') {  	if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  	}  } else {  	if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  		num = -1;  		OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  	}  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  	num = -1;  	OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (!int.TryParse (name.Substring (2)' NumberStyles.AllowHexSpecifier' CultureInfo.InvariantCulture.NumberFormat' out num)) {  	num = -1;  	OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: OnSyntaxError (errorLoc + 3' errorLoc + 1 + name.Length' "Hexadecimal code of unicode character expected");  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (!int.TryParse (name.Substring (1)' NumberStyles.None' CultureInfo.InvariantCulture.NumberFormat' out num)) {  	num = -1;  	OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Numeric code of unicode character expected");  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: if (num != -1) {  	try {  		replacement = char.ConvertFromUtf32 (num);  	} catch (ArgumentOutOfRangeException) {  		replacement = null;  		OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  	}  } else {  	replacement = null;  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: try {  	replacement = char.ConvertFromUtf32 (num);  } catch (ArgumentOutOfRangeException) {  	replacement = null;  	OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  }  
Magic Number,ICSharpCode.NRefactory.Xml,TagReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TagReader.cs,Dereference,The following statement contains a magic number: OnSyntaxError (errorLoc + 2' errorLoc + 1 + name.Length' "Invalid unicode character U+{0:X} ({0})"' num);  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,PrintStringCacheStats,The following statement contains a magic number: Log.WriteLine ("String cache: Requested {0} ({1} bytes);  Actaully stored {2} ({3} bytes); {4}% stored"' stringCacheRequestedCount' stringCacheRequestedSize' stringCacheStoredCount' stringCacheStoredSize' stringCacheRequestedSize == 0 ? 0 : stringCacheStoredSize * 100 / stringCacheRequestedSize);  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,AddToRequestedSize,The following statement contains a magic number: stringCacheRequestedSize += 8 + 2 * text.Length;  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,AddToRequestedSize,The following statement contains a magic number: stringCacheRequestedSize += 8 + 2 * text.Length;  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,AddToStoredSize,The following statement contains a magic number: stringCacheStoredSize += 8 + 2 * text.Length;  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,AddToStoredSize,The following statement contains a magic number: stringCacheStoredSize += 8 + 2 * text.Length;  
Magic Number,ICSharpCode.NRefactory.Xml,TokenReader,F:\newReposMay17\icsharpcode_NRefactory\ICSharpCode.NRefactory.Xml\TokenReader.cs,GetCachedString,The following statement contains a magic number: if (cached.Length > 32) {  	AddToStoredSize (cached);  	return cached;  }  
