Implementation smell,Namespace,Class,File,Method,Description
Long Method,ICSharpCode.NRefactory.CSharp.Parser.Bugs,ParserBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Bugs\ParserBugTests.cs,TestBug12383,The method has 140 lines of code.
Complex Method,ICSharpCode.NRefactory.CSharp.CodeActions,TestRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\TestRefactoringContext.cs,Create,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.CSharp.CodeActions,TestScript,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\TestRefactoringContext.cs,Rename,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.IndentationTests,Helper,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\Helper.cs,ReadAndTest,Cyclomatic complexity of the method is 8
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeActions,ContextActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\ContextActionTestBase.cs,Test,The method has 5 parameters. Parameters: provider' input' output' action' expectErrors
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeIssues,InspectionActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InspectionActionTestBase.cs,GetIssues,The method has 5 parameters. Parameters: action' input' context' expectErrors' parser
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeIssues,InspectionActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InspectionActionTestBase.cs,GetIssuesWithSubIssue,The method has 5 parameters. Parameters: action' input' subIssue' context' expectErrors
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeIssues,InspectionActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InspectionActionTestBase.cs,Test,The method has 5 parameters. Parameters: input' issueCount' output' issueToFix' actionToRun
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeIssues,InspectionActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InspectionActionTestBase.cs,TestWithSubIssue,The method has 5 parameters. Parameters: input' subIssue' issueCount' output' issueToFix
Long Parameter List,ICSharpCode.NRefactory.CSharp.Parser,ConsistencyChecker,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ConsistencyChecker.cs,CheckWhitespace,The method has 6 parameters. Parameters: startNode' whitespaceStart' endNode' whitespaceEnd' currentFileName' currentDocument
Long Parameter List,ICSharpCode.NRefactory.CSharp.Parser.Expression,BinaryOperatorExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\BinaryOperatorExpressionTests.cs,OperatorPrecedenceTest,The method has 5 parameters. Parameters: strongOperator' strongOperatorType' weakOperator' weakOperatorType' vb
Long Parameter List,ICSharpCode.NRefactory.CSharp.Parser.Expression,BinaryOperatorExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\BinaryOperatorExpressionTests.cs,SameOperatorPrecedenceTest,The method has 5 parameters. Parameters: firstOperator' firstOperatorType' secondOperator' secondOperatorType' vb
Long Parameter List,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,TestOperator,The method has 7 parameters. Parameters: condition' trueExpr' falseExpr' conditionConv' trueConv' falseConv' expectedResultType
Long Parameter List,ICSharpCode.NRefactory.CSharp.Resolver,ResolverTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolverTestBase.cs,TestOperator,The method has 6 parameters. Parameters: lhs' op' rhs' expectedLeftConversion' expectedRightConversion' expectedResultType
Long Parameter List,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TextEditorTestAdapter.cs,GetChanges,The method has 5 parameters. Parameters: policy' input' document' mode' options
Long Parameter List,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TextEditorTestAdapter.cs,Test,The method has 5 parameters. Parameters: policy' input' expectedOutput' mode' options
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,AliasComponent,The method has 5 parameters. Parameters: bstrSrcApplicationIDOrName' bstrCLSIDOrProgID' bstrDestApplicationIDOrName' bstrNewProgId' bstrNewClsid
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,CreateServiceForApplication,The method has 8 parameters. Parameters: bstrApplicationIDOrName' bstrServiceName' bstrStartType' bstrErrorControl' bstrDependencies' bstrRunAs' bstrPassword' bDesktopOk
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,GetMultipleComponentsInfo,The method has 6 parameters. Parameters: bstrApplIdOrName' varFileNames' varCLSIDS' varClassNames' varFileFlags' varComponentFlags
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,InstallApplication,The method has 6 parameters. Parameters: bstrApplicationFile' bstrDestinationDirectory' lOptions' bstrUserId' bstrPassword' bstrRSN
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,InstallPartition,The method has 6 parameters. Parameters: bstrFileName' bstrDestDirectory' lOptions' bstrUserID' bstrPassword' bstrRSN
Long Parameter List,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,QueryApplicationFile,The method has 6 parameters. Parameters: bstrApplicationFile' bstrApplicationName' bstrApplicationDescription' bHasUsers' bIsProxy' varFileNames
Long Parameter List,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,ErrorTest,The method has 5 parameters. Parameters: error' originalText' replacementText' startLocation' endLocation
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,CreateCompilation,The method has 6 parameters. Parameters: parsedText' pctx' syntaxTree' unresolvedFile' expectErrors' references
Long Parameter List,ICSharpCode.NRefactory.CSharp.CodeCompletion,TestFactory,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,CreateEventCreationCompletionData,The method has 6 parameters. Parameters: varName' delegateType' evt' parameterDefinition' currentMember' currentType
Long Identifier,ICSharpCode.NRefactory.CSharp.CodeIssues,EventUnsubscriptionViaAnonymousDelegateIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\EventUnsubscriptionViaAnonymousDelegateIssueTests.cs,TestDelegateCase,The length of the parameter usingSystemClassFooPublicEventEventHandlerFooVoidTestFooDelegate is 64.
Long Identifier,ICSharpCode.NRefactory.CSharp.CodeIssues,StringIndexOfIsCultureSpecificIssueTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\StringIndexOfIsCultureSpecificIssueTest.cs,,The length of the parameter stringIndexOfStringCallsWithComparison is 38.
Long Identifier,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,,The length of the parameter propertyNameAmbiguousWithTypeNameProgram is 40.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,CopyApplications,The length of the parameter bstrDestinationPartitionIDOrName is 32.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,CopyComponents,The length of the parameter bstrDestinationApplicationIDOrName is 34.
Long Identifier,ICSharpCode.NRefactory.TypeSystem.TestCase,IMarshalAsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.TestCase.cs,MoveComponents,The length of the parameter bstrDestinationApplicationIDOrName is 34.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparerTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Analysis\AbiComparerTests.cs,CheckEquality,The length of the statement  "			string a1 = @"namespace Foo { public class Bar { public void FooBar () {} public int Bar2 { get; set;} int removed; } class Removed {} }"; " is 138.
Long Statement,ICSharpCode.NRefactory.Analysis,AbiComparerTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Analysis\AbiComparerTests.cs,CheckEquality,The length of the statement  "			string a2 = @"namespace Foo { public class Bar { public void FooBar () {} public int Bar2 { get {} set{}} void Added () {} } class Added {} } namespace Added { class Test { } }"; " is 178.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,CreateDefiniteAssignmentAnalysis,The length of the statement  "			var resolver = new CSharpAstResolver(new CSharpResolver(new SimpleCompilation(CecilLoaderTests.Mscorlib))' rootStatement); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,ConditionalAnd,The length of the statement  "					Left = new BinaryOperatorExpression(new IdentifierExpression("x")' BinaryOperatorType.GreaterThan' new PrimitiveExpression(0))' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,ConditionalOr,The length of the statement  "					Left = new BinaryOperatorExpression(new IdentifierExpression("x")' BinaryOperatorType.GreaterThan' new PrimitiveExpression(0))' " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,ForLoop,The length of the statement  "				Condition = new BinaryOperatorExpression(new IdentifierExpression("i")' BinaryOperatorType.LessThan' new PrimitiveExpression(1000))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,SemanticHighlightingTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\SemanticHighlightingTests.cs,CreateHighighting,The length of the statement  "			var project = new CSharpProjectContent().AddAssemblyReferences(new [] { CecilLoaderTests.Mscorlib' CecilLoaderTests.SystemCore }); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,SemanticHighlightingTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\SemanticHighlightingTests.cs,TestPropertyAccess,The length of the statement  "			TestColor (@"using System; class Class { int Bar {get; set; } void Foo () { Console.WriteLine ($Bar); } }"' propertyAccessColor); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,SemanticHighlightingTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\SemanticHighlightingTests.cs,TestStringFormatItemInVerbatimStringColor,The length of the statement  "			TestColor ("using System;\nclass MyClass {\n\npublic static void Main () { Console.WriteLine (@\" ${0}\n ${1} \n\n ${2} \"' 1' 2' 3); } }"' stringFormatItemColor); " is 163.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLock,The length of the statement  "			Assert.AreEqual(NullValueStatus.UnreachableOrInexistent' analysis.GetVariableStatusAfterStatement(lockBlock.Statements.Single()' "x1")); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLock,The length of the statement  "			Assert.AreEqual(NullValueStatus.UnreachableOrInexistent' analysis.GetVariableStatusAfterStatement(lastStatement' "x2")); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestMemberAccess,The length of the statement  "			Assert.AreEqual(NullValueStatus.UnreachableOrInexistent' analysis.GetVariableStatusAfterStatement(lastStatement' "x2")); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLinq,The length of the statement  "			var itemInWhere = ((BinaryOperatorExpression)((QueryWhereClause)continuation.PrecedingQuery.Clauses.ElementAt(1)).Condition).Left; " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLinqMember,The length of the statement  "			Assert.AreEqual(NullValueStatus.DefinitelyNotNull' analysis.GetVariableStatusAfterStatement(foreachStatement.EmbeddedStatement' "x")); " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestNoExecutionLinq,The length of the statement  "			Assert.AreEqual(NullValueStatus.PotentiallyNull' analysis.GetVariableStatusAfterStatement(linqStatement' "collection")); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_TRUE)] bool condition' string message) { " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion2,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_TRUE)] bool condition' string message) { " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion3,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_TRUE)] bool condition = false) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion4,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_FALSE)] bool condition = true) { " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion5,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_FALSE)] bool condition = false) { " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion5,The length of the statement  "			Assert.AreNotEqual(NullValueStatus.UnreachableOrInexistent' analysis.GetVariableStatusAfterStatement(lastStatement' "x")); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion6,The length of the statement  "	void AssertNotNull([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL)] object condition) { " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion7,The length of the statement  "	void Assert([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_FALSE)] bool condition) { " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion8,The length of the statement  "	void AssertNotNull([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL)] string condition = ""x"") { " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion8,The length of the statement  "			Assert.AreNotEqual(NullValueStatus.UnreachableOrInexistent' analysis.GetVariableStatusAfterStatement(lastStatement' "x")); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestAssertion9,The length of the statement  "	void AssertNotNull([JetBrains.Annotations.AssertionCondition(JetBrains.Annotations.AssertionConditionType.IS_NOT_NULL)] object condition) { " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Analysis,LocalDeclarationSpaceVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DeclarationSpace\LocalDeclarationSpaceVisitorTests.cs,CustomEventDeclaration,The length of the statement  "			Assert.AreEqual(2' bodyDeclarationSpace.Parent.Children.Count' "Wrong number of child declaration spaces in the event declaration"); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpAmbienceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpAmbienceTests.cs,SimpleTypeDefinitionWithoutModifiers,The length of the statement  "			ambience.ConversionFlags = ConversionFlags.All & ~(ConversionFlags.UseFullyQualifiedEntityNames | ConversionFlags.ShowModifiers | ConversionFlags.ShowAccessibility); " is 165.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpAmbienceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpAmbienceTests.cs,SimpleFieldWithoutModifiers,The length of the statement  "			ambience.ConversionFlags = ConversionFlags.All & ~(ConversionFlags.ShowDeclaringType | ConversionFlags.ShowModifiers | ConversionFlags.ShowAccessibility); " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp,CodeDomConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeDomConvertVisitorTests.cs,TestGlobalNamespaceFix,The length of the statement  "			Assert.AreEqual("namespace A { using System; public class AClass { } } namespace B { using System.IO; using System; public class AClass { } }"' " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp,CodeDomConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeDomConvertVisitorTests.cs,TestGlobalNamespaceFix,The length of the statement  "			                ConvertSyntaxTree("using System; namespace A { public class AClass {} } namespace B { using System.IO; public class AClass {} }")); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp,InsertMissingTokensDecoratorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\InsertMissingTokensDecoratorTests.cs,AssertOutput,The length of the statement  "			node.AcceptVisitor(new CSharpOutputVisitor(TokenWriter.CreateWriterThatSetsLocationsInAST(w)' FormattingOptionsFactory.CreateSharpDevelop())); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The length of the statement  "			condition.AddChild(new CSharpTokenNode(new TextLocation(1' 1)' IfElseStatement.IfKeywordRole)' IfElseStatement.IfKeywordRole); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The length of the statement  "			condition.AddChild(new Comment(CommentType.MultiLine' new TextLocation(1' 9)' new TextLocation(1' 14)) { Content = "a" }' Roles.Comment); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,BlankLinesBetweenMembers,The length of the statement  "			AssertOutput("class Test\n{\n$Test ()\n${\n$}\n\n\n$void Foo ()\n${\n$}\n\n\n$int P {\n$$get;\n$$set;\n$}\n}\n"' unit' options); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,BlankLinesAfterUsings,The length of the statement  "			AssertOutput("using System;\nusing System.Collections;\nusing List = System.Collections.List;\n\n\nnamespace NS\n{\n$using System.Collections.Generic;\n$using Collection = System.Collections.Collection;\n$using System.Xml;\n\n\n$class C\n${\n$}\n}\n"' unit' options); " is 267.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,Undocumented,The length of the statement  "			AssertOutput("__arglist"' new UndocumentedExpression { UndocumentedExpressionType = UndocumentedExpressionType.ArgListAccess }); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,Undocumented,The length of the statement  "			AssertOutput("__arglist ()"' new UndocumentedExpression { UndocumentedExpressionType = UndocumentedExpressionType.ArgList }); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,AssertCorrect,The length of the statement  "			Assert.That(Regex.Replace(actual.ToString()' @"\s+"' "").Replace("<>"' "")' Is.EqualTo(Regex.Replace(expected' @"\s+"' ""))); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithFromAndSelectWorks,The length of the statement  "			AssertLookupCorrect(actual.RangeVariables' new[] { Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0)) }); " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithFromAndSelectWorks,The length of the statement  "			AssertLookupCorrect(actual.Expressions' new[] { Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)' Tuple.Create(new TextLocation(1' 16)' actual.AstNode) }); " is 175.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithSingleFromAndExplicitTypeWorks,The length of the statement  "			AssertLookupCorrect(actual.RangeVariables' new[] { Tuple.Create(new TextLocation(1' 13)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0)) }); " is 159.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithSingleFromAndExplicitTypeWorks,The length of the statement  "			AssertLookupCorrect(actual.Expressions' new[] { Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)' Tuple.Create(new TextLocation(1' 23)' actual.AstNode) }); " is 175.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from a in args let b = int.Parse(a) select a + b.ToString()"); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from a in args let b = int.Parse(a) let c = b + 1 select a + b.ToString() + c.ToString()"); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The length of the statement  "			AssertCorrect(actual.AstNode' "args.Select(a => new { a' b = int.Parse(a) }).Select(x0 => new { x0' c = x0.b + 1 }).Select(x1 => x1.x0.a + x1.x0.b.ToString() + x1.c.ToString())"); " is 179.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 41)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in outer let j = F(i) from k in j.Result select i + j + k"); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "			AssertCorrect(actual.AstNode' "outer.Select(i => new { i' j = F(i) }).SelectMany(x0 => x0.j.Result' (x1' k) => x1.i + x1.j + k)"); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in outer let j = F(i) from k in j.Result let l = i + j + k select i + j + k + l"); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "			AssertCorrect(actual.AstNode' "outer.Select(i => new { i' j = F(i) }).SelectMany(x0 => x0.j.Result' (x1' k) => new { x1' k }).Select(x2 => new { x2' l = x2.x1.i + x2.x1.j + x2.k }).Select(x3 => x3.x2.x1.i + x3.x2.x1.j + x3.x2.k + x3.l)"); " is 238.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 164.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))' " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The length of the statement  "				Tuple.Create(new TextLocation(1' 53)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 from j in arr2 let k = i + j select i + j + k"); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.SelectMany(i => arr2' (i' j) => new { i' j }).Select(x0 => new { x0' k = x0.i + x0.j }).Select(x1 => x1.x0.i + x1.x0.j + x1.k)"); " is 165.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))' " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 from j in arr2 from k in arr3 select i + j + k"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.SelectMany(i => arr2' (i' j) => new { i' j }).SelectMany(x0 => arr3' (x1' k) => x1.i + x1.j + k)"); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWhenThereIsATransparentIdentifer,The length of the statement  "				Tuple.Create(new TextLocation(1' 19)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 join j in arr2 on i.keyi equals j.keyj select i + j"); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 join CJ j in arr2 on i.keyi equals j.keyj select i.valuei + j.valuej"); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 join j in arr2 on i.keyi equals j.keyj let k = i + j select i + j + k"); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.Join(arr2' i => i.keyi' j => j.keyj' (i' j) => new { i' j }).Select(x0 => new { x0' k = x0.i + x0.j }).Select(x1 => x1.x0.i + x1.x0.j + x1.k)"); " is 180.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 2).Parameters' 0))' " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 59)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 let j = F(i) join k in arr2 on j.keyj equals k.keyk select i + j + k"); " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.Select(i => new { i' j = F(i) }).Join(arr2' x0 => x0.j.keyj' k => k.keyk' (x1' k) => x1.i + x1.j + k)"); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 join j in arr2 on i.keyi equals j.keyj into g select F(i' g)"); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 join j in arr2 on i.keyi equals j.keyj into g let k = i + g select i + g + k"); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.GroupJoin(arr2' i => i.keyi' j => j.keyj' (i' g) => new { i' g }).Select(x0 => new { x0' k = x0.i + x0.g }).Select(x1 => x1.x0.i + x1.x0.g + x1.k)"); " is 185.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 3).Parameters' 1))' " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The length of the statement  "				Tuple.Create(new TextLocation(1' 66)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 let j = F(i) join k in arr2 on j.keyj equals k.keyk into g select F(i' j' g)"); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.Select(i => new { i' j = F(i) }).GroupJoin(arr2' x0 => x0.j.keyj' k => k.keyk' (x1' g) => F(x1.i' x1.j' g))"); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.Select(i => new { i' j = i + 1 }).Where(x0 => x0.i > x0.j).Select(x1 => x1.i + x1.j)"); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The length of the statement  "				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)' " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug. " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 orderby i.field1 descending' i.field2 descending select i"); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The length of the statement  "				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug. " is 192.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 from j in arr2 select i + j into a where a > 5 select a + 1"); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The length of the statement  "				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))' " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The length of the statement  "				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))' " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,NestedQueries,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 from j in arr2 let l = new { i' j } group l by l.i into g select new { g.Key' a = from q in g select new { q.i' q.j } }"); " is 198.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,NestedQueries,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.SelectMany(i => arr2' (i' j) => new { i' j }).Select(x0 => new { x0' l = new { x0.i' x0.j } }).GroupBy(x1 => x1.l.i' x2 => x2.l).Select(g => new { g.Key' a = g.Select(q => new { q.i' q.j }) })"); " is 231.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,NestedQueryUsingRangeVariableFromOuter,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from i in arr1 from j in arr2 let k = new[] { i' j } select (from l in k let m = l + 1 select l + m + i)"); " is 168.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,NestedQueryUsingRangeVariableFromOuter,The length of the statement  "			AssertCorrect(actual.AstNode' "arr1.SelectMany(i => arr2' (i' j) => new { i' j }).Select(x0 => new { x0' k = new[] { x0.i' x0.j } }).Select(x1 => (x1.k.Select(l => new { l' m = l + 1 }).Select(x2 => x2.l + x2.m + x1.x0.i)))"); " is 226.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,RangeVariablesAreNotInScopeInJoinEquals,The length of the statement  "			var node = ParseUtilCSharp.ParseExpression<QueryExpression>("from a in args let a2 = a select (from b in args let b2 = b join c in args on b[0] equals b + a into g select g)"); " is 176.
Long Statement,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,RangeVariablesAreNotInScopeInJoinEquals,The length of the statement  "			AssertCorrect(actual.AstNode' "args.Select(a => new { a' a2 = a }).Select(x0 => (args.Select(b => new { b' b2 = b }).GroupJoin(args' x1 => x1.b[0]' c => b + x0.a' (x2' g) => g)))"); " is 181.
Long Statement,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,TestDescendantsWithPredicate,The length of the statement  "			var childs = method.DescendantNodes(child => !(child is BlockStatement) || (((BlockStatement)child).Parent is MethodDeclaration)).Where(n => n is Statement).ToList(); " is 166.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeActions,ConvertToInitializerTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\ConvertToInitializer\ConvertToInitializerTests.cs,Test,The length of the statement  "			Assert.IsTrue(passed' "The generated code and the expected code was not syntactically identical. See output for details."); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeActions,LinqFluentToQueryTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\LinqFluentToQueryTests.cs,TestSelectManyLet,The length of the statement  "		var x = new int[0].$SelectMany (elem => new int[0]' (elem1' elem2) => new { elem1' elem2 }).Select(i => new { i' sum = i.elem1 + i.elem2 }) " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeActions,LinqFluentToQueryTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\LinqFluentToQueryTests.cs,TestSelectManyLet2,The length of the statement  "		var x = new int[0].$SelectMany (elem => new int[0]' (elem1' elem2) => new { elem1' elem2 = elem2 + 1 }).Select(i => new { i' sum = i.elem1 + i.elem2 }) " is 151.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeActions,LinqQueryToFluentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\LinqQueryToFluentTests.cs,TestJoinQuery,The length of the statement  "		var data = System.Enumerable.Empty<int> ().Join (newEnumerable.Cast<float> ()' x => x * 2' yy => yy' (x' yy) => x * yy); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantThisQualifierIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantThisQualifierIssueTests.cs,TestInspectorCase1,The length of the statement  "			var issues = GetIssuesWithSubIssue (new RedundantThisQualifierIssue ()' input' RedundantThisQualifierIssue.EverywhereElse' out context); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantThisQualifierIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantThisQualifierIssueTests.cs,TestInsideConstructors,The length of the statement  "			var issues = GetIssuesWithSubIssue (new RedundantThisQualifierIssue ()' input' RedundantThisQualifierIssue.InsideConstructors' out context); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantThisQualifierIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantThisQualifierIssueTests.cs,TestResharperDisableRestore,The length of the statement  "			var issues = GetIssuesWithSubIssue (new RedundantThisQualifierIssue ()' input' RedundantThisQualifierIssue.EverywhereElse' out context); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantThisQualifierIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantThisQualifierIssueTests.cs,TestBatchFix,The length of the statement  "			var issues = GetIssuesWithSubIssue (new RedundantThisQualifierIssue ()' input' RedundantThisQualifierIssue.EverywhereElse' out context); " is 136.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForCamelCaseWithUpperStart,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "camelCase_underscoreTolerant"' out suggestedNames);  " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForCamelCaseWithUpperStartWithUnderscoreStart,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "_camelCase_underscoreTolerant"' out suggestedNames);  " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForCamelCaseWithLowerStart,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "camelCase_UnderscoreTolerant"' out suggestedNames);  " is 134.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForCamelCaseWithLowerStartMultipleUnderscores,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "camelCase_____UnderscoreTolerant"' out suggestedNames);  " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForPascalCaseWithUpperStart,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "PascalCase_underscoreTolerant"' out suggestedNames);  " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForPascalCaseWithLowerStart,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "PascalCase_UnderscoreTolerant"' out suggestedNames);  " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NamingRuleTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestSuggestionForPascalCase,The length of the statement  "			rule.GetErrorMessage(new TestRefactoringContext (null' TextLocation.Empty' null)' "pascalCase_12_____12323"' out suggestedNames);  " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,SupportsIndexingCriterionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterCanBeDemotedIssue\SupportsIndexingCriterionTests.cs,AssertMatches,The length of the statement  "			var criterion = new SupportsIndexingCriterion(elementType' indexTypes' CSharpConversions.Get(compilation)' isWriteAccess); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,SupportsIndexingCriterionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterCanBeDemotedIssue\SupportsIndexingCriterionTests.cs,AssertDoesNotMatch,The length of the statement  "			var criterion = new SupportsIndexingCriterion(elementType' indexTypes' CSharpConversions.Get(compilation)' isWriteAccess); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,CS1729TypeHasNoConstructorWithNArgumentsIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS1729TypeHasNoConstructorWithNArgumentsIssueTests.cs,ShouldReturnIssuesForNestedTypes,The length of the statement  "			Assert.AreEqual("CS1729: The type 'B' does not contain a constructor that takes '0' arguments"' issues.ElementAt(1).Description); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,CS1729TypeHasNoConstructorWithNArgumentsIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS1729TypeHasNoConstructorWithNArgumentsIssueTests.cs,ShouldReturnIssuesForNestedTypes,The length of the statement  "			Assert.AreEqual("CS1729: The type 'D' does not contain a constructor that takes '0' arguments"' issues.ElementAt(0).Description); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,CS1729TypeHasNoConstructorWithNArgumentsIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS1729TypeHasNoConstructorWithNArgumentsIssueTests.cs,ShowIssueForObjectCreateExpression,The length of the statement  "			Assert.AreEqual("CS1729: The type 'Test' does not contain a constructor that takes '1' arguments"' issues.Single().Description); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,StringCompareIsCultureSpecificIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\StringCompareIsCultureSpecificIssueTests.cs,TestComplex,The length of the statement  "		Console.WriteLine (string.Compare (""Foo""' ""Bar""' b ? System.StringComparison.OrdinalIgnoreCase : System.StringComparison.Ordinal)); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,ParameterCanBeDeclaredWithBaseTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterCanBeDemotedIssue\ParameterCanBeDeclaredWithBaseTypeIssueTests.cs,TestMicrosoftSuppressMessage,The length of the statement  "	[System.Diagnostics.CodeAnalysis.SuppressMessage(""Microsoft.Design""' ""CA1011:ConsiderPassingBaseTypesAsParameters"")] " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestConstructorValidCase,The length of the statement  "	public A(BaseRefactoringContext context' Statement rootStatement' IEnumerable<ParameterDeclaration> parameters' CancellationToken cancellationToken) " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ConsistencyChecker,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ConsistencyChecker.cs,CheckPositionConsistency,The length of the statement  "				Assert.IsTrue(assertion' currentFileName + ": Child " + child.GetType () +" (" + child.StartLocation  + ")" +" must start after previous sibling " + prevNode.GetType () + "(" + prevNode.StartLocation + ")"); " is 207.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ConsistencyChecker,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ConsistencyChecker.cs,CheckWhitespace,The length of the statement  "			Assert.IsTrue(whitespaceEnd >= whitespaceStart' endNode.GetType().Name + ".StartLocation < " + startNode.GetType().Name + ".EndLocation: " + whitespaceEnd + " < " + whitespaceStart); " is 182.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ConsistencyChecker,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ConsistencyChecker.cs,CheckWhitespace,The length of the statement  "			Assert.IsTrue(assertion' "Expected whitespace between " + startNode.GetType () +":" + whitespaceStart + " and " + endNode.GetType () + ":" + whitespaceEnd " is 154.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ParseSelfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ParseSelfTests.cs,GenerateTypeSystem,The length of the statement  "				using (var fs = new FileStream(fileName' FileMode.Open' FileAccess.Read' FileShare.Read' 4096' FileOptions.SequentialScan)) { " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,TypeSystemConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeSystemConvertVisitorTests.cs,AssemblyAndModuleAttributesDoNotAppearOnTypes,The length of the statement  "			var cu = parser.Parse("[assembly: My1][module: My2][My3]class C {} public class My1Attribute : System.Attribute {} public class My2Attribute : System.Attribute {} public class My3Attribute : System.Attribute {}"' "File.cs"); " is 224.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ParseUtilCSharp,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ParseUtil.cs,ParseGlobal,The length of the statement  "			Assert.IsTrue(type.IsAssignableFrom(node.GetType())' String.Format("Parsed node was {0} instead of {1} ({2})"' node.GetType()' type' node)); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ParseUtilCSharp,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ParseUtil.cs,ParseStatement,The length of the statement  "			Assert.IsTrue(type.IsAssignableFrom(statement.GetType())' String.Format("Parsed statement was {0} instead of {1} ({2})"' statement.GetType()' type' statement)); " is 160.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ParseUtilCSharp,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ParseUtil.cs,ParseExpression,The length of the statement  "			Assert.IsTrue(type.IsAssignableFrom(parsedExpression.GetType())' String.Format("Parsed expression was {0} instead of {1} ({2})"' parsedExpression.GetType()' type' parsedExpression)); " is 182.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser,ParseUtilCSharp,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\ParseUtil.cs,ParseTypeMember,The length of the statement  "			Assert.IsTrue(type.IsAssignableFrom(m.GetType())' String.Format("Parsed member was {0} instead of {1} ({2})"' m.GetType()' type' m)); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,CommentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\CommentTests.cs,NoEmptyComments,The length of the statement  "			Assert.IsFalse(parser.HasErrors' string.Join(Environment.NewLine' parser.Errors.Select(e => string.Format("{0}: {1}"' e.Region.BeginLine' e.Message)))); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,NamespaceDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\NamespaceDeclarationTests.cs,ExternAliasTest,The length of the statement  "			string program = "extern alias X; extern alias Y; using X::System; namespace TestNamespace { extern alias Z; using Y::System; }"; " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,NewLinesAfterPreprocessorDirectives,The length of the statement  "			Assert.IsFalse(parser.HasErrors' string.Join(Environment.NewLine' parser.Errors.Select(e => string.Format("{0}: {1}"' e.Region.BeginLine' e.Message)))); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,NestedClassesTest,The length of the statement  "			TypeDeclaration td = ParseUtilCSharp.ParseGlobal<TypeDeclaration>("class MyClass { partial class P1 {} public partial class P2 {} static class P3 {} internal static class P4 {} }"); " is 181.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,ComplexGenericInterfaceTypeDeclarationTest,The length of the statement  "				"public interface Generic<in T' out S> : System.IComparable where S : G<T[]>' new() where  T : MyNamespace.IMyInterface {}"' " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingWithAliasing,The length of the statement  "			UsingAliasDeclaration uad = (UsingAliasDeclaration)syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(1); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,CheckedStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\CheckedStatementTests.cs,CheckedStatementAndExpressionTest,The length of the statement  "			CheckedStatement checkedStatement = ParseUtilCSharp.ParseStatement<CheckedStatement>("checked { checked(++i).ToString(); }"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,CheckedStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\CheckedStatementTests.cs,CheckedStatementAndExpressionTest,The length of the statement  "			CheckedExpression ce = (CheckedExpression)((MemberReferenceExpression)((InvocationExpression)es.Expression).Target).Target; " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,CheckedStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\CheckedStatementTests.cs,UncheckedStatementAndExpressionTest,The length of the statement  "			UncheckedStatement uncheckedStatement = ParseUtilCSharp.ParseStatement<UncheckedStatement>("unchecked { unchecked(++i).ToString(); }"); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,CheckedStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\CheckedStatementTests.cs,UncheckedStatementAndExpressionTest,The length of the statement  "			UncheckedExpression ce = (UncheckedExpression)((MemberReferenceExpression)((InvocationExpression)es.Expression).Target).Target; " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,IfElseStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\IfElseStatementTests.cs,IfElseIfStatementTest,The length of the statement  "			IfElseStatement ifElseStatement = ParseUtilCSharp.ParseStatement<IfElseStatement>("if (1) { } else if (2) { } else if (3) { } else { }"); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,SwitchStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\SwitchStatementTests.cs,SwitchStatementTest,The length of the statement  "			SwitchStatement switchStmt = ParseUtilCSharp.ParseStatement<SwitchStatement>("switch (a) { case 4: case 5: break; case 6: break; default: break; }"); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,ComplexGenericVariableDeclarationStatementTest,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("Generic<Namespace.Printable' G<Printable[]> > where = new Generic<Namespace.Printable' G<Printable[]>>();"); " is 205.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,ComplexGenericVariableDeclarationStatementTest,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(type' "where"' new ObjectCreateExpression { Type = type.Clone() }).IsMatch(lvd)); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NestedGenericVariableDeclarationStatementTest,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("MyType<string>.InnerClass<int>.InnerInnerClass a;"); " is 149.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,SimpleVariableDeclarationStatementTest,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("MyVar var = new MyVar();"); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,SimpleVariableDeclarationStatementTest,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("MyVar")' "var"' new ObjectCreateExpression { Type = new SimpleType("MyVar") }).IsMatch(lvd)); " is 156.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,SimpleVariableDeclarationStatementTest1,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("yield yield = new yield();"); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,SimpleVariableDeclarationStatementTest1,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("yield")' "yield"' new ObjectCreateExpression { Type = new SimpleType("yield") }).IsMatch(lvd)); " is 158.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NullableVariableDeclarationStatementTest3,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakeNullableType().MakeArrayType()' "a").IsMatch(lvd)); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NullableVariableDeclarationStatementTest4,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("SomeStruct<int?>? a;"); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithModifier,The length of the statement  "			VariableDeclarationStatement lvd = ParseUtilCSharp.ParseStatement<VariableDeclarationStatement>("\nconst double w = 7;"); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NestedArray,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakeArrayType(1).MakeArrayType(2)' "a").IsMatch(lvd)); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NestedPointers,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakePointerType().MakePointerType().MakePointerType()' "a").IsMatch(lvd)); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,ArrayOfPointers,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakePointerType().MakeArrayType()' "a").IsMatch(lvd)); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,ArrayOfNullables,The length of the statement  "			Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakeNullableType().MakeArrayType()' "a").IsMatch(lvd)); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Statements,InvalidStatementsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\InvalidStatementsTests.cs,AsExpressionStatementPositions,The length of the statement  "			ExpressionStatement expr = ParseUtilCSharp.ParseStatement<ExpressionStatement>("\t\t\"\" as IEnumerable<char>;"' false); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,IndexerDeclarationTest,The length of the statement  "			IndexerDeclaration id = ParseUtilCSharp.ParseTypeMember<IndexerDeclaration>("public int this[int a' string b] { get { } protected set { } }"); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,ThisTokenPosition,The length of the statement  "			IndexerDeclaration id = ParseUtilCSharp.ParseTypeMember<IndexerDeclaration>("public int this[int a] { get { } protected set { } }"); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,IndexerImplementingInterfaceTest,The length of the statement  "			IndexerDeclaration id = ParseUtilCSharp.ParseTypeMember<IndexerDeclaration>("int MyInterface.this[int a' string b] { get { } set { } }"); " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,ImplictOperatorDeclarationTest,The length of the statement  "			OperatorDeclaration od = ParseUtilCSharp.ParseTypeMember<OperatorDeclaration>("public static implicit operator double(MyObject f)  { return 0.5d; }"); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,ExplicitOperatorDeclarationTest,The length of the statement  "			OperatorDeclaration od = ParseUtilCSharp.ParseTypeMember<OperatorDeclaration>("public static explicit operator double(MyObject f)  { return 0.5d; }"); " is 150.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,BinaryPlusOperatorDeclarationTest,The length of the statement  "			OperatorDeclaration od = ParseUtilCSharp.ParseTypeMember<OperatorDeclaration>("public static MyObject operator +(MyObject a' MyObject b)  {}"); " is 143.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,UnaryPlusOperatorDeclarationTest,The length of the statement  "			OperatorDeclaration od = ParseUtilCSharp.ParseTypeMember<OperatorDeclaration>("public static MyObject operator +(MyObject a)  {}"); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,InvalidOperatorTrueDeclaration,The length of the statement  "			ParseUtilCSharp.ParseTypeMember<OperatorDeclaration>("public static implicit operator true(MyBool b) {}"' expectErrors: true); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,GetSetPropertyDeclarationWithAccessorModifiers,The length of the statement  "			PropertyDeclaration pd = ParseUtilCSharp.ParseTypeMember<PropertyDeclaration>("int MyProperty { private get {} protected internal set {} } "); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The length of the statement  "			PropertyDeclaration pd = (PropertyDeclaration)syntaxTree.Children.Single(c => c.Role != Roles.NewLine).GetChildByRole(Roles.TypeMemberRole); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The length of the statement  "			Assert.AreEqual(new TextLocation(2' code.IndexOf("{\n\t\tget") - line2Pos + 1)' pd.GetChildByRole(Roles.LBrace).StartLocation); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyImplementingInterfaceTest,The length of the statement  "			PropertyDeclaration pd = ParseUtilCSharp.ParseTypeMember<PropertyDeclaration>("int MyInterface.MyProperty { get {} } "); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyImplementingGenericInterfaceTest,The length of the statement  "			PropertyDeclaration pd = ParseUtilCSharp.ParseTypeMember<PropertyDeclaration>("int MyInterface<string>.MyProperty { get {} } "); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyImplementingGenericInterfaceTest,The length of the statement  "			Assert.IsTrue(new SimpleType { Identifier = "MyInterface"' TypeArguments = { new PrimitiveType("string") } }.IsMatch(pd.PrivateImplementationType)); " is 148.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,CreateBuilder,The length of the statement  "			UsingScope usingScope = currentTypeDef != null ? unresolvedFile.GetUsingScope(currentTypeDef.Region.Begin) : unresolvedFile.RootUsingScope; " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,NonGenericIEnumerableWithSystemNamespaceCollision,The length of the statement  "			Assert.AreEqual("global::System.Collections.IEnumerable"' TypeToString(compilation.FindType(typeof(IEnumerable))' systemClass)); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,AliasedType,The length of the statement  "			var type = new ParameterizedType(compilation.FindType(typeof(List<>)).GetDefinition()' new[] { compilation.FindType(KnownTypeCode.Char) }); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,AliasedTypeWrongTypeArgument,The length of the statement  "			var type = new ParameterizedType(compilation.FindType(typeof(List<>)).GetDefinition()' new[] { compilation.FindType(KnownTypeCode.Int32) }); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,UnboundTypeConvertUnboundTypeArgumentsOption,The length of the statement  "			Assert.AreEqual("Base<T>.Nested<X>"' TypeToString(nestedClass' null' builder => builder.ConvertUnboundTypeArguments = true)); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,NestedType,The length of the statement  "			var type = new ParameterizedType(nestedClass' new[] { compilation.FindType(KnownTypeCode.Char)' compilation.FindType(KnownTypeCode.String) }); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,NestedTypeInCurrentClass,The length of the statement  "			var type = new ParameterizedType(nestedClass' new[] { baseClass.TypeParameters[0]' compilation.FindType(KnownTypeCode.String) }); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,NestedTypeInDerivedClass,The length of the statement  "			var type1 = new ParameterizedType(nestedClass' new[] { derivedClass.TypeParameters[0]' compilation.FindType(KnownTypeCode.String) }); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,NestedTypeInDerivedClass,The length of the statement  "			var type2 = new ParameterizedType(nestedClass' new[] { derivedClass.TypeParameters[1]' compilation.FindType(KnownTypeCode.String) }); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,GenericClass,The length of the statement  "			var type = new ParameterizedType(nestedClass' new[] { baseClass.TypeParameters[0]' compilation.FindType(KnownTypeCode.String) }); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,AmbiguousType,The length of the statement  "			Assert.AreEqual("OtherNS.Array"' TypeToString(compilation.MainAssembly.GetTypeDefinition(new TopLevelTypeName("OtherNS"' "Array")))); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Refactoring,NamingHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\NamingHelperTests.cs,GenerateVariableNameForCustomType,The length of the statement  "						var name = new NamingHelper(context).GenerateVariableName(new SimpleType() { Identifier = "VariableNameGenerationTester" }); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,AnonymousTypeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\AnonymousTypeTests.cs,NestingAnonymousTypesShouldWork,The length of the statement  "			Assert.That(result.Type.GetProperties().Single(p => p.Name == "c").ReturnType.GetProperties().Select(p => p.Name)' Is.EquivalentTo(new[] { "d"' "e"' "f" })); " is 157.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumSubtraction,The length of the statement  "				BinaryOperatorType.Subtract' MakeConstant(StringComparison.OrdinalIgnoreCase)' MakeConstant(StringComparison.InvariantCulture))); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,PointerSubtraction,The length of the statement  "			AssertError(typeof(long)' resolver.ResolveBinaryOperator(BinaryOperatorType.Subtract' MakeResult(typeof(byte*))' MakeResult(typeof(int*)))); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,RelationalEnum,The length of the statement  "				BinaryOperatorType.GreaterThan' MakeConstant(StringComparison.CurrentCultureIgnoreCase)' MakeConstant(StringComparison.Ordinal))); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,NullableBitwiseEnum,The length of the statement  "			TestOperator(MakeResult(typeof(StringComparison?))' BinaryOperatorType.BitwiseAnd' MakeResult(typeof(StringComparison?))' " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,NullableBitwiseEnum,The length of the statement  "			TestOperator(MakeResult(typeof(StringComparison))' BinaryOperatorType.BitwiseAnd' MakeResult(typeof(StringComparison?))' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,NullableBitwiseEnum,The length of the statement  "			TestOperator(MakeResult(typeof(StringComparison?))' BinaryOperatorType.BitwiseAnd' MakeResult(typeof(StringComparison))' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,OverflowingCast,The length of the statement  "			AssertConstant(uint.MaxValue' resolver.WithCheckForOverflow(false).ResolveCast(ResolveType(typeof(uint))' MakeConstant(-1.6))); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,OverflowingCast,The length of the statement  "			AssertError(typeof(uint)' resolver.WithCheckForOverflow(true).ResolveCast(ResolveType(typeof(uint))' MakeConstant(-1.6))); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,OverflowingCastToEnum,The length of the statement  "			AssertError(typeof(StringComparison)' resolver.WithCheckForOverflow(true).ResolveCast(ResolveType(typeof(StringComparison))' MakeConstant(long.MaxValue))); " is 155.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,DynamicInvocation,The length of the statement  "			Assert.That(dynamicMember.Target is LocalResolveResult && ((LocalResolveResult)dynamicMember.Target).Variable.Name == "obj"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,DynamicInvocationWithNamedArguments,The length of the statement  "			Assert.That(dynamicMember.Target is LocalResolveResult && ((LocalResolveResult)dynamicMember.Target).Variable.Name == "obj"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,TwoDynamicInvocationsInARow,The length of the statement  "			Assert.That(dynamicMember.Target is LocalResolveResult && ((LocalResolveResult)dynamicMember.Target).Variable.Name == "obj"); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,TwoDynamicInvocationsInARow,The length of the statement  "			Assert.That(innerInvocation.Arguments[0] is LocalResolveResult && ((LocalResolveResult)innerInvocation.Arguments[0]).Variable.Name == "a"); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InvocationWithDynamicArgumentWhenBothAnOwnAndABaseMethodAreApplicable,The length of the statement  "			Assert.That(mg.Methods.Any(m => m.Parameters.Count == 1 && m.DeclaringType.Name == "TestBase" && m.Name == "SomeMethod" && m.Parameters[0].Type.Name == "Int32")); " is 162.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InvocationWithDynamicArgumentWhenBothAnOwnAndABaseMethodAreApplicable,The length of the statement  "			Assert.That(mg.Methods.Any(m => m.Parameters.Count == 1 && m.DeclaringType.Name == "TestClass" && m.Name == "SomeMethod" && m.Parameters[0].Type.Name == "String")); " is 164.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ConversionFromDynamic,The length of the statement  "			Assert.AreEqual(C.ExplicitDynamicConversion' conversions.ExplicitConversion(dynamicRR' compilation.FindType(typeof(string)))); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ConversionFromDynamic,The length of the statement  "			Assert.AreEqual(C.ExplicitDynamicConversion' conversions.ExplicitConversion(dynamicRR' compilation.FindType(typeof(int)))); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,EnumerationConversions,The length of the statement  "			Assert.AreEqual(explicitEnumerationConversion' ExplicitConversion(typeof(StringComparison)' typeof(StringSplitOptions))); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,NullableConversion_BasedOnIdentityConversion,The length of the statement  "			Assert.AreEqual(C.IdentityConversion' ExplicitConversion(typeof(ArraySegment<dynamic>?)' typeof(ArraySegment<object>?))); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,NullableConversion_BasedOnIdentityConversion,The length of the statement  "			Assert.AreEqual(C.ImplicitNullableConversion' ExplicitConversion(typeof(ArraySegment<dynamic>)' typeof(ArraySegment<object>?))); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,NullableConversion_BasedOnIdentityConversion,The length of the statement  "			Assert.AreEqual(C.ExplicitNullableConversion' ExplicitConversion(typeof(ArraySegment<dynamic>?)' typeof(ArraySegment<object>))); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,NullableConversion_BasedOnImplicitEnumerationConversion,The length of the statement  "			Assert.AreEqual(C.EnumerationConversion(true' true)' conversions.ExplicitConversion(zero' compilation.FindType(typeof(StringComparison?)))); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,NullableConversion_BasedOnImplicitEnumerationConversion,The length of the statement  "			Assert.AreEqual(C.EnumerationConversion(false' true)' conversions.ExplicitConversion(one' compilation.FindType(typeof(StringComparison?)))); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_Interfaces,The length of the statement  "			Assert.AreEqual(C.ImplicitReferenceConversion' ExplicitConversion(typeof(IEnumerable<string>)' typeof(IEnumerable<object>))); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_Interfaces,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(IEnumerable<int>)' typeof(IEnumerable<object>))); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_Interfaces,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(IEnumerable<object>)' typeof(IEnumerable<string>))); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_Interfaces,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(IEnumerable<object>)' typeof(IEnumerable<int>))); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_GenericDelegates,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(Action<IFormattable>)' typeof(Action<IConvertible>))); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_GenericDelegates,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(Action<string>)' typeof(Action<IEnumerable<int>>))); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExplicitConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExplicitConversionsTest.cs,ExplicitReferenceConversion_GenericDelegates,The length of the statement  "			Assert.AreEqual(C.ExplicitReferenceConversion' ExplicitConversion(typeof(Func<IFormattable>)' typeof(Func<IConvertible>))); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ExtensionMethodTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ExtensionMethodTests.cs,ExtensionMethodsTest2,The length of the statement  "	public static IEnumerable<T> Filter<T>(this IEnumerable<T> source' Predicate<T> predicate) { throw new NotImplementedException(); } " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindParameterReferences,The length of the statement  "			Assert.AreEqual(new int[] { 3' 4' 9 }' FindReferences(method.Parameters[0]).Select(n => n.StartLocation.Line).ToArray()); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,InvocationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\InvocationTests.cs,OverloadResolutionBetweenArrayTypes,The length of the statement  "			Assert.That(rr.Member.Parameters[0].Type.Kind == TypeKind.Array && ((ArrayType)rr.Member.Parameters[0].Type).ElementType.Name == "String"); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,LambdaTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LambdaTests.cs,AnonymousMethodInNewEventHandler,The length of the statement  "	object x = new EventHandler<AssemblyLoadEventArgs>($delegate (object sender' AssemblyLoadEventArgs e) { switch (e.Action) {} }$); " is 129.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,GroupJoinWithCustomMethod,The length of the statement  "	public XYZ GroupJoin<T' R>(IEnumerable<T> f' Func<string' object> key1' Func<T' object> key2' Func<string' decimal' R> s) { return this; } " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,GroupJoinWithOverloadedCustomMethod,The length of the statement  "	public int GroupJoin(IEnumerable<string> f' Func<string' object> key1' Func<string' object> key2' Func<string' int' int> s) { return 0; } " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,GroupJoinWithOverloadedCustomMethod,The length of the statement  "	public decimal GroupJoin(IEnumerable<string> f' Func<string' object> key1' Func<string' object> key2' Func<string' string' string> s) { return 0; } " is 147.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,GroupMethodsByDeclaringType,The length of the statement  "			var rr = lookup.Lookup(new ResolveResult(derived)' "Method"' EmptyList<IType>.Instance' true) as MethodGroupResolveResult; " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,MethodInGenericClassOverriddenByConcreteMethod,The length of the statement  "			var rr = lookup.Lookup(new ResolveResult(derived)' "Method"' EmptyList<IType>.Instance' true) as MethodGroupResolveResult; " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,GenericMethod,The length of the statement  "			var rr = lookup.Lookup(new ResolveResult(derived)' "Method"' EmptyList<IType>.Instance' true) as MethodGroupResolveResult; " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,MethodTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MethodTests.cs,ParameterIdentityInEventRemover,The length of the statement  "			var assignExpr = (AssignmentExpression)ed.RemoveAccessor.Body.Children.OfType<ExpressionStatement>().Single().Expression; " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,MakeUsingScope,The length of the statement  "					usingScope = new UsingScope(usingScope' string.IsNullOrEmpty(usingScope.NamespaceName) ? element : usingScope.NamespaceName + "." + element); " is 141.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,AliasToImportedType,The length of the statement  "			var resolverWithUsing = resolver.WithCurrentUsingScope(MakeUsingScope(usings: new [] { "System" }' usingAliases: new [] { new KeyValuePair<string' string>( "x"' "String" )})); " is 175.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,AliasToImportedType,The length of the statement  "			UnknownIdentifierResolveResult rr = (UnknownIdentifierResolveResult)resolverWithUsing.ResolveSimpleName("x"' new IType[0]); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,AliasOperatorOnTypeAlias,The length of the statement  "			var resolverWithUsing = resolver.WithCurrentUsingScope(MakeUsingScope(usingAliases: new [] { new KeyValuePair<string' string>( "x"' "System.String" )})); " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,NameLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\NameLookupTests.cs,AliasOperatorOnNamespaceAlias,The length of the statement  "			var resolverWithUsing = resolver.WithCurrentUsingScope(MakeUsingScope(usingAliases: new [] { new KeyValuePair<string' string>( "x"' "System.Collections.Generic" )})); " is 166.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ResolveAtLocationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolveAtLocationTests.cs,CatchClauseVariable,The length of the statement  "			var rr = ResolveAtLocation<LocalResolveResult>("using System; public class A { void M() { try { } catch (Exception e$x) { } } }"); " is 130.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,EnumerableToArrayInContravariantType,The length of the statement  "			var comparerOfIEnumerableOfString = new ParameterizedType(comparerType' new [] { new ParameterizedType(enumerableType' new [] { stringType } ) }); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,InferFromMethodReturnType,The length of the statement  "			var argument = new MethodGroupResolveResult(new TypeResolveResult(declType)' "ReadKey"' new[] { methods }' new IType[0]); " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,TestLambdaInference,The length of the statement  "				new ParameterizedType(compilation.FindType(typeof(Func<'>)).GetDefinition()' new[] { typeParameters[0]' typeParameters[1] })' " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,TestLambdaInference,The length of the statement  "				new ParameterizedType(compilation.FindType(typeof(Func<'>)).GetDefinition()' new[] { typeParameters[1]' typeParameters[2] }) " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,TestLambdaInference,The length of the statement  "				new MockImplicitLambda(new[] { compilation.FindType(KnownTypeCode.String) }' compilation.FindType(KnownTypeCode.Int32))' " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,CommonSubTypeIEnumerableClonableIEnumerableComparableList,The length of the statement  "				FindAllTypesInBounds(Resolve()' Resolve(typeof(IEnumerable<ICloneable>)' typeof(IEnumerable<IComparable>)' typeof(IList)))); " is 124.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,GenericArgumentImplicitlyConvertibleToAndFromAnotherTypeList,The length of the statement  "			Assert.That(((SpecializedMethod)rr.Member).TypeArguments.Select(ta => ta.FullName)' Is.EqualTo(new[] { "MyConvertible" })); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,IdentityConversions,The length of the statement  "			Assert.AreEqual(C.IdentityConversion' conversions.ImplicitConversion(SpecialType.UnknownType' SpecialType.UnknownType)); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ComplexDynamicIdentityConversions,The length of the statement  "			Assert.AreEqual(C.None'               ImplicitConversion(typeof(List<List<object>[']>)' typeof(List<List<dynamic>[]>))); " is 120.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,EnumerationConversion,The length of the statement  "			Assert.AreEqual(implicitEnumerationConversion' conversions.ImplicitConversion(zero' compilation.FindType(typeof(StringComparison)))); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ConversionFromDynamic,The length of the statement  "			Assert.AreEqual(C.ImplicitDynamicConversion' conversions.ImplicitConversion(dynamicRR' compilation.FindType(typeof(string)))); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ConversionFromDynamic,The length of the statement  "			Assert.AreEqual(C.ImplicitDynamicConversion' conversions.ImplicitConversion(dynamicRR' compilation.FindType(typeof(int)))); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,TypeParameterWithReferenceTypeConstraint,The length of the statement  "			ITypeParameter t = new DefaultTypeParameter(compilation' SymbolKind.TypeDefinition' 0' "T"' hasReferenceTypeConstraint: true); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,TypeParameterWithReferenceTypeConstraint,The length of the statement  "			Assert.AreEqual(C.ImplicitReferenceConversion' conversions.ImplicitConversion(t' compilation.FindType(KnownTypeCode.Object))); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,TypeParameterWithValueTypeConstraint,The length of the statement  "			ITypeParameter t = new DefaultTypeParameter(compilation' SymbolKind.TypeDefinition' 0' "T"' hasValueTypeConstraint: true); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ExpansiveInheritance,The length of the statement  "			a.TypeParameters.Add(new DefaultUnresolvedTypeParameter(SymbolKind.TypeDefinition' 0' "U") { Variance = VarianceModifier.Contravariant }); " is 138.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ExpansiveInheritance,The length of the statement  "			IType type2 = new ParameterizedType(resolvedA' new [] { new ParameterizedType(resolvedB' new[] { compilation.FindType(KnownTypeCode.String) }) }); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,SkeetEvilOverloadResolution,The length of the statement  "			classConstraint.TypeParameters.Add(new DefaultUnresolvedTypeParameter(SymbolKind.TypeDefinition' 0' "T") { HasReferenceTypeConstraint = true }); " is 144.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,SkeetEvilOverloadResolution,The length of the statement  "			m2.TypeParameters.Add(new DefaultUnresolvedTypeParameter(SymbolKind.Method' 0' "T") { HasReferenceTypeConstraint = true }); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,SkeetEvilOverloadResolution,The length of the statement  "			o = new OverloadResolution(compilation' new ResolveResult[0]' typeArguments: new[] { compilation.FindType(typeof(int)) }); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,SkeetEvilOverloadResolution,The length of the statement  "			o = new OverloadResolution(compilation' new ResolveResult[0]' typeArguments: new[] { compilation.FindType(typeof(string)) }); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,SkeetEvilOverloadResolution,The length of the statement  "			o = new OverloadResolution(compilation' new ResolveResult[0]' typeArguments: new[] { compilation.FindType(typeof(int?)) }); " is 123.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ResolverTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolverTestBase.cs,MakeReference,The length of the statement  "			TypeOrNamespaceReference r = new SimpleTypeOrNamespaceReference(nameParts[0]' new ITypeReference[0]' NameLookupMode.TypeInUsingDeclaration); " is 140.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,ResolverTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolverTestBase.cs,AssertConstant,The length of the statement  "				Assert.AreEqual(Enum.GetUnderlyingType(expectedType)' rr.ConstantValue.GetType()' "ResolveResult.ConstantValue has wrong Type"); " is 128.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinusCheckedOverflow,The length of the statement  "			AssertError(typeof(int)' resolver.WithCheckForOverflow(true).ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(-2147483648))); " is 135.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestBitwiseNotOnEnum,The length of the statement  "			AssertConstant(~StringComparison.Ordinal' resolver.ResolveUnaryOperator(UnaryOperatorType.BitNot' MakeConstant(StringComparison.Ordinal))); " is 139.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestBitwiseNotOnEnum,The length of the statement  "			AssertConstant(~StringComparison.CurrentCultureIgnoreCase' resolver.ResolveUnaryOperator(UnaryOperatorType.BitNot' MakeConstant(StringComparison.CurrentCultureIgnoreCase))); " is 173.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestBitwiseNotOnEnum,The length of the statement  "			AssertType(typeof(StringComparison)' resolver.ResolveUnaryOperator(UnaryOperatorType.BitNot' MakeResult(typeof(StringComparison)))); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestBitwiseNotOnEnum,The length of the statement  "			AssertType(typeof(StringComparison?)' resolver.ResolveUnaryOperator(UnaryOperatorType.BitNot' MakeResult(typeof(StringComparison?)))); " is 134.
Long Statement,ICSharpCode.NRefactory.Documentation,CSharpDocumentationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpDocumentationTests.cs,TypeDocumentationLookup2,The length of the statement  "			Assert.AreEqual("<summary>" + Environment.NewLine + "Documentation" + Environment.NewLine + "</summary>"' typeDefinition.Documentation.ToString()); " is 147.
Long Statement,ICSharpCode.NRefactory.Documentation,CSharpDocumentationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpDocumentationTests.cs,TypeDocumentationLookupWithIndentation,The length of the statement  "			Assert.AreEqual("<summary>" + Environment.NewLine + "  Documentation" + Environment.NewLine + "</summary>"' typeDefinition.Documentation.ToString()); " is 149.
Long Statement,ICSharpCode.NRefactory.Documentation,CSharpDocumentationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpDocumentationTests.cs,MultilineDocumentation2,The length of the statement  "			Assert.AreEqual("<summary>" + Environment.NewLine + "  Documentation" + Environment.NewLine + "</summary>"' typeDefinition.Documentation.ToString()); " is 149.
Long Statement,ICSharpCode.NRefactory.Documentation,CSharpDocumentationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpDocumentationTests.cs,MultilineDocumentationCommonPattern,The length of the statement  "			Assert.AreEqual("<summary>" + Environment.NewLine + "  Documentation" + Environment.NewLine + "</summary>"' typeDefinition.Documentation.ToString()); " is 149.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,TypeDefinitions,The length of the statement  "			Assert.AreEqual("T:Acme.Widget.NestedClass"' widget.NestedTypes.Single(t => t.Name == "NestedClass").Documentation.ToString()); " is 127.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,TypeDefinitions,The length of the statement  "			Assert.AreEqual("T:Acme.Widget.IMenuItem"' widget.NestedTypes.Single(t => t.Name == "IMenuItem").Documentation.ToString()); " is 123.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,TypeDefinitions,The length of the statement  "			Assert.AreEqual("T:Acme.Widget.Direction"' widget.NestedTypes.Single(t => t.Name == "Direction").Documentation.ToString()); " is 123.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,TypeDefinitions,The length of the statement  "			Assert.AreEqual("T:Acme.MyList`1.Helper`2"' GetTypeDefinition("Acme"' "MyList"' 1).NestedTypes.Single().Documentation.ToString()); " is 130.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Fields,The length of the statement  "			Assert.AreEqual("F:Acme.Widget.NestedClass.value"' widget.NestedTypes.Single().Fields.Single().Documentation.ToString()); " is 121.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Constructors,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.#ctor"' widget.Methods.Single(m => !m.IsStatic && m.Parameters.Count == 0).Documentation.ToString()); " is 132.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Constructors,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.#ctor(System.String)"' widget.Methods.Single(m => m.Parameters.Count == 1).Documentation.ToString()); " is 132.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Destructor,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.Finalize"' widget.Methods.Single(m => m.SymbolKind == SymbolKind.Destructor).Documentation.ToString()); " is 134.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Methods,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.NestedClass.M(System.Int32)"' widget.NestedTypes.Single().Methods.Single(m => m.SymbolKind == SymbolKind.Method).Documentation.ToString()); " is 170.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,NestedGenerics,The length of the statement  "			Assert.AreEqual("M:A`1.B`1.M(A{`1}.B{`0})"' b.Methods.Single(m => m.SymbolKind == SymbolKind.Method).Documentation.ToString()); " is 127.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Properties,The length of the statement  "			Assert.AreEqual("P:Acme.Widget.Width"' widget.Properties.Single(p => p.Parameters.Count == 0).Documentation.ToString()); " is 120.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,UnaryOperator,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.op_UnaryPlus(Acme.Widget)"' widget.Methods.Single(m => m.SymbolKind == SymbolKind.Operator).Documentation.ToString()); " is 149.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,BinaryOperator,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.op_Addition(Acme.Widget'Acme.Widget)"' widget.Methods.Single(m => m.SymbolKind == SymbolKind.Operator).Documentation.ToString()); " is 160.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,ConversionOperator,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.op_Explicit(Acme.Widget)~System.Int32"' widget.Methods.First(m => m.SymbolKind == SymbolKind.Operator).Documentation.ToString()); " is 160.
Long Statement,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,ConversionOperator,The length of the statement  "			Assert.AreEqual("M:Acme.Widget.op_Implicit(Acme.Widget)~System.Int64"' widget.Methods.Last(m => m.SymbolKind == SymbolKind.Operator).Documentation.ToString()); " is 159.
Long Statement,ICSharpCode.NRefactory.CSharp.FormattingTests,TestTypeLevelIndentation,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestTypeLevelIndentation.cs,TestBug9990,The length of the statement  "		public event EventHandler UpdateStarted = delegate { }; public event EventHandler<UpdateFinishedEventArgs> UpdateFinished = delegate { }; " is 137.
Long Statement,ICSharpCode.NRefactory.CSharp.FormattingTests,ConstructFixerTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\ConstructFixerTests.cs,Test,The length of the statement  "				expectedOutput = expectedOutput.Substring(0' expectedCaretPosition) + expectedOutput.Substring(expectedCaretPosition + 1); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,BinaryLoaderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\BinaryLoaderTests.cs,Void_StructLayoutAttribute,The length of the statement  "			var attr = c.Attributes.Single(a => a.AttributeType.FullName == "System.Runtime.InteropServices.StructLayoutAttribute"); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,BinaryLoaderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\BinaryLoaderTests.cs,NestedClassInGenericClassTest,The length of the statement  "			var dictionaryRT = new ParameterizedType(dictionary' new[] { compilation.FindType(typeof(string)).GetDefinition()' compilation.FindType(typeof(int)).GetDefinition() }); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,BinaryLoaderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\BinaryLoaderTests.cs,NestedClassInGenericClassTest,The length of the statement  "			Assert.AreEqual("System.Collections.Generic.Dictionary`2+ValueCollection[[System.String]'[System.Int32]]"' parameterizedValueCollection.ReflectionName); " is 152.
Long Statement,ICSharpCode.NRefactory.TypeSystem,GetAllBaseTypesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\GetAllBaseTypesTest.cs,SetUp,The length of the statement  "			compilation = new CSharpProjectContent().SetAssemblyName("mscorlib").AddOrUpdateFiles(unresolvedFile).CreateCompilation(); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,GetAllBaseTypesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\GetAllBaseTypesTest.cs,ClassDerivingFromParameterizedVersionOfItself,The length of the statement  "			c.BaseTypes.Add(new ParameterizedTypeReference(c' new [] { new ParameterizedTypeReference(c' new [] { new TypeParameterReference(SymbolKind.TypeDefinition' 0) }) })); " is 166.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\InheritanceHelperTests.cs,DynamicAndObjectShouldBeConsideredTheSameTypeWhenMatchingSignatures,The length of the statement  "			var compilation = new CSharpProjectContent().AddAssemblyReferences(CecilLoaderTests.Mscorlib).AddOrUpdateFiles(unresolvedFile).CreateCompilation(); " is 147.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\InheritanceHelperTests.cs,DynamicAndObjectShouldBeConsideredTheSameTypeWhenMatchingSignatures,The length of the statement  "				Assert.That(InheritanceHelper.GetBaseMember(dtype.Methods.Single(m => m.Name == name))' Is.EqualTo(btype.Methods.Single(m => m.Name == name))' name + " does not match"); " is 169.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\InheritanceHelperTests.cs,DynamicAndObjectShouldBeConsideredTheSameTypeWhenMatchingSignatures,The length of the statement  "				Assert.That(InheritanceHelper.GetDerivedMember(btype.Methods.Single(m => m.Name == name)' dtype)' Is.EqualTo(dtype.Methods.Single(m => m.Name == name))' name + " does not match"); " is 179.
Long Statement,ICSharpCode.NRefactory.TypeSystem,InheritanceHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\InheritanceHelperTests.cs,PrivateMemberDoesNotDisruptSearchForBaseMember,The length of the statement  "			var compilation = new CSharpProjectContent().AddAssemblyReferences(CecilLoaderTests.Mscorlib).AddOrUpdateFiles(unresolvedFile).CreateCompilation(); " is 147.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,TestToTypeReferenceGenericType,The length of the statement  "			ITypeReference parameterType = convertAllInfo.GetParameters()[0].ParameterType.ToTypeReference(); // Converter[[`0]'[``0]] " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,TestToTypeReferenceGenericType,The length of the statement  "			Assert.AreSame(convertAll.DeclaringTypeDefinition' ((ITypeParameter)((ParameterizedType)resolvedWithEntity).GetTypeArgument(0)).Owner); " is 135.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Int32&"' ReflectionHelper.ParseReflectionName("System.Int32&").Resolve(context).ReflectionName); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Int32*&"' ReflectionHelper.ParseReflectionName("System.Int32*&").Resolve(context).ReflectionName); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Int32"' ReflectionHelper.ParseReflectionName(typeof(int).AssemblyQualifiedName).Resolve(context).ReflectionName); " is 137.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Action`1[[System.String]]"' ReflectionHelper.ParseReflectionName("System.Action`1[[System.String]]").Resolve(context).ReflectionName); " is 158.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Action`1[[System.String]]"' ReflectionHelper.ParseReflectionName("System.Action`1[[System.String' mscorlib]]").Resolve(context).ReflectionName); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Int32[''][']"' ReflectionHelper.ParseReflectionName(typeof(int[']['']).AssemblyQualifiedName).Resolve(context).ReflectionName); " is 151.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseReflectionName,The length of the statement  "			Assert.AreEqual("System.Environment+SpecialFolder"' ReflectionHelper.ParseReflectionName("System.Environment+SpecialFolder").Resolve(context).ReflectionName); " is 158.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseOpenGenericReflectionName,The length of the statement  "			Assert.AreEqual("System.Converter`2[[`0]'[``0]]"' typeRef.Resolve(new SimpleTypeResolveContext(compilation.MainAssembly)).ReflectionName); " is 138.
Long Statement,ICSharpCode.NRefactory.TypeSystem,ReflectionHelperTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\ReflectionHelperTests.cs,ParseOpenGenericReflectionName,The length of the statement  "			Assert.AreEqual("System.Converter`2[[`0]'[``0]]"' typeRef.Resolve(new SimpleTypeResolveContext(convertAll)).ReflectionName); " is 124.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeParameterTests.cs,TypeParameterDerivingFromOtherTypeParameterDoesNotInheritReferenceConstraint,The length of the statement  "			c.TypeParameters.Add(new DefaultUnresolvedTypeParameter(SymbolKind.TypeDefinition' 0' "T") { HasReferenceTypeConstraint = true }); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeParameterTests.cs,ValueTypeParameterDerivingFromReferenceTypeParameter,The length of the statement  "			c.TypeParameters.Add(new DefaultUnresolvedTypeParameter(SymbolKind.TypeDefinition' 0' "T") { HasReferenceTypeConstraint = true }); " is 130.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeParameterTests.cs,TypeParameterDerivingFromOtherTypeParameterInheritsEffectiveBaseClass,The length of the statement  "			Assert.AreEqual("System.Collections.Generic.List`1[[System.String]]"' resolvedC.TypeParameters[0].EffectiveBaseClass.ReflectionName); " is 133.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeParameterTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeParameterTests.cs,TypeParameterDerivingFromOtherTypeParameterInheritsEffectiveBaseClass,The length of the statement  "			Assert.AreEqual("System.Collections.Generic.List`1[[System.String]]"' resolvedC.TypeParameters[1].EffectiveBaseClass.ReflectionName); " is 133.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,DynamicTypeInGenerics,The length of the statement  "			Assert.AreEqual("System.Action`3[[System.Int32[][']]'[dynamic]'[System.Object]]"' m7.Parameters[0].Type.ReflectionName); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,FieldOffsetAttribute,The length of the statement  "			Assert.AreEqual("System.Runtime.InteropServices.FieldOffsetAttribute"' field.Attributes.Single().AttributeType.FullName); " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,FieldOffsetAttribute,The length of the statement  "			Assert.AreEqual("System.Runtime.InteropServices.FieldOffsetAttribute"' field.Attributes.Single().AttributeType.FullName); " is 121.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,InOutParametersOnRefMethod,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(NonCustomAttributes)).Methods.Single(m => m.Name == "DllMethod").Parameters.Single(); " is 125.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOutParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithOutParameter").Parameters.Single(); " is 133.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithParamsArray,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithParamsArray").Parameters.Single(); " is 132.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOptionalParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithOptionalParameter").Parameters.Single(); " is 138.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithExplicitOptionalParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithExplicitOptionalParameter").Parameters.Single(); " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithEnumOptionalParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithEnumOptionalParameter").Parameters.Single(); " is 142.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOptionalNullableParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithOptionalNullableParameter").Parameters.Single(); " is 146.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOptionalLongParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithOptionalLongParameter").Parameters.Single(); " is 142.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOptionalNullableLongParameter,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "MethodWithOptionalNullableLongParameter").Parameters.Single(); " is 150.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,VarArgsMethod,The length of the statement  "			IParameter p = GetTypeDefinition(typeof(ParameterTests)).Methods.Single(m => m.Name == "VarArgsMethod").Parameters.Single(); " is 124.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,InnerClassInGenericClassIsReferencedUsingParameterizedType,The length of the statement  "			Assert.AreEqual("ICSharpCode.NRefactory.TypeSystem.TestCase.OuterGeneric`1+Inner[[ICSharpCode.NRefactory.TypeSystem.TestCase.OuterGeneric`1+Inner[[`0]]]]"' field3.Type.ReflectionName); " is 184.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,PropertyAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(prop.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.Prop" })); " is 181.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,PropertyAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(prop.Getter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.get_Prop" })); " is 192.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,PropertyAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(prop.Setter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.set_Prop" })); " is 192.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			var ix1 = type.Properties.Single(p => p.Parameters.Count == 1 && p.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.Int32); " is 140.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			var ix2 = type.Properties.Single(p => p.Parameters.Count == 1 && p.Parameters[0].Type.GetDefinition().KnownTypeCode == KnownTypeCode.String); " is 141.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EquivalentTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.Item"' "ICSharpCode.NRefactory.TypeSystem.TestCase.IGenericInterfaceWithIndexer`1.Item" })); " is 267.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.ImplementedInterfaceMembers.All(p => ((IProperty)p).Parameters.Select(x => x.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32 }))); " is 176.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.Getter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EquivalentTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.get_Item"' "ICSharpCode.NRefactory.TypeSystem.TestCase.IGenericInterfaceWithIndexer`1.get_Item" })); " is 282.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.Getter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32 }))); " is 181.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.Setter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EquivalentTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.set_Item"' "ICSharpCode.NRefactory.TypeSystem.TestCase.IGenericInterfaceWithIndexer`1.set_Item" })); " is 282.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix1.Setter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32' KnownTypeCode.Int32 }))); " is 202.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.Item" })); " is 180.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.ImplementedInterfaceMembers.All(p => ((IProperty)p).Parameters.Select(x => x.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.String }))); " is 177.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.Getter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.get_Item" })); " is 191.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.Getter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.String }))); " is 182.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.Setter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.set_Item" })); " is 191.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix2.Setter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.String' KnownTypeCode.Int32 }))); " is 203.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.Item" })); " is 180.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.ImplementedInterfaceMembers.All(p => ((IProperty)p).Parameters.Select(x => x.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32' KnownTypeCode.Int32 }))); " is 197.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.Getter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.get_Item" })); " is 191.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.Getter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32' KnownTypeCode.Int32 }))); " is 202.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.Setter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithIndexers.set_Item" })); " is 191.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The length of the statement  "			Assert.That(ix3.Setter.ImplementedInterfaceMembers.All(m => ((IMethod)m).Parameters.Select(p => p.Type.GetDefinition().KnownTypeCode).SequenceEqual(new[] { KnownTypeCode.Int32' KnownTypeCode.Int32' KnownTypeCode.Int32 }))); " is 223.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitDisposableImplementation,The length of the statement  "			ITypeDefinition disposable = GetTypeDefinition(typeof(NRefactory.TypeSystem.TestCase.ExplicitDisposableImplementation)); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedPropertiesShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(prop.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.Prop" })); " is 181.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedPropertiesShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(prop.Getter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.get_Prop" })); " is 192.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedPropertiesShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(prop.Setter.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IInterfaceWithProperty.set_Prop" })); " is 192.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(evt.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.Event" })); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(evt.AddAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.add_Event" })); " is 184.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessors,The length of the statement  "			Assert.That(evt.RemoveAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.remove_Event" })); " is 190.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessorsWhenCustomAccessorMethodsAreUsed,The length of the statement  "			Assert.That(evt.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.Event" })); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessorsWhenCustomAccessorMethodsAreUsed,The length of the statement  "			Assert.That(evt.AddAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.add_Event" })); " is 184.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EventAccessorsShouldBeReportedAsImplementingInterfaceAccessorsWhenCustomAccessorMethodsAreUsed,The length of the statement  "			Assert.That(evt.RemoveAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.remove_Event" })); " is 190.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedEventsShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(evt.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.Event" })); " is 168.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedEventsShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(evt.AddAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.add_Event" })); " is 184.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitlyImplementedEventsShouldBeReportedAsBeingImplemented,The length of the statement  "			Assert.That(evt.RemoveAccessor.ImplementedInterfaceMembers.Select(p => p.ReflectionName).ToList()' Is.EqualTo(new[] { "ICSharpCode.NRefactory.TypeSystem.TestCase.IHasEvent.remove_Event" })); " is 190.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AccessibilityTests,The length of the statement  "			Assert.AreEqual(Accessibility.ProtectedOrInternal' type.Methods.Single(m => m.Name == "ProtectedInternal").Accessibility); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AccessibilityTests,The length of the statement  "			Assert.AreEqual(Accessibility.ProtectedOrInternal' type.Methods.Single(m => m.Name == "InternalProtected").Accessibility); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(properties.Select(p => p.Getter.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(properties.Select(p => p.Setter.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 122.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(indexers.Select(p => p.Getter.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(indexers.Select(p => p.Setter.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 120.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(events.Select(e => e.AddAccessor.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 123.
Long Statement,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementation,The length of the statement  "			Assert.That(events.Select(e => e.RemoveAccessor.ImplementedInterfaceMembers.Count).ToList()' Is.EquivalentTo(new[] { 0' 1 })); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionAccessibleTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionAccessibleTests.cs,TestEnumInnerClass,The length of the statement  "			Assert.IsNull (provider.Find ("CaptainHook.Mail.TestClass.ParsingState")' "class 'CaptainHook.Mail.TestClass.ParsingState' found!"); " is 132.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,CreateCompilation,The length of the statement  "			var refs = new List<IUnresolvedAssembly> { mscorlib.Value' systemCore.Value' systemAssembly.Value' systemXmlLinq.Value }; " is 121.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,CreateEngine,The length of the statement  "				parsedText = editorText = cursorPosition < 0 ? text : text.Substring(0' cursorPosition) + text.Substring(cursorPosition + 1); " is 125.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,CreateEngine,The length of the statement  "				editorText = text.Substring(0' cursorPosition) + text.Substring(cursorPosition + 1' endPos - cursorPosition - 1) + text.Substring(endPos + 1); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,GetContent,The length of the statement  "			pctx = pctx.AddAssemblyReferences(new [] { mscorlib.Value' systemAssembly.Value' systemCore.Value' systemXmlLinq.Value }); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,GetContent,The length of the statement  "			var engine = new CSharpCompletionEngine (doc' mb' new TestFactory (new CSharpResolver (new CSharpTypeResolveContext (cmp.MainAssembly)))' pctx' new CSharpTypeResolveContext (cmp.MainAssembly)); " is 193.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestCommentsWithWindowsEol,The length of the statement  "			CompletionDataList provider = CreateCtrlSpaceProvider ("class TestClass\r\n{\r\npublic static void Main (string[] args) {\r\n// TestComment\r\n$args.$\r\n}\r\n}"); " is 163.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case2,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.R$"' provider => Assert.IsNotNull(provider.Find("Runtime")' "'Runtime' not found.")); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case2Part2,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.$"' provider => Assert.IsNotNull(provider.Find("Runtime")' "'Runtime' not found.")); " is 126.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case3,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.Runtime.C$"' provider => Assert.IsNotNull(provider.Find("CompilerServices")' "'CompilerServices' not found.")); " is 153.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case3Part2,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.Runtime.$"' provider => Assert.IsNotNull(provider.Find("CompilerServices")' "'CompilerServices' not found.")); " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case4,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.Runtime.CompilerServices.I$"' provider => Assert.IsNotNull(provider.Find("InternalsVisibleTo")' "'InternalsVisibleTo' not found.")); " is 174.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,Test3655Case4Part2,The length of the statement  "			CombinedProviderTest (@"$[assembly:System.Runtime.CompilerServices.$"' provider => Assert.IsNotNull(provider.Find("InternalsVisibleTo")' "'InternalsVisibleTo' not found.")); " is 173.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,TestLocVisitor,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,VisitMemberReferenceExpression,The length of the statement  "				Output.Add (Tuple.Create (memberReferenceExpression.MemberNameToken.StartLocation' memberReferenceExpression.MemberName)); " is 122.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionCSharp3Tests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionCSharp3Tests.cs,TestBug491016,The length of the statement  "        public static System.Collections.Generic.IEnumerable<TR> Foo<T' TR> (this System.Collections.Generic.IEnumerable<T> t' Func<T' TR> f) " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,CompletionDataList,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CompletionDataList.cs,Find,The length of the statement  "			return Data.FirstOrDefault (d => (!(d is CodeCompletionBugTests.TestFactory.ImportCompletionData) || includeImportData) && d.DisplayText == name); " is 146.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,CreateProvider,The length of the statement  "				editorText = text.Substring(0' cursorPosition) + text.Substring(cursorPosition + 1' endPos - cursorPosition - 1) + text.Substring(endPos + 1); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,BrowsableAttributeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\BrowsableAttributeTests.cs,TestIgnore,The length of the statement  "			}"' false' e => e.EditorBrowsableBehavior = ICSharpCode.NRefactory.CSharp.Completion.EditorBrowsableBehavior.Ignore' engine1.ctx.CurrentAssembly.UnresolvedAssembly); " is 165.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,BrowsableAttributeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\BrowsableAttributeTests.cs,TestHideAdvanced,The length of the statement  "			}"' false' e => e.EditorBrowsableBehavior = ICSharpCode.NRefactory.CSharp.Completion.EditorBrowsableBehavior.Normal' engine1.ctx.CurrentAssembly.UnresolvedAssembly); " is 165.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,ImportCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ImportCompletionTests.cs,TestAutomaticImportClash1,The length of the statement  "			var data = provider.Data.OfType<CodeCompletionBugTests.TestFactory.ImportCompletionData>().Single(d => d.DisplayText == "Console"); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,ImportCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ImportCompletionTests.cs,TestAutomaticImportLocalClash,The length of the statement  "			var data = provider.Data.OfType<CodeCompletionBugTests.TestFactory.ImportCompletionData>().Single(d => d.DisplayText == "Console"); " is 131.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,ImportCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ImportCompletionTests.cs,TestAutomaticHiding,The length of the statement  "			var data = provider.Data.OfType<CodeCompletionBugTests.TestFactory.ImportCompletionData>().FirstOrDefault(d => d.DisplayText == "Dictionary"); " is 142.
Long Statement,ICSharpCode.NRefactory.CSharp.CodeCompletion,GetCurrentParameterIndexTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\GetCurrentParameterIndexTests.cs,GetIndex,The length of the statement  "			var engine = new CSharpParameterCompletionEngine(doc' ctxProvider' new ParameterCompletionTests.TestFactory(pctx)' pctx' rctx); " is 127.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Bugs,ParserBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Bugs\ParserBugTests.cs,TestBug4058,The length of the statement  "			bool passed = constructor.GetNodeAt<AttributeSection>(constructor.LParToken.StartLocation.Line' constructor.LParToken.StartLocation.Column + 1) != null; " is 152.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Bugs,ParserBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Bugs\ParserBugTests.cs,TestBug12383,The length of the statement  "				instance.AddUpdateReason (""Installed System Image {0} ABI ({1}) is different ({2})' assuming it's outdated""' ApiLevel' Abi' value); " is 133.
Long Statement,ICSharpCode.NRefactory.CSharp.Parser.Bugs,ParserBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Bugs\ParserBugTests.cs,TestBug12383,The length of the statement  "				instance.AddUpdateReason (""Installed System Image {0}/{1} revision {2} is older than the required one ({3})""' ApiLevel' Abi' instv' Revision); " is 144.
Long Statement,ICSharpCode.NRefactory.IndentationTests,Helper,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\Helper.cs,RandomTests,The length of the statement  "				var engine = new CacheIndentEngine(new CSharpIndentEngine(document' options' policy) { EnableCustomIndentLevels = true }); " is 122.
Long Statement,ICSharpCode.NRefactory.IndentationTests,Helper,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\Helper.cs,ReadAndTest,The length of the statement  "				var engine = new CacheIndentEngine(new CSharpIndentEngine(document' options' policy) { EnableCustomIndentLevels = true }); " is 122.
Long Statement,ICSharpCode.NRefactory.IndentationTests,Helper,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\Helper.cs,ReadAndTest,The length of the statement  "									Console.WriteLine(string.Format("Indent: {2}' Current indent: {3} in {0}:{1}"' filePath' engine.Location.Line' engine.ThisLineIndent.Length' engine.CurrentIndent.Length)); " is 171.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestSimplePaste,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestMultiLinePaste,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\n" }' FormattingOptionsFactory.CreateMono()); " is 145.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestMultiplePastes,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\n" }' FormattingOptionsFactory.CreateMono()); " is 145.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteNewLine,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\n" }' FormattingOptionsFactory.CreateMono()); " is 145.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteNewLineCase2,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\n" }' FormattingOptionsFactory.CreateMono()); " is 145.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimString,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\n" }' FormattingOptionsFactory.CreateMono()); " is 145.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestWindowsLineEnding,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteBlankLines,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestWindowsLineEndingCase2,The length of the statement  "			var indent = CreateEngine("\r\nclass Foo\r\n{\r\n\tvoid Bar ()\r\n\t{\r\n\t\t$\r\n\t}\r\n}"' FormattingOptionsFactory.CreateMono()' textEditorOptions); " is 151.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestWindowsLineEndingCase2,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' textEditorOptions' FormattingOptionsFactory.CreateMono()); " is 120.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimStringBug1,The length of the statement  "			var indent = CreateEngine("\r\nclass Foo\r\n{\r\n\tvoid Bar ()\r\n\t{\r\n\t\t$\r\n\t}\r\n}"' FormattingOptionsFactory.CreateMono()' textEditorOptions); " is 151.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimStringBug1,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' textEditorOptions' FormattingOptionsFactory.CreateMono()); " is 120.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimStringBug2,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimStringBug3,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PasteVerbatimStringBug4,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteComments,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,PastemultilineAtFirstColumnCorrection,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' CreateInvariantOptions ()' FormattingOptionsFactory.CreateMono()); " is 128.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteToWindowsEol,The length of the statement  "			ITextPasteHandler handler = new TextPasteIndentEngine(indent' new TextEditorOptions { EolMarker = "\r\n" }' FormattingOptionsFactory.CreateMono()); " is 147.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteToWindowsEol,The length of the statement  "			var text = handler.FormatPlainText(indent.Offset' "namespace Foo\n{\n\tpublic static class FooExtensions\n\t{\n\t\tpublic static int ObjectExtension (this object value)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\n\t\tpublic static int IntExtension (this int value)\n\t\t{\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tpublic class Client\n\t{\n\t\tpublic void Method ()\n\t\t{\n\t\t\t0.ToString ();\n\t\t}\n\t}\n}"' null); " is 400.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestPasteToWindowsEol,The length of the statement  "			Assert.AreEqual("namespace Foo\r\n{\r\n\tpublic static class FooExtensions\r\n\t{\r\n\t\tpublic static int ObjectExtension (this object value)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\r\n\t\tpublic static int IntExtension (this int value)\r\n\t\t{\r\n\t\t\treturn 0;\r\n\t\t}\r\n\t}\r\n\r\n\tpublic class Client\r\n\t{\r\n\t\tpublic void Method ()\r\n\t\t{\r\n\t\t\t0.ToString ();\r\n\t\t}\r\n\t}\r\n}"' text); " is 410.
Long Statement,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestBug16415,The length of the statement  "			var indent = CreateEngine("class Foo\n{\n\tpublic static void Main (string[] args)\n\t{\n\t\tConsole.WriteLine ();$\n\t}\n}\n"' opt); " is 133.
Long Statement,ICSharpCode.NRefactory.IndentationTests,AlignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\AlignmentTests.cs,TestLongBinaryExpressionAlignmentBug,The length of the statement  "			defaultValue == p.defaultValue && region == p.region && (flags & ~1) == (p.flags & ~1) && ListEquals(attributes' p.attributes);$"' fmt); " is 136.
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,TryFinally,The following statement contains a magic number: BlockStatement block = new BlockStatement {  				new TryCatchStatement {  					TryBlock = new BlockStatement {  						new GotoStatement("LABEL")'  						new AssignmentExpression(new IdentifierExpression("i")' new PrimitiveExpression(1))  					}'  					CatchClauses = {  						new CatchClause {  							Body = new BlockStatement {  								new AssignmentExpression(new IdentifierExpression("i")' new PrimitiveExpression(3))  							}  						}  					}'  					FinallyBlock = new BlockStatement {  						new AssignmentExpression(new IdentifierExpression("j")' new PrimitiveExpression(5))  					}  				}'  				new LabelStatement { Label = "LABEL" }'  				new EmptyStatement()  			};
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,TryFinally,The following statement contains a magic number: BlockStatement block = new BlockStatement {  				new TryCatchStatement {  					TryBlock = new BlockStatement {  						new GotoStatement("LABEL")'  						new AssignmentExpression(new IdentifierExpression("i")' new PrimitiveExpression(1))  					}'  					CatchClauses = {  						new CatchClause {  							Body = new BlockStatement {  								new AssignmentExpression(new IdentifierExpression("i")' new PrimitiveExpression(3))  							}  						}  					}'  					FinallyBlock = new BlockStatement {  						new AssignmentExpression(new IdentifierExpression("j")' new PrimitiveExpression(5))  					}  				}'  				new LabelStatement { Label = "LABEL" }'  				new EmptyStatement()  			};
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,ForLoop,The following statement contains a magic number: ForStatement loop = new ForStatement {  				Initializers = {  					new ExpressionStatement(  						new AssignmentExpression(new IdentifierExpression("i")' new PrimitiveExpression(0))  					)  				}'  				Condition = new BinaryOperatorExpression(new IdentifierExpression("i")' BinaryOperatorType.LessThan' new PrimitiveExpression(1000))'  				Iterators = {  					new ExpressionStatement(  						new AssignmentExpression {  							Left = new IdentifierExpression("i")'  							Operator = AssignmentOperatorType.Add'  							Right = new IdentifierExpression("j")  						}  					)  				}'  				EmbeddedStatement = new ExpressionStatement(  					new AssignmentExpression(new IdentifierExpression("j")' new IdentifierExpression("i"))  				)};
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,SwitchWithGotoCase,The following statement contains a magic number: SwitchStatement @switch = new SwitchStatement {  				Expression = new PrimitiveExpression(1)'  				SwitchSections = {  					new SwitchSection { // case 0:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(0)) }'  						Statements = { new BreakStatement() }  					}'  					new SwitchSection { // case 1:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(1)) }'  						Statements = {  							new ExpressionStatement(new AssignmentExpression(new IdentifierExpression("a")' new PrimitiveExpression(0)))'  							new GotoCaseStatement { LabelExpression = new PrimitiveExpression(2) }  						}  					}'  					new SwitchSection { // case 2:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(2)) }'  						Statements = { new BreakStatement() }  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,SwitchWithGotoCase,The following statement contains a magic number: SwitchStatement @switch = new SwitchStatement {  				Expression = new PrimitiveExpression(1)'  				SwitchSections = {  					new SwitchSection { // case 0:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(0)) }'  						Statements = { new BreakStatement() }  					}'  					new SwitchSection { // case 1:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(1)) }'  						Statements = {  							new ExpressionStatement(new AssignmentExpression(new IdentifierExpression("a")' new PrimitiveExpression(0)))'  							new GotoCaseStatement { LabelExpression = new PrimitiveExpression(2) }  						}  					}'  					new SwitchSection { // case 2:  						CaseLabels = { new CaseLabel(new PrimitiveExpression(2)) }'  						Statements = { new BreakStatement() }  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,DefiniteAssignmentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DefiniteAssignmentTests.cs,SwitchWithGotoCase,The following statement contains a magic number: SwitchSection case2 = @switch.SwitchSections.ElementAt(2);
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestEndlessLoop,The following statement contains a magic number: var stmt3 = (ReturnStatement)method.Body.Statements.ElementAt(2);
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLoop,The following statement contains a magic number: var stmt3 = (ReturnStatement)method.Body.Statements.ElementAt(2);
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestVariableVisitsCount,The following statement contains a magic number: Assert.AreEqual(8' analysis.NodeVisits);
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,NullValueAnalysisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,TestLinq,The following statement contains a magic number: var itemInSelect = ((QuerySelectClause)continuation.PrecedingQuery.Clauses.ElementAt(2)).Expression;
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,StubbedRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,Supports,The following statement contains a magic number: return version.Major <= 5;
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,StubbedRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\NullValueAnalysisTests.cs,Supports,The following statement contains a magic number: return version.Major <= 4;
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,LocalDeclarationSpaceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DeclarationSpace\LocalDeclarationSpaceTests.cs,GetNameDeclarationsInChildSpace,The following statement contains a magic number: Assert.AreEqual(2' declarations.Count' "Wrong declaration count");
Magic Number,ICSharpCode.NRefactory.CSharp.Analysis,LocalDeclarationSpaceVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Analysis\DeclarationSpace\LocalDeclarationSpaceVisitorTests.cs,CustomEventDeclaration,The following statement contains a magic number: Assert.AreEqual(2' bodyDeclarationSpace.Parent.Children.Count' "Wrong number of child declaration spaces in the event declaration");
Magic Number,ICSharpCode.NRefactory.CSharp,InsertParenthesesVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\InsertParenthesesVisitorTests.cs,ArrayCreationWithInitializerInIndexer,The following statement contains a magic number: Expression expr = new IndexerExpression {  				Target = new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					Arguments = { new PrimitiveExpression(1) }'  					Initializer = new ArrayInitializerExpression {  						Elements = { new PrimitiveExpression(42) }  					}  				}'  				Arguments = { new PrimitiveExpression(0) }  			};
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,EnumDeclarationWithInitializers,The following statement contains a magic number: TypeDeclaration type = new TypeDeclaration {  				ClassType = ClassType.Enum'  				Name = "DisplayFlags"'  				Members = {  					new EnumMemberDeclaration {  						Name = "D"'  						Initializer = new PrimitiveExpression(4)  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The following statement contains a magic number: condition.AddChild(new CSharpTokenNode(new TextLocation(1' 4)' Roles.LPar)' Roles.LPar);
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The following statement contains a magic number: condition.AddChild(new IdentifierExpression("cond"' new TextLocation(1' 5))' IfElseStatement.ConditionRole);
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The following statement contains a magic number: condition.AddChild(new Comment(CommentType.MultiLine' new TextLocation(1' 9)' new TextLocation(1' 14)) { Content = "a" }' Roles.Comment);
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The following statement contains a magic number: condition.AddChild(new Comment(CommentType.MultiLine' new TextLocation(1' 9)' new TextLocation(1' 14)) { Content = "a" }' Roles.Comment);
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,InlineCommentAtEndOfCondition,The following statement contains a magic number: condition.AddChild(new CSharpTokenNode(new TextLocation(1' 14)' Roles.RPar)' Roles.RPar);
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,SwitchStatement,The following statement contains a magic number: SwitchStatement type = new SwitchStatement {  				Expression = new IdentifierExpression("i")'  				SwitchSections = {  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(1))'  							new CaseLabel(new PrimitiveExpression(2))  						}'  						Statements = {  							new ExpressionStatement(new IdentifierExpression("A").Invoke())'  							new ExpressionStatement(new IdentifierExpression("B").Invoke())'  							new BreakStatement()  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(3))  						}'  						Statements = {  							new BlockStatement {  								new VariableDeclarationStatement(new PrimitiveType("int")' "a"' new PrimitiveExpression(3))'  								new ReturnStatement(new IdentifierExpression("a"))'  							}  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel()  						}'  						Statements = {  							new BreakStatement()  						}  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,SwitchStatement,The following statement contains a magic number: SwitchStatement type = new SwitchStatement {  				Expression = new IdentifierExpression("i")'  				SwitchSections = {  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(1))'  							new CaseLabel(new PrimitiveExpression(2))  						}'  						Statements = {  							new ExpressionStatement(new IdentifierExpression("A").Invoke())'  							new ExpressionStatement(new IdentifierExpression("B").Invoke())'  							new BreakStatement()  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(3))  						}'  						Statements = {  							new BlockStatement {  								new VariableDeclarationStatement(new PrimitiveType("int")' "a"' new PrimitiveExpression(3))'  								new ReturnStatement(new IdentifierExpression("a"))'  							}  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel()  						}'  						Statements = {  							new BreakStatement()  						}  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,SwitchStatement,The following statement contains a magic number: SwitchStatement type = new SwitchStatement {  				Expression = new IdentifierExpression("i")'  				SwitchSections = {  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(1))'  							new CaseLabel(new PrimitiveExpression(2))  						}'  						Statements = {  							new ExpressionStatement(new IdentifierExpression("A").Invoke())'  							new ExpressionStatement(new IdentifierExpression("B").Invoke())'  							new BreakStatement()  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel(new PrimitiveExpression(3))  						}'  						Statements = {  							new BlockStatement {  								new VariableDeclarationStatement(new PrimitiveType("int")' "a"' new PrimitiveExpression(3))'  								new ReturnStatement(new IdentifierExpression("a"))'  							}  						}  					}'  					new SwitchSection {  						CaseLabels = {  							new CaseLabel()  						}'  						Statements = {  							new BreakStatement()  						}  					}  				}};
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,BlankLinesBetweenMembers,The following statement contains a magic number: options.MinimumBlankLinesBetweenMembers = 2;
Magic Number,ICSharpCode.NRefactory.CSharp,CSharpOutputVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CSharpOutputVisitorTests.cs,BlankLinesAfterUsings,The following statement contains a magic number: options.MinimumBlankLinesAfterUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithFromAndSelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] { Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0)) });
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithFromAndSelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] { Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)' Tuple.Create(new TextLocation(1' 16)' actual.AstNode) });
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithSingleFromAndExplicitTypeWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] { Tuple.Create(new TextLocation(1' 13)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0)) });
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithSingleFromAndExplicitTypeWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] { Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)' Tuple.Create(new TextLocation(1' 23)' actual.AstNode) });
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 37)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 37)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 41)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 41)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 41)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 37)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 37)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryExpressionWithTwoLetsWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 37)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' actual.AstNode)'  				Tuple.Create(new TextLocation(1' 31)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' actual.AstNode)'  				Tuple.Create(new TextLocation(1' 31)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' actual.AstNode)'  				Tuple.Create(new TextLocation(1' 49)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' actual.AstNode)'  				Tuple.Create(new TextLocation(1' 49)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedBySelectWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' actual.AstNode)'  				Tuple.Create(new TextLocation(1' 49)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 53)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 53)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 53)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 53)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 67)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 67)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 67)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,SelectManyFollowedByLetWorksWhenTheTargetIsTransparentAndTheCollectionsAreCorrelated,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 17)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 67)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 35)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TwoFromClausesFollowedByLetWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' actual.AstNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 36)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 36)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 36)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 46)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 46)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThreeFromClausesFollowedBySelectWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 46)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWithSimpleValue,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWithSimpleValue,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 15)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWithProjectedValue,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWithProjectedValue,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 15)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWhenThereIsATransparentIdentifer,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 19)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWhenThereIsATransparentIdentifer,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 19)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWhenThereIsATransparentIdentifer,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 15)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupByWhenThereIsATransparentIdentifer,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 15)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 55)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 55)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 58)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinWithCast,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 58)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 2).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 59)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 2).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 59)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 2).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 59)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 2).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 59)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 55)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 69)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 55)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 69)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 55)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 69)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 2).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 68)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 68)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,JoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 68)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 62)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelect,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 62)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 3).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 66)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 3).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 66)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 3).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 66)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 60)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 3).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 66)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 62)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 76)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 62)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 76)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedByLet,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 62)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 76)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 73)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 73)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 73)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  				Tuple.Create(new TextLocation(1' 73)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 3).Parameters' 1))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 75)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 75)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,GroupJoinFollowedBySelectWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 29)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 75)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 42)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 42)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,WhereWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 42)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhere,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhere,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhere,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhereEvenWhenParenthesized,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhereEvenWhenParenthesized,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsEliminatedAfterWhereEvenWhenParenthesized,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 28)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsNotEliminatingWhenTheOnlyOperation,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,TrivialSelectIsNotEliminatingWhenTheOnlyOperation,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 33)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 33)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 33)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 20)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Body.Initializers' 1).NameToken)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 38)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 44)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 38)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 44)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 38)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 44)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingWorksWhenThereIsATransparentIdentifier,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 30)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 38)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 44)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 43)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 43)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 43)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,ThenByWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 34)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 43)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 65)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 65)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 65)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,OrderingDescendingWorks,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode)'	// This should be the orderby at location 16' but a parser bug causes 24 to be returned. change this to 16 after fixing the parser bug.  				Tuple.Create(new TextLocation(1' 24)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 45)' (AstNode)astNode)'  				Tuple.Create(new TextLocation(1' 65)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.RangeVariables' new[] {  				Tuple.Create(new TextLocation(1' 6)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 0).Parameters' 0))'  				Tuple.Create(new TextLocation(1' 21)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Target.Target.Arguments' 1).Parameters' 1))'  				Tuple.Create(new TextLocation(1' 49)' (AstNode)ElementAt(ElementAt(astNode.Target.Target.Arguments' 0).Parameters' 0))'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 63)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 63)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 63)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,QueryExpressionExpanderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\QueryExpressionExpanderTests.cs,QueryContinuation,The following statement contains a magic number: AssertLookupCorrect(actual.Expressions' new[] {  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 1)' (AstNode)astNode.Target.Target.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 16)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 31)' (AstNode)astNode.Target.Target.Target.Target)'  				Tuple.Create(new TextLocation(1' 51)' (AstNode)astNode.Target.Target)'  				Tuple.Create(new TextLocation(1' 63)' (AstNode)astNode)'  			});
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,TestDescendants,The following statement contains a magic number: var method = tree.GetNodeAt<MethodDeclaration>(6' 1);
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,TestDescendants,The following statement contains a magic number: Assert.AreEqual(5' method.DescendantNodes().Count(n => n is Statement));
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,TestDescendantsWithPredicate,The following statement contains a magic number: var method = tree.GetNodeAt<MethodDeclaration>(6' 1);
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,TestDescendantsWithPredicate,The following statement contains a magic number: Assert.AreEqual(4' childs.Count);
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,GetNodesBetween,The following statement contains a magic number: var nodes = expr.GetNodesBetween(1' 3' 1' 6).ToList();
Magic Number,ICSharpCode.NRefactory.CSharp,AstTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\AstTests.cs,GetNodesBetween,The following statement contains a magic number: var nodes = expr.GetNodesBetween(1' 3' 1' 6).ToList();
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions.AddUsing,AddUsingActionInsideNamespaceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\AddUsing\AddUsingActionInsideNamespaceTests.cs,ShouldAddBlankLinesBeforeUsingStatement,The following statement contains a magic number: formattingOptions.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions.AddUsing,AddUsingActionInsideNamespaceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\AddUsing\AddUsingActionInsideNamespaceTests.cs,ShouldAddBlankLinesAfterUsingStatements,The following statement contains a magic number: formattingOptions.MinimumBlankLinesAfterUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions.AddUsing,AddUsingRunActionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\AddUsing\AddUsingRunActionTests.cs,ShouldAddBlankLinesAfterUsings,The following statement contains a magic number: formattingOptions.MinimumBlankLinesAfterUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions.AddUsing,AddUsingRunActionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\AddUsing\AddUsingRunActionTests.cs,ShouldAddBlankLinesBeforeUsing,The following statement contains a magic number: formattingOptions.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,TestRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\TestRefactoringContext.cs,Create,The following statement contains a magic number: content = content.Substring(0' idx2) + content.Substring(idx2 + 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,TestRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\TestRefactoringContext.cs,Create,The following statement contains a magic number: content = content.Substring(0' idx1) + content.Substring(idx1 + 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,TestRefactoringContext,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\TestRefactoringContext.cs,Create,The following statement contains a magic number: selectionEnd = idx2 - 2;
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,ContextActionTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\ContextActionTestBase.cs,HomogenizeEol,The following statement contains a magic number: possibleNewline == 2
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,IntroduceConstantTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\IntroduceConstantTests.cs,TestLocalConstantReplaceAll,The following statement contains a magic number: Test<IntroduceConstantAction> (@"class TestClass  {  	public void Hello ()  	{  		System.Console.WriteLine ($""Hello World"");  		System.Console.WriteLine (""Hello World"");  		System.Console.WriteLine (""Hello World"");  	}  }"' @"class TestClass  {  	public void Hello ()  	{  		const string helloWorld = ""Hello World"";  		System.Console.WriteLine (helloWorld);  		System.Console.WriteLine (helloWorld);  		System.Console.WriteLine (helloWorld);  	}  }"' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeActions,AddOptionalParameterToInvocationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeActions\AddOptionalParameterToInvocationTests.cs,TestMultiple3,The following statement contains a magic number: Test<AddOptionalParameterToInvocationAction> (@"  class TestClass  {  	public void Foo(string msg = ""Hello""' string msg2 = ""Bar"") {}  	public void Bar() {  		$Foo ();  	}  }"' @"  class TestClass  {  	public void Foo(string msg = ""Hello""' string msg2 = ""Bar"") {}  	public void Bar() {  		Foo (""Hello""' ""Bar"");  	}  }"' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToModifiedClosureTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToModifiedClosureTests.cs,TestMultipleLambdas,The following statement contains a magic number: Test (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToModifiedClosureTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToModifiedClosureTests.cs,TestFixAllInLambda,The following statement contains a magic number: Test (input' 3' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToModifiedClosureTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToModifiedClosureTests.cs,TestNestedLambda,The following statement contains a magic number: Test (input' 2' output1' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToModifiedClosureTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToModifiedClosureTests.cs,TestNestedLambda,The following statement contains a magic number: Test (input' 2' output2' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToModifiedClosureTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToModifiedClosureTests.cs,TestMultipleVariables,The following statement contains a magic number: Test (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CS1717AssignmentMadeToSameVariableIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS1717AssignmentMadeToSameVariableIssueTests.cs,TestField,The following statement contains a magic number: Test<CS1717AssignmentMadeToSameVariableIssue> (input' 3' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CS1717AssignmentMadeToSameVariableIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS1717AssignmentMadeToSameVariableIssueTests.cs,TestFix,The following statement contains a magic number: Test<CS1717AssignmentMadeToSameVariableIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CastExpressionOfIncompatibleTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CastExpressionOfIncompatibleTypeIssueTests.cs,Test,The following statement contains a magic number: Test<CastExpressionOfIncompatibleTypeIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ConstantConditionIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ConstantConditionIssueTests.cs,TestConditionalExpression,The following statement contains a magic number: Test<ConstantConditionIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ConstantConditionIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ConstantConditionIssueTests.cs,TestIf,The following statement contains a magic number: Test<ConstantConditionIssue> (input' 5' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,DoubleNegationOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\DoubleNegationOperatorIssueTests.cs,Test,The following statement contains a magic number: Test<DoubleNegationOperatorIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ExpressionIsNeverOfProvidedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ExpressionIsNeverOfProvidedTypeIssueTests.cs,TestClassIsTypeParameter,The following statement contains a magic number: Test<ExpressionIsNeverOfProvidedTypeIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LocalVariableHidesMemberIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LocalVariableHidesMemberIssueTests.cs,TestAccessiblePrivateDueToTypeNesting,The following statement contains a magic number: Test<LocalVariableHidesMemberIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ParameterHidesMemberIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterHidesMemberIssueTests.cs,TestAccessiblePrivateDueToTypeNesting,The following statement contains a magic number: Test<ParameterHidesMemberIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantAssignmentIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantAssignmentIssueTests.cs,TestAssignmentWithFunctionUsedLater,The following statement contains a magic number: Test<RedundantAssignmentIssue>(input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantCaseLabelIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantCaseLabelIssueTests.cs,Test,The following statement contains a magic number: Test<RedundantCaseLabelIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantDefaultFieldInitializerIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantDefaultFieldInitializerIssueTests.cs,TestRedundantIntInitializer,The following statement contains a magic number: Test<RedundantDefaultFieldInitializerIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantDefaultFieldInitializerIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantDefaultFieldInitializerIssueTests.cs,TestRedundantFloatInitializer,The following statement contains a magic number: Test<RedundantDefaultFieldInitializerIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantDefaultFieldInitializerIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantDefaultFieldInitializerIssueTests.cs,TestRedundantDynamicInitializer,The following statement contains a magic number: Test<RedundantDefaultFieldInitializerIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,UnreachableCodeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\UnreachableCodeIssueTests.cs,TestGotoUnreachableBlock,The following statement contains a magic number: Assert.AreEqual(9' issue.Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,UnreachableCodeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\UnreachableCodeIssueTests.cs,TestGotoUnreachableBlock,The following statement contains a magic number: Assert.AreEqual(9' issue.End.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantPrivateInspectorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantPrivateInspectorTests.cs,TestInspectorCase1,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantThisQualifierIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantThisQualifierIssueTests.cs,TestBatchFix,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantUsingDirectiveIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantUsingDirectiveIssueTests.cs,TestResharperDisableOnce,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,SuggestUseVarKeywordEvidentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\SuggestUseVarKeywordEvidentTests.cs,TestV2,The following statement contains a magic number: parser.CompilerSettings.LanguageVersion = new Version(2' 0' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,InconsistentNamingTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestOverrideMembers,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestPascalCaseWords,The following statement contains a magic number: Assert.AreEqual (4' result.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestPascalCaseWords,The following statement contains a magic number: Assert.AreEqual ("Long"' result [2]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestPascalCaseWords,The following statement contains a magic number: Assert.AreEqual ("Name"' result [3]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestCamelCaseWords,The following statement contains a magic number: Assert.AreEqual (4' result.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestCamelCaseWords,The following statement contains a magic number: Assert.AreEqual ("Long"' result [2]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestCamelCaseWords,The following statement contains a magic number: Assert.AreEqual ("Name"' result [3]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUpperCaseSubWord,The following statement contains a magic number: Assert.AreEqual (5' result.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUpperCaseSubWord,The following statement contains a magic number: Assert.AreEqual ("Long"' result [2]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUpperCaseSubWord,The following statement contains a magic number: Assert.AreEqual ("XML"' result [3]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUpperCaseSubWord,The following statement contains a magic number: Assert.AreEqual ("Name"' result [4]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUnderscore,The following statement contains a magic number: Assert.AreEqual (4' result.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUnderscore,The following statement contains a magic number: Assert.AreEqual ("long"' result [2]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUnderscore,The following statement contains a magic number: Assert.AreEqual ("NAME"' result [3]);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,WordParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\InconsistentNamingTests.cs,TestUnderscoreCase1,The following statement contains a magic number: Assert.AreEqual (2' result.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,DoNotCallOverridableMethodsInConstructorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\DoNotCallOverridableMethodsInConstructorIssueTests.cs,CatchesBadCase,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToStaticMemberViaDerivedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToStaticMemberViaDerivedTypeIssueTests.cs,MemberInvocation,The following statement contains a magic number: Assert.AreEqual(11' issues [0].Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToStaticMemberViaDerivedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToStaticMemberViaDerivedTypeIssueTests.cs,PropertyAccess,The following statement contains a magic number: Assert.AreEqual(11' issues [0].Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToStaticMemberViaDerivedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToStaticMemberViaDerivedTypeIssueTests.cs,FieldAccess,The following statement contains a magic number: Assert.AreEqual(11' issues [0].Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToStaticMemberViaDerivedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToStaticMemberViaDerivedTypeIssueTests.cs,NestedClass,The following statement contains a magic number: Assert.AreEqual(14' issues [0].Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,AccessToStaticMemberViaDerivedTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\AccessToStaticMemberViaDerivedTypeIssueTests.cs,ExpandsTypeWithNamespaceIfNeccessary,The following statement contains a magic number: Assert.AreEqual(16' issues [0].Start.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallIssueTests.cs,ConcatenationOperator,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallIssueTests.cs,StringTarget,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallIssueTests.cs,FormatMethodWithObjectParamsArray,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallIssueTests.cs,DetectsBlacklistedCalls,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PublicConstructorInAbstractClassIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PublicConstructorInAbstractClassIssueTest.cs,TestInspectorCase3,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LockThisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LockThisTests.cs,TestFixMultipleLockThis,The following statement contains a magic number: Test<LockThisIssue> (input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LockThisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LockThisTests.cs,TestDoubleLocking,The following statement contains a magic number: Test<LockThisIssue> (input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LockThisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LockThisTests.cs,TestDelegateLocking,The following statement contains a magic number: Test<LockThisIssue> (input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LockThisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LockThisTests.cs,TestLambdaLocking,The following statement contains a magic number: Test<LockThisIssue> (input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,LockThisTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\LockThisTests.cs,TestMixedStaticMethod,The following statement contains a magic number: Test<LockThisIssue> (input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,DisposeMethodInNonIDisposableTypeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\DisposeMethodInNonIDisposableTypeTests.cs,TestMultipleInterfacesDispose,The following statement contains a magic number: Test<DisposeMethodInNonIDisposableTypeIssue>(input' 2' @"  using System;  interface Foo : IDisposable  {  }  interface Bar  {  	void Dispose ();  }  class TestClass : Foo' Bar  {  	void IDisposable.Dispose ()  	{  	}  	void Bar.Dispose ()  	{  	}  }  "' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ThreadStaticAtInstanceFieldTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ThreadStaticAtInstanceFieldTests.cs,InstanceField,The following statement contains a magic number: Assert.AreEqual(2' issue.Actions.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ThreadStaticAtInstanceFieldTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ThreadStaticAtInstanceFieldTests.cs,InstanceFieldWithMultiAttributeSection,The following statement contains a magic number: Assert.AreEqual(2' issue.Actions.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantExtendsListEntryIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantExtendsListEntryIssueTests.cs,TestInspectorCase2,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantBaseQualifierTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantBaseQualifierTests.cs,TestResharperDisableRestore,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantBoolCompareIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantBoolCompareIssueTests.cs,Test,The following statement contains a magic number: Test<RedundantBoolCompareIssue> (input' 4' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantOverridenMemberTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantOverridenMemberTests.cs,TestTestInspectorCase6,The following statement contains a magic number: Assert.AreEqual(4' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantLambdaParameterTypeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantLambdaParameterTypeTests.cs,MultipleCases,The following statement contains a magic number: Test<RedundantLambdaParameterTypeIssue>(@"  class Program  {  	public delegate int MultipleIncreaseByANumber(int i' string j' int l);    	public static void ExecuteCSharp3_0()  	{  		MultipleIncreaseByANumber multiple = (int j' string k' int l) => ((j * 42) / k) % l;  	}  }  "' 3' @"  class Program  {  	public delegate int MultipleIncreaseByANumber(int i' string j' int l);    	public static void ExecuteCSharp3_0()  	{  		MultipleIncreaseByANumber multiple = (j' k' l) => ((j * 42) / k) % l;  	}  }  "' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,OptionalParameterHierarchyMismatchIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\OptionalParameterHierarchyMismatchIssueTests.cs,TestTakeDeclarationValue,The following statement contains a magic number: Test<OptionalParameterHierarchyMismatchIssue>(@"  class A  {  	public virtual void Foo(int a = 1)  	{    	}  }    class B : A  {  	public override void Foo(int a = 2)  	{    	}  }    class C : B  {  	public override void Foo(int a = 3)  	{    	}  }"' 2' @"  class A  {  	public virtual void Foo(int a = 1)  	{    	}  }    class B : A  {  	public override void Foo(int a = 2)  	{    	}  }    class C : B  {  	public override void Foo(int a = 1)  	{    	}  }"' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,FunctionNeverReturnsIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\FunctionNeverReturnsIssueTests.cs,TestIncrementProperty,The following statement contains a magic number: Test<FunctionNeverReturnsIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallForValueTypesIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallForValueTypesIssue.cs,ConcatenationOperator,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallForValueTypesIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallForValueTypesIssue.cs,FormatMethodWithObjectParamsArray,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantToStringCallForValueTypesIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantToStringCallForValueTypesIssue.cs,DetectsBlacklistedCalls,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,StringIndexOfIsCultureSpecificIssueTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\StringIndexOfIsCultureSpecificIssueTest.cs,IndexOfStringCalls,The following statement contains a magic number: Test<StringIndexOfIsCultureSpecificIssue>(stringIndexOfStringCalls' 4' stringIndexOfStringCallsWithComparison);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CompareOfFloatsByEqualityOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CompareOfFloatsByEqualityOperatorIssueTests.cs,Test,The following statement contains a magic number: Test<CompareOfFloatsByEqualityOperatorIssue> (input' 2' output);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CompareOfFloatsByEqualityOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CompareOfFloatsByEqualityOperatorIssueTests.cs,TestZero,The following statement contains a magic number: Test<CompareOfFloatsByEqualityOperatorIssue> (@"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = x == 0;  		bool test2 = 0.0e10 != x;  		bool test3 = 0L == y;  		bool test4 = y != 0.0000;  	}  }"' 4' @"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = System.Math.Abs (x) < EPSILON;  		bool test2 = System.Math.Abs (x) > EPSILON;  		bool test3 = System.Math.Abs (y) < EPSILON;  		bool test4 = System.Math.Abs (y) > EPSILON;  	}  }");
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CompareOfFloatsByEqualityOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CompareOfFloatsByEqualityOperatorIssueTests.cs,TestNaN,The following statement contains a magic number: Test<CompareOfFloatsByEqualityOperatorIssue> (@"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = x == System.Double.NaN;  		bool test2 = x != double.NaN;  		bool test3 = y == float.NaN;  		bool test4 = x != float.NaN;  	}  }"' 4' @"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = double.IsNaN (x);  		bool test2 = !double.IsNaN (x);  		bool test3 = float.IsNaN (y);  		bool test4 = !double.IsNaN (x);  	}  }");
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CompareOfFloatsByEqualityOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CompareOfFloatsByEqualityOperatorIssueTests.cs,TestPositiveInfinity,The following statement contains a magic number: Test<CompareOfFloatsByEqualityOperatorIssue> (@"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = x == System.Double.PositiveInfinity;  		bool test2 = x != double.PositiveInfinity;  		bool test3 = y == float.PositiveInfinity;  		bool test4 = x != float.PositiveInfinity;  	}  }"' 4' @"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = double.IsPositiveInfinity (x);  		bool test2 = !double.IsPositiveInfinity (x);  		bool test3 = float.IsPositiveInfinity (y);  		bool test4 = !double.IsPositiveInfinity (x);  	}  }");
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CompareOfFloatsByEqualityOperatorIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CompareOfFloatsByEqualityOperatorIssueTests.cs,TestNegativeInfinity,The following statement contains a magic number: Test<CompareOfFloatsByEqualityOperatorIssue> (@"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = x == System.Double.NegativeInfinity;  		bool test2 = x != double.NegativeInfinity;  		bool test3 = y == float.NegativeInfinity;  		bool test4 = x != float.NegativeInfinity;  	}  }"' 4' @"  class TestClass  {  	void TestMethod (double x' float y)  	{  		bool test = double.IsNegativeInfinity (x);  		bool test2 = !double.IsNegativeInfinity (x);  		bool test3 = float.IsNegativeInfinity (y);  		bool test4 = !double.IsNegativeInfinity (x);  	}  }");
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,XmlDocIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\XmlDocIssueIssueTests.cs,TestWrongMethodParameter,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CS0152DuplicateCaseLabelValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS0152DuplicateCaseLabelValueIssueTests.cs,TestConstants,The following statement contains a magic number: TestIssue<CS0152DuplicateCaseLabelValueIssue>(@"  class Test  {  	const int foo = 1;  	void TestMethod (int i = 0)  	{  		switch (i) {  			case 1:  				System.Console.WriteLine();  				break;  			case foo:  				System.Console.WriteLine();  				break;  			case 4:  				default:  			case 3:  				break;  		}  	}  }"' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CS0152DuplicateCaseLabelValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS0152DuplicateCaseLabelValueIssueTests.cs,TestInts,The following statement contains a magic number: TestIssue<CS0152DuplicateCaseLabelValueIssue>(@"  class Test  {  	void TestMethod (int i = 0)  	{  		switch (i) {  		case 0:  			System.Console.WriteLine();  			break;  		case 0:  			System.Console.WriteLine();  			break;  		default:  		case 0:  			break;  		}  	}  }"' 3);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,CS0152DuplicateCaseLabelValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\CS0152DuplicateCaseLabelValueIssueTests.cs,TestStrings,The following statement contains a magic number: TestIssue<CS0152DuplicateCaseLabelValueIssue>(@"  class Test  {  	void TestMethod (string i = 0)  	{  		switch (i) {  		case ""	"":  			System.Console.WriteLine();  			break;  		case ""\t"":  			System.Console.WriteLine();  			break;  		default:  		case @""	"":  			break;  		}  	}  }"' 3);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentDefaultValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentDefaultValueIssueTests.cs,TestMultipleRemoveFirst,The following statement contains a magic number: Test<RedundantArgumentDefaultValueIssue>(@"  class Test  {   	public void Bar (int foo = 22' int test = 3)  	{  		const int s = 22;  		Bar (s' 3);  	}  }  "' 2' @"  class Test  {   	public void Bar (int foo = 22' int test = 3)  	{  		const int s = 22;  		Bar ();  	}  }  "' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentDefaultValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentDefaultValueIssueTests.cs,TestMultipleRemoveSecond,The following statement contains a magic number: Test<RedundantArgumentDefaultValueIssue>(@"  class Test  {   	public void Bar (int foo = 22' int test = 3)  	{  		const int s = 22;  		Bar (s' 3);  	}  }  "' 2' @"  class Test  {   	public void Bar (int foo = 22' int test = 3)  	{  		const int s = 22;  		Bar (s);  	}  }  "' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentDefaultValueIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentDefaultValueIssueTests.cs,ChecksParametersIfParamsAreUnused,The following statement contains a magic number: Test<RedundantArgumentDefaultValueIssue>(@"  class TestClass  {  	void Foo(string a1 = ""a1""' string a2 = ""a2""' string a3 = ""a3""' params string[] extraStrings)  	{  	}    	void Bar()  	{  		Foo (""a1""' ""a2""' ""a3"");  	}  }"' 3' @"  class TestClass  {  	void Foo(string a1 = ""a1""' string a2 = ""a2""' string a3 = ""a3""' params string[] extraStrings)  	{  	}    	void Bar()  	{  		Foo ();  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ProhibitedModifiersIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ProhibitedModifiersIssueTests.cs,TestNonStaticFieldsInStaticClass,The following statement contains a magic number: Test<ProhibitedModifiersIssue>(@"  static class Foo  {  	int a' b' c;  }  "' 3' @"  static class Foo  {  	static int a' b' c;  }  "' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentNameTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentNameTests.cs,MethodInvocation2,The following statement contains a magic number: Test<RedundantArgumentNameIssue>(input' 3' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentNameTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentNameTests.cs,MethodInvocation3,The following statement contains a magic number: Test<RedundantArgumentNameIssue>(input' 3' output' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentNameTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentNameTests.cs,IndexerExpression,The following statement contains a magic number: Test<RedundantArgumentNameIssue>(input' 2' output' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantArgumentNameTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantArgumentNameTests.cs,TestAttributes,The following statement contains a magic number: Test<RedundantArgumentNameIssue>(input' 2' output' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantLambdaSignatureParenthesesIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantLambdaSignatureParenthesesIssueTests.cs,SimpleCase,The following statement contains a magic number: Test<RedundantLambdaSignatureParenthesesIssue>(@"  class Program  {  	public delegate int MyDel(int j);    	public static void Foo()  	{  		MyDel increase = (j) => (j * 42);  	}  }  "' 2' @"  class Program  {  	public delegate int MyDel(int j);    	public static void Foo()  	{  		MyDel increase = j => (j * 42);  	}  }  "' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,FormatStringProblemIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\FormatStringProblemIssueTests.cs,FormatItemIndexOutOfRangeOfArguments,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,FormatStringProblemIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\FormatStringProblemIssueTests.cs,FormatItemIndexOutOfRangeOfArguments_ExplicitArrayCreation,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,FormatStringProblemIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\FormatStringProblemIssueTests.cs,UnescapedLeftBrace,The following statement contains a magic number: Assert.AreEqual (2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantCatchClauseIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantCatchClauseIssueTests.cs,TestEmptyCatch,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestVariableInvocation,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (  				input'  				2'  				@"  using System.Collections.Generic;  using System.Linq;  class TestClass  {  	void TestMethod ()  	{  		IEnumerable<object> e = null;  		var type = e.GetType();  		var enumerable = e as object[] ?? e.ToArray ();  		var x = enumerable.First ();  		var y = enumerable.Count ();  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestVariableForeach,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (  				input'   				2'  				@"  using System.Collections.Generic;  using System.Linq;  class TestClass  {  	void TestMethod ()  	{  		IEnumerable<object> e = null;  		var enumerable = e as IList<object> ?? e.ToList ();  		foreach (var x in enumerable) ;  		foreach (var y in enumerable) ;  	}  }"' 1' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestVariableMixed,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestParameter,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestIf,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestIf2,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 3);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestDo,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestLambda,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestLambda2,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestConditionalExpression2,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestAssignmentInConditionalExpression,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestAssignment2,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestExpression,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestOutArgument2,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,PossibleMultipleEnumerationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\PossibleMultipleEnumerationIssueTests.cs,TestOutArgument3,The following statement contains a magic number: Test<PossibleMultipleEnumerationIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,MethodOverloadWithOptionalParameterIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\MethodOverloadWithOptionalParameterIssueTests.cs,TestTwoParameters,The following statement contains a magic number: TestIssue<MethodOverloadWithOptionalParameterIssue>(@"  using System;    public class FooBar  {      public void Print(string message)      {          Console.WriteLine(message);      }        public void Print(string message' string str2)      {          Console.WriteLine(message);      }        private void Print(string message' string messageDelimiter = ""===""' string secondmessage = ""==="")  	{  		Console.WriteLine(message + messageDelimiter);  	}  }"' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,MissingInterfaceMemberImplementationIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\MissingInterfaceMemberImplementationIssueTests.cs,TestMultiple,The following statement contains a magic number: TestIssue<MissingInterfaceMemberImplementationIssue>(@"  interface IF  {  	void Foo();  }    interface IB  {  	void Bar();  	void Bar2();  }      class Test : IF' IB  {  	public void Bar()  	{  	}  }  "' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ParameterCanBeDeclaredWithBaseTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterCanBeDemotedIssue\ParameterCanBeDeclaredWithBaseTypeIssueTests.cs,FindsTopInterface,The following statement contains a magic number: Assert.AreEqual(4' issue.Actions.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,ParameterCanBeDeclaredWithBaseTypeIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\ParameterCanBeDemotedIssue\ParameterCanBeDeclaredWithBaseTypeIssueTests.cs,AccountsForIndexers,The following statement contains a magic number: Assert.AreEqual(2' issue.Actions.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NonReadonlyReferencedInGetHashCodeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NonReadonlyReferencedInGetHashCodeTests.cs,TestInspectorCase2,The following statement contains a magic number: Assert.AreEqual(2' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NonReadonlyReferencedInGetHashCodeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NonReadonlyReferencedInGetHashCodeTests.cs,TestInspectorCase4,The following statement contains a magic number: Assert.AreEqual(11' issues.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestBadExamples,The following statement contains a magic number: TestIssue<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F()  	{  		throw new ArgumentNullException (""The parameter 'blah' can not be null""' ""blah"");  		throw new ArgumentException (""blah""' ""The parameter 'blah' can not be null"");  		throw new ArgumentOutOfRangeException (""The parameter 'blah' can not be null""' ""blah"");  		throw new DuplicateWaitObjectException (""The parameter 'blah' can not be null""' ""blah"");  	}  }"' 4);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestArgumentNullExceptionSwap,The following statement contains a magic number: Test<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentNullException (""bar""' ""foo"");  	}  }"' 2' @"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentNullException (""foo""' ""bar"");  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestArgumentExceptionSwap,The following statement contains a magic number: Test<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentException (""foo""' ""bar"");  	}  }"' 2' @"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentException (""bar""' ""foo"");  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestArgumentOutOfRangeExceptionSwap,The following statement contains a magic number: Test<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentOutOfRangeException (""bar""' ""foo"");  	}  }"' 2' @"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentOutOfRangeException (""foo""' ""bar"");  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestArgumentOutOfRangeExceptionSwapCase2,The following statement contains a magic number: Test<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentOutOfRangeException (""bar""' 3' ""foo"");  	}  }"' 2' @"  using System;  class A  {  	void F(int foo)  	{  		throw new ArgumentOutOfRangeException (""foo""' 3' ""bar"");  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,NotResolvedInTextIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\NotResolvedInTextIssueTests.cs,TestDuplicateWaitObjectExceptionSwap,The following statement contains a magic number: Test<NotResolvedInTextIssue>(@"  using System;  class A  {  	void F(int foo)  	{  		throw new DuplicateWaitObjectException (""bar""' ""foo"");  	}  }"' 2' @"  using System;  class A  {  	void F(int foo)  	{  		throw new DuplicateWaitObjectException (""foo""' ""bar"");  	}  }"' 0);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeIssues,UnusedParameterIssueTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\UnusedParameterIssueTests.cs,TestMethodLooksLikeEventHandlerButNotUsedAsSuch,The following statement contains a magic number: Test<UnusedParameterIssue> (input' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser,TypeSystemConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeSystemConvertVisitorTests.cs,PartialMethodWithImplementation,The following statement contains a magic number: Assert.AreEqual(2' methods.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser,TypeSystemConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeSystemConvertVisitorTests.cs,PartialMethodWithImplementation,The following statement contains a magic number: Assert.AreEqual(2' method1.Parts.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser,TypeSystemConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeSystemConvertVisitorTests.cs,PartialMethodWithImplementation,The following statement contains a magic number: Assert.AreEqual(2' method2.Parts.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser,TypeSystemConvertVisitorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeSystemConvertVisitorTests.cs,PartialClassWithTwoPartsWithoutPartialModifier,The following statement contains a magic number: Assert.AreEqual(2' typeDef.Parts.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,Simple,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new MyObject(1' 2' 3)"'  				new ObjectCreateExpression {  					Type = new SimpleType("MyObject")'  					Arguments = {  						new PrimitiveExpression(1)'  						new PrimitiveExpression(2)'  						new PrimitiveExpression(3)  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,Simple,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new MyObject(1' 2' 3)"'  				new ObjectCreateExpression {  					Type = new SimpleType("MyObject")'  					Arguments = {  						new PrimitiveExpression(1)'  						new PrimitiveExpression(2)'  						new PrimitiveExpression(3)  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,NestedObjectInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new Rectangle { P1 = new Point { X = 0' Y = 1 }' P2 = new Point { X = 2' Y = 3 } }"'  				new ObjectCreateExpression {  					Type = new SimpleType("Rectangle")'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new NamedExpression(  								"P1"'  								new ObjectCreateExpression {  									Type = new SimpleType("Point")'  									Initializer = new ArrayInitializerExpression {  										Elements = {  											new NamedExpression("X"' new PrimitiveExpression(0))'  											new NamedExpression("Y"' new PrimitiveExpression(1))  										}  									}})'  							new NamedExpression(  								"P2"'  								new ObjectCreateExpression {  									Type = new SimpleType("Point")'  									Initializer = new ArrayInitializerExpression {  										Elements = {  											new NamedExpression("X"' new PrimitiveExpression(2))'  											new NamedExpression("Y"' new PrimitiveExpression(3))  										}  									}})  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,NestedObjectInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new Rectangle { P1 = new Point { X = 0' Y = 1 }' P2 = new Point { X = 2' Y = 3 } }"'  				new ObjectCreateExpression {  					Type = new SimpleType("Rectangle")'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new NamedExpression(  								"P1"'  								new ObjectCreateExpression {  									Type = new SimpleType("Point")'  									Initializer = new ArrayInitializerExpression {  										Elements = {  											new NamedExpression("X"' new PrimitiveExpression(0))'  											new NamedExpression("Y"' new PrimitiveExpression(1))  										}  									}})'  							new NamedExpression(  								"P2"'  								new ObjectCreateExpression {  									Type = new SimpleType("Point")'  									Initializer = new ArrayInitializerExpression {  										Elements = {  											new NamedExpression("X"' new PrimitiveExpression(2))'  											new NamedExpression("Y"' new PrimitiveExpression(3))  										}  									}})  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,NestedObjectInitializerForPreinitializedProperty,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new Rectangle { P1 = { X = 0' Y = 1 }' P2 = { X = 2' Y = 3 } }"'  				new ObjectCreateExpression {  					Type = new SimpleType("Rectangle")'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new NamedExpression(  								"P1"'  								new ArrayInitializerExpression {  									Elements = {  										new NamedExpression("X"' new PrimitiveExpression(0))'  										new NamedExpression("Y"' new PrimitiveExpression(1))  									}  								})'  							new NamedExpression(  								"P2"'  								new ArrayInitializerExpression {  									Elements = {  										new NamedExpression("X"' new PrimitiveExpression(2))'  										new NamedExpression("Y"' new PrimitiveExpression(3))  									}  								})  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,NestedObjectInitializerForPreinitializedProperty,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new Rectangle { P1 = { X = 0' Y = 1 }' P2 = { X = 2' Y = 3 } }"'  				new ObjectCreateExpression {  					Type = new SimpleType("Rectangle")'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new NamedExpression(  								"P1"'  								new ArrayInitializerExpression {  									Elements = {  										new NamedExpression("X"' new PrimitiveExpression(0))'  										new NamedExpression("Y"' new PrimitiveExpression(1))  									}  								})'  							new NamedExpression(  								"P2"'  								new ArrayInitializerExpression {  									Elements = {  										new NamedExpression("X"' new PrimitiveExpression(2))'  										new NamedExpression("Y"' new PrimitiveExpression(3))  									}  								})  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ObjectCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ObjectCreateExpressionTests.cs,CollectionInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new List<int> { 0' 1' 2 }"'  				new ObjectCreateExpression {  					Type = new SimpleType("List"' new PrimitiveType("int"))'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression(new PrimitiveExpression(0))'  							new ArrayInitializerExpression(new PrimitiveExpression(1))'  							new ArrayInitializerExpression(new PrimitiveExpression(2))  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,AnonymousMethodExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\AnonymousMethodExpressionTests.cs,SimpleAnonymousMethod,The following statement contains a magic number: Assert.AreEqual(2' ame.Parameters.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ArrayCreateExpressionTest1,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new int[5]"'  				new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					Arguments = { new PrimitiveExpression(5) }  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,MultidimensionalNestedArray,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new int[5'2][''][]"'  				new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					Arguments = { new PrimitiveExpression(5)' new PrimitiveExpression(2) }'  					AdditionalArraySpecifiers = {  						new ArraySpecifier(3)'  						new ArraySpecifier(1)  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,MultidimensionalNestedArray,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new int[5'2][''][]"'  				new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					Arguments = { new PrimitiveExpression(5)' new PrimitiveExpression(2) }'  					AdditionalArraySpecifiers = {  						new ArraySpecifier(3)'  						new ArraySpecifier(1)  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,MultidimensionalNestedArray,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new int[5'2][''][]"'  				new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					Arguments = { new PrimitiveExpression(5)' new PrimitiveExpression(2) }'  					AdditionalArraySpecifiers = {  						new ArraySpecifier(3)'  						new ArraySpecifier(1)  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ArrayWithImplicitSize2D,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new int['] { { 1 } }"'  				new ArrayCreateExpression {  					Type = new PrimitiveType("int")'  					AdditionalArraySpecifiers = { new ArraySpecifier (2) }'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression {  								Elements = { new PrimitiveExpression(1) }  							}  						}  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new[] { 1' 10' 100' 1000 }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(0)  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new PrimitiveExpression(1)'  							new PrimitiveExpression(10)'  							new PrimitiveExpression(100)'  							new PrimitiveExpression(1000)  						}  					}}  			);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new[] { 1' 10' 100' 1000 }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(0)  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new PrimitiveExpression(1)'  							new PrimitiveExpression(10)'  							new PrimitiveExpression(100)'  							new PrimitiveExpression(1000)  						}  					}}  			);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new[] { 1' 10' 100' 1000 }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(0)  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new PrimitiveExpression(1)'  							new PrimitiveExpression(10)'  							new PrimitiveExpression(100)'  							new PrimitiveExpression(1000)  						}  					}}  			);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression2D,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new ['] { { 1' 10 }' { 100' 1000 } }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(2)'  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(10)  								}  							}'  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(100)'  									new PrimitiveExpression(1000)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression2D,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new ['] { { 1' 10 }' { 100' 1000 } }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(2)'  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(10)  								}  							}'  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(100)'  									new PrimitiveExpression(1000)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression2D,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new ['] { { 1' 10 }' { 100' 1000 } }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(2)'  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(10)  								}  							}'  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(100)'  									new PrimitiveExpression(1000)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,ImplicitlyTypedArrayCreateExpression2D,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new ['] { { 1' 10 }' { 100' 1000 } }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(2)'  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(10)  								}  							}'  							new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(100)'  									new PrimitiveExpression(1000)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,ArrayCreateExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\ArrayCreateExpressionTests.cs,AssignmentInArrayInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"new [] { a = 10 }"'  				new ArrayCreateExpression {  					AdditionalArraySpecifiers = {  						new ArraySpecifier(0)  					}'  					Initializer = new ArrayInitializerExpression {  						Elements = {  							new AssignmentExpression(new IdentifierExpression("a")' new PrimitiveExpression(10))  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IdentifierExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IdentifierExpressionTests.cs,TestVerbatimIdentifier,The following statement contains a magic number: var ident = tree.GetNodeAt<Identifier> (1' 8);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IdentifierExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IdentifierExpressionTests.cs,TestVerbatimIdentifier,The following statement contains a magic number: Assert.AreEqual (new TextLocation (1' 7)' ident.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IdentifierExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IdentifierExpressionTests.cs,TestVerbatimIdentifier,The following statement contains a magic number: Assert.AreEqual (new TextLocation (1' 11)' ident.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IndexerExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IndexerExpressionTests.cs,IndexerExpressionTest,The following statement contains a magic number: Assert.AreEqual(3' ie.Arguments.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IndexerExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IndexerExpressionTests.cs,IndexerExpressionTest,The following statement contains a magic number: Assert.IsTrue(ie.Arguments.ElementAt(2) is PrimitiveExpression);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,IndexerExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\IndexerExpressionTests.cs,IndexerExpressionTest,The following statement contains a magic number: Assert.AreEqual('a'' (char)((PrimitiveExpression)ie.Arguments.ElementAt(2)).Value);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,InvocationExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\InvocationExpressionTests.cs,AmbiguousGrammarGenericMethodCall,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"F(G<A'B>(7))"'  				new InvocationExpression {  					Target = new IdentifierExpression("F")'  					Arguments = {  						new InvocationExpression {  							Target = new IdentifierExpression {  								Identifier = "G"'  								TypeArguments = { new SimpleType("A")' new SimpleType("B") }  							}'  							Arguments = { new PrimitiveExpression(7) }  						}}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,InvocationExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\InvocationExpressionTests.cs,NestedInvocationPositions,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 14)' expr.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,InvocationExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\InvocationExpressionTests.cs,NestedInvocationPositions,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 8)' mre.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,InvocationExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\InvocationExpressionTests.cs,NestedInvocationPositions,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 6)' mre.Target.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,DoubleWithLeadingDot,The following statement contains a magic number: CheckLiteral(".5e-06"' .5e-06);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,FloatWithLeadingDot,The following statement contains a magic number: CheckLiteral(".5e-06f"' .5e-06f);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,IntMinValueTest,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"-2147483648"'  				new UnaryOperatorExpression(UnaryOperatorType.Minus' new PrimitiveExpression(2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,IntMaxValueTest,The following statement contains a magic number: CheckLiteral("2147483647"' 2147483647);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,IntMaxValueTest,The following statement contains a magic number: CheckLiteral("2147483648"' 2147483648);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,LongMinValueTest,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"-9223372036854775808"'  				new UnaryOperatorExpression(UnaryOperatorType.Minus' new PrimitiveExpression(9223372036854775808)));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,LongMaxValueTest,The following statement contains a magic number: CheckLiteral("9223372036854775807"' 9223372036854775807);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,LongMaxValueTest,The following statement contains a magic number: CheckLiteral("9223372036854775808"' 9223372036854775808);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestSingleDigit,The following statement contains a magic number: CheckLiteral("5"' 5);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestInteger,The following statement contains a magic number: CheckLiteral("66"' 66);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestNonOctalInteger,The following statement contains a magic number: Assert.IsTrue(077 == 77);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestNonOctalInteger,The following statement contains a magic number: Assert.IsTrue(077 == 77);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestNonOctalInteger,The following statement contains a magic number: CheckLiteral("077"' 077);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestNonOctalInteger,The following statement contains a magic number: CheckLiteral("056"' 056);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestLongInteger,The following statement contains a magic number: CheckLiteral("9223372036854775807"' 9223372036854775807);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestLongInteger,The following statement contains a magic number: CheckLiteral("9223372036854775808"' 9223372036854775808);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestLongInteger,The following statement contains a magic number: CheckLiteral("18446744073709551615"' 18446744073709551615);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestTooLongInteger,The following statement contains a magic number: CheckLiteral("18446744073709551616f"' 18446744073709551616f);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestTooLongInteger,The following statement contains a magic number: CheckLiteral("18446744073709551616d"' 18446744073709551616d);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestTooLongInteger,The following statement contains a magic number: CheckLiteral("18446744073709551616m"' 18446744073709551616m);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestDouble,The following statement contains a magic number: CheckLiteral("1.1"' 1.1);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestDouble,The following statement contains a magic number: CheckLiteral("1.1e-2"' 1.1e-2);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestFloat,The following statement contains a magic number: CheckLiteral("1.1f"' 1.1f);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestFloat,The following statement contains a magic number: CheckLiteral("1.1e-2f"' 1.1e-2f);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestDecimal,The following statement contains a magic number: CheckLiteral("1.1m"' 1.1m);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestDecimal,The following statement contains a magic number: CheckLiteral("1.1e-2m"' 1.1e-2m);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestDecimal,The following statement contains a magic number: CheckLiteral("2.0e-5m"' 2.0e-5m);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,TestPositionOfIntegerAtEndOfLine,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 2)' pe.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,PrimitiveExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\PrimitiveExpressionTests.cs,LargeVerbatimString,The following statement contains a magic number: i < 10000
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,QueryExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\QueryExpressionTests.cs,MultipleGenerators,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				@"  from c in customers  where c.City == ""London""  from o in c.Orders  where o.OrderDate.Year == 2005  select new { c.Name' o.OrderID' o.Total }"'  				new QueryExpression {  					Clauses = {  						new QueryFromClause {  							Identifier = "c"'  							Expression = new IdentifierExpression("customers")  						}'  						new QueryWhereClause {  							Condition = new BinaryOperatorExpression {  								Left = new IdentifierExpression("c").Member("City")'  								Operator = BinaryOperatorType.Equality'  								Right = new PrimitiveExpression("London")  							}  						}'  						new QueryFromClause {  							Identifier = "o"'  							Expression = new IdentifierExpression("c").Member("Orders")  						}'  						new QueryWhereClause {  							Condition = new BinaryOperatorExpression {  								Left = new IdentifierExpression("o").Member("OrderDate").Member("Year")'  								Operator = BinaryOperatorType.Equality'  								Right = new PrimitiveExpression(2005)  							}  						}'  						new QuerySelectClause {  							Expression = new AnonymousTypeCreateExpression {  								Initializers = {  									new IdentifierExpression("c").Member("Name")'  									new IdentifierExpression("o").Member("OrderID")'  									new IdentifierExpression("o").Member("Total")  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,QueryExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\QueryExpressionTests.cs,LocationOfWhere,The following statement contains a magic number: Assert.That(where.StartLocation' Is.EqualTo(new TextLocation(1' 21)));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,QueryExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\QueryExpressionTests.cs,LocationOfOrderBy,The following statement contains a magic number: Assert.That(where.StartLocation' Is.EqualTo(new TextLocation(1' 21)));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,StackAllocExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\StackAllocExpressionTests.cs,StackAllocExpressionTest,The following statement contains a magic number: Assert.AreEqual(100' ((PrimitiveExpression)sae.CountExpression).Value);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Expression,TypeOfExpressionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Expression\TypeOfExpressionTests.cs,NestedArraysTest,The following statement contains a magic number: ParseUtilCSharp.AssertExpression(  				"typeof(int['][])"'  				new TypeOfExpression {  					Type = new ComposedType {  						BaseType = new PrimitiveType("int")'  						ArraySpecifiers = {  							new ArraySpecifier(2)'  							new ArraySpecifier(1)  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 2)' pp.First().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 2)' pp.First().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 15)' pp.First().EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 15)' pp.First().EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(3' 1)' comment.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 2)' comment.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 2)' comment.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 2)' pp.Last().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 2)' pp.Last().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 8)' pp.Last().EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,InactiveIf,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' 8)' pp.Last().EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarning,The following statement contains a magic number: Assert.IsTrue(ppd.IsDefined (809));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 8)' ppd.PragmaToken.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 9)' ppd.WarningToken.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 16)' ppd.WarningToken.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 17)' ppd.DisableToken.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 24)' ppd.DisableToken.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 25)' id.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 28)' id.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,PragmaWarningLocations,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 28)' ppd.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,LineWithFileName,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 1)' syntaxTree.Members.Single().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,LineWithFileName,The following statement contains a magic number: Assert.AreEqual(200' ppd.LineNumber);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,Line,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 1)' syntaxTree.Members.Single().StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,PreprocessorDirectiveTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\PreprocessorDirectiveTests.cs,Line,The following statement contains a magic number: Assert.AreEqual(200' ppd.LineNumber);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,SimpleClassRegionTest,The following statement contains a magic number: Assert.AreEqual(14' bodyStartLocation.Column' "BodyStartLocation.X");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,SimpleClassRegionTest,The following statement contains a magic number: Assert.AreEqual(3' td.EndLocation.Line' "EndLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,SimpleClassRegionTest,The following statement contains a magic number: Assert.AreEqual(2' td.EndLocation.Column' "EndLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,NestedClassesTest,The following statement contains a magic number: Assert.AreEqual(Modifiers.Static' ((TypeDeclaration)td.Members.ElementAt(2)).Modifiers);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,NestedClassesTest,The following statement contains a magic number: Assert.AreEqual(Modifiers.Static | Modifiers.Internal' ((TypeDeclaration)td.Members.ElementAt(3)).Modifiers);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,EnumWithInitializer,The following statement contains a magic number: Assert.AreEqual(10' ((PrimitiveExpression)member.Initializer).Value);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,TypeDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\TypeDeclarationTests.cs,EnumWithIncorrectNewlineAfterIntegerLiteral,The following statement contains a magic number: ParseUtilCSharp.AssertGlobal (  				"enum DisplayFlags { D = 4\r\r\n}"'  				new TypeDeclaration {  					ClassType = ClassType.Enum'  					Name = "DisplayFlags"'  					Members = {  						new EnumMemberDeclaration {  							Name = "D"'  							Initializer = new PrimitiveExpression(4)  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,DeclarationTest,The following statement contains a magic number: Assert.IsTrue(2 <= syntaxTree.Children.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingAliasDeclarationTest,The following statement contains a magic number: Assert.IsTrue(3 <= syntaxTree.Children.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingAliasDeclarationTest,The following statement contains a magic number: Assert.IsTrue(syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(2) is UsingAliasDeclaration);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingAliasDeclarationTest,The following statement contains a magic number: ud = (UsingAliasDeclaration)syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(2);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingWithAliasing,The following statement contains a magic number: Assert.IsTrue(3 <= syntaxTree.Children.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingWithAliasing,The following statement contains a magic number: Assert.IsTrue(syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(2) is UsingDeclaration);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingWithAliasing,The following statement contains a magic number: Assert.IsFalse(syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(2) is UsingAliasDeclaration);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,UsingDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\UsingDeclarationTests.cs,UsingWithAliasing,The following statement contains a magic number: ud = (UsingDeclaration)syntaxTree.Children.Where (c => c.Role != Roles.NewLine).ElementAt(2);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,AttributesUsingNamespaceAlias,The following statement contains a magic number: Assert.AreEqual(2' decl.Attributes.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(2' firstAttribute.StartLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(3' firstAttribute.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(5' lastAttribute.StartLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(6' lastAttribute.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(7' attributeSection.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesWithOptionalCommaInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(2' firstAttribute.StartLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesWithOptionalCommaInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(3' firstAttribute.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesWithOptionalCommaInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(5' lastAttribute.StartLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesWithOptionalCommaInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(6' lastAttribute.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,TwoAttributesWithOptionalCommaInSameSectionLocations,The following statement contains a magic number: Assert.AreEqual(8' attributeSection.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.GeneralScope,AttributeSectionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\GeneralScope\AttributeSectionTests.cs,AttributeWithNamedArguments,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember (  				@"[A(0' a:1' b=2)] class Test {}"'  				new TypeDeclaration {  					ClassType = ClassType.Class'  					Name = "Test"'  					Attributes = {  						new AttributeSection {  							Attributes = {  								new Attribute {  									Type = new SimpleType("A")'  									Arguments = {  										new PrimitiveExpression(0)'  										new NamedArgumentExpression("a"' new PrimitiveExpression(1))'  										new NamedExpression("b"' new PrimitiveExpression(2))  									}  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,BlockStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\BlockStatementTests.cs,ComplexBlockStatementPositionTest,The following statement contains a magic number: Assert.AreEqual(2' blockStmt.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,BlockStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\BlockStatementTests.cs,ComplexBlockStatementPositionTest,The following statement contains a magic number: Assert.AreEqual(9' blockStmt.EndLocation.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,BlockStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\BlockStatementTests.cs,ComplexBlockStatementPositionTest,The following statement contains a magic number: Assert.AreEqual(3' blockStmt.Statements.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,ForStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\ForStatementTests.cs,ForStatementTestMultipleInitializers,The following statement contains a magic number: Assert.AreEqual(2' forStmt.Initializers.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,ForStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\ForStatementTests.cs,ForStatementTestMultipleIterators,The following statement contains a magic number: Assert.AreEqual(2' ((VariableDeclarationStatement)forStmt.Initializers.Single()).Variables.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,ForStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\ForStatementTests.cs,ForStatementTestMultipleIterators,The following statement contains a magic number: Assert.AreEqual(2' forStmt.Iterators.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,TryCatchStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\TryCatchStatementTests.cs,CommentBeforeTryCatchFinally,The following statement contains a magic number: Assert.That(children.Count' Is.EqualTo(5));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,TryCatchStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\TryCatchStatementTests.cs,CommentBeforeTryCatchFinally,The following statement contains a magic number: Assert.That(children[2].Role' Is.EqualTo(BlockStatement.StatementRole));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,TryCatchStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\TryCatchStatementTests.cs,CommentBeforeTryCatchFinally,The following statement contains a magic number: Assert.That(children[3].Role' Is.EqualTo(Roles.Comment));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,TryCatchStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\TryCatchStatementTests.cs,CommentBeforeTryCatchFinally,The following statement contains a magic number: Assert.That(children[4].Role' Is.EqualTo(Roles.RBrace));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,VariableDeclarationStatementTest,The following statement contains a magic number: Assert.AreEqual(5' ((PrimitiveExpression)lvd.Variables.First ().Initializer).Value);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithoutModifier,The following statement contains a magic number: Assert.AreEqual(2' lvd.StartLocation.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithoutModifier,The following statement contains a magic number: Assert.AreEqual(2' lvd.EndLocation.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithoutModifier,The following statement contains a magic number: Assert.AreEqual(14' lvd.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithModifier,The following statement contains a magic number: Assert.AreEqual(2' lvd.StartLocation.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithModifier,The following statement contains a magic number: Assert.AreEqual(2' lvd.EndLocation.Line);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,PositionTestWithModifier,The following statement contains a magic number: Assert.AreEqual(20' lvd.EndLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,VariableDeclarationStatementTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\VariableDeclarationStatementTests.cs,NestedArray,The following statement contains a magic number: Assert.IsTrue(new VariableDeclarationStatement(new SimpleType("DateTime").MakeArrayType(1).MakeArrayType(2)' "a").IsMatch(lvd));
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,InvalidStatementsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\InvalidStatementsTests.cs,AsExpressionStatementPositions,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 3)' expr.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Statements,InvalidStatementsTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Statements\InvalidStatementsTests.cs,AsExpressionStatementPositions,The following statement contains a magic number: Assert.AreEqual(new TextLocation(1' 27)' expr.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,ConstructorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\ConstructorDeclarationTests.cs,ConstructorDeclarationTest3,The following statement contains a magic number: Assert.AreEqual(3' cd.Initializer.Arguments.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,FieldDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\FieldDeclarationTests.cs,SimpleFieldDeclarationTest,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember(  				"int['''] myField;"'  				new FieldDeclaration {  					ReturnType = new PrimitiveType("int").MakeArrayType(4)'  					Variables = { new VariableInitializer("myField") }  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,FieldDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\FieldDeclarationTests.cs,MultipleFieldDeclarationTest,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember(  				"int a = 1' b = 2;"'  				new FieldDeclaration {  					ReturnType = new PrimitiveType("int")'  					Variables = {  						new VariableInitializer("a"' new PrimitiveExpression(1))'  						new VariableInitializer("b"' new PrimitiveExpression(2))'  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,FieldDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\FieldDeclarationTests.cs,FieldWithArrayInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember(  				"public static readonly int[] arr = { 1' 2' 3 };"'  				new FieldDeclaration {  					Modifiers = Modifiers.Public | Modifiers.Static | Modifiers.Readonly'  					ReturnType = new PrimitiveType("int").MakeArrayType()'  					Variables = {  						new VariableInitializer {  							Name = "arr"'  							Initializer = new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(2)'  									new PrimitiveExpression(3)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,FieldDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\FieldDeclarationTests.cs,FieldWithArrayInitializer,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember(  				"public static readonly int[] arr = { 1' 2' 3 };"'  				new FieldDeclaration {  					Modifiers = Modifiers.Public | Modifiers.Static | Modifiers.Readonly'  					ReturnType = new PrimitiveType("int").MakeArrayType()'  					Variables = {  						new VariableInitializer {  							Name = "arr"'  							Initializer = new ArrayInitializerExpression {  								Elements = {  									new PrimitiveExpression(1)'  									new PrimitiveExpression(2)'  									new PrimitiveExpression(3)  								}  							}  						}  					}});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,FieldDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\FieldDeclarationTests.cs,FieldWithFixedSize,The following statement contains a magic number: ParseUtilCSharp.AssertTypeMember(  				"public unsafe fixed int Field[100];"'  				new FixedFieldDeclaration() {  					Modifiers =  Modifiers.Public | Modifiers.Unsafe'  					ReturnType = new PrimitiveType("int")'  					Variables = {  						new FixedVariableInitializer {  							Name = "Field"'  							CountExpression = new PrimitiveExpression(100)  						}  					}  				});
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,IndexerDeclarationTest,The following statement contains a magic number: Assert.AreEqual(2' id.Parameters.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,ThisTokenPosition,The following statement contains a magic number: Assert.AreEqual(12' thisKeyword.StartLocation.Column);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,IndexerDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\IndexerDeclarationTests.cs,IndexerImplementingInterfaceTest,The following statement contains a magic number: Assert.AreEqual(2' id.Parameters.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,SimpleMethodRegionTest,The following statement contains a magic number: Assert.AreEqual(2' md.StartLocation.Line' "StartLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,SimpleMethodRegionTest,The following statement contains a magic number: Assert.AreEqual(5' md.EndLocation.Line' "EndLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,SimpleMethodRegionTest,The following statement contains a magic number: Assert.AreEqual(3' md.StartLocation.Column' "StartLocation.X");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,SimpleMethodRegionTest,The following statement contains a magic number: Assert.AreEqual(4' md.EndLocation.Column' "EndLocation.X");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithModifiersRegionTest,The following statement contains a magic number: Assert.AreEqual(2' md.StartLocation.Line' "StartLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithModifiersRegionTest,The following statement contains a magic number: Assert.AreEqual(5' md.EndLocation.Line' "EndLocation.Y");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithModifiersRegionTest,The following statement contains a magic number: Assert.AreEqual(3' md.StartLocation.Column' "StartLocation.X");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithModifiersRegionTest,The following statement contains a magic number: Assert.AreEqual(4' md.EndLocation.Column' "EndLocation.X");
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithEmptyAssignmentErrorInBody,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' 1)' md.Body.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithEmptyAssignmentErrorInBody,The following statement contains a magic number: Assert.AreEqual(new TextLocation(5' 2)' md.Body.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,MethodDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\MethodDeclarationTests.cs,MethodWithEmptyAssignmentErrorInBody,The following statement contains a magic number: Assert.AreEqual(new TextLocation(5' 2)' md.Body.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,OperatorDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\OperatorDeclarationTests.cs,BinaryPlusOperatorDeclarationTest,The following statement contains a magic number: Assert.AreEqual(2' od.Parameters.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(2' code.IndexOf("{\n\t\tget") - line2Pos + 1)' pd.GetChildByRole(Roles.LBrace).StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(5' 3)' pd.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(5' 3)' pd.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(3' code.IndexOf("{ return") - line3Pos + 1)' pd.Getter.Body.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(3' code.IndexOf("}\n\t\tset") + 1 - line3Pos + 1)' pd.Getter.Body.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' code.IndexOf("{ f =") - line4Pos + 1)' pd.Setter.Body.StartLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.TypeMembers,PropertyDeclarationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\TypeMembers\PropertyDeclarationTests.cs,PropertyRegionTest,The following statement contains a magic number: Assert.AreEqual(new TextLocation(4' code.IndexOf("}\n\t}") + 1 - line4Pos + 1)' pd.Setter.Body.EndLocation);
Magic Number,ICSharpCode.NRefactory.CSharp.Refactoring,TypeSystemAstBuilderTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Refactoring\TypeSystemAstBuilderTests.cs,SetUp,The following statement contains a magic number: derivedClass = compilation.RootNamespace.GetTypeDefinition("Derived"' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,AnonymousTypeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\AnonymousTypeTests.cs,Zip,The following statement contains a magic number: Assert.AreEqual(2' type.Properties.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,AnonymousTypeTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\AnonymousTypeTests.cs,ZipAnonymousType,The following statement contains a magic number: Assert.AreEqual(2' rr.InitializerStatements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,NestedArrayCreation,The following statement contains a magic number: Assert.AreEqual(2' a2.Dimensions);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,NestedArrayCreation,The following statement contains a magic number: Assert.AreEqual(3' a3.Dimensions);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2x3,The following statement contains a magic number: Assert.AreEqual(6' result.InitializerElements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2x3,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2x3,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2x3,The following statement contains a magic number: Assert.AreEqual(3' result.SizeArguments[1].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments3x2,The following statement contains a magic number: Assert.AreEqual(6' result.InitializerElements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments3x2,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments3x2,The following statement contains a magic number: Assert.AreEqual(3' result.SizeArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments3x2,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments[1].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2xInvalid,The following statement contains a magic number: Assert.AreEqual(5' result.InitializerElements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2xInvalid,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArguments2xInvalid,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArgumentsExplicitSizeInconsistentWithActualSize,The following statement contains a magic number: Assert.AreEqual(6' result.InitializerElements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArgumentsExplicitSizeInconsistentWithActualSize,The following statement contains a magic number: Assert.AreEqual(2' result.SizeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArgumentsExplicitSizeInconsistentWithActualSize,The following statement contains a magic number: Assert.AreEqual(5' result.SizeArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ArrayCreateTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ArrayCreateTests.cs,SizeArgumentsExplicitSizeInconsistentWithActualSize,The following statement contains a magic number: Assert.AreEqual(6' result.SizeArguments[1].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(3.0f' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant(1.5f)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(3.0f' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant(1.5f)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(3.0f' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant(1.5f)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(6' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant((byte)2)' MakeConstant((byte)3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(6' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant((byte)2)' MakeConstant((byte)3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Multiplication,The following statement contains a magic number: AssertConstant(6' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Multiply' MakeConstant((byte)2)' MakeConstant((byte)3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Addition,The following statement contains a magic number: AssertConstant(3.0' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Add' MakeConstant(1.0f)' MakeConstant(2.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Addition,The following statement contains a magic number: AssertConstant(3.0' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Add' MakeConstant(1.0f)' MakeConstant(2.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumAddition,The following statement contains a magic number: AssertConstant(StringComparison.Ordinal' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Add' MakeConstant(StringComparison.InvariantCulture)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumAddition,The following statement contains a magic number: AssertConstant(StringComparison.OrdinalIgnoreCase' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Add' MakeConstant((short)3)' MakeConstant(StringComparison.InvariantCulture)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Subtraction,The following statement contains a magic number: AssertConstant(-1.0' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Subtract' MakeConstant(1.0f)' MakeConstant(2.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumSubtraction,The following statement contains a magic number: AssertConstant(StringComparison.InvariantCulture' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Subtract' MakeConstant(StringComparison.Ordinal)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumSubtraction,The following statement contains a magic number: AssertConstant(3' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Subtract' MakeConstant(StringComparison.OrdinalIgnoreCase)' MakeConstant(StringComparison.InvariantCulture)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumSubtraction,The following statement contains a magic number: AssertConstant(-2' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Subtract' MakeConstant(0)' MakeConstant(StringComparison.InvariantCulture)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumSubtraction,The following statement contains a magic number: AssertConstant(-2' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Subtract' MakeConstant(0L)' MakeConstant(StringComparison.InvariantCulture)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ShiftTest,The following statement contains a magic number: AssertConstant(6' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ShiftLeft' MakeConstant(3)' MakeConstant(1)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ShiftTest,The following statement contains a magic number: AssertConstant(6' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ShiftLeft' MakeConstant(3)' MakeConstant(1)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ShiftTest,The following statement contains a magic number: AssertConstant(ulong.MaxValue >> 2' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ShiftRight' MakeConstant(ulong.MaxValue)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ShiftTest,The following statement contains a magic number: AssertConstant(ulong.MaxValue >> 2' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ShiftRight' MakeConstant(ulong.MaxValue)' MakeConstant(2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(3)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(3)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(3)' MakeConstant(3.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(3)' MakeConstant(3.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(2.9)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ConstantEquality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.Equality' MakeConstant(2.9)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(3)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(3)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(3)' MakeConstant(3.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(false' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(3)' MakeConstant(3.0)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(2.9)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,Inequality,The following statement contains a magic number: AssertConstant(true' resolver.ResolveBinaryOperator(  				BinaryOperatorType.InEquality' MakeConstant(2.9)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertConstant(5' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeConstant(7)' MakeConstant(13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertConstant(5' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeConstant(7)' MakeConstant(13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertConstant(5' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeConstant(7)' MakeConstant(13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertType(typeof(int?)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeConstant(null)' MakeConstant((short)13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertType(typeof(long?)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeResult(typeof(uint?))' MakeConstant((short)13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertType(typeof(uint?)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeResult(typeof(uint?))' MakeConstant((int)13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: AssertType(typeof(ulong?)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeResult(typeof(ulong?))' MakeConstant((long)13)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitAnd,The following statement contains a magic number: Assert.IsTrue(resolver.ResolveBinaryOperator(  				BinaryOperatorType.BitwiseAnd' MakeResult(typeof(ulong?))' MakeConstant((short)13)).IsError);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6L ^ 3' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6L)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6L ^ 3' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6L)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6L ^ 3' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6L)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6L ^ 3' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6L)' MakeConstant(3)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6UL ^ 3L' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6UL ^ 3L' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6UL ^ 3L' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertConstant(6UL ^ 3L' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertError(typeof(ulong)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(-3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,BitXor,The following statement contains a magic number: AssertError(typeof(ulong)' resolver.ResolveBinaryOperator(  				BinaryOperatorType.ExclusiveOr' MakeConstant(6UL)' MakeConstant(-3L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,ByteEnumSubtraction,The following statement contains a magic number: Assert.AreEqual(255' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumBitwiseOrWithMissingBaseType,The following statement contains a magic number: var rhs = new ConstantResolveResult(enumWithMissingBaseType' 2);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,BinaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\BinaryOperatorTests.cs,EnumBitwiseOrWithMissingBaseType,The following statement contains a magic number: Assert.AreEqual(3' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(3' resolver.ResolveCast(ResolveType(typeof(int))' MakeConstant(3.1415)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(3' resolver.ResolveCast(ResolveType(typeof(int))' MakeConstant(3.1415)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(3' resolver.ResolveCast(ResolveType(typeof(int))' MakeConstant(3.99)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(3' resolver.ResolveCast(ResolveType(typeof(int))' MakeConstant(3.99)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant((short)-3' resolver.ResolveCast(ResolveType(typeof(short))' MakeConstant(-3.99f)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant((short)-3' resolver.ResolveCast(ResolveType(typeof(short))' MakeConstant(-3.99f)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(-3L' resolver.ResolveCast(ResolveType(typeof(long))' MakeConstant(-3.5)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,ConstantValueCast,The following statement contains a magic number: AssertConstant(-3L' resolver.ResolveCast(ResolveType(typeof(long))' MakeConstant(-3.5)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,OverflowingCast,The following statement contains a magic number: AssertConstant(uint.MaxValue' resolver.WithCheckForOverflow(false).ResolveCast(ResolveType(typeof(uint))' MakeConstant(-1.6)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,CastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\CastTests.cs,OverflowingCast,The following statement contains a magic number: AssertError(typeof(uint)' resolver.WithCheckForOverflow(true).ResolveCast(ResolveType(typeof(uint))' MakeConstant(-1.6)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,TestOperator,The following statement contains a magic number: AssertConversion(corr.Operands[2]' falseExpr' falseConv' "False Conversion");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,StringAndNull,The following statement contains a magic number: Assert.IsTrue(result.Operands[2].IsCompileTimeConstant);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,StringAndNull,The following statement contains a magic number: Assert.IsNull(result.Operands[2].ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,StringAndNull,The following statement contains a magic number: Assert.AreEqual("System.String"' result.Operands[2].Type.FullName);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,NullAndString,The following statement contains a magic number: AssertConversion(result.Operands[2]' falseExpr' Conversion.IdentityConversion' "False Conversion");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,Constant,The following statement contains a magic number: AssertConstant(1L' resolver.ResolveConditional(  				MakeConstant(true)' MakeConstant(1)' MakeConstant(2L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,Constant,The following statement contains a magic number: AssertConstant(2L' resolver.ResolveConditional(  				MakeConstant(false)' MakeConstant(1)' MakeConstant(2L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConditionalOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConditionalOperatorTests.cs,Constant,The following statement contains a magic number: AssertConstant(2L' resolver.ResolveConditional(  				MakeConstant(false)' MakeConstant(1)' MakeConstant(2L)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfPrimitiveTypes,The following statement contains a magic number: new[] { new { t = "sbyte"' n = 1 }'  			                          new { t = "byte"' n = 1 }'  			                          new { t = "short"' n = 2 }'  			                          new { t = "ushort"' n = 2 }'  			                          new { t = "int"' n = 4 }'  			                          new { t = "uint"' n = 4 }'  			                          new { t = "long"' n = 8 }'  			                          new { t = "ulong"' n = 8 }'  			                          new { t = "char"' n = 2 }'  			                          new { t = "float"' n = 4 }'  			                          new { t = "double"' n = 8 }'  			                          new { t = "bool"' n = 1 }  			        }
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfEnum,The following statement contains a magic number: Assert.AreEqual(4' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,SizeOfTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\SizeOfTests.cs,SizeOfEnum,The following statement contains a magic number: Assert.AreEqual(2' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,DynamicInvocation,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,DynamicInvocationWithNamedArguments,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(3));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,DynamicInvocationWithNamedArguments,The following statement contains a magic number: AssertNamedArgument<LocalResolveResult>(rr.Arguments[2]' "param2"' lrr => lrr.Variable.Name == "b");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InvocationWithDynamicArgumentWhenBothAnOwnAndABaseMethodAreApplicable,The following statement contains a magic number: Assert.That(mg.Methods.Count()' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InvocationWithDynamicArgumentWithTwoApplicableMethodsAndNamedArguments,The following statement contains a magic number: Assert.That(mg.Methods.All(m => m.Parameters.Count == 2) && mg.Methods.All(m => m.Parameters[1].Type.Name == "Int32"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InvocationWithDynamicArgumentWithTwoApplicableMethodsAndNamedArguments,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,IndexingDynamicObjectWithNamedArguments,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,IndexingWithDynamicArgumentWithTwoApplicableIndexersAndNamedArguments,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructingObjectWithDynamicArgumentWithTwoApplicableConstructors,The following statement contains a magic number: Assert.That(mg.Methods.All(m => m.Parameters.Count == 2 && m.Parameters[1].Type.Name == "Int32"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructingObjectWithDynamicArgumentWithTwoApplicableConstructors,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructingObjectWithDynamicArgumentWithTwoApplicableConstructorsAndNamedArguments,The following statement contains a magic number: Assert.That(mg.Methods.All(m => m.Parameters.Count == 2 && m.Parameters[1].Type.Name == "Int32"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructingObjectWithDynamicArgumentWithTwoApplicableConstructorsAndNamedArguments,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InitializingBaseWithDynamicArgumentAndOneApplicableConstructor,The following statement contains a magic number: Assert.That(((IParameterizedMember)rr.Member).Parameters.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InitializingBaseWithDynamicArgumentAndOneApplicableConstructor,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InitializingBaseWithDynamicArgumentAndTwoApplicableConstructors,The following statement contains a magic number: Assert.That(mg.Methods.All(m => m.Parameters.Count == 2 && m.Parameters[1].Type.Name == "Int32"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,InitializingBaseWithDynamicArgumentAndTwoApplicableConstructors,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructorChainingWithDynamicArgumentAndOneApplicableConstructor,The following statement contains a magic number: Assert.That(((IParameterizedMember)rr.Member).Parameters.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructorChainingWithDynamicArgumentAndOneApplicableConstructor,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructorChainingWithDynamicArgumentAndTwoApplicableConstructors,The following statement contains a magic number: Assert.That(mg.Methods.All(m => m.Parameters.Count == 2 && m.Parameters[1].Type.Name == "Int32"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,DynamicTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\DynamicTests.cs,ConstructorChainingWithDynamicArgumentAndTwoApplicableConstructors,The following statement contains a magic number: Assert.That(rr.Arguments.Count' Is.EqualTo(2));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindParameterReferences,The following statement contains a magic number: Assert.AreEqual(new int[] { 3' 4' 9 }' FindReferences(method.Parameters[0]).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindParameterReferences,The following statement contains a magic number: Assert.AreEqual(new int[] { 3' 4' 9 }' FindReferences(method.Parameters[0]).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindParameterReferences,The following statement contains a magic number: Assert.AreEqual(new int[] { 3' 4' 9 }' FindReferences(method.Parameters[0]).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReference,The following statement contains a magic number: Assert.AreEqual(new int[] { 3' 5 }' FindReferences(m_int).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReference,The following statement contains a magic number: Assert.AreEqual(new int[] { 3' 5 }' FindReferences(m_int).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReference,The following statement contains a magic number: Assert.AreEqual(new int[] { 4' 6 }' FindReferences(m_string).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReference,The following statement contains a magic number: Assert.AreEqual(new int[] { 4' 6 }' FindReferences(m_string).Select(n => n.StartLocation.Line).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 10)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 10)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 10)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 10)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 13)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 13)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 13)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInOtherMethodCall,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 13)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 26)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 26)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 26)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 26)' new TextLocation(6' 2) }'  			                FindReferences(m_int).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 49)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 49)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 49)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindMethodGroupReferenceInExplicitDelegateCreation,The following statement contains a magic number: Assert.AreEqual(new [] { new TextLocation(4' 49)' new TextLocation(7' 2) }'  			                FindReferences(m_string).Select(n => n.StartLocation).ToArray());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferenceToGetEnumeratorUsedImplicitlyInForeach,The following statement contains a magic number: Assert.AreEqual(2' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferenceToGetEnumeratorUsedImplicitlyInForeach,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 3 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferenceToGetEnumeratorUsedImplicitlyInForeach,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 8 && r is ForeachStatement));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization,The following statement contains a magic number: Assert.AreEqual(2' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 4 && r is ObjectCreateExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 6 && r is OperatorDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization_ExplicitCast,The following statement contains a magic number: Assert.AreEqual(2' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization_ExplicitCast,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 4 && r is ObjectCreateExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInLocalVariableInitialization_ExplicitCast,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 6 && r is OperatorDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInAssignment_ExplicitCast,The following statement contains a magic number: Assert.AreEqual(2' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInAssignment_ExplicitCast,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 5 && r is ObjectCreateExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindReferencesForOpImplicitInAssignment_ExplicitCast,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 7 && r is OperatorDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest1,The following statement contains a magic number: Assert.AreEqual(2' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest1,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 3 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest1,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 8 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest2,The following statement contains a magic number: Assert.AreEqual(3' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest2,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 3 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest2,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 7 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest2,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 8 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.AreEqual(6' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 2 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 3 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 4 && r is MethodDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 7 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 8 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,InheritanceTest3,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 9 && r is InvocationExpression));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.AreEqual(5' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 2 && r is MemberType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 4 && r is NamespaceDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 18 && r is SimpleType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 26 && r is MemberType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindNamespaceTest,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 29 && r is MemberType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindSub,The following statement contains a magic number: Assert.AreEqual(4' actual.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindSub,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 2 && r is SimpleType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindSub,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 4 && r is NamespaceDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindSub,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 8 && r is NamespaceDeclaration));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,FindReferencesTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\FindReferencesTest.cs,FindSub,The following statement contains a magic number: Assert.IsTrue(actual.Any(r => r.StartLocation.Line == 12 && r is SimpleType));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,InvocationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\InvocationTests.cs,FirstParameterToExtensionMethod,The following statement contains a magic number: Assert.That(rr.Arguments[2]' Is.InstanceOf<LocalResolveResult>());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,InvocationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\InvocationTests.cs,FirstParameterToExtensionMethod,The following statement contains a magic number: Assert.That(((LocalResolveResult)rr.Arguments[2]).Variable.Name' Is.EqualTo("c"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocation,The following statement contains a magic number: Assert.AreEqual(3' member.Parameters.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocation,The following statement contains a magic number: Assert.AreEqual(3' typeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocation,The following statement contains a magic number: Assert.AreEqual("System.Int32"' typeArguments[2].ReflectionName' "TResult");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocationWithTransparentIdentifier,The following statement contains a magic number: Assert.AreEqual(3' member.Parameters.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocationWithTransparentIdentifier,The following statement contains a magic number: Assert.AreEqual(3' typeArguments.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,LinqTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\LinqTests.cs,SelectManyInvocationWithTransparentIdentifier,The following statement contains a magic number: Assert.AreEqual(TypeKind.Anonymous' typeArguments[2].Kind' "TResult");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,GroupMethodsByDeclaringType,The following statement contains a magic number: Assert.AreEqual(2' rr.MethodsGroupedByDeclaringType.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,MethodInGenericClassOverriddenByConcreteMethod,The following statement contains a magic number: Assert.AreEqual(2' rr.MethodsGroupedByDeclaringType.Count());
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,MemberLookupTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\MemberLookupTests.cs,TestBug10201,The following statement contains a magic number: Assert.AreEqual(2' baseType.TypeParameterCount);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ObjectCreationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ObjectCreationTests.cs,ComplexObjectInitializer,The following statement contains a magic number: Assert.AreEqual(5' rr.InitializerStatements.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,TestLambdaInference,The following statement contains a magic number: ITypeParameter[] typeParameters = {  				new DefaultTypeParameter(compilation' SymbolKind.Method' 0' "X")'  				new DefaultTypeParameter(compilation' SymbolKind.Method' 1' "Y")'  				new DefaultTypeParameter(compilation' SymbolKind.Method' 2' "Z")  			};
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,TypeInferenceTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\TypeInferenceTests.cs,TestLambdaInference,The following statement contains a magic number: IType[] parameterTypes = {  				typeParameters[0]'  				new ParameterizedType(compilation.FindType(typeof(Func<'>)).GetDefinition()' new[] { typeParameters[0]' typeParameters[1] })'  				new ParameterizedType(compilation.FindType(typeof(Func<'>)).GetDefinition()' new[] { typeParameters[1]' typeParameters[2] })  			};
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversion,The following statement contains a magic number: Assert.IsTrue (IntegerLiteralConversion(200' typeof(int)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversion,The following statement contains a magic number: Assert.IsTrue (IntegerLiteralConversion(200' typeof(ushort)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversion,The following statement contains a magic number: Assert.IsFalse(IntegerLiteralConversion(200' typeof(sbyte)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversionToNullable,The following statement contains a magic number: Assert.IsTrue(IntegerLiteralConversion(200' typeof(uint?)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversionToNullable,The following statement contains a magic number: Assert.IsTrue(IntegerLiteralConversion(200' typeof(short?)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,ImplicitConstantExpressionConversionToNullable,The following statement contains a magic number: Assert.IsTrue(IntegerLiteralConversion(200' typeof(byte?)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(string)' typeof(object)' typeof(IComparable<string>)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterPrimitiveConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(ushort)' typeof(uint)' typeof(int)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterPrimitiveConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(byte)' typeof(ushort)' typeof(short)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterPrimitiveConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(1' typeof(ushort)' typeof(sbyte)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterNullableConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(byte?)' typeof(ulong?)' typeof(uint?)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterNullableConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(byte)' typeof(ulong?)' typeof(uint)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ConversionsTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ConversionsTest.cs,BetterNullableConversion,The following statement contains a magic number: Assert.AreEqual(2' BetterConversion(typeof(ushort?)' typeof(long?)' typeof(int?)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,OverloadResolutionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\OverloadResolutionTests.cs,LessArgumentsPassedToParamsIsBetter,The following statement contains a magic number: Assert.AreEqual(2' r.BestCandidate.Parameters.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ResolverTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolverTestBase.cs,PrepareResolver,The following statement contains a magic number: Assert.AreEqual(2' dollars.Length' "Expected 2 dollar signs marking start+end of desired node");
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,ResolverTestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\ResolverTestBase.cs,Resolve,The following statement contains a magic number: Debug.WriteLine(new string('='' 70));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryPlus,The following statement contains a magic number: AssertConstant(65' resolver.ResolveUnaryOperator(UnaryOperatorType.Plus' MakeConstant('A')));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinus,The following statement contains a magic number: AssertConstant(-2147483648L' resolver.ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinus,The following statement contains a magic number: AssertConstant(-2147483648L' resolver.ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinus,The following statement contains a magic number: AssertConstant(-65' resolver.ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant('A')));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinusUncheckedOverflow,The following statement contains a magic number: AssertConstant(-2147483648' resolver.ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(-2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinusUncheckedOverflow,The following statement contains a magic number: AssertConstant(-2147483648' resolver.ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(-2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestUnaryMinusCheckedOverflow,The following statement contains a magic number: AssertError(typeof(int)' resolver.WithCheckForOverflow(true).ResolveUnaryOperator(UnaryOperatorType.Minus' MakeConstant(-2147483648)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,TestBitwiseNot,The following statement contains a magic number: AssertConstant(1' resolver.ResolveUnaryOperator(UnaryOperatorType.BitNot' MakeConstant(-2)));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,IntMinValue,The following statement contains a magic number: AssertConstant(-2147483648' Resolve("class A { object x = $-2147483648$; }"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,IntMinValue,The following statement contains a magic number: AssertConstant(-/**/2147483648' Resolve("class A { object x = $-/**/2147483648$; }"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,IntMinValue,The following statement contains a magic number: AssertConstant(-2147483648L' Resolve("class A { object x = $-2147483648L$; }"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,IntMinValue,The following statement contains a magic number: AssertConstant(-(2147483648)' Resolve("class A { object x = $-(2147483648)$; }"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,LongMinValue,The following statement contains a magic number: AssertConstant(-9223372036854775808' Resolve("class A { object x = $-9223372036854775808$; }"));
Magic Number,ICSharpCode.NRefactory.CSharp.Resolver,UnaryOperatorTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Resolver\UnaryOperatorTests.cs,UShortEnumNegation,The following statement contains a magic number: Assert.AreEqual(unchecked( (ushort)~3 )' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.Documentation,CSharpCrefParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpCrefParserTests.cs,GenericMethodInGenericWithParameterList,The following statement contains a magic number: ParseUtilCSharp.AssertDocumentationReference(  				"IGeneric{X' Y}.Test{Z}(ref Z['])"'  				new DocumentationReference {  					DeclaringType = new SimpleType("IGeneric"' new SimpleType("X")' new SimpleType("Y"))'  					MemberName = "Test"'  					TypeArguments = { new SimpleType("Z") }'  					HasParameterList = true'  					Parameters = {  						new ParameterDeclaration {  							ParameterModifier = ParameterModifier.Ref'  							Type = new SimpleType("Z").MakeArrayType(2)  						}  					}});
Magic Number,ICSharpCode.NRefactory.Documentation,CSharpDocumentationTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\CSharpDocumentationTests.cs,InheritedDocumentation,The following statement contains a magic number: Assert.AreEqual(2' element.Children.Count());
Magic Number,ICSharpCode.NRefactory.Documentation,IDStringTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Documentation\IDStringTests.cs,Properties,The following statement contains a magic number: Assert.AreEqual("P:Acme.Widget.Item(System.String'System.Int32)"'  			                widget.Properties.Single(p => p.Parameters.Count == 2).Documentation.ToString());
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(3' document.LineCount);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(5' document.GetLineByNumber(1).EndOffset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(5' document.GetLineByNumber(1).Length);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(6' document.GetLineByNumber(1).TotalLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(6' document.GetLineByNumber(2).Offset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(6' document.GetLineByNumber(2).Offset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(12' document.GetLineByNumber(2).EndOffset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(12' document.GetLineByNumber(2).EndOffset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(6' document.GetLineByNumber(2).Length);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(6' document.GetLineByNumber(2).Length);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(8' document.GetLineByNumber(2).TotalLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(8' document.GetLineByNumber(2).TotalLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).DelimiterLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).DelimiterLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).LineNumber);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(2' document.GetLineByNumber(2).LineNumber);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(14' document.GetLineByNumber(3).Offset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(14' document.GetLineByNumber(3).Offset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(14' document.GetLineByNumber(3).EndOffset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(14' document.GetLineByNumber(3).EndOffset);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(0' document.GetLineByNumber(3).Length);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(0' document.GetLineByNumber(3).TotalLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(0' document.GetLineByNumber(3).DelimiterLength);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(3' document.GetLineByNumber(3).LineNumber);
Magic Number,ICSharpCode.NRefactory.Editor,ReadOnlyDocumentTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Editor\ReadOnlyDocumentTests.cs,SimpleDocument,The following statement contains a magic number: Assert.AreEqual(3' document.GetLineByNumber(3).LineNumber);
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestFormattingBugs,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestFormattingBugs.cs,TestStatementFormatting,The following statement contains a magic number: int start = result.GetOffset (5' 1);
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBase,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TextEditorTestAdapter.cs,GetActualOptions,The following statement contains a magic number: options.WrapLineLength = 80;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBlankLineFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestBlankLineFormatting.cs,TestBlankLinesAfterUsings,The following statement contains a magic number: policy.MinimumBlankLinesAfterUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBlankLineFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestBlankLineFormatting.cs,TestBlankLinesBeforeUsings,The following statement contains a magic number: policy.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBlankLineFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestBlankLineFormatting.cs,TestBlankLinesBeforeFirstDeclaration,The following statement contains a magic number: policy.MinimumBlankLinesBeforeFirstDeclaration = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBlankLineFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestBlankLineFormatting.cs,TestBlankLinesAroundRegion,The following statement contains a magic number: policy.MinimumBlankLinesAroundRegion = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestBlankLineFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestBlankLineFormatting.cs,TestBlankLinesInsideRegion,The following statement contains a magic number: policy.MinimumBlankLinesInsideRegion = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestWrapping,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestWrapping.cs,TestWrappingWithSpaceIndent,The following statement contains a magic number: options.IndentSize = options.TabSize = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestGlobalLevelFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestGlobalLevelFormatting.cs,TestUsingBlankLines,The following statement contains a magic number: policy.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestGlobalLevelFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestGlobalLevelFormatting.cs,TestUsingBlankLinesCase2,The following statement contains a magic number: policy.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestGlobalLevelFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestGlobalLevelFormatting.cs,TestUsingBlankLinesCase3,The following statement contains a magic number: policy.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.CSharp.FormattingTests,TestGlobalLevelFormatting,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestGlobalLevelFormatting.cs,TestUsingBlankLinesCase4,The following statement contains a magic number: policy.MinimumBlankLinesBeforeUsings = 2;
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AssemblyAttribute,The following statement contains a magic number: Assert.AreEqual(3' typeTest.PositionalArguments.Count);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AssemblyAttribute,The following statement contains a magic number: Assert.AreEqual(42' (int)typeTest.PositionalArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AssemblyAttribute,The following statement contains a magic number: rt = (TypeOfResolveResult)typeTest.PositionalArguments[2];
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,GenericEnum,The following statement contains a magic number: Assert.AreEqual(2' testClass.TypeParameterCount);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual(5' fields.Length);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual("Flag1"' fields[2].Name);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual(0x10' fields[2].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual("Flag2"' fields[3].Name);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual(0x20' fields[3].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual("CombinedFlags"' fields[4].Name);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,EnumFieldsTest,The following statement contains a magic number: Assert.AreEqual(0x30' fields[4].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,DefaultConstructorAddedToStruct,The following statement contains a magic number: Assert.AreEqual(2' ctors.Count());
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitStructLayoutAttribute,The following statement contains a magic number: Assert.AreEqual(8' arg3.Value.ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,FieldOffsetAttribute,The following statement contains a magic number: Assert.AreEqual(100' arg.ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,InOutParametersOnRefMethod,The following statement contains a magic number: Assert.AreEqual(2' p.Attributes.Count);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,MethodWithOptionalParameter,The following statement contains a magic number: Assert.AreEqual(4' p.ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,FlagsOnInterfaceMembersAreCorrect,The following statement contains a magic number: p = type.Properties.Single(x => x.Parameters.Count == 2);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,GetParamsAttributeArgument,The following statement contains a magic number: Assert.AreEqual(5' arr.InitializerElements.Count);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,GetParamsAttributeArgument,The following statement contains a magic number: Assert.AreEqual(5' arr.SizeArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ParamsAttribute_NullReference,The following statement contains a magic number: ResolveResult rr = GetParamsAttributeArgument(2);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ParamsAttribute_Double,The following statement contains a magic number: ResolveResult rr = Unbox(GetParamsAttributeArgument(3));
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ParamsAttribute_Double,The following statement contains a magic number: Assert.AreEqual(4.0' rr.ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ParamsAttribute_String,The following statement contains a magic number: ConversionResolveResult rr = (ConversionResolveResult)GetParamsAttributeArgument(4);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ParamsAttribute_Property,The following statement contains a magic number: Assert.AreEqual(2' arrayElements.Count);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ImplicitImplementationOfUnifiedMethods,The following statement contains a magic number: Assert.AreEqual(2' test.ImplementedInterfaceMembers.Count);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,IndexerAccessorsShouldBeReportedAsImplementingTheCorrectInterfaceAccessors,The following statement contains a magic number: var ix3 = type.Properties.Single(p => p.Parameters.Count == 2);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementationOfUnifiedMethods,The following statement contains a magic number: Assert.AreEqual(2' type.GetMethods(m => m.IsExplicitInterfaceImplementation).Count());
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,ExplicitImplementationOfUnifiedMethods_ToMemberReference,The following statement contains a magic number: Assert.AreEqual(2' type.GetMethods(m => m.IsExplicitInterfaceImplementation).Count());
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,TestNullableDefaultParameter,The following statement contains a magic number: Assert.AreEqual(42' method.Parameters.Single ().ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AttributesUsingNestedMembers,The following statement contains a magic number: Assert.AreEqual(42' typeTypeTestAttr.PositionalArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AttributesUsingNestedMembers,The following statement contains a magic number: Assert.AreEqual(42' propTypeTestAttr.PositionalArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AttributesUsingNestedMembers,The following statement contains a magic number: Assert.AreEqual(42' innerTypeTestAttr.PositionalArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.TypeSystem,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\TypeSystem\TypeSystemTests.cs,AttributesUsingNestedMembers,The following statement contains a magic number: Assert.AreEqual(43' inner2TypeTestAttr.PositionalArguments[0].ConstantValue);
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,FloatToInteger,The following statement contains a magic number: object val = CSharpPrimitiveCast.Cast(to' 3.9f' checkedMode == 1);
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,FloatToInteger,The following statement contains a magic number: Assert.AreEqual(3' Convert.ToInt64(val));
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,FloatToInteger,The following statement contains a magic number: checkedMode < 2
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DoubleToInteger,The following statement contains a magic number: object val = CSharpPrimitiveCast.Cast(to' 3.9' checkedMode == 1);
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DoubleToInteger,The following statement contains a magic number: Assert.AreEqual(3' Convert.ToInt64(val));
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DoubleToInteger,The following statement contains a magic number: checkedMode < 2
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DecimalToInteger,The following statement contains a magic number: object val = CSharpPrimitiveCast.Cast(to' 3.9m' checkedMode == 1);
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DecimalToInteger,The following statement contains a magic number: Assert.AreEqual(3' Convert.ToInt64(val));
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,DecimalToInteger,The following statement contains a magic number: checkedMode < 2
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,IntegerToInteger,The following statement contains a magic number: object val = CSharpPrimitiveCast.Cast(to' 3' checkedMode == 1);
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,IntegerToInteger,The following statement contains a magic number: Assert.AreEqual(3' Convert.ToInt64(val));
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,IntegerToInteger,The following statement contains a magic number: Assert.AreEqual(3' Convert.ToInt64(val2));
Magic Number,ICSharpCode.NRefactory.Utils,CSharpPrimitiveCastTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CSharpPrimitiveCastTests.cs,IntegerToInteger,The following statement contains a magic number: checkedMode < 2
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PreOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 1' 2' 3' 4' 5' 6 }'  			                TreeTraversal.PreOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PreOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 1' 2' 3' 4' 5' 6 }'  			                TreeTraversal.PreOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PreOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 1' 2' 3' 4' 5' 6 }'  			                TreeTraversal.PreOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PreOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 1' 2' 3' 4' 5' 6 }'  			                TreeTraversal.PreOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PreOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 1' 2' 3' 4' 5' 6 }'  			                TreeTraversal.PreOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PostOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 2' 4' 5' 3' 6' 1 }'  			                TreeTraversal.PostOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PostOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 2' 4' 5' 3' 6' 1 }'  			                TreeTraversal.PostOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PostOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 2' 4' 5' 3' 6' 1 }'  			                TreeTraversal.PostOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PostOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 2' 4' 5' 3' 6' 1 }'  			                TreeTraversal.PostOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,TreeTraversalTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\TreeTraversalTests.cs,PostOrder,The following statement contains a magic number: Assert.AreEqual(new int[] { 2' 4' 5' 3' 6' 1 }'  			                TreeTraversal.PostOrder(tree' n => n.Children).Select(n => n.Data).ToArray());
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,Index,The following statement contains a magic number: ParseTest("{0}"' new FormatItem(0) { StartLocation = 0' EndLocation = 3 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,PositiveAlignment,The following statement contains a magic number: ParseTest("{0'4}"' new FormatItem(0' 4) { StartLocation = 0' EndLocation = 5 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,PositiveAlignment,The following statement contains a magic number: ParseTest("{0'4}"' new FormatItem(0' 4) { StartLocation = 0' EndLocation = 5 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,NegativeAlignment,The following statement contains a magic number: ParseTest("{0'-4}"' new FormatItem(0' -4) { StartLocation = 0' EndLocation = 6 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,NegativeAlignment,The following statement contains a magic number: ParseTest("{0'-4}"' new FormatItem(0' -4) { StartLocation = 0' EndLocation = 6 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,AlignmentWhiteSpace,The following statement contains a magic number: ParseTest("{0' -4}"' new FormatItem(0' -4) { StartLocation = 0' EndLocation = 7 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,AlignmentWhiteSpace,The following statement contains a magic number: ParseTest("{0' -4}"' new FormatItem(0' -4) { StartLocation = 0' EndLocation = 7 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,SubFormatString,The following statement contains a magic number: ParseTest("{0:aaaa}"' new FormatItem(0' null' "aaaa") { StartLocation = 0' EndLocation = 8 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CompleteFormatItem,The following statement contains a magic number: ParseTest("{0' -45:aaaa}"' new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CompleteFormatItem,The following statement contains a magic number: ParseTest("{0' -45:aaaa}"' new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MultipleCompleteFormatItems,The following statement contains a magic number: ParseTest("{0' -45:aaaa}{3' 67:bbbb}"'  			          new FormatItem(0' -45' "aaaa") { StartLocation = 0' EndLocation = 13 }'  			          new FormatItem(3' 67' "bbbb") { StartLocation = 13' EndLocation = 25 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterIndex,The following statement contains a magic number: ParseTest("{0}}}"'  			          new FormatItem(0) { StartLocation = 0' EndLocation = 3}'  			new TextSegment("}") { StartLocation = 3' EndLocation = 5});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterIndex,The following statement contains a magic number: ParseTest("{0}}}"'  			          new FormatItem(0) { StartLocation = 0' EndLocation = 3}'  			new TextSegment("}") { StartLocation = 3' EndLocation = 5});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterIndex,The following statement contains a magic number: ParseTest("{0}}}"'  			          new FormatItem(0) { StartLocation = 0' EndLocation = 3}'  			new TextSegment("}") { StartLocation = 3' EndLocation = 5});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterAlignment,The following statement contains a magic number: ParseTest("{0'-15}}}"'  			          new FormatItem(0' -15) { StartLocation = 0' EndLocation = 7}'  			new TextSegment("}") { StartLocation = 7' EndLocation = 9});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterAlignment,The following statement contains a magic number: ParseTest("{0'-15}}}"'  			          new FormatItem(0' -15) { StartLocation = 0' EndLocation = 7}'  			new TextSegment("}") { StartLocation = 7' EndLocation = 9});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterAlignment,The following statement contains a magic number: ParseTest("{0'-15}}}"'  			          new FormatItem(0' -15) { StartLocation = 0' EndLocation = 7}'  			new TextSegment("}") { StartLocation = 7' EndLocation = 9});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,CloseAndEscapeAfterAlignment,The following statement contains a magic number: ParseTest("{0'-15}}}"'  			          new FormatItem(0' -15) { StartLocation = 0' EndLocation = 7}'  			new TextSegment("}") { StartLocation = 7' EndLocation = 9});
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithPrefixText,The following statement contains a magic number: ParseTest("Some Text {0}"'  			          new TextSegment("Some Text ")'  			          new FormatItem(0) { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithPrefixText,The following statement contains a magic number: ParseTest("Some Text {0}"'  			          new TextSegment("Some Text ")'  			          new FormatItem(0) { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithPostfixText,The following statement contains a magic number: ParseTest("{0} Some Text"'  			          new FormatItem(0)  { StartLocation = 0' EndLocation = 3 }'  					  new TextSegment(" Some Text"' 3));
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithPostfixText,The following statement contains a magic number: ParseTest("{0} Some Text"'  			          new FormatItem(0)  { StartLocation = 0' EndLocation = 3 }'  					  new TextSegment(" Some Text"' 3));
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithEscapableBracesInSubFormatString,The following statement contains a magic number: ParseTest("A weird string: {0:{{}}}"'  			          new TextSegment("A weird string: ")'  			          new FormatItem(0' null' "{}") { StartLocation = 16' EndLocation = 24 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,FormatStringWithEscapableBracesInSubFormatString,The following statement contains a magic number: ParseTest("A weird string: {0:{{}}}"'  			          new TextSegment("A weird string: ")'  			          new FormatItem(0' null' "{}") { StartLocation = 16' EndLocation = 24 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EmptySubFormatString,The following statement contains a magic number: ParseTest("{0:}"' new FormatItem(0' null' "") { StartLocation = 0' EndLocation = 4 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedOpenBracesInFixedText,The following statement contains a magic number: var errors = SegmentTest(2' segments.First());
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedOpenBracesInFixedText,The following statement contains a magic number: ErrorTest(errors[0]' "{"' "{{"' 2' 3);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedOpenBracesInFixedText,The following statement contains a magic number: ErrorTest(errors[0]' "{"' "{{"' 2' 3);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedOpenBracesInFixedText,The following statement contains a magic number: ErrorTest(errors[1]' "{"' "{{"' 4' 5);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedOpenBracesInFixedText,The following statement contains a magic number: ErrorTest(errors[1]' "{"' "{{"' 4' 5);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedLoneEndingBrace,The following statement contains a magic number: ErrorTest(errors[0]' "{"' "{{"' 10' 11);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,UnescapedLoneEndingBrace,The following statement contains a magic number: ErrorTest(errors[0]' "{"' "{{"' 10' 11);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterIndex,The following statement contains a magic number: var segments = ParseTest("Some text {0"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0) { StartLocation = 10' EndLocation = 12 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterIndex,The following statement contains a magic number: var segments = ParseTest("Some text {0"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0) { StartLocation = 10' EndLocation = 12 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterIndex,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 12' 12);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterIndex,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 12' 12);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: var segments = ParseTest("Some text {0'"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: var segments = ParseTest("Some text {0'"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: var errors = SegmentTest(2' segments.Skip(1).First());
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: ErrorTest(errors[1]' ""' "}"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterComma,The following statement contains a magic number: ErrorTest(errors[1]' ""' "}"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: var segments = ParseTest("Some text {0'   "'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: var segments = ParseTest("Some text {0'   "'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: var errors = SegmentTest(2' segments.Skip(1).First());
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 16' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 16' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: ErrorTest(errors[1]' ""' "}"' 16' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterCommaAndSpaces,The following statement contains a magic number: ErrorTest(errors[1]' ""' "}"' 16' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterAlignment,The following statement contains a magic number: var segments = ParseTest("Some text {0' -34"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' -34) { StartLocation = 10' EndLocation = 17 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterAlignment,The following statement contains a magic number: var segments = ParseTest("Some text {0' -34"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' -34) { StartLocation = 10' EndLocation = 17 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterAlignment,The following statement contains a magic number: var segments = ParseTest("Some text {0' -34"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' -34) { StartLocation = 10' EndLocation = 17 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterAlignment,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 17' 17);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterAlignment,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 17' 17);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterColon,The following statement contains a magic number: var segments = ParseTest("Some text {0:"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' null' "") { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterColon,The following statement contains a magic number: var segments = ParseTest("Some text {0:"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' null' "") { StartLocation = 10' EndLocation = 13 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterColon,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterColon,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterSubFormatString,The following statement contains a magic number: var segments = ParseTest("Some text {0: asdf"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' null' " asdf") { StartLocation = 10' EndLocation = 18 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterSubFormatString,The following statement contains a magic number: var segments = ParseTest("Some text {0: asdf"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' null' " asdf") { StartLocation = 10' EndLocation = 18 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterSubFormatString,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 18' 18);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndAfterSubFormatString,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 18' 18);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingIndex,The following statement contains a magic number: var segments = ParseTest("Some text {}"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0) { StartLocation = 10' EndLocation = 12 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingIndex,The following statement contains a magic number: var segments = ParseTest("Some text {}"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0) { StartLocation = 10' EndLocation = 12 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingIndex,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 11' 11);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingIndex,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 11' 11);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingAlignment,The following statement contains a magic number: var segments = ParseTest("Some text {0'}"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 14 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingAlignment,The following statement contains a magic number: var segments = ParseTest("Some text {0'}"'  			                         new TextSegment("Some text ")'  			                         new FormatItem(0' 0) { StartLocation = 10' EndLocation = 14 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingAlignment,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingAlignment,The following statement contains a magic number: ErrorTest(errors[0]' ""' "0"' 13' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: var segments = ParseTest("{':"' new FormatItem(0' 0' "") { StartLocation = 0' EndLocation = 3 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: var errors = SegmentTest(3' segments.First());
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: ErrorTest(errors[1]' ""' "0"' 2' 2);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: ErrorTest(errors[1]' ""' "0"' 2' 2);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: ErrorTest(errors[2]' ""' "}"' 3' 3);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: ErrorTest(errors[2]' ""' "}"' 3' 3);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEveryThing,The following statement contains a magic number: ErrorTest(errors[2]' ""' "}"' 3' 3);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInIndex,The following statement contains a magic number: var segments = ParseTest("{0 and then some invalid text}"'  			                         new FormatItem(0) { StartLocation = 0' EndLocation = 30 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInIndex,The following statement contains a magic number: ErrorTest(errors[0]' "0 and then some invalid text"' "0"' 1' 29);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatTextBeforeDigitsInIndex,The following statement contains a magic number: var segments = ParseTest("{Some text 55}"'  			                         new FormatItem(0) { StartLocation = 0' EndLocation = 14 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatTextBeforeDigitsInIndex,The following statement contains a magic number: ErrorTest(errors[0]' "Some text 55"' "0"' 1' 13);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInAlignment,The following statement contains a magic number: var segments = ParseTest("{0' 100 and then some invalid text}"'  			                         new FormatItem(0' 100) { StartLocation = 0' EndLocation = 35 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInAlignment,The following statement contains a magic number: var segments = ParseTest("{0' 100 and then some invalid text}"'  			                         new FormatItem(0' 100) { StartLocation = 0' EndLocation = 35 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInAlignment,The following statement contains a magic number: ErrorTest(errors[0]' " 100 and then some invalid text"' "100"' 3' 34);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatInAlignment,The following statement contains a magic number: ErrorTest(errors[0]' " 100 and then some invalid text"' "100"' 3' 34);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatTextBeforeDigitsInAlignment,The following statement contains a magic number: var segments = ParseTest("{0' Some text 55}"'  			                         new FormatItem(0' 0) { StartLocation = 0' EndLocation = 17 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatTextBeforeDigitsInAlignment,The following statement contains a magic number: ErrorTest(errors[0]' " Some text 55"' "0"' 3' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,InvalidNumberFormatTextBeforeDigitsInAlignment,The following statement contains a magic number: ErrorTest(errors[0]' " Some text 55"' "0"' 3' 16);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedText,The following statement contains a magic number: var segments = ParseTest("Text {0 Text"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  									 new TextSegment(" Text"' 7));
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedText,The following statement contains a magic number: var segments = ParseTest("Text {0 Text"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  									 new TextSegment(" Text"' 7));
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedText,The following statement contains a magic number: var segments = ParseTest("Text {0 Text"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  									 new TextSegment(" Text"' 7));
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedText,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 7' 7);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedText,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 7' 7);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: var segments = ParseTest("Text {0 Text {1}"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  			                         new TextSegment(" Text "' 7)'  			                         new FormatItem(1) { StartLocation = 13' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: var segments = ParseTest("Text {0 Text {1}"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  			                         new TextSegment(" Text "' 7)'  			                         new FormatItem(1) { StartLocation = 13' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: var segments = ParseTest("Text {0 Text {1}"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  			                         new TextSegment(" Text "' 7)'  			                         new FormatItem(1) { StartLocation = 13' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: var segments = ParseTest("Text {0 Text {1}"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  			                         new TextSegment(" Text "' 7)'  			                         new FormatItem(1) { StartLocation = 13' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: var segments = ParseTest("Text {0 Text {1}"'  			                         new TextSegment("Text ")'  			                         new FormatItem(0) { StartLocation = 5' EndLocation = 7 }'  			                         new TextSegment(" Text "' 7)'  			                         new FormatItem(1) { StartLocation = 13' EndLocation = 16 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 7' 7);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,MissingEndBraceInsideFixedTextEndingInAnotherFormatItem,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 7' 7);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndWithEscapedBrace,The following statement contains a magic number: var segments = ParseTest("{0:}}"' new FormatItem(0' null' "}") { StartLocation = 0' EndLocation = 5 });
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndWithEscapedBrace,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 5' 5);
Magic Number,ICSharpCode.NRefactory.Utils,CompositeFormatStringParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\Utils\CompositeFormatStringParser\CompositeFormatStringParserTests.cs,EndWithEscapedBrace,The following statement contains a magic number: ErrorTest(errors[0]' ""' "}"' 5' 5);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionAccessibleTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionAccessibleTests.cs,TestOverloadCount,The following statement contains a magic number: CodeCompletionBugTests.CombinedProviderTest (@"  using System;    class Test  {  	static void Foo () {}  	static void Foo (int i) {}  	static void Foo (int i' string s) {}    	public static void Main (int test)  	{  		$f$	  	}  }  "' provider => {  				Assert.AreEqual (1' provider.Data.Count (p => p.DisplayText == "Foo"));  				var data = provider.Find ("Foo");  				Assert.AreEqual (3' data.OverloadedData.Count ());    			});
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestLoadAllTests,The following statement contains a magic number: i++ > 2
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestLoadAllTests,The following statement contains a magic number: i <= 2
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestSimpleCodeCompletion,The following statement contains a magic number: Assert.AreEqual (7' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestSimpleInterfaceCodeCompletion,The following statement contains a magic number: Assert.AreEqual (7' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug322089,The following statement contains a magic number: Assert.AreEqual (6' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug323283,The following statement contains a magic number: Assert.AreEqual (6' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug323317,The following statement contains a magic number: Assert.AreEqual (6' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug427294,The following statement contains a magic number: Assert.AreEqual (5' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug427649,The following statement contains a magic number: Assert.AreEqual (4' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug427734A,The following statement contains a magic number: Assert.AreEqual (3' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug441671,The following statement contains a magic number: Assert.AreEqual (5' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug444110,The following statement contains a magic number: Assert.AreEqual (5' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug460234,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug466692,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestOverrideCompletion,The following statement contains a magic number: CombinedProviderTest (  @"using System;    class Base  {    	public virtual int Property { get;}  	public virtual int Method () { }  	public virtual event EventHandler Event;  	public virtual int this[int i] { get { } }  }      class A : Base  {  	$public override $  }  "' provider => {  				Assert.IsNotNull (provider.Find ("Property")' "'Property' not found.");  				Assert.IsNotNull (provider.Find ("Method")' "'Method' not found.");  				Assert.IsNotNull (provider.Find ("Event")' "'Event' not found.");  				Assert.IsNotNull (provider.Find ("ToString")' "'Event' not found.");  				Assert.IsNotNull (provider.Find ("GetHashCode")' "'GetHashCode' not found.");  				Assert.IsNotNull (provider.Find ("Equals")' "'Equals' not found.");  				Assert.AreEqual (7' provider.Count);  			});
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestCodeCompletionCategorySorting,The following statement contains a magic number: Assert.AreEqual (4' list.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestCodeCompletionCategorySorting,The following statement contains a magic number: Assert.AreEqual ("AClass"' list [2].DisplayText);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestCodeCompletionCategorySorting,The following statement contains a magic number: Assert.AreEqual ("System.Object"' list [3].DisplayText);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug2109B,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,CodeCompletionBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\CodeCompletionBugTests.cs,TestBug3957,The following statement contains a magic number: Assert.AreEqual(2' provider.Data.Count(d => d.DisplayText == "Method"));
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,KeywordTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\KeywordTests.cs,AddRemoveKeywordTest,The following statement contains a magic number: CodeCompletionBugTests.CombinedProviderTest (  @"using System;  class Test  {  	public event EventHandler MyProperty {  		$g$  }  "' (provider) => {  				Assert.AreEqual (2' provider.Count);  				Assert.IsNotNull (provider.Find ("add")' "keyword 'add' not found.");  				Assert.IsNotNull (provider.Find ("remove")' "keyword 'remove' not found.");  			});
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestBug427448,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestConstructorCase2,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestTypeParameter,The following statement contains a magic number: Assert.AreEqual (16' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestSecondTypeParameter,The following statement contains a magic number: Assert.AreEqual (16' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestTypeParameterInBaseType,The following statement contains a magic number: Assert.AreEqual (16' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestBaseConstructorCall,The following statement contains a magic number: Assert.AreEqual (2' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,ParameterCompletionTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\ParameterCompletionTests.cs,TestExtensionMethodStaticInvocation,The following statement contains a magic number: Assert.AreEqual (2' provider.GetParameterCount (0));
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,GetCurrentParameterIndexTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\GetCurrentParameterIndexTests.cs,TestSecondParameter,The following statement contains a magic number: Assert.AreEqual(2' index);
Magic Number,ICSharpCode.NRefactory.CSharp.CodeCompletion,FormatItemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeCompletion\FormatItemTests.cs,TestFormatItemRecognition,The following statement contains a magic number: Assert.AreEqual(4' provider.Count);
Magic Number,ICSharpCode.NRefactory.CSharp.Parser.Bugs,ParserBugTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\Parser\Bugs\ParserBugTests.cs,TestEmptyCollectionParsing,The following statement contains a magic number: Assert.AreEqual(2' init.Initializer.Elements.Count);
Magic Number,ICSharpCode.NRefactory.IndentationTests,TextPasteIndentEngineTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\TextPasteIndentEngineTests.cs,TestMultiplePastes,The following statement contains a magic number: i < 2
Magic Number,ICSharpCode.NRefactory.IndentationTests,GeneralTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\IndentationTests\GeneralTests.cs,TestMixedLineEndingPosition,The following statement contains a magic number: Assert.AreEqual(new TextLocation(3' 1)' indent.Location);
Duplicate Code,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantBaseQualifierTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantBaseQualifierTests.cs,TestInspectorCase1,The method contains a code clone-set at the following line numbers (starting from the method definition): ((3' 25)' (36' 58))
Duplicate Code,ICSharpCode.NRefactory.CSharp.CodeIssues,RedundantOverridenMemberTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\CSharp\CodeIssues\RedundantOverridenMemberTests.cs,TestTestInspectorCase6,The method contains a code clone-set at the following line numbers (starting from the method definition): ((3' 22)' (59' 78))
Duplicate Code,ICSharpCode.NRefactory.CSharp.FormattingTests,TestStatements,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestStatementIndentation.cs,TestSwitchIndentBreak,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 36)' (39' 69))
Duplicate Code,ICSharpCode.NRefactory.CSharp.FormattingTests,TestStatements,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestStatementIndentation.cs,TestSpaceBeforeSemicolon,The method contains a code clone-set at the following line numbers (starting from the method definition): ((5' 25)' (27' 47))
Duplicate Code,ICSharpCode.NRefactory.CSharp.FormattingTests,TestTypeLevelIndentation,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestTypeLevelIndentation.cs,TestConstructorInitializerColonDontCare,The method contains a code clone-set at the following line numbers (starting from the method definition): ((6' 29)' (32' 55))
Duplicate Code,ICSharpCode.NRefactory.CSharp.FormattingTests,TestWrapping,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.Tests\FormattingTests\TestWrapping.cs,TestWrappingBug,The method contains a code clone-set at the following line numbers (starting from the method definition): ((4' 23)' (26' 45))
