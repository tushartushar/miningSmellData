Implementation smell,Namespace,Class,File,Method,Description
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,FindReferencesConsistencyCheck,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\FindReferencesConsistencyCheck.cs,TestFindReferences,Cyclomatic complexity of the method is 13
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,PatternMatchingTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\PatternMatchingTest.cs,RunTest,Cyclomatic complexity of the method is 8
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,TypeSystemTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\TypeSystemTests.cs,ResolvedUnresolvedMembers,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,Compare,Cyclomatic complexity of the method is 12
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,IsEqualResolverState,Cyclomatic complexity of the method is 9
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,Roundtrip,Cyclomatic complexity of the method is 10
Complex Method,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,CompareResults,Cyclomatic complexity of the method is 24
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,FindReferencesConsistencyCheck,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\FindReferencesConsistencyCheck.cs,PrintTimingsPerEntityType,The length of the statement  "				Console.WriteLine("{0} - avg. {1} per entity"' pair.Key' TimeSpan.FromSeconds(timings[pair.Key].TotalSeconds / pair.Value)); " is 124.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,PatternMatchingTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\PatternMatchingTest.cs,RunTest,The length of the statement  "					throw new InvalidOperationException("Mutation in " + id.StartLocation + " did not prevent the match; in " + file.FileName); " is 123.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,PatternMatchingTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\PatternMatchingTest.cs,RunTest,The length of the statement  "					throw new InvalidOperationException("Mutation in " + pe.StartLocation + " did not prevent the match; in " + file.FileName); " is 123.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The length of the statement  "			test.resolveAllResolver = new CSharpAstResolver(file.Project.Compilation' file.SyntaxTree' file.UnresolvedTypeSystemForFile); " is 125.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,CheckResult,The length of the statement  "			Console.WriteLine("Different resolve results for '{0}' at {1} in {2}:"' node' node.StartLocation' node.GetRegion().FileName); " is 125.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,CheckStateBefore,The length of the statement  "			Console.WriteLine("Different resolver states before '{0}' at {1} in {2}."' node' node.StartLocation' node.GetRegion().FileName); " is 128.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,CheckStateAfter,The length of the statement  "			Console.WriteLine("Different resolver states after '{0}' at {1} in {2}."' node' node.StartLocation' node.GetRegion().FileName); " is 127.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,CheckConversion,The length of the statement  "			Console.WriteLine("Different conversions for '{0}' at {1} in {2}:"' node' node.StartLocation' node.GetRegion().FileName); " is 121.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,CheckExpectedType,The length of the statement  "			Console.WriteLine("Different expected types for '{0}' at {1} in {2}:"' node' node.StartLocation' node.GetRegion().FileName); " is 124.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,Compare,The length of the statement  "			} else if (type.IsArray || type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(List<>) || type.GetGenericTypeDefinition() == typeof(ReadOnlyCollection<>) || type.GetGenericTypeDefinition() == typeof(IList<>) || type.GetGenericTypeDefinition() == typeof(ICollection<>) || type.GetGenericTypeDefinition() == typeof(IEnumerable<>))) { " is 344.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,Compare,The length of the statement  "				else if (val1 is Conversion && val2 is Conversion && ((Conversion)val1).IsAnonymousFunctionConversion && ((Conversion)val2).IsAnonymousFunctionConversion) " is 154.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,ResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\ResolverTest.cs,RunTest,The length of the statement  "			CSharpAstResolver resolver = new CSharpAstResolver(file.Project.Compilation' file.SyntaxTree' file.UnresolvedTypeSystemForFile); " is 128.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,ResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\ResolverTest.cs,RunTestWithoutUnresolvedFile,The length of the statement  "			CSharpAstResolver originalResolver = new CSharpAstResolver(file.Project.Compilation' file.SyntaxTree' file.UnresolvedTypeSystemForFile); " is 136.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,ValidatingResolveAllNavigator,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\ResolverTest.cs,ProcessConversion,The length of the statement  "					Console.WriteLine("Compiler error at " + fileName + ":" + expression.StartLocation + ": Cannot convert from " + result + " to " + targetType); " is 142.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,The length of the statement  "			if (code.Contains("enum VarianceModifier") || file.FileName.EndsWith("ecore.cs") || file.FileName.EndsWith("method.cs")) " is 120.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,The length of the statement  "			if (file.FileName.EndsWith("KnownTypeReference.cs") || file.FileName.EndsWith("typemanager.cs") || file.FileName.EndsWith("GetAllBaseTypesTest.cs") || file.FileName.EndsWith("Tokens.cs") || file.FileName.EndsWith("OpCode.cs") || file.FileName.EndsWith("MainWindow.cs")) " is 269.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,The length of the statement  "				return; // skip due to optional ' at end of array initializer (see ArrayCreateExpressionTests.ArrayInitializerWithCommaAtEnd) " is 125.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,The length of the statement  "			if (file.FileName.Contains("FormattingTests") || file.FileName.Contains("ContextAction") || file.FileName.Contains("CodeCompletion")) " is 133.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,VisitorBenchmark,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\VisitorBenchmark.cs,Run,The length of the statement  "			RunTest("DepthFirstAstVisitor<object>"' files' (syntaxTree' list) => syntaxTree.AcceptVisitor(new DepthFirst<object>(list))); " is 125.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,VisitorBenchmark,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\VisitorBenchmark.cs,Run,The length of the statement  "			RunTest("DepthFirstAstVisitor<object' object>"' files' (syntaxTree' list) => syntaxTree.AcceptVisitor(new DepthFirst<object' object>(list)' null)); " is 147.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The length of the statement  "			Console.WriteLine("Incremental parse time:     " + incrementalParseTime + " for " + totalCharactersChanged + " characters changed"); " is 132.
Long Statement,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The length of the statement  "			Console.WriteLine("Non-Incremental parse time: " + nonIncrementalParseTime + " for " + totalCharactersParsed + " characters"); " is 126.
Complex Conditional,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,Compare,The conditional expression  "type.IsArray || type.IsGenericType && (type.GetGenericTypeDefinition() == typeof(List<>) || type.GetGenericTypeDefinition() == typeof(ReadOnlyCollection<>) || type.GetGenericTypeDefinition() == typeof(IList<>) || type.GetGenericTypeDefinition() == typeof(ICollection<>) || type.GetGenericTypeDefinition() == typeof(IEnumerable<>))"  is complex.
Complex Conditional,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,Compare,The conditional expression  "val1 is Conversion && val2 is Conversion && ((Conversion)val1).IsAnonymousFunctionConversion && ((Conversion)val2).IsAnonymousFunctionConversion"  is complex.
Complex Conditional,ICSharpCode.NRefactory.ConsistencyCheck,RoundtripTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RoundtripTest.cs,RunTest,The conditional expression  "file.FileName.EndsWith("KnownTypeReference.cs") || file.FileName.EndsWith("typemanager.cs") || file.FileName.EndsWith("GetAllBaseTypesTest.cs") || file.FileName.EndsWith("Tokens.cs") || file.FileName.EndsWith("OpCode.cs") || file.FileName.EndsWith("MainWindow.cs")"  is complex.
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,Program,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Program.cs,Main,The following statement contains a magic number: Console.WriteLine("Loaded {0} lines of code ({1:f1} MB) in {2} files in {3} projects."'  			                  solution.AllFiles.Sum(f => 1 + f.OriginalText.Count(c => c == '\n'))'  			                  solution.AllFiles.Sum(f => f.OriginalText.Length) / 1024.0 / 1024.0'  			                  solution.AllFiles.Count()'  			                  solution.Projects.Count);
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,Program,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Program.cs,Main,The following statement contains a magic number: Console.WriteLine("Loaded {0} lines of code ({1:f1} MB) in {2} files in {3} projects."'  			                  solution.AllFiles.Sum(f => 1 + f.OriginalText.Count(c => c == '\n'))'  			                  solution.AllFiles.Sum(f => f.OriginalText.Length) / 1024.0 / 1024.0'  			                  solution.AllFiles.Count()'  			                  solution.Projects.Count);
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The following statement contains a magic number: bool checkResults = rnd.Next(0' 2) == 0;
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The following statement contains a magic number: bool checkStateBefore = rnd.Next(0' 2) == 0;
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The following statement contains a magic number: bool checkStateAfter = rnd.Next(0' 2) == 0;
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The following statement contains a magic number: bool checkConversion = rnd.Next(0' 2) == 0;
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,RandomizedOrderResolverTest,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\RandomizedOrderResolverTest.cs,RunTest,The following statement contains a magic number: bool checkExpectedType = rnd.Next(0' 2) == 0;
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,VisitorBenchmark,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\VisitorBenchmark.cs,RunTest,The following statement contains a magic number: i < 20
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,VisitorBenchmark,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\VisitorBenchmark.cs,RunTest,The following statement contains a magic number: Console.WriteLine(text.PadRight(40) + ": " + w.Elapsed);
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: int modifications = rnd.Next(0' 25);
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: i == 0 || rnd.Next(0' 10) == 0
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: switch (rnd.Next(0' 21) / 10) {  						case 0:  							removalLength = 0;  							insertionLength = rnd.Next(0' Math.Min(50' originalXmlFile.TextLength - originalOffset));  							break;  						case 1:  							removalLength = rnd.Next(0' Math.Min(20' b.Length - offset));  							insertionLength = rnd.Next(0' Math.Min(20' originalXmlFile.TextLength - originalOffset));  							break;  						default:  							removalLength = rnd.Next(0' b.Length - offset);  							insertionLength = rnd.Next(0' originalXmlFile.TextLength - originalOffset);  							break;  					}
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: switch (rnd.Next(0' 21) / 10) {  						case 0:  							removalLength = 0;  							insertionLength = rnd.Next(0' Math.Min(50' originalXmlFile.TextLength - originalOffset));  							break;  						case 1:  							removalLength = rnd.Next(0' Math.Min(20' b.Length - offset));  							insertionLength = rnd.Next(0' Math.Min(20' originalXmlFile.TextLength - originalOffset));  							break;  						default:  							removalLength = rnd.Next(0' b.Length - offset);  							insertionLength = rnd.Next(0' originalXmlFile.TextLength - originalOffset);  							break;  					}
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: switch (rnd.Next(0' 21) / 10) {  						case 0:  							removalLength = 0;  							insertionLength = rnd.Next(0' Math.Min(50' originalXmlFile.TextLength - originalOffset));  							break;  						case 1:  							removalLength = rnd.Next(0' Math.Min(20' b.Length - offset));  							insertionLength = rnd.Next(0' Math.Min(20' originalXmlFile.TextLength - originalOffset));  							break;  						default:  							removalLength = rnd.Next(0' b.Length - offset);  							insertionLength = rnd.Next(0' originalXmlFile.TextLength - originalOffset);  							break;  					}
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: switch (rnd.Next(0' 21) / 10) {  						case 0:  							removalLength = 0;  							insertionLength = rnd.Next(0' Math.Min(50' originalXmlFile.TextLength - originalOffset));  							break;  						case 1:  							removalLength = rnd.Next(0' Math.Min(20' b.Length - offset));  							insertionLength = rnd.Next(0' Math.Min(20' originalXmlFile.TextLength - originalOffset));  							break;  						default:  							removalLength = rnd.Next(0' b.Length - offset);  							insertionLength = rnd.Next(0' originalXmlFile.TextLength - originalOffset);  							break;  					}
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: switch (rnd.Next(0' 21) / 10) {  						case 0:  							removalLength = 0;  							insertionLength = rnd.Next(0' Math.Min(50' originalXmlFile.TextLength - originalOffset));  							break;  						case 1:  							removalLength = rnd.Next(0' Math.Min(20' b.Length - offset));  							insertionLength = rnd.Next(0' Math.Min(20' originalXmlFile.TextLength - originalOffset));  							break;  						default:  							removalLength = rnd.Next(0' b.Length - offset);  							insertionLength = rnd.Next(0' originalXmlFile.TextLength - originalOffset);  							break;  					}
Magic Number,ICSharpCode.NRefactory.ConsistencyCheck,IncrementalXmlParserTests,D:\research\architectureSmells\repos\icsharpcode_NRefactory\ICSharpCode.NRefactory.ConsistencyCheck\Xml\IncrementalXmlParserTests.cs,Run,The following statement contains a magic number: iteration < 100
