Implementation smell,Namespace,Class,File,Method,Description
Long Method,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The method has 102 lines of code.
Complex Method,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,Cyclomatic complexity of the method is 22
Complex Method,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,Cyclomatic complexity of the method is 22
Complex Method,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,Cyclomatic complexity of the method is 28
Long Parameter List,Votations.NSurvey.BusinessRules,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Answer.cs,StoreAnswerFile,The method has 7 parameters.
Long Parameter List,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddDefaultMatrixQuestion,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddDefaultSingleQuestion,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddStaticInformationText,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The method has 6 parameters.
Long Parameter List,Votations.NSurvey.DataAccess,Voters,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Voters.cs,GetVotersCompleteEntries,The method has 5 parameters.
Long Parameter List,Votations.NSurvey.DataAccess,Voters,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Voters.cs,GetVotersTextEntries,The method has 5 parameters.
Long Identifier,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,UpdateNSurveySecuritySettings,The length of the parameter allowMultipleNSurveySubmissions is 31.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionListWithoutChilds,The length of the parameter answerableQuestionListWithoutChilds is 35.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableSingleQuestionListWithoutChilds,The length of the parameter answerableSingleQuestionListWithoutChilds is 41.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryAnswerableSingleQuestionListWithoutChilds,The length of the parameter libraryAnswerableSingleQuestionListWithoutChilds is 48.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryQuestionListWithoutChilds,The length of the parameter libraryQuestionListWithoutChilds is 32.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The length of the parameter questionListWithSelectableAnswers is 33.
Long Identifier,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The length of the parameter questionListWithSelectableAnswers is 33.
Long Identifier,Votations.NSurvey.DataAccess,Surveys,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Surveys.cs,GetSurveyUnAuthentifiedUserAction,The length of the parameter surveyUnAuthentifiedUserAction is 30.
Long Statement,Votations.NSurvey.BusinessRules,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Answer.cs,StoreAnswerFile,The length of the statement  "	return AnswerFactory.Create ().StoreAnswerFile (groupGuid' fileName' fileSize' fileType' fileData' uploadedFileTimeOut' sessionUploadedFileTimeOut); " is 148.
Long Statement,Votations.NSurvey.BusinessRules,SurveyToken,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\SurveyToken.cs,AddSurveyTokensMultiple,The length of the statement  "	SurveyTokenFactory.Create ().AddSurveyTokensMultiple (surveyId' creationDate' Enumerable.Range (1' count).Select (x => Guid.NewGuid ().ToString ())); " is 149.
Long Statement,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,GetQuestionAnswersScore,The length of the statement  "	VoterAnswersData.VotersAnswersRow[] rowArray = (VoterAnswersData.VotersAnswersRow[])votersAnswers.VotersAnswers.Select ("QuestionId=" + questionId); " is 148.
Long Statement,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The length of the statement  "		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) { " is 150.
Long Statement,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The length of the statement  "		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) { " is 150.
Long Statement,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The length of the statement  "			if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) { " is 127.
Long Statement,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The length of the statement  "			if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) { " is 150.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionListInPageRange,The length of the statement  "	QuestionData questions = QuestionFactory.Create ().GetAnswerableQuestionListInPageRange (surveyId' startPageNumber' endPageNumber); " is 131.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionListWithoutChilds,The length of the statement  "	QuestionData answerableQuestionListWithoutChilds = QuestionFactory.Create ().GetAnswerableQuestionListWithoutChilds (surveyId); " is 127.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableSingleQuestionListWithoutChilds,The length of the statement  "	QuestionData answerableSingleQuestionListWithoutChilds = QuestionFactory.Create ().GetAnswerableSingleQuestionListWithoutChilds (surveyId); " is 139.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryAnswerableSingleQuestionListWithoutChilds,The length of the statement  "	QuestionData libraryAnswerableSingleQuestionListWithoutChilds = QuestionFactory.Create ().GetLibraryAnswerableSingleQuestionListWithoutChilds (libraryId); " is 154.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryQuestionListWithoutChilds,The length of the statement  "	QuestionData libraryQuestionListWithoutChilds = QuestionFactory.Create ().GetLibraryQuestionListWithoutChilds (libraryId); " is 122.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The length of the statement  "	QuestionData questionListWithSelectableAnswers = QuestionFactory.Create ().GetQuestionListWithSelectableAnswers (surveyId); " is 123.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The length of the statement  "	QuestionData questionListWithSelectableAnswers = QuestionFactory.Create ().GetQuestionListWithSelectableAnswers (surveyId' pageNumber); " is 135.
Long Statement,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The length of the statement  "	QuestionResultsData data = QuestionFactory.Create ().GetQuestionResults (questionId' filterId' sortOrder' languageCode' startDate' endDate); " is 140.
Complex Conditional,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The conditional expression  "(evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The conditional expression  "(((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The conditional expression  "(evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The conditional expression  "(((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The conditional expression  "(evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The conditional expression  "(evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))"  is complex.
Complex Conditional,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The conditional expression  "(((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))"  is complex.
Empty Catch Block,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The method has an empty catch block.
Empty Catch Block,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The method has an empty catch block.
Empty Catch Block,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The method has an empty catch block.
Magic Number,Votations.NSurvey.BusinessRules,Answer,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Answer.cs,ExportAnswerFilesToDirectory,The following statement contains a magic number: foreach (FileData.FilesRow row in new Answers ().GetValidatedFileAnswers (surveyId' 1' 10' out num).Files) {  	string str = path;  	if (exportMode == FileExportMode.VoterFileGroup) {  		if (!Directory.Exists (path + row.VoterId)) {  			Directory.CreateDirectory (path + row.VoterId);  		}  		str = path + row.VoterId + '/';  	}  	else if (exportMode == FileExportMode.GuidFileGroup) {  		if (!Directory.Exists (path + row.GroupGuid)) {  			Directory.CreateDirectory (path + row.GroupGuid);  		}  		str = path + row.GroupGuid + '/';  	}  	byte[] answerFileData = new Answers ().GetAnswerFileData (row.FileId' row.GroupGuid);  	this.SaveFileToDisk (str' row.FileName' answerFileData' savedFiles);  	num2 += answerFileData.Length;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddDefaultMatrixQuestion,The following statement contains a magic number: row.SelectionModeId = 4;  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddDefaultMatrixQuestion,The following statement contains a magic number: row.SelectionModeId = 4;  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddStaticInformationText,The following statement contains a magic number: row.SelectionModeId = 5;  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,AddStaticInformationText,The following statement contains a magic number: row.SelectionModeId = 5;  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: foreach (SkipLogicRuleData.SkipLogicRulesRow row in questionSkipLogicRules.SkipLogicRules.Rows) {  	int num = evaluateScores ? this.GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  		return true;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  		return true;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = new Survey ().EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_02FD;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_02FD;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_02FD;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_02FD:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return true;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 3)) && (num == row.Score)) {  	return true;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 4)) && (num < row.Score)) {  	return true;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 5)) && (num > row.Score)) {  	return true;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num >= row.Score) && (num <= row.ScoreMax))) {  	return true;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = new Survey ().EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_02FD;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_02FD;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_02FD;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = new Survey ().EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_02FD;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_02FD;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_02FD;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = new Survey ().EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_02FD;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_02FD;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_02FD;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = new Survey ().EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_02FD;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_02FD;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_02FD;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_02FD;  	case 3:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_02FD;  	case 4:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_02FD;  	}  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_02FD;  	case 3:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_02FD;  	case 4:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_02FD;  	}  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_02FD;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_02FD;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_02FD;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_02FD;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_02FD;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_02FD;  }  
Magic Number,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following statement contains a magic number: if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  	return true;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: foreach (BranchingRuleData.BranchingRulesRow row in surveyPageBranchingRules.BranchingRules.Rows) {  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' voterAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		return row.TargetPageNumber;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		return row.TargetPageNumber;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_0319;  			case 3:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_0319;  			case 4:  				rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_0319;  			}  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_0319:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		return row.TargetPageNumber;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  	return row.TargetPageNumber;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  	return row.TargetPageNumber;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  	return row.TargetPageNumber;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  	return row.TargetPageNumber;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_0319;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_0319;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_0319;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_0319;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_0319;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_0319;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_0319;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_0319;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_0319;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_0319;  		case 3:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_0319;  		case 4:  			rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_0319;  		}  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = voterAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_0319;  	case 3:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_0319;  	case 4:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_0319;  	}  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_0319;  	case 3:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_0319;  	case 4:  		rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_0319;  	}  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_0319;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_0319;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_0319;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_0319;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_0319;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_0319;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following statement contains a magic number: if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  	return row.TargetPageNumber;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((surveyMessageConditions.MessageConditions.Rows.Count > 0) && (surveyAnswers.Voters.Count > 0)) {  	DataRow[] rowArray = null;  	string thankYouMessage = null;  	int scoreTotal = evaluateScores ? this.GetScoreTotal (surveyAnswers) : 0;  	foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  		if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (row.MessageConditionalOperator != 1) {  			continue;  		}  		int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  		if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  			thankYouMessage = row.ThankYouMessage;  		}  		if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  			thankYouMessage = row.ThankYouMessage;  		}  		if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  			string expression = this.EscapeFilterString (row.TextFilter);  			if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  				expression = "#" + expression + "#";  			}  			else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  				expression = "'" + expression + "'";  			}  			try {  				switch (row.ExpressionOperator) {  				case 1:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText = "'  						expression  					}));  					goto Label_03F9;  				case 3:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText > "'  						expression  					}));  					goto Label_03F9;  				case 4:  					rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  						"AnswerId = "'  						row.AnswerId'  						" AND AnswerText < "'  						expression  					}));  					goto Label_03F9;  				}  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText like '%"'  					expression'  					"%'"  				}));  			}  			catch (EvaluateException) {  			}  		}  		else if (!row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  		}  		else if (row.IsAnswerIdNull ()) {  			rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  		}  		else {  			rowArray = null;  		}  		Label_03F9:  		if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  			thankYouMessage = row.ThankYouMessage;  			break;  		}  	}  	if (thankYouMessage != null) {  		return ParseThankYouMessage (thankYouMessage' scoreTotal);  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: foreach (MessageConditionData.MessageConditionsRow row in surveyMessageConditions.MessageConditions.Rows) {  	if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (row.MessageConditionalOperator != 1) {  		continue;  	}  	int num2 = evaluateScores ? new Question ().GetQuestionAnswersScore (row.QuestionId' surveyAnswers) : 0;  	if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  		thankYouMessage = row.ThankYouMessage;  	}  	if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  		thankYouMessage = row.ThankYouMessage;  	}  	if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  		string expression = this.EscapeFilterString (row.TextFilter);  		if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  			expression = "#" + expression + "#";  		}  		else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  			expression = "'" + expression + "'";  		}  		try {  			switch (row.ExpressionOperator) {  			case 1:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText = "'  					expression  				}));  				goto Label_03F9;  			case 3:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText > "'  					expression  				}));  				goto Label_03F9;  			case 4:  				rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  					"AnswerId = "'  					row.AnswerId'  					" AND AnswerText < "'  					expression  				}));  				goto Label_03F9;  			}  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText like '%"'  				expression'  				"%'"  			}));  		}  		catch (EvaluateException) {  		}  	}  	else if (!row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  	}  	else if (row.IsAnswerIdNull ()) {  		rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  	}  	else {  		rowArray = null;  	}  	Label_03F9:  	if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  		thankYouMessage = row.ThankYouMessage;  		break;  	}  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.MessageConditionalOperator == 3)) && (scoreTotal < row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.MessageConditionalOperator == 2)) && (scoreTotal == row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.MessageConditionalOperator == 4)) && (scoreTotal > row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.MessageConditionalOperator == 5)) && ((scoreTotal >= row.Score) && (scoreTotal <= row.ScoreMax))) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 3)) && (num2 == row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 4)) && (num2 < row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 5)) && (num2 > row.Score)) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((evaluateScores && (row.ConditionalOperator == 6)) && ((num2 >= row.Score) && (num2 <= row.ScoreMax))) {  	thankYouMessage = row.ThankYouMessage;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_03F9;  		case 3:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_03F9;  		case 4:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_03F9;  		}  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_03F9;  		case 3:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_03F9;  		case 4:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_03F9;  		}  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_03F9;  		case 3:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_03F9;  		case 4:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_03F9;  		}  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if (!row.IsAnswerIdNull () && !row.IsTextFilterNull ()) {  	string expression = this.EscapeFilterString (row.TextFilter);  	if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  		expression = "#" + expression + "#";  	}  	else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  		expression = "'" + expression + "'";  	}  	try {  		switch (row.ExpressionOperator) {  		case 1:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText = "'  				expression  			}));  			goto Label_03F9;  		case 3:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText > "'  				expression  			}));  			goto Label_03F9;  		case 4:  			rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  				"AnswerId = "'  				row.AnswerId'  				" AND AnswerText < "'  				expression  			}));  			goto Label_03F9;  		}  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText like '%"'  			expression'  			"%'"  		}));  	}  	catch (EvaluateException) {  	}  }  else if (!row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("AnswerId=" + row.AnswerId);  }  else if (row.IsAnswerIdNull ()) {  	rowArray = surveyAnswers.VotersAnswers.Select ("QuestionId=" + row.QuestionId);  }  else {  	rowArray = null;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((!row.IsExpressionOperatorNull () && (row.ExpressionOperator != 2)) && Information.IsDate (expression)) {  	expression = "#" + expression + "#";  }  else if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((row.ExpressionOperator != 2) && !Information.IsNumeric (expression)) {  	expression = "'" + expression + "'";  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_03F9;  	case 3:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_03F9;  	case 4:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_03F9;  	}  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: try {  	switch (row.ExpressionOperator) {  	case 1:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText = "'  			expression  		}));  		goto Label_03F9;  	case 3:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText > "'  			expression  		}));  		goto Label_03F9;  	case 4:  		rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  			"AnswerId = "'  			row.AnswerId'  			" AND AnswerText < "'  			expression  		}));  		goto Label_03F9;  	}  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText like '%"'  		expression'  		"%'"  	}));  }  catch (EvaluateException) {  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_03F9;  case 3:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_03F9;  case 4:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_03F9;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: switch (row.ExpressionOperator) {  case 1:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_03F9;  case 3:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_03F9;  case 4:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_03F9;  }  
Magic Number,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following statement contains a magic number: if ((((rowArray != null) && (row.ConditionalOperator == 1)) && (rowArray.Length > 0)) || ((row.ConditionalOperator == 2) && (rowArray.Length == 0))) {  	thankYouMessage = row.ThankYouMessage;  	break;  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionList,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (answerableQuestionList' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionList,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (answerableQuestionList' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionListInPageRange,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (questions' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableQuestionListWithoutChilds,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (answerableQuestionListWithoutChilds' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetAnswerableSingleQuestionListWithoutChilds,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (answerableSingleQuestionListWithoutChilds' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryAnswerableSingleQuestionListWithoutChilds,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (libraryAnswerableSingleQuestionListWithoutChilds' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryQuestionList,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (libraryQuestionList' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetLibraryQuestionListWithoutChilds,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (libraryQuestionListWithoutChilds' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (questionListWithSelectableAnswers' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionListWithSelectableAnswers,The following statement contains a magic number: this.ParseHTMLTagsFromQuestionText (questionListWithSelectableAnswers' 80);  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: foreach (QuestionResultsData.QuestionsRow row in data.Questions) {  	if (row.QuestionText != null) {  		row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  		if (row.QuestionText.Length > 40) {  			row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  		}  	}  	if (row.ParentQuestionText != null) {  		row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  		if (row.ParentQuestionText.Length > 40) {  			row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  		}  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: foreach (QuestionResultsData.QuestionsRow row in data.Questions) {  	if (row.QuestionText != null) {  		row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  		if (row.QuestionText.Length > 40) {  			row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  		}  	}  	if (row.ParentQuestionText != null) {  		row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  		if (row.ParentQuestionText.Length > 40) {  			row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  		}  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: foreach (QuestionResultsData.QuestionsRow row in data.Questions) {  	if (row.QuestionText != null) {  		row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  		if (row.QuestionText.Length > 40) {  			row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  		}  	}  	if (row.ParentQuestionText != null) {  		row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  		if (row.ParentQuestionText.Length > 40) {  			row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  		}  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: foreach (QuestionResultsData.QuestionsRow row in data.Questions) {  	if (row.QuestionText != null) {  		row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  		if (row.QuestionText.Length > 40) {  			row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  		}  	}  	if (row.ParentQuestionText != null) {  		row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  		if (row.ParentQuestionText.Length > 40) {  			row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  		}  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.QuestionText != null) {  	row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  	if (row.QuestionText.Length > 40) {  		row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.QuestionText != null) {  	row.QuestionText = Regex.Replace (row.QuestionText' "<[^>]*>"' " ");  	if (row.QuestionText.Length > 40) {  		row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.QuestionText.Length > 40) {  	row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.QuestionText.Length > 40) {  	row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: row.QuestionText = row.QuestionText.Substring (0' 40) + "...";  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.ParentQuestionText != null) {  	row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  	if (row.ParentQuestionText.Length > 40) {  		row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.ParentQuestionText != null) {  	row.ParentQuestionText = Regex.Replace (row.ParentQuestionText' "<[^>]*>"' " ");  	if (row.ParentQuestionText.Length > 40) {  		row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  	}  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.ParentQuestionText.Length > 40) {  	row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: if (row.ParentQuestionText.Length > 40) {  	row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  }  
Magic Number,Votations.NSurvey.DataAccess,Questions,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.DataAccess\Questions.cs,GetQuestionResults,The following statement contains a magic number: row.ParentQuestionText = row.ParentQuestionText.Substring (0' 40) + "...";  
Missing Default,Votations.NSurvey.BusinessRules,Question,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Question.cs,SkipQuestion,The following switch statement is missing a default case: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_02FD;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_02FD;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_02FD;  }  
Missing Default,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetNextPage,The following switch statement is missing a default case: switch (row.ExpressionOperator) {  case 1:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_0319;  case 3:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_0319;  case 4:  	rowArray = voterAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_0319;  }  
Missing Default,Votations.NSurvey.BusinessRules,Survey,C:\repos\berniegao_projects\Source_Survey_2.2_Final\Reflector\Nsurvey_BLL\Votations.NSurvey.BusinessRules\Survey.cs,GetThanksMessage,The following switch statement is missing a default case: switch (row.ExpressionOperator) {  case 1:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText = "'  		expression  	}));  	goto Label_03F9;  case 3:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText > "'  		expression  	}));  	goto Label_03F9;  case 4:  	rowArray = surveyAnswers.VotersAnswers.Select (string.Concat (new object[] {  		"AnswerId = "'  		row.AnswerId'  		" AND AnswerText < "'  		expression  	}));  	goto Label_03F9;  }  
